The Python Language Reference
Release 3.13.0
Guido van Rossum and the Python development team
November 15, 2024
Python Software Foundation
Email: docs@python.org

CONTENTS
1 Introduction 3
1.1 AlternateImplementations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2 Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2 Lexical analysis 5
2.1 Linestructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.1.1 Logicallines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.1.2 Physicallines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.1.3 Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.1.4 Encodingdeclarations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.1.5 Explicitlinejoining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.1.6 Implicitlinejoining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.1.7 Blanklines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.1.8 Indentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.1.9 Whitespacebetweentokens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.2 Othertokens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.3 Identifiersandkeywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.3.1 Keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.3.2 SoftKeywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.3.3 Reservedclassesofidentifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.4 Literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.4.1 StringandBytesliterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.4.2 Stringliteralconcatenation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.4.3 f-strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.4.4 Numericliterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.4.5 Integerliterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.4.6 Floating-pointliterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.4.7 Imaginaryliterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.5 Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.6 Delimiters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
3 Data model 17
3.1 Objects,valuesandtypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
3.2 Thestandardtypehierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2.1 None . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2.2 NotImplemented . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2.3 Ellipsis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2.4 numbers.Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
3.2.5 Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
3.2.6 Settypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3.2.7 Mappings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
3.2.8 Callabletypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
3.2.9 Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.2.10 Customclasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
i
3.2.11 Classinstances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.2.12 I/Oobjects(alsoknownasfileobjects) . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.2.13 Internaltypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.3 Specialmethodnames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
3.3.1 Basiccustomization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
3.3.2 Customizingattributeaccess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
3.3.3 Customizingclasscreation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
3.3.4 Customizinginstanceandsubclasschecks . . . . . . . . . . . . . . . . . . . . . . . . . 46
3.3.5 Emulatinggenerictypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
3.3.6 Emulatingcallableobjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
3.3.7 Emulatingcontainertypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
3.3.8 Emulatingnumerictypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.3.9 WithStatementContextManagers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
3.3.10 Customizingpositionalargumentsinclasspatternmatching . . . . . . . . . . . . . . . . 53
3.3.11 Emulatingbuffertypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
3.3.12 Specialmethodlookup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
3.4 Coroutines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
3.4.1 AwaitableObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
3.4.2 CoroutineObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
3.4.3 AsynchronousIterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
3.4.4 AsynchronousContextManagers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
4 Execution model 59
4.1 Structureofaprogram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
4.2 Namingandbinding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
4.2.1 Bindingofnames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
4.2.2 Resolutionofnames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
4.2.3 Annotationscopes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
4.2.4 Lazyevaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
4.2.5 Builtinsandrestrictedexecution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
4.2.6 Interactionwithdynamicfeatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
4.3 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
5 The import system 65
5.1 importlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
5.2 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
5.2.1 Regularpackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
5.2.2 Namespacepackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
5.3 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
5.3.1 Themodulecache . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
5.3.2 Findersandloaders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
5.3.3 Importhooks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
5.3.4 Themetapath . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
5.4 Loading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68
5.4.1 Loaders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
5.4.2 Submodules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
5.4.3 Modulespecs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
5.4.4 __path__attributesonmodules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
5.4.5 Modulereprs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
5.4.6 Cachedbytecodeinvalidation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
5.5 ThePathBasedFinder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
5.5.1 Pathentryfinders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
5.5.2 Pathentryfinderprotocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.6 Replacingthestandardimportsystem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.7 PackageRelativeImports . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
5.8 Specialconsiderationsfor__main__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
5.8.1 __main__.__spec__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
5.9 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
ii
6 Expressions 77
6.1 Arithmeticconversions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
6.2 Atoms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
6.2.1 Identifiers(Names) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
6.2.2 Literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
6.2.3 Parenthesizedforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
6.2.4 Displaysforlists,setsanddictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
6.2.5 Listdisplays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
6.2.6 Setdisplays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
6.2.7 Dictionarydisplays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
6.2.8 Generatorexpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
6.2.9 Yieldexpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
6.3 Primaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.3.1 Attributereferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.3.2 Subscriptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.3.3 Slicings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
6.3.4 Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
6.4 Awaitexpression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
6.5 Thepoweroperator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
6.6 Unaryarithmeticandbitwiseoperations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
6.7 Binaryarithmeticoperations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
6.8 Shiftingoperations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
6.9 Binarybitwiseoperations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
6.10 Comparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
6.10.1 Valuecomparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
6.10.2 Membershiptestoperations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
6.10.3 Identitycomparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
6.11 Booleanoperations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
6.12 Assignmentexpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
6.13 Conditionalexpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
6.14 Lambdas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
6.15 Expressionlists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
6.16 Evaluationorder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
6.17 Operatorprecedence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
7 Simple statements 97
7.1 Expressionstatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
7.2 Assignmentstatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
7.2.1 Augmentedassignmentstatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
7.2.2 Annotatedassignmentstatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
7.3 The assertstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
7.4 The passstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
7.5 The delstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
7.6 The returnstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
7.7 The yieldstatement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
7.8 The raisestatement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
7.9 The breakstatement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
7.10 The continue statement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
7.11 The importstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
7.11.1 Futurestatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
7.12 The globalstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
7.13 The nonlocal statement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
7.14 The typestatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
8 Compound statements 109
8.1 The ifstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
8.2 The whilestatement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
8.3 The forstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
iii
8.4 The trystatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
8.4.1 exceptclause. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
8.4.2 except*clause. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
8.4.3 elseclause. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
8.4.4 finallyclause. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
8.5 The withstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
8.6 The matchstatement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
8.6.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
8.6.2 Guards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
8.6.3 IrrefutableCaseBlocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
8.6.4 Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
8.7 Functiondefinitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
8.8 Classdefinitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
8.9 Coroutines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
8.9.1 Coroutinefunctiondefinition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
8.9.2 The async for statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
8.9.3 The async with statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
8.10 Typeparameterlists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
8.10.1 Genericfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
8.10.2 Genericclasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
8.10.3 Generictypealiases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131
9 Top-level components 133
9.1 CompletePythonprograms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
9.2 Fileinput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
9.3 Interactiveinput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
9.4 Expressioninput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
10 Full Grammar specification 135
A Glossary 153
B About these documents 171
B.1 ContributorstothePythonDocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
C History and License 173
C.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
C.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 174
C.2.1 PSFLICENSEAGREEMENTFORPYTHON3.13.0 . . . . . . . . . . . . . . . . . . . 174
C.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 175
C.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 175
C.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 176
C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCUMEN-
TATION. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
C.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 177
C.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
C.3.4 Cookiemanagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
C.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
C.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
C.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
C.3.11 strtodanddtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
iv
C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
C.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
C.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
D Copyright 193
Index 195
v
vi
The Python Language Reference, Release 3.13.0
This reference manual describes the syntax and “core semantics” of the language. It is terse, but attempts to be
exactand complete. The semantics ofnon-essential built-in objecttypes and of thebuilt-in functions andmodules
are described in library-index. For an informal introduction to the language, see tutorial-index. For C or C++
programmers,twoadditionalmanualsexist: extending-indexdescribesthehigh-levelpictureofhowtowriteaPython
extensionmodule,andthec-api-indexdescribestheinterfacesavailabletoC/C++programmersindetail.
CONTENTS 1
The Python Language Reference, Release 3.13.0
2 CONTENTS
CHAPTER
ONE
INTRODUCTION
ThisreferencemanualdescribesthePythonprogramminglanguage. Itisnotintendedasatutorial.
WhileIamtryingtobeaspreciseaspossible,IchosetouseEnglishratherthanformalspecificationsforeverything
exceptsyntaxandlexicalanalysis. Thisshouldmakethedocumentmoreunderstandabletotheaveragereader, but
will leave room for ambiguities. Consequently, if you were coming from Mars and tried to re-implement Python
fromthisdocumentalone,youmighthavetoguessthingsandinfactyouwouldprobablyendupimplementingquite
adifferentlanguage. Ontheotherhand,ifyouareusingPythonandwonderwhatthepreciserulesaboutaparticular
area of the language are, you should definitely be able to find them here. If you would like to see a more formal
definitionofthelanguage,maybeyoucouldvolunteeryourtime—orinventacloningmachine:-).
Itisdangeroustoaddtoomanyimplementationdetailstoalanguagereferencedocument—theimplementationmay
change, andotherimplementations ofthesame languagemayworkdifferently. On theotherhand, CPythonisthe
one Python implementation in widespread use (although alternate implementations continue to gain support), and
itsparticularquirksaresometimesworthbeingmentioned,especiallywheretheimplementationimposesadditional
limitations. Therefore,you’llfindshort“implementationnotes”sprinkledthroughoutthetext.
Every Python implementation comes with a number of built-in and standard modules. These are documented in
library-index. Afewbuilt-inmodulesarementionedwhentheyinteractinasignificantwaywiththelanguagedefi-
nition.
1.1Alternate Implementations
ThoughthereisonePythonimplementationwhichisbyfarthemostpopular,therearesomealternateimplementa-
tionswhichareofparticularinteresttodifferentaudiences.
Knownimplementationsinclude:
CPython
Thisistheoriginalandmost-maintainedimplementationofPython,writteninC.Newlanguagefeaturesgen-
erallyappearherefirst.
Jython
PythonimplementedinJava. ThisimplementationcanbeusedasascriptinglanguageforJavaapplications,
orcanbeusedtocreateapplicationsusingtheJavaclasslibraries. ItisalsooftenusedtocreatetestsforJava
libraries. Moreinformationcanbefoundat theJythonwebsite .
Python for .NET
ThisimplementationactuallyusestheCPythonimplementation,butisamanaged.NETapplicationandmakes
.NETlibrariesavailable. ItwascreatedbyBrianLloyd. Formoreinformation,seethe Pythonfor.NEThome
page.
IronPython
AnalternatePythonfor.NET.UnlikePython.NET,thisisacompletePythonimplementationthatgenerates
IL,andcompilesPythoncodedirectlyto.NETassemblies. ItwascreatedbyJimHugunin,theoriginalcreator
ofJython. Formoreinformation,see theIronPythonwebsite .
PyPy
AnimplementationofPythonwrittencompletelyinPython. Itsupportsseveraladvancedfeaturesnotfound
inotherimplementationslikestacklesssupportandaJustinTimecompiler. Oneofthegoalsoftheprojectis
3
The Python Language Reference, Release 3.13.0
toencourageexperimentationwiththelanguageitselfbymakingiteasiertomodifytheinterpreter(sinceitis
writteninPython). Additionalinformationisavailableon thePyPyproject’shomepage .
Eachoftheseimplementationsvariesinsomewayfromthelanguageasdocumentedinthismanual,orintroducesspe-
cificinformationbeyondwhat’scoveredinthestandardPythondocumentation. Pleaserefertotheimplementation-
specificdocumentationtodeterminewhatelseyouneedtoknowaboutthespecificimplementationyou’reusing.
1.2Notation
The descriptions of lexical analysis and syntax use a modified Backus–Naur form (BNF) grammar notation. This
usesthefollowingstyleofdefinition:
name ::= lc_letter (lc_letter | "_")*
lc_letter ::= "a"..."z"
Thefirstlinesaysthata nameisanlc_letter followedbyasequenceofzeroormore lc_letter sandunderscores.
Anlc_letter inturnisanyofthesinglecharacters 'a'through 'z'. (Thisruleisactuallyadheredtoforthenames
definedinlexicalandgrammarrulesinthisdocument.)
Eachrulebeginswithaname(whichisthenamedefinedbytherule)and ::=. Averticalbar( |)isusedtoseparate
alternatives;itistheleastbindingoperatorinthisnotation. Astar( *)meanszeroormorerepetitionsofthepreceding
item;likewise,aplus( +)meansoneormorerepetitions,andaphraseenclosedinsquarebrackets( [ ])meanszero
oroneoccurrences(inotherwords,theenclosedphraseisoptional). The *and+operatorsbindastightlyaspossible;
parenthesesareusedforgrouping. Literalstringsareenclosedinquotes. Whitespaceisonlymeaningfultoseparate
tokens. Rules are normally contained on a single line; rules with many alternatives may be formatted alternatively
witheachlineafterthefirstbeginningwithaverticalbar.
In lexical definitions (as the example above), two more conventions are used: Two literal characters separated by
threedotsmeanachoiceofanysinglecharacterinthegiven(inclusive)rangeofASCIIcharacters. Aphrasebetween
angular brackets ( <...>) gives an informal description of the symbol defined; e.g., this could be used to describe
thenotionof‘controlcharacter’ifneeded.
Even though the notation used is almost the same, there is a big difference between the meaning of lexical and
syntactic definitions: a lexical definition operates on the individual characters of the input source, while a syntax
definition operates on the stream of tokens generated by the lexical analysis. All uses of BNF in the next chapter
(“LexicalAnalysis”)arelexicaldefinitions;usesinsubsequentchaptersaresyntacticdefinitions.
4 Chapter 1. Introduction
CHAPTER
TWO
LEXICAL ANALYSIS
A Python program is read by a parser. Input to the parser is a stream of tokens, generated by the lexical analyzer .
Thischapterdescribeshowthelexicalanalyzerbreaksafileintotokens.
PythonreadsprogramtextasUnicodecodepoints; theencodingofasourcefilecanbegivenbyanencodingdec-
larationanddefaultstoUTF-8,see PEP 3120 fordetails. Ifthesourcefilecannotbedecoded,a SyntaxError is
raised.
2.1Line structure
APythonprogramisdividedintoanumberof logical lines .
2.1.1Logical lines
The end of a logical line is represented by the token NEWLINE. Statements cannot cross logical line boundaries
exceptwhereNEWLINEisallowedbythesyntax(e.g.,betweenstatementsincompoundstatements). Alogicalline
isconstructedfromoneormore physical lines byfollowingtheexplicitorimplicit line joining rules.
2.1.2Physical lines
A physical line is a sequence of characters terminated by an end-of-line sequence. In source files and strings, any
of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the
WindowsformusingtheASCIIsequenceCRLF(returnfollowedbylinefeed),ortheoldMacintoshformusingthe
ASCIICR(return)character. Alloftheseformscanbeusedequally,regardlessofplatform. Theendofinputalso
servesasanimplicitterminatorforthefinalphysicalline.
WhenembeddingPython,sourcecodestringsshouldbepassedtoPythonAPIsusingthestandardCconventionsfor
newlinecharacters(the \ncharacter,representingASCIILF,isthelineterminator).
2.1.3Comments
A comment starts with a hash character ( #) that is not part of a string literal, and ends at the end of the physical
line. Acommentsignifiestheendofthelogicallineunlesstheimplicitlinejoiningrulesareinvoked. Commentsare
ignoredbythesyntax.
2.1.4Encoding declarations
IfacommentinthefirstorsecondlineofthePythonscriptmatchestheregularexpression coding[=:]\s*([-\
w.]+),thiscommentisprocessedasanencodingdeclaration;thefirstgroupofthisexpressionnamestheencoding
ofthesourcecodefile. Theencodingdeclarationmustappearonalineofitsown. Ifitisthesecondline,thefirst
linemustalsobeacomment-onlyline. Therecommendedformsofanencodingexpressionare
# -*- coding: <encoding-name> -*-
whichisrecognizedalsobyGNUEmacs,and
5
The Python Language Reference, Release 3.13.0
# vim:fileencoding=<encoding-name>
whichisrecognizedbyBramMoolenaar’sVIM.
If no encoding declaration is found, the default encoding is UTF-8. If the implicit or explicit encoding of a file is
UTF-8,aninitialUTF-8byte-ordermark(b’xefxbbxbf’)isignoredratherthanbeingasyntaxerror.
Ifanencodingisdeclared,theencodingnamemustberecognizedbyPython(seestandard-encodings). Theencoding
isusedforalllexicalanalysis,includingstringliterals,commentsandidentifiers.
2.1.5Explicit line joining
Twoormorephysicallinesmaybejoinedintologicallinesusingbackslashcharacters( \),asfollows: whenaphysical
lineendsinabackslashthatisnotpartofastringliteralorcomment,itisjoinedwiththefollowingformingasingle
logicalline,deletingthebackslashandthefollowingend-of-linecharacter. Forexample:
if1900 <year <2100 and 1<=month <=12\
and 1<=day <=31and 0<=hour <24\
and 0<=minute <60and 0<=second <60: # Looks like a valid date
return 1
Alineendinginabackslashcannotcarryacomment. Abackslashdoesnotcontinueacomment. Abackslashdoes
notcontinueatokenexceptforstringliterals(i.e.,tokensotherthanstringliteralscannotbesplitacrossphysicallines
usingabackslash). Abackslashisillegalelsewhereonalineoutsideastringliteral.
2.1.6Implicit line joining
Expressions in parentheses, square brackets or curly braces can be split over more than one physical line without
usingbackslashes. Forexample:
month_names =['Januari ','Februari ','Maart ', # These are the
'April ', 'Mei', 'Juni ', # Dutch names
'Juli ', 'Augustus ','September ',# for the months
'Oktober ','November ','December '] # of the year
Implicitlycontinuedlinescancarrycomments. Theindentationofthecontinuationlinesisnotimportant. Blankcon-
tinuationlinesareallowed. ThereisnoNEWLINEtokenbetweenimplicitcontinuationlines. Implicitlycontinued
linescanalsooccurwithintriple-quotedstrings(seebelow);inthatcasetheycannotcarrycomments.
2.1.7Blank lines
A logical line that contains only spaces, tabs, formfeeds and possibly a comment, is ignored (i.e., no NEWLINE
token is generated). During interactive input of statements, handling of a blank line may differ depending on the
implementationoftheread-eval-printloop. Inthestandardinteractiveinterpreter,anentirelyblanklogicalline(i.e.
onecontainingnotevenwhitespaceoracomment)terminatesamulti-linestatement.
2.1.8Indentation
Leading whitespace (spaces and tabs) at the beginning of a logical line is used to compute the indentation level of
theline,whichinturnisusedtodeterminethegroupingofstatements.
Tabsarereplaced(fromlefttoright)byonetoeightspacessuchthatthetotalnumberofcharactersuptoandincluding
the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of
spacesprecedingthefirstnon-blankcharacterthendeterminestheline’sindentation. Indentationcannotbesplitover
multiplephysicallinesusingbackslashes;thewhitespaceuptothefirstbackslashdeterminestheindentation.
Indentationisrejectedasinconsistentifasourcefilemixestabsandspacesinawaythatmakesthemeaningdependent
ontheworthofatabinspaces;a TabError israisedinthatcase.
6 Chapter 2. Lexical analysis
The Python Language Reference, Release 3.13.0
Cross-platform compatibility note: becauseofthenatureoftexteditorsonnon-UNIXplatforms, itisunwiseto
use a mixture of spaces and tabs for the indentation in a single source file. It should also be noted that different
platformsmayexplicitlylimitthemaximumindentationlevel.
Aformfeedcharactermaybepresentatthestartoftheline;itwillbeignoredfortheindentationcalculationsabove.
Formfeedcharactersoccurringelsewhereintheleadingwhitespacehaveanundefinedeffect(forinstance,theymay
resetthespacecounttozero).
The indentation levels of consecutive lines are used to generate INDENT and DEDENT tokens, using a stack, as
follows.
Beforethefirstlineofthefileisread,asinglezeroispushedonthestack;thiswillneverbepoppedoffagain. The
numberspushedonthestackwillalwaysbestrictlyincreasingfrombottomtotop. Atthebeginningofeachlogical
line,theline’sindentationleveliscomparedtothetopofthestack. Ifitisequal,nothinghappens. Ifitislarger,itis
pushedonthestack,andoneINDENTtokenisgenerated. Ifitissmaller,it mustbeoneofthenumbersoccurring
on the stack; all numbers on the stack that are larger are popped off, and for each number popped off a DEDENT
tokenisgenerated. Attheendofthefile,aDEDENTtokenisgeneratedforeachnumberremainingonthestackthat
islargerthanzero.
Hereisanexampleofacorrectly(thoughconfusingly)indentedpieceofPythoncode:
def perm (l):
# Compute the list of all permutations of l
iflen(l) <=1:
return [l]
r=[]
for iinrange (len(l)):
s=l[:i] +l[i+1:]
p=perm(s)
for xinp:
r.append(l[i:i +1]+x)
return r
Thefollowingexampleshowsvariousindentationerrors:
def perm (l): # error: first line indented
for iinrange (len(l)): # error: not indented
s=l[:i] +l[i+1:]
p=perm(l[:i] +l[i+1:]) # error: unexpected indent
for xinp:
r.append(l[i:i +1]+x)
return r # error: inconsistent dedent
(Actually,thefirstthreeerrorsaredetectedbytheparser; onlythelasterrorisfoundbythelexicalanalyzer—the
indentationof return r doesnotmatchalevelpoppedoffthestack.)
2.1.9Whitespace between tokens
Exceptatthebeginningofalogicallineorinstringliterals,thewhitespacecharactersspace,tabandformfeedcanbe
usedinterchangeablytoseparatetokens. Whitespaceisneededbetweentwotokensonlyiftheirconcatenationcould
otherwisebeinterpretedasadifferenttoken(e.g.,abisonetoken,butabistwotokens).
2.2Other tokens
BesidesNEWLINE,INDENTandDEDENT,thefollowingcategoriesoftokensexist: identifiers,keywords,literals,
operators, anddelimiters. Whitespace characters (other than line terminators, discussed earlier) are not tokens, but
serve to delimit tokens. Where ambiguity exists, a token comprises the longest possible string that forms a legal
token,whenreadfromlefttoright.
2.2. Other tokens 7
The Python Language Reference, Release 3.13.0
2.3Identifiers and keywords
Identifiers(alsoreferredtoas names)aredescribedbythefollowinglexicaldefinitions.
ThesyntaxofidentifiersinPythonisbasedontheUnicodestandardannexUAX-31,withelaborationandchanges
asdefinedbelow;seealso PEP 3131 forfurtherdetails.
WithintheASCIIrange(U+0001..U+007F),thevalidcharactersforidentifiersincludetheuppercaseandlowercase
letters Athrough Z,theunderscore _and,exceptforthefirstcharacter,thedigits 0through 9. Python3.0introduced
additionalcharactersfromoutsidetheASCIIrange(see PEP 3131). Forthesecharacters,theclassificationusesthe
versionoftheUnicodeCharacterDatabaseasincludedinthe unicodedata module.
Identifiersareunlimitedinlength. Caseissignificant.
identifier ::= xid_start xid_continue *
id_start ::= <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>
id_continue ::= <all characters in id_start , plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>
xid_start ::= <all characters in id_start whose NFKC normalization is in "id_start xid_continue*">
xid_continue ::= <all characters in id_continue whose NFKC normalization is in "id_continue*">
TheUnicodecategorycodesmentionedabovestandfor:
•Lu-uppercaseletters
•Ll-lowercaseletters
•Lt-titlecaseletters
•Lm-modifierletters
•Lo-otherletters
•Nl-letternumbers
•Mn-nonspacingmarks
•Mc-spacingcombiningmarks
•Nd-decimalnumbers
•Pc-connectorpunctuations
•Other_ID_Start -explicitlistofcharactersin PropList.txt tosupportbackwardscompatibility
•Other_ID_Continue -likewise
AllidentifiersareconvertedintothenormalformNFKCwhileparsing;comparisonofidentifiersisbasedonNFKC.
A non-normative HTML file listing all valid identifier characters for Unicode 15.1.0 can be found at https://www.
unicode.org/Public/15.1.0/ucd/DerivedCoreProperties.txt
2.3.1Keywords
The following identifiers are used as reserved words, or keywordsof the language, and cannot be used as ordinary
identifiers. Theymustbespelledexactlyaswrittenhere:
False await else import pass
None break except in raise
True class finally is return
and continue for lambda try
as def from nonlocal while
assert del global not with
async elif if or yield
8 Chapter 2. Lexical analysis
The Python Language Reference, Release 3.13.0
2.3.2Soft Keywords
Addedinversion3.10.
Someidentifiersareonlyreservedunderspecificcontexts. Theseareknownas soft keywords . Theidentifiers match,
case,typeand_cansyntacticallyactaskeywordsincertaincontexts,butthisdistinctionisdoneattheparserlevel,
notwhentokenizing.
As soft keywords, their use in the grammar is possible while still preserving compatibility with existing code that
usesthesenamesasidentifiernames.
match,case,and _areusedinthe matchstatement. typeisusedinthe typestatement.
Changedinversion3.12: typeisnowasoftkeyword.
2.3.3Reserved classes of identifiers
Certainclassesofidentifiers(besideskeywords)havespecialmeanings. Theseclassesareidentifiedbythepatterns
ofleadingandtrailingunderscorecharacters:
_*
Notimportedby from module import * .
_
Inacasepatternwithina matchstatement, _isasoft keyword thatdenotesa wildcard.
Separately, theinteractiveinterpretermakestheresultofthelastevaluationavailableinthevariable _. (Itis
storedinthe builtins module,alongsidebuilt-infunctionslike print.)
Elsewhere, _isaregularidentifier. Itisoftenusedtoname“special”items,butitisnotspecialtoPythonitself.
®Note
The name _is often used in conjunction with internationalization; refer to the documentation for the
gettextmoduleformoreinformationonthisconvention.
Itisalsocommonlyusedforunusedvariables.
__*__
System-definednames,informallyknownas“dunder”names. Thesenamesaredefinedbytheinterpreterand
itsimplementation(includingthestandardlibrary). Currentsystemnamesarediscussedinthe Special method
namessection and elsewhere. More will likely be defined in future versions of Python. Anyuse of __*__
names,inanycontext,thatdoesnotfollowexplicitlydocumenteduse,issubjecttobreakagewithoutwarning.
__*
Class-privatenames. Namesinthiscategory,whenusedwithinthecontextofaclassdefinition,arere-written
touseamangledformtohelpavoidnameclashesbetween“private”attributesofbaseandderivedclasses. See
section Identifiers (Names) .
2.4Literals
Literalsarenotationsforconstantvaluesofsomebuilt-intypes.
2.4.1String and Bytes literals
Stringliteralsaredescribedbythefollowinglexicaldefinitions:
stringliteral ::= [stringprefix ](shortstring |longstring )
stringprefix ::= "r" | "u" | "R" | "U" | "f" | "F"
| "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | "Rf" | "RF"
shortstring ::= "'" shortstringitem * "'" | '"' shortstringitem * '"'
2.4. Literals 9
The Python Language Reference, Release 3.13.0
longstring ::= "'''" longstringitem * "'''" | '"""' longstringitem * '"""'
shortstringitem ::= shortstringchar |stringescapeseq
longstringitem ::= longstringchar |stringescapeseq
shortstringchar ::= <any source character except "\" or newline or the quote>
longstringchar ::= <any source character except "\">
stringescapeseq ::= "\" <any source character>
bytesliteral ::= bytesprefix (shortbytes |longbytes )
bytesprefix ::= "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB"
shortbytes ::= "'" shortbytesitem * "'" | '"' shortbytesitem * '"'
longbytes ::= "'''" longbytesitem * "'''" | '"""' longbytesitem * '"""'
shortbytesitem ::= shortbyteschar |bytesescapeseq
longbytesitem ::= longbyteschar |bytesescapeseq
shortbyteschar ::= <any ASCII character except "\" or newline or the quote>
longbyteschar ::= <any ASCII character except "\">
bytesescapeseq ::= "\" <any ASCII character>
One syntactic restriction not indicated by these productions is that whitespace is not allowed between the
stringprefix orbytesprefix and the rest of the literal. The source character set is defined by the encoding
declaration;itisUTF-8ifnoencodingdeclarationisgiveninthesourcefile;seesection Encoding declarations .
InplainEnglish: Bothtypesofliteralscanbeenclosedinmatchingsinglequotes( ')ordoublequotes( "). Theycan
alsobeenclosedinmatchinggroupsofthreesingleordoublequotes(thesearegenerallyreferredtoas triple-quoted
strings). Thebackslash( \)characterisusedtogivespecialmeaningtootherwiseordinarycharacterslike n,which
means‘newline’whenescaped( \n). Itcanalsobeusedtoescapecharactersthatotherwisehaveaspecialmeaning,
suchasnewline,backslashitself,orthequotecharacter. See escape sequences belowforexamples.
Bytesliteralsarealwaysprefixedwith 'b'or'B';theyproduceaninstanceofthe bytestypeinsteadofthe str
type. TheymayonlycontainASCIIcharacters;byteswithanumericvalueof128orgreatermustbeexpressedwith
escapes.
Bothstringandbytesliteralsmayoptionallybeprefixedwithaletter 'r'or'R';suchconstructsarecalled raw string
literalsandraw bytes literals respectivelyandtreatbackslashesasliteralcharacters. Asaresult,inrawstringliterals,
'\U'and'\u'escapesarenottreatedspecially.
Addedinversion3.3: The 'rb'prefixofrawbytesliteralshasbeenaddedasasynonymof 'br'.
Supportfortheunicodelegacyliteral( u'value' )wasreintroducedtosimplifythemaintenanceofdualPython2.x
and3.xcodebases. See PEP 414formoreinformation.
A string literal with 'f'or'F'in its prefix is a formatted string literal ; seef-strings. The 'f'may be combined
with'r',butnotwith 'b'or'u',thereforerawformattedstringsarepossible,butformattedbytesliteralsarenot.
Intriple-quotedliterals,unescapednewlinesandquotesareallowed(andareretained),exceptthatthreeunescaped
quotesinarowterminatetheliteral. (A“quote”isthecharacterusedtoopentheliteral,i.e. either 'or".)
Escape sequences
Unlessan 'r'or'R'prefixispresent,escapesequencesinstringandbytesliteralsareinterpretedaccordingtorules
similartothoseusedbyStandardC.Therecognizedescapesequencesare:
10 Chapter 2. Lexical analysis
The Python Language Reference, Release 3.13.0
EscapeSequence Meaning Notes
\<newline> Backslashandnewlineignored (1)
\\ Backslash( \)
\' Singlequote( ')
\" Doublequote( ")
\a ASCIIBell(BEL)
\b ASCIIBackspace(BS)
\f ASCIIFormfeed(FF)
\n ASCIILinefeed(LF)
\r ASCIICarriageReturn(CR)
\t ASCIIHorizontalTab(TAB)
\v ASCIIVerticalTab(VT)
\ooo Characterwithoctalvalue ooo(2,4)
\xhh Characterwithhexvalue hh(3,4)
Escapesequencesonlyrecognizedinstringliteralsare:
EscapeSequence Meaning Notes
\N{name } Characternamed nameintheUnicodedatabase (5)
\uxxxx Characterwith16-bithexvalue xxxx (6)
\Uxxxxxxxx Characterwith32-bithexvalue xxxxxxxx (7)
Notes:
(1)Abackslashcanbeaddedattheendofalinetoignorethenewline:
>>> 'This string will not include \
... backslashes or newline characters. '
'This string will not include backslashes or newline characters.'
Thesameresultcanbeachievedusing triple-quoted strings ,orparenthesesand string literal concatenation .
(2)AsinStandardC,uptothreeoctaldigitsareaccepted.
Changedinversion3.11: Octalescapeswithvaluelargerthan 0o377producea DeprecationWarning .
Changedinversion3.12: Octalescapeswithvaluelargerthan 0o377producea SyntaxWarning . Inafuture
Pythonversiontheywillbeeventuallya SyntaxError .
(3)UnlikeinStandardC,exactlytwohexdigitsarerequired.
(4)Inabytesliteral,hexadecimalandoctalescapesdenotethebytewiththegivenvalue. Inastringliteral,these
escapesdenoteaUnicodecharacterwiththegivenvalue.
(5)Changedinversion3.3: Supportfornamealiases1hasbeenadded.
(6)Exactlyfourhexdigitsarerequired.
(7)AnyUnicodecharactercanbeencodedthisway. Exactlyeighthexdigitsarerequired.
Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in
the result. (Thisbehaviorisusefulwhendebugging: ifanescapesequenceismistyped,theresultingoutputismore
easilyrecognizedasbroken.) Itisalsoimportanttonotethattheescapesequencesonlyrecognizedinstringliterals
fallintothecategoryofunrecognizedescapesforbytesliterals.
Changedinversion3.6: Unrecognizedescapesequencesproducea DeprecationWarning .
Changedinversion3.12: Unrecognizedescapesequencesproducea SyntaxWarning . InafuturePythonversion
theywillbeeventuallya SyntaxError .
1https://www.unicode.org/Public/15.1.0/ucd/NameAliases.txt
2.4. Literals 11
The Python Language Reference, Release 3.13.0
Eveninarawliteral, quotescanbe escapedwithabackslash, butthebackslashremainsintheresult; forexample,
r"\""isavalidstringliteralconsistingoftwocharacters: abackslashandadoublequote; r"\"isnotavalidstring
literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw literal cannot end in a
single backslash (sincethebackslashwouldescapethefollowingquotecharacter). Notealsothatasinglebackslash
followedbyanewlineisinterpretedasthosetwocharactersaspartoftheliteral, notasalinecontinuation.
2.4.2String literal concatenation
Multiple adjacent string or bytes literals (delimited by whitespace), possibly using different quoting conventions,
are allowed, and their meaning is the same as their concatenation. Thus, "hello" 'world' is equivalent to
"helloworld" . Thisfeaturecanbeusedtoreducethenumberofbackslashesneeded,tosplitlongstringsconve-
nientlyacrosslonglines,oreventoaddcommentstopartsofstrings,forexample:
re.compile( "[A-Za-z_] " # letter or underscore
"[A-Za-z0-9_]* " # letter, digit or underscore
)
Note that this feature is defined at the syntactical level, but implemented at compile time. The ‘+’ operator must
beusedtoconcatenatestringexpressionsatruntime. Alsonotethatliteralconcatenationcanusedifferentquoting
styles for each component (even mixing raw strings and triple quoted strings), and formatted string literals may be
concatenatedwithplainstringliterals.
2.4.3f-strings
Addedinversion3.6.
Aformatted string literal orf-stringis a string literal that is prefixed with 'f'or'F'. These strings may contain
replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a
constantvalue,formattedstringsarereallyexpressionsevaluatedatruntime.
Escapesequences are decodedlike in ordinarystring literals (exceptwhen a literalis also markedas a rawstring).
Afterdecoding,thegrammarforthecontentsofthestringis:
f_string ::= (literal_char | "{{" | "}}" | replacement_field )*
replacement_field ::= "{" f_expression ["="] ["!" conversion ] [":" format_spec ] "}"
f_expression ::= (conditional_expression | "*" or_expr )
("," conditional_expression | "," "*" or_expr )* [","]
|yield_expression
conversion ::= "s" | "r" | "a"
format_spec ::= (literal_char |replacement_field )*
literal_char ::= <any code point except "{", "}" or NULL>
Thepartsofthestringoutsidecurlybracesaretreatedliterally,exceptthatanydoubledcurlybraces '{{'or'}}'
arereplacedwiththecorrespondingsinglecurlybrace. Asingleopeningcurlybracket '{'marksareplacementfield,
whichstartswithaPythonexpression. Todisplayboththeexpressiontextanditsvalueafterevaluation, (usefulin
debugging),anequalsign '='maybeaddedaftertheexpression. Aconversionfield,introducedbyanexclamation
point '!'may follow. A format specifier may also be appended, introduced by a colon ':'. A replacement field
endswithaclosingcurlybracket '}'.
ExpressionsinformattedstringliteralsaretreatedlikeregularPythonexpressionssurroundedbyparentheses, with
a few exceptions. An empty expression is not allowed, and both lambdaand assignment expressions :=must be
surrounded by explicit parentheses. Each expression is evaluated in the context where the formatted string literal
appears,inorderfromlefttoright. Replacementexpressionscancontainnewlinesinbothsingle-quotedandtriple-
quoted f-strings and they can contain comments. Everything that comes after a #inside a replacement field is a
comment(evenclosingbracesandquotes). Inthatcase,replacementfieldsmustbeclosedinadifferentline.
>>> f"abc{a # This is a comment }"
... + 3}"
'abc5'
12 Chapter 2. Lexical analysis
The Python Language Reference, Release 3.13.0
Changedinversion3.7: PriortoPython3.7, an awaitexpressionandcomprehensionscontainingan async for
clausewereillegalintheexpressionsinformattedstringliteralsduetoaproblemwiththeimplementation.
Changedinversion3.12: PriortoPython3.12,commentswerenotallowedinsidef-stringreplacementfields.
When the equal sign '='is provided, the output will have the expression text, the '='and the evaluated value.
Spacesaftertheopeningbrace '{',withintheexpressionandafterthe '='areallretainedintheoutput. Bydefault,
the'='causes the repr()of the expression to be provided, unless there is a format specified. When a format is
specifieditdefaultstothe str()oftheexpressionunlessaconversion '!r'isdeclared.
Addedinversion3.8: Theequalsign '='.
Ifaconversionisspecified,theresultofevaluatingtheexpressionisconvertedbeforeformatting. Conversion '!s'
callsstr()ontheresult, '!r'callsrepr(),and '!a'callsascii().
The result is then formatted using the format() protocol. The format specifier is passed to the __format__()
methodoftheexpressionorconversionresult. Anemptystringispassedwhentheformatspecifierisomitted. The
formattedresultisthenincludedinthefinalvalueofthewholestring.
Top-level format specifiers may include nested replacement fields. These nested fields may include their own con-
versionfieldsandformatspecifiers,butmaynotincludemoredeeplynestedreplacementfields. Theformatspecifier
mini-languageisthesameasthatusedbythe str.format() method.
Formattedstringliteralsmaybeconcatenated,butreplacementfieldscannotbesplitacrossliterals.
Someexamplesofformattedstringliterals:
>>> name ="Fred "
>>> f"He said his name is {name !r}."
"He said his name is 'Fred'."
>>> f"He said his name is {repr (name) }."# repr() is equivalent to !r
"He said his name is 'Fred'."
>>> width =10
>>> precision =4
>>> value =decimal .Decimal( "12.34567 ")
>>> f"result: {value :{width }.{precision }}"# nested fields
'result: 12.35'
>>> today =datetime(year =2017 , month =1, day =27)
>>> f"{today :%B %d, %Y }"# using date format specifier
'January 27, 2017'
>>> f"{today =:%B %d, %Y }"# using date format specifier and debugging
'today=January 27, 2017'
>>> number =1024
>>> f"{number :#0x}"# using integer format specifier
'0x400'
>>> foo ="bar"
>>> f"{foo = }"# preserves whitespace
" foo = 'bar'"
>>> line ="The mill 's closed "
>>> f"{line = }"
'line = "The mill\'s closed"'
>>> f"{line = :20}"
"line = The mill's closed "
>>> f"{line = !r: 20}"
'line = "The mill\'s closed" '
Reusingtheouterf-stringquotingtypeinsideareplacementfieldispermitted:
>>> a=dict (x=2)
>>> f"abc {a["x"]}def"
'abc 2 def'
2.4. Literals 13
The Python Language Reference, Release 3.13.0
Changedinversion3.12: PriortoPython3.12,reuseofthesamequotingtypeoftheouterf-stringinsideareplace-
mentfieldwasnotpossible.
Backslashesarealsoallowedinreplacementfieldsandareevaluatedthesamewayasinanyothercontext:
>>> a=["a","b","c"]
>>> print (f"List a contains: \n{"\n".join(a) }")
List a contains:
a
b
c
Changedinversion3.12: PriortoPython3.12,backslasheswerenotpermittedinsideanf-stringreplacementfield.
Formattedstringliteralscannotbeusedasdocstrings,eveniftheydonotincludeexpressions.
>>> def foo():
... f"Not a docstring "
...
>>> foo.__doc__ isNone
True
See also PEP 498for the proposal that added formatted string literals, and str.format() , which uses a related
formatstringmechanism.
2.4.4Numeric literals
There are three types of numeric literals: integers, floating-point numbers, and imaginary numbers. There are no
complexliterals(complexnumberscanbeformedbyaddingarealnumberandanimaginarynumber).
Note that numeric literals do not include a sign; a phrase like -1is actually an expression composed of the unary
operator‘ -’andtheliteral 1.
2.4.5Integer literals
Integerliteralsaredescribedbythefollowinglexicaldefinitions:
integer ::= decinteger |bininteger |octinteger |hexinteger
decinteger ::= nonzerodigit (["_"] digit )* | "0"+ (["_"] "0")*
bininteger ::= "0" ("b" | "B") (["_"] bindigit )+
octinteger ::= "0" ("o" | "O") (["_"] octdigit )+
hexinteger ::= "0" ("x" | "X") (["_"] hexdigit )+
nonzerodigit ::= "1"..."9"
digit ::= "0"..."9"
bindigit ::= "0" | "1"
octdigit ::= "0"..."7"
hexdigit ::= digit | "a"..."f" | "A"..."F"
Thereisnolimitforthelengthofintegerliteralsapartfromwhatcanbestoredinavailablememory.
Underscores are ignored for determining the numeric value of the literal. They can be used to group digits for
enhancedreadability. Oneunderscorecanoccurbetweendigits,andafterbasespecifierslike 0x.
Notethatleadingzerosinanon-zerodecimalnumberarenotallowed. ThisisfordisambiguationwithC-styleoctal
literals,whichPythonusedbeforeversion3.0.
Someexamplesofintegerliterals:
7 2147483647 0o177 0b100110111
3 79228162514264337593543950336 0o377 0xdeadbeef
100_000_000_000 0b_1110_0101
14 Chapter 2. Lexical analysis
The Python Language Reference, Release 3.13.0
Changedinversion3.6: Underscoresarenowallowedforgroupingpurposesinliterals.
2.4.6Floating-point literals
Floating-pointliteralsaredescribedbythefollowinglexicaldefinitions:
floatnumber ::= pointfloat |exponentfloat
pointfloat ::= [digitpart ]fraction |digitpart "."
exponentfloat ::= (digitpart |pointfloat )exponent
digitpart ::= digit (["_"] digit )*
fraction ::= "." digitpart
exponent ::= ("e" | "E") ["+" | "-"] digitpart
Notethattheintegerandexponentpartsarealwaysinterpretedusingradix10. Forexample, 077e010islegal,and
denotes the same number as 77e10. The allowed range of floating-point literals is implementation-dependent. As
inintegerliterals,underscoresaresupportedfordigitgrouping.
Someexamplesoffloating-pointliterals:
3.14 10. .001 1e100 3.14e-10 0e0 3.14_15_93
Changedinversion3.6: Underscoresarenowallowedforgroupingpurposesinliterals.
2.4.7Imaginary literals
Imaginaryliteralsaredescribedbythefollowinglexicaldefinitions:
imagnumber ::= (floatnumber |digitpart ) ("j" | "J")
Animaginaryliteralyieldsacomplexnumberwitharealpartof0.0. Complexnumbersarerepresentedasapairof
floating-point numbers and have the same restrictions on their range. To create a complex number with a nonzero
realpart,addafloating-pointnumbertoit,e.g., (3+4j). Someexamplesofimaginaryliterals:
3.14 j 10.j 10j .001 j 1e100j 3.14e-10 j 3.14_15_93 j
2.5Operators
Thefollowingtokensareoperators:
+ - * ** / // % @
<< >> & | ^ ~ :=
< > <= >= == !=
2.6Delimiters
Thefollowingtokensserveasdelimitersinthegrammar:
( ) [ ] { }
, : ! . ; @ =
-> += -= *= /= //= %=
@= &= |= ^= >>= <<= **=
Theperiodcanalsooccurinfloating-pointandimaginaryliterals. Asequenceofthreeperiodshasaspecialmeaning
as an ellipsis literal. The second half of the list, the augmented assignment operators, serve lexically as delimiters,
butalsoperformanoperation.
2.5. Operators 15
The Python Language Reference, Release 3.13.0
ThefollowingprintingASCIIcharactershavespecialmeaningaspartofothertokensorareotherwisesignificantto
thelexicalanalyzer:
' " # \
The following printing ASCII characters are not used in Python. Their occurrence outside string literals and com-
mentsisanunconditionalerror:
$ ? `
16 Chapter 2. Lexical analysis
CHAPTER
THREE
DATA MODEL
3.1Objects, values and types
Objectsare Python’s abstraction for data. All data in a Python program is represented by objects or by relations
betweenobjects. (Inasense,andinconformancetoVonNeumann’smodelofa“storedprogramcomputer”,codeis
alsorepresentedbyobjects.)
Every object has an identity, a type and a value. An object’s identitynever changes once it has been created; you
maythinkofitastheobject’saddressinmemory. The isoperatorcomparestheidentityoftwoobjects;the id()
functionreturnsanintegerrepresentingitsidentity.
CPython implementation detail: ForCPython, id(x)isthememoryaddresswhere xisstored.
Anobject’stypedeterminestheoperationsthattheobjectsupports(e.g., “doesithavealength?”) andalsodefines
thepossiblevaluesforobjectsofthattype. The type()functionreturnsanobject’stype(whichisanobjectitself).
Likeitsidentity,anobject’s typeisalsounchangeable.1
Thevalueofsomeobjectscanchange. Objectswhosevaluecanchangearesaidtobe mutable;objectswhosevalueis
unchangeableoncetheyarecreatedarecalled immutable. (Thevalueofanimmutablecontainerobjectthatcontains
areferencetoamutableobjectcanchangewhenthelatter’svalueischanged;howeverthecontainerisstillconsidered
immutable,becausethecollectionofobjectsitcontainscannotbechanged. So,immutabilityisnotstrictlythesame
as having an unchangeable value, it is more subtle.) An object’s mutability is determined by its type; for instance,
numbers,stringsandtuplesareimmutable,whiledictionariesandlistsaremutable.
Objectsareneverexplicitlydestroyed;however,whentheybecomeunreachabletheymaybegarbage-collected. An
implementation is allowed to postpone garbage collection or omit it altogether — it is a matter of implementation
qualityhowgarbagecollectionisimplemented,aslongasnoobjectsarecollectedthatarestillreachable.
CPython implementation detail: CPython currently uses a reference-counting scheme with (optional) delayed
detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not
guaranteedtocollectgarbagecontainingcircularreferences. Seethedocumentationofthe gcmoduleforinformation
oncontrollingthecollectionofcyclicgarbage. OtherimplementationsactdifferentlyandCPythonmaychange. Do
not depend on immediate finalization of objects when they become unreachable (so you should always close files
explicitly).
Notethattheuseoftheimplementation’stracingordebuggingfacilitiesmaykeepobjectsalivethatwouldnormally
becollectable. Alsonotethatcatchinganexceptionwitha try…exceptstatementmaykeepobjectsalive.
Some objects contain references to “external” resources such as open files or windows. It is understood that these
resources are freed when the object is garbage-collected, but since garbage collection is not guaranteed to happen,
such objects also provide an explicit way to release the external resource, usually a close()method. Programs
arestronglyrecommendedtoexplicitlyclosesuchobjects. The try…finallystatementandthe withstatement
provideconvenientwaystodothis.
Someobjectscontainreferencestootherobjects;thesearecalled containers. Examplesofcontainersaretuples,lists
and dictionaries. The references are part of a container’s value. In most cases, when we talk about the value of a
container,weimplythevalues,nottheidentitiesofthecontainedobjects;however,whenwetalkaboutthemutability
1Itispossibleinsomecasestochangeanobject’stype,undercertaincontrolledconditions. Itgenerallyisn’tagoodideathough,sinceitcan
leadtosomeverystrangebehaviourifitishandledincorrectly.
17
The Python Language Reference, Release 3.13.0
of a container, only the identities of the immediately contained objects are implied. So, if an immutable container
(likeatuple)containsareferencetoamutableobject,itsvaluechangesifthatmutableobjectischanged.
Typesaffectalmostallaspectsofobjectbehavior. Eventheimportanceofobjectidentityisaffectedinsomesense:
forimmutabletypes,operationsthatcomputenewvaluesmayactuallyreturnareferencetoanyexistingobjectwith
thesametypeandvalue,whileformutableobjectsthisisnotallowed. Forexample,after a = 1; b = 1 ,aandb
mayormaynotrefertothesameobjectwiththevalueone,dependingontheimplementation. Thisisbecause int
isanimmutabletype,sothereferenceto 1canbereused. Thisbehaviourdependsontheimplementationused, so
shouldnotbereliedupon,butissomethingtobeawareofwhenmakinguseofobjectidentitytests. However,after
c = []; d = [] ,canddareguaranteedtorefertotwodifferent,unique,newlycreatedemptylists. (Notethat e
= f = [] assignsthe sameobjecttoboth eandf.)
3.2The standard type hierarchy
Below is a list of the types that are built into Python. Extension modules (written in C, Java, or other languages,
dependingontheimplementation)candefineadditionaltypes. FutureversionsofPythonmayaddtypestothetype
hierarchy (e.g., rational numbers, efficiently stored arrays of integers, etc.), although such additions will often be
providedviathestandardlibraryinstead.
Someofthetypedescriptionsbelowcontainaparagraphlisting‘specialattributes.’ Theseareattributesthatprovide
accesstotheimplementationandarenotintendedforgeneraluse. Theirdefinitionmaychangeinthefuture.
3.2.1None
This type has a single value. There is a single object with this value. This object is accessed through the built-in
name None. It is used to signify the absence of a value in many situations, e.g., it is returned from functions that
don’texplicitlyreturnanything. Itstruthvalueisfalse.
3.2.2NotImplemented
This type has a single value. There is a single object with this value. This object is accessed through the built-in
name NotImplemented . Numeric methods and rich comparison methods should return this value if they do not
implement the operation for the operands provided. (The interpreter will then try the reflected operation, or some
otherfallback,dependingontheoperator.) Itshouldnotbeevaluatedinabooleancontext.
Seeimplementing-the-arithmetic-operationsformoredetails.
Changedinversion3.9: Evaluating NotImplemented inabooleancontextisdeprecated. Whileitcurrentlyevalu-
atesastrue,itwillemita DeprecationWarning . Itwillraisea TypeError inafutureversionofPython.
3.2.3Ellipsis
Thistypehasasinglevalue. Thereisasingleobjectwiththisvalue. Thisobjectisaccessedthroughtheliteral ...
orthebuilt-inname Ellipsis . Itstruthvalueistrue.
3.2.4 numbers.Number
Thesearecreatedbynumericliteralsandreturnedasresultsbyarithmeticoperatorsandarithmeticbuilt-infunctions.
Numeric objects are immutable; once created their value never changes. Python numbers are of course strongly
relatedtomathematicalnumbers,butsubjecttothelimitationsofnumericalrepresentationincomputers.
Thestring representations of the numeric classes, computed by __repr__() and__str__() , have the following
properties:
•They are valid numeric literals which, when passed to their class constructor, produce an object having the
valueoftheoriginalnumeric.
•Therepresentationisinbase10,whenpossible.
•Leadingzeros,possiblyexceptingasinglezerobeforeadecimalpoint,arenotshown.
•Trailingzeros,possiblyexceptingasinglezeroafteradecimalpoint,arenotshown.
18 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
•Asignisshownonlywhenthenumberisnegative.
Pythondistinguishesbetweenintegers,floating-pointnumbers,andcomplexnumbers:
numbers.Integral
Theserepresentelementsfromthemathematicalsetofintegers(positiveandnegative).
®Note
The rules for integer representation are intended to give the most meaningful interpretation of shift and mask
operationsinvolvingnegativeintegers.
Therearetwotypesofintegers:
Integers ( int)
These represent numbers in an unlimited range, subject to available (virtual) memory only. For the purpose
of shift and mask operations, a binary representation is assumed, and negative numbers are represented in a
variantof2’scomplementwhichgivestheillusionofaninfinitestringofsignbitsextendingtotheleft.
Booleans ( bool)
TheserepresentthetruthvaluesFalseandTrue. Thetwoobjectsrepresentingthevalues FalseandTrueare
theonlyBooleanobjects. TheBooleantypeisasubtypeoftheintegertype, andBooleanvaluesbehavelike
thevalues0and1,respectively,inalmostallcontexts,theexceptionbeingthatwhenconvertedtoastring,the
strings "False"or"True"arereturned,respectively.
numbers.Real (float)
These represent machine-level double precision floating-point numbers. You are at the mercy of the underlying
machinearchitecture(andCorJavaimplementation)fortheacceptedrangeandhandlingofoverflow. Pythondoes
notsupportsingle-precisionfloating-pointnumbers;thesavingsinprocessorandmemoryusagethatareusuallythe
reasonforusingthesearedwarfedbytheoverheadofusingobjectsinPython,sothereisnoreasontocomplicatethe
languagewithtwokindsoffloating-pointnumbers.
numbers.Complex (complex )
These represent complex numbers as a pair of machine-level double precision floating-point numbers. The same
caveats apply as for floating-point numbers. The real and imaginary parts of a complex number zcan be retrieved
throughtheread-onlyattributes z.realandz.imag.
3.2.5Sequences
Theserepresentfiniteorderedsetsindexedbynon-negativenumbers. Thebuilt-infunction len()returnsthenumber
ofitemsofasequence. Whenthelengthofasequenceis n,theindexsetcontainsthenumbers0,1,…, n-1. Item
iofsequence aisselectedby a[i]. Somesequences,includingbuilt-insequences,interpretnegativesubscriptsby
addingthesequencelength. Forexample, a[-2]equals a[n-2],thesecondtolastitemofsequenceawithlength
n.
Sequencesalsosupportslicing: a[i:j]selectsallitemswithindex ksuchthat i<=k<j. Whenusedasanexpression,
a slice is a sequence of the same type. The comment above about negative indexes also applies to negative slice
positions.
Somesequencesalsosupport“extendedslicing”withathird“step”parameter: a[i:j:k] selectsallitemsof awith
index xwhere x = i + n*k ,n>= 0andi<=x<j.
Sequencesaredistinguishedaccordingtotheirmutability:
3.2. The standard type hierarchy 19
The Python Language Reference, Release 3.13.0
Immutable sequences
An object of an immutable sequence type cannot change once it is created. (If the object contains references to
other objects, these other objects may be mutable and may be changed; however, the collection of objects directly
referencedbyanimmutableobjectcannotchange.)
Thefollowingtypesareimmutablesequences:
Strings
AstringisasequenceofvaluesthatrepresentUnicodecodepoints. Allthecodepointsintherange U+0000
- U+10FFFF canberepresentedinastring. Pythondoesn’thavea chartype;instead,everycodepointinthe
stringisrepresentedasastringobjectwithlength 1. Thebuilt-infunction ord()convertsacodepointfrom
itsstringformtoanintegerintherange 0 - 10FFFF ;chr()convertsanintegerintherange 0 - 10FFFF
tothecorrespondinglength 1stringobject. str.encode() canbeusedtoconverta strtobytesusingthe
giventextencoding,and bytes.decode() canbeusedtoachievetheopposite.
Tuples
TheitemsofatuplearearbitraryPythonobjects. Tuplesoftwoormoreitemsareformedbycomma-separated
listsofexpressions. Atupleofoneitem(a‘singleton’)canbeformedbyaffixingacommatoanexpression(an
expressionbyitselfdoesnotcreateatuple,sinceparenthesesmustbeusableforgroupingofexpressions). An
emptytuplecanbeformedbyanemptypairofparentheses.
Bytes
Abytesobjectisanimmutablearray. Theitemsare8-bitbytes, representedbyintegersintherange0<=x
<256. Bytesliterals(like b'abc')andthebuilt-in bytes()constructorcanbeusedtocreatebytesobjects.
Also,bytesobjectscanbedecodedtostringsviathe decode() method.
Mutable sequences
Mutablesequencescanbechangedaftertheyarecreated. Thesubscriptionandslicingnotationscanbeusedasthe
targetofassignmentand del(delete)statements.
®Note
Thecollections andarraymoduleprovideadditionalexamplesofmutablesequencetypes.
Therearecurrentlytwointrinsicmutablesequencetypes:
Lists
TheitemsofalistarearbitraryPythonobjects. Listsareformedbyplacingacomma-separatedlistofexpres-
sionsinsquarebrackets. (Notethattherearenospecialcasesneededtoformlistsoflength0or1.)
Byte Arrays
Abytearrayobjectisamutablearray. Theyarecreatedbythebuilt-in bytearray() constructor. Asidefrom
beingmutable(andhenceunhashable),bytearraysotherwiseprovidethesameinterfaceandfunctionalityas
immutable bytesobjects.
3.2.6Set types
These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any sub-
script. However, they can be iterated over, and the built-in function len()returns the number of items in a set.
Commonusesforsetsarefastmembershiptesting,removingduplicatesfromasequence,andcomputingmathemat-
icaloperationssuchasintersection,union,difference,andsymmetricdifference.
Forsetelements,thesameimmutabilityrulesapplyasfordictionarykeys. Notethatnumerictypesobeythenormal
rulesfornumericcomparison: iftwonumberscompareequal(e.g., 1and1.0),onlyoneofthemcanbecontained
inaset.
Therearecurrentlytwointrinsicsettypes:
20 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
Sets
Theserepresentamutableset. Theyarecreatedbythebuilt-in set()constructorandcanbemodifiedafter-
wardsbyseveralmethods,suchas add().
Frozen sets
Theserepresentanimmutableset. Theyarecreatedbythebuilt-in frozenset() constructor. Asafrozenset
isimmutableand hashable,itcanbeusedagainasanelementofanotherset,orasadictionarykey.
3.2.7Mappings
These represent finite sets of objects indexed by arbitrary index sets. The subscript notation a[k]selects the item
indexedby kfromthemapping a;thiscanbeusedinexpressionsandasthetargetofassignmentsor delstatements.
Thebuilt-infunction len()returnsthenumberofitemsinamapping.
Thereiscurrentlyasingleintrinsicmappingtype:
Dictionaries
These represent finite sets of objects indexed by nearly arbitrary values. The only types of values not acceptable
as keys are values containing lists or dictionaries or other mutable types that are compared by value rather than by
objectidentity,thereasonbeingthattheefficientimplementationofdictionariesrequiresakey’shashvaluetoremain
constant. Numerictypesusedforkeysobeythenormalrulesfornumericcomparison: iftwonumberscompareequal
(e.g., 1and1.0)thentheycanbeusedinterchangeablytoindexthesamedictionaryentry.
Dictionaries preserve insertion order, meaning that keys will be produced in the same order they were added se-
quentially over the dictionary. Replacing an existing key does not change the order, however removing a key and
re-insertingitwilladdittotheendinsteadofkeepingitsoldplace.
Dictionariesaremutable;theycanbecreatedbythe {}notation(seesection Dictionary displays ).
The extension modules dbm.ndbm anddbm.gnu provide additional examples of mapping types, as does the
collections module.
Changedinversion3.7: DictionariesdidnotpreserveinsertionorderinversionsofPythonbefore3.6. InCPython
3.6,insertionorderwaspreserved,butitwasconsideredanimplementationdetailatthattimeratherthanalanguage
guarantee.
3.2.8Callable types
Thesearethetypestowhichthefunctioncalloperation(seesection Calls)canbeapplied:
User-defined functions
Auser-definedfunctionobjectiscreatedbyafunctiondefinition(seesection Function definitions ). Itshouldbecalled
withanargumentlistcontainingthesamenumberofitemsasthefunction’sformalparameterlist.
Special read-only attributes
Attribute Meaning
function. __globals__A reference to the dictionary that holds the func-
tion’s global variables – the global namespace of the
moduleinwhichthefunctionwasdefined.
function. __closure__Noneoratupleofcellsthatcontainbindingsforthe
names specified in the co_freevars attribute of the
function’s code object .
Acellobjecthastheattribute cell_contents . This
can be used to get the value of the cell, as well as set
thevalue.
3.2. The standard type hierarchy 21
The Python Language Reference, Release 3.13.0
Special writable attributes
Mostoftheseattributescheckthetypeoftheassignedvalue:
Attribute Meaning
function. __doc__The function’s documentation string, or Noneif un-
available.
function. __name__The function’s name. See also: __name__
attributes .
function. __qualname__The function’s qualified name . See also:
__qualname__ attributes .
Addedinversion3.3.
function. __module__Thenameofthemodulethefunctionwasdefinedin,or
Noneifunavailable.
function. __defaults__Atuplecontainingdefault parametervaluesforthose
parametersthathavedefaults,or Noneifnoparameters
haveadefaultvalue.
function. __code__Thecode object representing the compiled function
body.
function. __dict__Thenamespacesupportingarbitraryfunctionattributes.
Seealso: __dict__ attributes .
function. __annotations__Adictionary containingannotationsof parameters .
Thekeysofthedictionaryaretheparameternames,and
'return' for the return annotation, if provided. See
also: annotations-howto.
function. __kwdefaults__Adictionary containing defaults for keyword-only
parameters .
function. __type_params__Atuplecontaining the type parameters of ageneric
function.
Addedinversion3.12.
Function objects also support getting and setting arbitrary attributes, which can be used, for example, to attach
metadatatofunctions. Regularattributedot-notationisusedtogetandsetsuchattributes.
CPython implementation detail: CPython’s current implementation only supports function attributes on user-
definedfunctions. Functionattributeson built-in functions maybesupportedinthefuture.
Additionalinformationaboutafunction’sdefinitioncanberetrievedfromits code object (accessibleviathe __code__
attribute).
Instance methods
Aninstancemethodobjectcombinesaclass,aclassinstanceandanycallableobject(normallyauser-definedfunc-
tion).
Specialread-onlyattributes:
22 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
method. __self__Referstotheclassinstanceobjecttowhichthemethod
isbound
method. __func__Referstotheoriginal function object
method. __doc__The method’s documentation (same as method.
__func__.__doc__ ). Astringiftheoriginalfunc-
tionhadadocstring,else None.
method. __name__The name of the method (same as method.
__func__.__name__ )
method. __module__Thenameofthemodulethemethodwasdefinedin,or
Noneifunavailable.
Methodsalsosupportaccessing(butnotsetting)thearbitraryfunctionattributesontheunderlying function object .
User-defined method objects may be created when getting an attribute of a class (perhaps via an instance of that
class),ifthatattributeisauser-defined function object oraclassmethod object.
When an instance method object is created by retrieving a user-defined function object from a class via one of its
instances, its __self__ attribute is the instance, and the method object is said to be bound. The new method’s
__func__ attributeistheoriginalfunctionobject.
When an instance method object is created by retrieving a classmethod object from a class or instance, its
__self__ attributeistheclassitself,andits __func__ attributeisthefunctionobjectunderlyingtheclassmethod.
Whenaninstancemethodobjectiscalled,theunderlyingfunction( __func__ )iscalled,insertingtheclassinstance
(__self__ )infrontoftheargumentlist. Forinstance,when Cisaclasswhichcontainsadefinitionforafunction
f(),and xisaninstanceof C,calling x.f(1)isequivalenttocalling C.f(x, 1) .
Whenaninstancemethodobjectisderivedfroma classmethod object, the“classinstance”storedin __self__
willactuallybetheclassitself,sothatcallingeither x.f(1)orC.f(1)isequivalenttocalling f(C,1)where fis
theunderlyingfunction.
Itisimportanttonotethatuser-definedfunctionswhichareattributesofaclassinstancearenotconvertedtobound
methods;this onlyhappenswhenthefunctionisanattributeoftheclass.
Generator functions
Afunctionormethodwhichusesthe yieldstatement(seesection The yield statement )iscalleda generator function .
Suchafunction,whencalled,alwaysreturnsan iteratorobjectwhichcanbeusedtoexecutethebodyofthefunction:
calling the iterator’s iterator.__next__() method will cause the function to execute until it provides a value
usingthe yieldstatement. Whenthefunctionexecutesa returnstatementorfallsofftheend,a StopIteration
exceptionisraisedandtheiteratorwillhavereachedtheendofthesetofvaluestobereturned.
Coroutine functions
Afunctionormethodwhichisdefinedusing async def iscalleda coroutine function . Suchafunction,whencalled,
returnsa coroutineobject. Itmaycontain awaitexpressions,aswellas async with andasync for statements.
Seealsothe Coroutine Objects section.
Asynchronous generator functions
A function or method which is defined using async def and which uses the yieldstatement is called a asyn-
chronous generator function . Such a function, when called, returns an asynchronous iterator object which can be
usedinan async for statementtoexecutethebodyofthefunction.
Callingtheasynchronousiterator’s aiterator.__anext__ methodwillreturnan awaitablewhichwhenawaited
will execute until it provides a value using the yieldexpression. When the function executes an empty return
3.2. The standard type hierarchy 23
The Python Language Reference, Release 3.13.0
statementorfallsofftheend,a StopAsyncIteration exceptionisraisedandtheasynchronousiteratorwillhave
reachedtheendofthesetofvaluestobeyielded.
Built-in functions
A built-in function object is a wrapper around a C function. Examples of built-in functions are len()andmath.
sin()(mathisastandardbuilt-inmodule). ThenumberandtypeoftheargumentsaredeterminedbytheCfunction.
Specialread-onlyattributes:
•__doc__isthefunction’sdocumentationstring,or Noneifunavailable. See function.__doc__ .
•__name__ isthefunction’sname. See function.__name__ .
•__self__ issetto None(butseethenextitem).
•__module__ isthenameofthemodulethefunctionwasdefinedinor Noneifunavailable. See function.
__module__ .
Built-in methods
Thisisreallyadifferentdisguiseofabuilt-infunction,thistimecontaininganobjectpassedtotheCfunctionasan
implicit extra argument. An example of a built-in method is alist.append() , assuming alistis a list object. In
thiscase,thespecialread-onlyattribute __self__ issettotheobjectdenotedby alist. (Theattributehasthesame
semanticsasitdoeswith other instance methods .)
Classes
Classes are callable. These objects normally act as factories for new instances of themselves, but variations are
possibleforclasstypesthatoverride __new__() . Theargumentsofthecallarepassedto __new__() and,inthe
typicalcase,to __init__() toinitializethenewinstance.
Class Instances
Instancesofarbitraryclassescanbemadecallablebydefininga __call__() methodintheirclass.
3.2.9Modules
ModulesareabasicorganizationalunitofPythoncode,andarecreatedbythe import system asinvokedeitherbythe
importstatement,orbycallingfunctionssuchas importlib.import_module() andbuilt-in __import__() .
A module object has a namespace implemented by a dictionary object (this is the dictionary referenced by the
__globals__ attribute of functions defined in the module). Attribute references are translated to lookups in this
dictionary,e.g., m.xisequivalentto m.__dict__["x"] . Amoduleobjectdoesnotcontainthecodeobjectusedto
initializethemodule(sinceitisn’tneededoncetheinitializationisdone).
Attributeassignmentupdatesthemodule’snamespacedictionary,e.g., m.x = 1isequivalentto m.__dict__["x"]
= 1.
Import-related attributes on module objects
Module objects have the following attributes that relate to the import system . When a module is created using the
machinery associated with the import system, these attributes are filled in based on the module’s spec, before the
loaderexecutesandloadsthemodule.
Tocreateamoduledynamicallyratherthanusingtheimportsystem,it’srecommendedtouse importlib.util.
module_from_spec() ,whichwillsetthevariousimport-controlledattributestoappropriatevalues. It’salsopos-
sibletousethe types.ModuleType constructortocreatemodulesdirectly,butthistechniqueismoreerror-prone,
asmostattributesmustbemanuallysetonthemoduleobjectafterithasbeencreatedwhenusingthisapproach.
24 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
ϪCaution
With the exception of __name__ , it is stronglyrecommended that you rely on __spec__ and its attributes
instead of any of the other individual attributes listed in this subsection. Note that updating an attribute on
__spec__ willnotupdatethecorrespondingattributeonthemoduleitself:
>>> import typing
>>> typing .__name__ , typing .__spec__ .name
('typing', 'typing')
>>> typing .__spec__ .name ='spelling '
>>> typing .__name__ , typing .__spec__ .name
('typing', 'spelling')
>>> typing .__name__ ='keyboard_smashing '
>>> typing .__name__ , typing .__spec__ .name
('keyboard_smashing', 'spelling')
module. __name__
Thenameusedtouniquelyidentifythemoduleintheimportsystem. Foradirectlyexecutedmodule,thiswill
besetto "__main__" .
This attribute must be set to the fully qualified name of the module. It is expected to match the value of
module.__spec__.name .
module. __spec__
Arecordofthemodule’simport-system-relatedstate.
Settothe module spec thatwasusedwhenimportingthemodule. See Module specs formoredetails.
Addedinversion3.4.
module. __package__
Thepackageamodulebelongsto.
If the module is top-level (that is, not a part of any specific package) then the attribute should be set to ''
(the empty string). Otherwise, it should be set to the name of the module’s package (which can be equal to
module.__name__ ifthemoduleitselfisapackage). See PEP 366forfurtherdetails.
Thisattributeisusedinsteadof __name__ tocalculateexplicitrelativeimportsformainmodules. Itdefaultsto
Noneformodulescreateddynamicallyusingthe types.ModuleType constructor;use importlib.util.
module_from_spec() insteadtoensuretheattributeissettoa str.
It isstronglyrecommended that you use module.__spec__.parent instead of module.__package__ .
__package__ isnowonlyusedasafallbackif __spec__.parent isnotset,andthisfallbackpathisdep-
recated.
Changedinversion3.4: Thisattributenowdefaultsto Noneformodulescreateddynamicallyusingthe types.
ModuleType constructor. Previouslytheattributewasoptional.
Changed in version 3.6: The value of __package__ is expected to be the same as __spec__.parent .
__package__ isnowonlyusedasafallbackduringimportresolutionif __spec__.parent isnotdefined.
Changed in version 3.10: ImportWarning is raised if an import resolution falls back to __package__
insteadof __spec__.parent .
Changed in version 3.12: Raise DeprecationWarning instead of ImportWarning when falling back to
__package__ duringimportresolution.
Deprecatedsinceversion3.13, willberemovedinversion3.15: __package__ willceasetobesetortaken
intoconsiderationbytheimportsystemorstandardlibrary.
module. __loader__
Theloaderobjectthattheimportmachineryusedtoloadthemodule.
3.2. The standard type hierarchy 25
The Python Language Reference, Release 3.13.0
Thisattributeismostlyusefulforintrospection,butcanbeusedforadditionalloader-specificfunctionality,for
examplegettingdataassociatedwithaloader.
__loader__ defaultsto Noneformodulescreateddynamicallyusingthe types.ModuleType constructor;
useimportlib.util.module_from_spec() insteadtoensuretheattributeissettoa loaderobject.
Itisstronglyrecommendedthatyouuse module.__spec__.loader insteadof module.__loader__ .
Changedinversion3.4: Thisattributenowdefaultsto Noneformodulescreateddynamicallyusingthe types.
ModuleType constructor. Previouslytheattributewasoptional.
Deprecated since version 3.12, will be removed in version 3.16: Setting __loader__ on a module while
failing to set __spec__.loader is deprecated. In Python 3.16, __loader__ will cease to be set or taken
intoconsiderationbytheimportsystemorthestandardlibrary.
module. __path__
A (possibly empty) sequenceof strings enumerating the locations where the package’s submodules will be
found. Non-packagemodulesshouldnothavea __path__ attribute. See __path__ attributes on modules for
moredetails.
Itisstronglyrecommendedthatyouuse module.__spec__.submodule_search_locations insteadof
module.__path__ .
module. __file__
module. __cached__
__file__ and__cached__ arebothoptionalattributesthatmayormaynotbeset. Bothattributesshould
beastrwhentheyareavailable.
__file__ indicatesthepathnameofthefilefromwhichthemodulewasloaded(ifloadedfromafile),orthe
pathnameofthesharedlibraryfileforextensionmodulesloadeddynamicallyfromasharedlibrary. Itmight
bemissingforcertaintypesofmodules,suchasCmodulesthatarestaticallylinkedintotheinterpreter,and
theimport system mayopttoleaveitunsetifithasnosemanticmeaning(forexample,amoduleloadedfrom
adatabase).
If__file__ issetthenthe __cached__ attributemightalsobeset,whichisthepathtoanycompiledversion
of the code (for example, a byte-compiled file). The file does not need to exist to set this attribute; the path
cansimplypointtowherethecompiledfile wouldexist(see PEP 3147).
Note that __cached__ may be set even if __file__ is not set. However, that scenario is quite atypical.
Ultimately, the loaderiswhatmakesuseofthemodulespecprovidedbythe finder(fromwhich __file__
and__cached__ are derived). So if a loader can load from a cached module but otherwise does not load
fromafile,thatatypicalscenariomaybeappropriate.
Itisstronglyrecommendedthatyouuse module.__spec__.cached insteadof module.__cached__ .
Deprecated since version 3.13, will be removed in version 3.15: Setting __cached__ on a module while
failing to set __spec__.cached is deprecated. In Python 3.15, __cached__ will cease to be set or taken
intoconsiderationbytheimportsystemorstandardlibrary.
Other writable attributes on module objects
Aswellastheimport-relatedattributeslistedabove,moduleobjectsalsohavethefollowingwritableattributes:
module. __doc__
Themodule’sdocumentationstring,or Noneifunavailable. Seealso: __doc__ attributes .
module. __annotations__
A dictionary containing variable annotations collected during module body execution. For best practices on
workingwith __annotations__ ,pleaseseeannotations-howto.
26 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
Module dictionaries
Moduleobjectsalsohavethefollowingspecialread-onlyattribute:
module. __dict__
Themodule’snamespaceasadictionaryobject. Uniquelyamongtheattributeslistedhere, __dict__ cannot
beaccessedasaglobalvariablefromwithinamodule;itcanonlybeaccessedasanattributeonmoduleobjects.
CPython implementation detail: BecauseofthewayCPythonclearsmoduledictionaries, themoduledic-
tionary will be cleared when the module falls out of scope even if the dictionary still has live references. To
avoidthis,copythedictionaryorkeepthemodulearoundwhileusingitsdictionarydirectly.
3.2.10 Custom classes
Customclasstypesaretypicallycreatedbyclassdefinitions(seesection Class definitions ). Aclasshasanamespace
implementedbyadictionaryobject. Classattributereferencesaretranslatedtolookupsinthisdictionary,e.g., C.x
istranslatedto C.__dict__["x"] (althoughthereareanumberofhookswhichallowforothermeansoflocating
attributes). Whentheattributenameisnotfoundthere,theattributesearchcontinuesinthebaseclasses. Thissearch
ofthebaseclassesusestheC3methodresolutionorderwhichbehavescorrectlyeveninthepresenceof‘diamond’
inheritance structures where there are multiple inheritance paths leading back to a common ancestor. Additional
detailsontheC3MROusedbyPythoncanbefoundatpython_2.3_mro.
Whenaclassattributereference(forclass C,say)wouldyieldaclassmethodobject,itistransformedintoaninstance
methodobjectwhose __self__ attributeis C.Whenitwouldyielda staticmethod object,itistransformedinto
the object wrapped by the static method object. See section Implementing Descriptors for another way in which
attributesretrievedfromaclassmaydifferfromthoseactuallycontainedinits __dict__ .
Classattributeassignmentsupdatetheclass’sdictionary,neverthedictionaryofabaseclass.
Aclassobjectcanbecalled(seeabove)toyieldaclassinstance(seebelow).
3.2. The standard type hierarchy 27
The Python Language Reference, Release 3.13.0
Special attributes
Attribute Meaning
type. __name__Theclass’sname. Seealso: __name__ attributes .
type. __qualname__The class’s qualified name . See also: __qualname__
attributes .
type. __module__Thenameofthemoduleinwhichtheclasswasdefined.
type. __dict__Amapping proxy providing a read-only view of
the class’s namespace. See also: __dict__
attributes .
type. __bases__Atuplecontaining the class’s bases. In most
cases, for a class defined as class X(A, B, C) ,X.
__bases__ willbeexactlyequalto (A, B, C) .
type. __doc__Theclass’sdocumentationstring,or Noneifundefined.
Notinheritedbysubclasses.
type. __annotations__A dictionary containing variable annotations col-
lected during class body execution. For best prac-
tices on working with __annotations__ , please see
annotations-howto.
ϪCaution
Accessing the __annotations__ attribute of a
class object directly may yield incorrect results
in the presence of metaclasses. In addition, the
attribute may not exist for some classes. Use
inspect.get_annotations() toretrieveclass
annotationssafely.
type. __type_params__Atuplecontaining the type parameters of ageneric
class.
Addedinversion3.12.
type. __static_attributes__Atuplecontaining names of attributes of this class
whichareassignedthrough self.Xfromanyfunction
initsbody.
Addedinversion3.13.
type. __firstlineno__The line number of the first line of the class defini-
tion, including decorators. Setting the __module__
attribute removes the __firstlineno__ item from
thetype’sdictionary.
Addedinversion3.13.
type. __mro__Thetupleofclassesthatareconsideredwhenlooking
forbaseclassesduringmethodresolution.
Special methods
Inadditiontothespecialattributesdescribedabove,allPythonclassesalsohavethefollowingtwomethodsavailable:
type. mro()
Thismethodcanbeoverriddenbyametaclasstocustomizethemethodresolutionorderforitsinstances. Itis
28 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
calledatclassinstantiation,anditsresultisstoredin __mro__.
type. __subclasses__ ()
Eachclasskeepsalistofweakreferencestoitsimmediatesubclasses. Thismethodreturnsalistofallthose
referencesstillalive. Thelistisindefinitionorder. Example:
>>> class A:pass
>>> class B(A): pass
>>> A.__subclasses__()
[<class 'B'>]
3.2.11 Class instances
Aclassinstanceiscreatedbycallingaclassobject(seeabove). Aclassinstancehasanamespaceimplementedasa
dictionary which is the first place in which attribute references are searched. When an attribute is not found there,
andtheinstance’sclasshasanattributebythatname,thesearchcontinueswiththeclassattributes. Ifaclassattribute
is found that is a user-defined function object, it is transformed into an instance method object whose __self__
attribute is the instance. Static method and class method objects are also transformed; see above under “Classes”.
See section Implementing Descriptors for another way in which attributes of a class retrieved via its instances may
differfromthe objectsactually storedin theclass’s __dict__ . If noclass attributeis found, and theobject’s class
hasa __getattr__() method,thatiscalledtosatisfythelookup.
Attribute assignments and deletions update the instance’s dictionary, never a class’s dictionary. If the class has a
__setattr__() or__delattr__() method,thisiscalledinsteadofupdatingtheinstancedictionarydirectly.
Classinstancescanpretendtobenumbers,sequences,ormappingsiftheyhavemethodswithcertainspecialnames.
Seesection Special method names .
Special attributes
object. __class__
Theclasstowhichaclassinstancebelongs.
object. __dict__
A dictionary or other mapping object used to store an object’s (writable) attributes. Not all instances have a
__dict__ attribute;seethesectionon __slots__formoredetails.
3.2.12 I/O objects (also known as file objects)
Afile object represents an open file. Various shortcuts are available to create file objects: the open()built-in
function, and also os.popen() ,os.fdopen() , and the makefile() method of socket objects (and perhaps by
otherfunctionsormethodsprovidedbyextensionmodules).
The objects sys.stdin ,sys.stdout andsys.stderr are initialized to file objects corresponding to the inter-
preter’s standard input, output and error streams; they are all open in text mode and therefore follow the interface
definedbythe io.TextIOBase abstractclass.
3.2.13 Internal types
A few types used internally by the interpreter are exposed to the user. Their definitions may change with future
versionsoftheinterpreter,buttheyarementionedhereforcompleteness.
Code objects
Code objects represent byte-compiled executable Python code, or bytecode. The difference between a code object
and a function object is that the function object contains an explicit reference to the function’s globals (the module
inwhichitwasdefined),whileacodeobjectcontainsnocontext;alsothedefaultargumentvaluesarestoredinthe
functionobject,notinthecodeobject(becausetheyrepresentvaluescalculatedatrun-time). Unlikefunctionobjects,
codeobjectsareimmutableandcontainnoreferences(directlyorindirectly)tomutableobjects.
3.2. The standard type hierarchy 29
The Python Language Reference, Release 3.13.0
Special read-only attributes
codeobject. co_nameThefunctionname
codeobject. co_qualnameThefullyqualifiedfunctionname
Addedinversion3.11.
codeobject. co_argcountThe total number of positional parameters (including
positional-onlyparametersandparameterswithdefault
values)thatthefunctionhas
codeobject. co_posonlyargcountThe number of positional-only parameters (including
argumentswithdefaultvalues)thatthefunctionhas
codeobject. co_kwonlyargcountThenumberofkeyword-only parameters (includingar-
gumentswithdefaultvalues)thatthefunctionhas
codeobject. co_nlocalsThenumberof local variables usedbythefunction(in-
cludingparameters)
codeobject. co_varnamesAtuplecontainingthenamesofthelocalvariablesin
thefunction(startingwiththeparameternames)
codeobject. co_cellvarsAtuplecontaining the names of local variables that
arereferencedfromatleastone nested scope insidethe
function
codeobject. co_freevarsAtuplecontaining the names of free (closure) vari-
ablesthat a nested scope references in an outer scope.
Seealso function.__closure__ .
Note: referencestoglobalandbuiltinnamesare notin-
cluded.
codeobject. co_codeAstringrepresentingthesequenceof bytecodeinstruc-
tionsinthefunction
codeobject. co_constsAtuplecontainingtheliteralsusedbythe bytecodein
thefunction
codeobject. co_namesAtuplecontainingthenamesusedbythe bytecodein
thefunction
codeobject. co_filenameThenameofthefilefromwhichthecodewascompiled
codeobject. co_firstlinenoThelinenumberofthefirstlineofthefunction
codeobject. co_lnotabAstringencodingthemappingfrom bytecodeoffsetsto
line numbers. For details, see the source code of the
interpreter.
Deprecated since version 3.12: This attribute of code
objects is deprecated, and may be removed in Python
3.15.
codeobject. co_stacksizeTherequiredstacksizeofthecodeobject
codeobject. co_flagsAnintegerencodinganumberofflagsfortheinter-
preter.
30 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
The following flag bits are defined for co_flags : bit 0x04is set if the function uses the *arguments syntax to
acceptanarbitrarynumberofpositionalarguments;bit 0x08issetifthefunctionusesthe **keywords syntaxto
accept arbitrary keyword arguments; bit 0x20is set if the function is a generator. See inspect-module-co-flags for
detailsonthesemanticsofeachflagsthatmightbepresent.
Future feature declarations ( from __future__ import division ) also use bits in co_flags to indicate
whetheracodeobjectwascompiledwithaparticularfeatureenabled: bit 0x2000issetifthefunctionwascompiled
withfuturedivisionenabled;bits 0x10and0x1000wereusedinearlierversionsofPython.
Otherbitsin co_flags arereservedforinternaluse.
If a code object represents a function, the first item in co_consts is the documentation string of the function, or
Noneifundefined.
Methods on code objects
codeobject. co_positions ()
Returnsaniterableoverthesourcecodepositionsofeach bytecodeinstructioninthecodeobject.
Theiteratorreturns tuplescontainingthe (start_line, end_line, start_column, end_column) .
Thei-thtuple corresponds to the position of the source code that compiled to the i-thcode unit. Column
informationis0-indexedutf-8byteoffsetsonthegivensourceline.
Thispositionalinformationcanbemissing. Anon-exhaustivelistsofcaseswherethismayhappen:
•Runningtheinterpreterwith -X no_debug_ranges .
•Loadingapycfilecompiledwhileusing -X no_debug_ranges .
•Positiontuplescorrespondingtoartificialinstructions.
•Lineandcolumnnumbersthatcan’tberepresentedduetoimplementationspecificlimitations.
Whenthisoccurs,someorallofthetupleelementscanbe None.
Addedinversion3.11.
®Note
Thisfeaturerequiresstoringcolumnpositionsincodeobjectswhichmayresultinasmallincreaseofdisk
usageofcompiledPythonfilesorinterpretermemoryusage. Toavoidstoringtheextrainformationand/or
deactivateprintingtheextratracebackinformation,the -X no_debug_ranges commandlineflagorthe
PYTHONNODEBUGRANGES environmentvariablecanbeused.
codeobject. co_lines ()
Returns an iterator that yields information about successive ranges of bytecodes. Each item yielded is a
(start, end, lineno) tuple :
•start(anint)representstheoffset(inclusive)ofthestartofthe bytecoderange
•end(anint)representstheoffset(exclusive)oftheendofthe bytecoderange
•linenois an intrepresenting the line number of the bytecoderange, or Noneif the bytecodes in the
givenrangehavenolinenumber
Theitemsyieldedwillhavethefollowingproperties:
•Thefirstrangeyieldedwillhavea startof0.
•The(start, end) rangeswillbenon-decreasingandconsecutive. Thatis,foranypairof tuples,the
startofthesecondwillbeequaltothe endofthefirst.
•Norangewillbebackwards: end >= start foralltriples.
•Thelast tupleyieldedwillhave endequaltothesizeofthe bytecode.
3.2. The standard type hierarchy 31
The Python Language Reference, Release 3.13.0
Zero-widthranges,where start == end ,areallowed. Zero-widthrangesareusedforlinesthatarepresent
inthesourcecode,buthavebeeneliminatedbythe bytecodecompiler.
Addedinversion3.10.
µSee also
PEP 626 - Precise line numbers for debugging and other tools.
ThePEPthatintroducedthe co_lines() method.
codeobject. replace (**kwargs )
Returnacopyofthecodeobjectwithnewvaluesforthespecifiedfields.
Codeobjectsarealsosupportedbythegenericfunction copy.replace() .
Addedinversion3.8.
Frame objects
Frame objects represent execution frames. They may occur in traceback objects , and are also passed to registered
tracefunctions.
Special read-only attributes
frame. f_backPointstothepreviousstackframe(towardsthecaller),
orNoneifthisisthebottomstackframe
frame. f_codeThecode object being executed in this frame. Ac-
cessingthisattributeraisesanauditingevent object.
__getattr__ witharguments objand"f_code" .
frame. f_localsThe mapping used by the frame to look up local vari-
ables. Iftheframereferstoan optimized scope ,thismay
returnawrite-throughproxyobject.
Changedinversion3.13: Returnaproxyforoptimized
scopes.
frame. f_globalsThedictionaryusedbytheframetolookup global vari-
ables
frame. f_builtinsThedictionaryusedbytheframetolookup built-in (in-
trinsic) names
frame. f_lastiThe“preciseinstruction”oftheframeobject(thisisan
indexintothe bytecodestringofthe code object )
32 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
Special writable attributes
frame. f_traceIfnot None,thisisafunctioncalledforvariousevents
duringcodeexecution(thisisusedbydebuggers). Nor-
mallyaneventistriggeredforeachnewsourceline(see
f_trace_lines ).
frame. f_trace_linesSetthisattributeto Falsetodisabletriggeringatracing
eventforeachsourceline.
frame. f_trace_opcodesSet this attribute to Trueto allow per-opcode events
to be requested. Note that this may lead to undefined
interpreter behaviour if exceptions raised by the trace
functionescapetothefunctionbeingtraced.
frame. f_linenoThecurrentlinenumberoftheframe–writingtothis
from within a trace function jumps to the given line
(onlyforthebottom-mostframe). Adebuggercanim-
plementaJumpcommand(akaSetNextStatement)by
writingtothisattribute.
Frame object methods
Frameobjectssupportonemethod:
frame. clear ()
Thismethodclearsallreferencesto local variables heldbytheframe. Also,iftheframebelongedtoa generator,
thegeneratorisfinalized. Thishelpsbreakreferencecyclesinvolvingframeobjects(forexamplewhencatching
anexceptionandstoringits tracebackforlateruse).
RuntimeError israisediftheframeiscurrentlyexecutingorsuspended.
Addedinversion3.4.
Changedinversion3.13: Attemptingtoclearasuspendedframeraises RuntimeError (ashasalwaysbeen
thecaseforexecutingframes).
Traceback objects
Traceback objects represent the stack trace of an exception. A traceback object is implicitly created when an ex-
ceptionoccurs,andmayalsobeexplicitlycreatedbycalling types.TracebackType .
Changedinversion3.7: TracebackobjectscannowbeexplicitlyinstantiatedfromPythoncode.
For implicitly created tracebacks, when the search for an exception handler unwinds the execution stack, at each
unwoundlevelatracebackobjectisinsertedinfrontofthecurrenttraceback. Whenanexceptionhandlerisentered,
thestacktraceismadeavailabletotheprogram. (Seesection The try statement .) Itisaccessibleasthethirditemof
thetuplereturnedby sys.exc_info() ,andasthe __traceback__ attributeofthecaughtexception.
When the program contains no suitable handler, the stack trace is written (nicely formatted) to the standard error
stream;iftheinterpreterisinteractive,itisalsomadeavailabletotheuseras sys.last_traceback .
For explicitly created tracebacks, it is up to the creator of the traceback to determine how the tb_nextattributes
shouldbelinkedtoformafullstacktrace.
Specialread-onlyattributes:
3.2. The standard type hierarchy 33
The Python Language Reference, Release 3.13.0
traceback. tb_framePointstotheexecution frameofthecurrentlevel.
Accessing this attribute raises an auditing event
object.__getattr__ with arguments objand
"tb_frame" .
traceback. tb_linenoGivesthelinenumberwheretheexceptionoccurred
traceback. tb_lastiIndicatesthe“preciseinstruction”.
The line number and last instruction in the traceback may differ from the line number of its frame object if the
exceptionoccurredina trystatementwithnomatchingexceptclauseorwitha finallyclause.
traceback. tb_next
The special writable attribute tb_nextis the next level in the stack trace (towards the frame where the ex-
ceptionoccurred),or Noneifthereisnonextlevel.
Changedinversion3.7: Thisattributeisnowwritable
Slice objects
Slice objects are used to represent slices for __getitem__() methods. They are also created by the built-in
slice()function.
Special read-only attributes: startis the lower bound; stopis the upper bound; stepis the step value; each is
Noneifomitted. Theseattributescanhaveanytype.
Sliceobjectssupportonemethod:
slice. indices (self,length )
This method takes a single integer argument lengthand computes information about the slice that the slice
objectwoulddescribeifappliedtoasequenceof lengthitems. Itreturnsatupleofthreeintegers;respectively
thesearethe startandstopindicesandthe steporstridelengthoftheslice. Missingorout-of-boundsindices
arehandledinamannerconsistentwithregularslices.
Static method objects
Staticmethodobjectsprovideawayofdefeatingthetransformationoffunctionobjectstomethodobjectsdescribed
above. Astaticmethodobjectisawrapperaroundanyotherobject,usuallyauser-definedmethodobject. Whena
staticmethodobjectisretrievedfromaclassoraclassinstance,theobjectactuallyreturnedisthewrappedobject,
whichisnotsubjecttoanyfurthertransformation. Staticmethodobjectsarealsocallable. Staticmethodobjectsare
createdbythebuilt-in staticmethod() constructor.
Class method objects
Aclassmethodobject, likeastaticmethodobject, isawrapperaroundanotherobjectthataltersthewayinwhich
thatobjectisretrievedfromclassesandclassinstances. Thebehaviourofclassmethodobjectsuponsuchretrieval
is described above, under “instance methods” . Class method objects are created by the built-in classmethod()
constructor.
3.3Special method names
A class can implement certain operations that are invoked by special syntax (such as arithmetic operations or sub-
scripting and slicing) by defining methods with special names. This is Python’s approach to operator overloading ,
allowing classes to define their own behavior with respect to language operators. For instance, if a class defines a
methodnamed __getitem__() , and xisan instanceofthisclass, then x[i]isroughlyequivalentto type(x).
__getitem__(x, i) . Except where mentioned, attempts to execute an operation raise an exception when no
appropriatemethodisdefined(typically AttributeError orTypeError ).
34 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
Settingaspecialmethodto Noneindicatesthatthecorrespondingoperationisnotavailable. Forexample,ifaclass
sets__iter__() toNone, the class is not iterable, so calling iter()on its instances will raise a TypeError
(withoutfallingbackto __getitem__() ).2
Whenimplementingaclassthatemulatesanybuilt-intype,itisimportantthattheemulationonlybeimplemented
tothedegreethatitmakessensefortheobjectbeingmodelled. Forexample,somesequencesmayworkwellwith
retrievalofindividualelements, butextractingaslicemaynotmakesense. (Oneexampleofthisisthe NodeList
interfaceintheW3C’sDocumentObjectModel.)
3.3.1Basic customization
object. __new__ (cls[,...])
Called to create a new instance of class cls.__new__() is a static method (special-cased so you need not
declareitassuch)thattakestheclassofwhichaninstancewasrequestedasitsfirstargument. Theremaining
arguments are those passed to the object constructor expression (the call to the class). The return value of
__new__() shouldbethenewobjectinstance(usuallyaninstanceof cls).
Typical implementations create a new instance ofthe class byinvoking the superclass’s __new__() method
using super().__new__(cls[, ...]) withappropriateargumentsandthenmodifyingthenewlycreated
instanceasnecessarybeforereturningit.
If__new__() isinvokedduringobjectconstructionanditreturnsaninstanceof cls,thenthenewinstance’s
__init__() method will be invoked like __init__(self[, ...]) , where selfis the new instance and
theremainingargumentsarethesameaswerepassedtotheobjectconstructor.
If__new__() does not return an instance of cls, then the new instance’s __init__() method will not be
invoked.
__new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize
instancecreation. Itisalsocommonlyoverriddenincustommetaclassesinordertocustomizeclasscreation.
object. __init__ (self[,...])
Calledaftertheinstancehasbeencreated(by __new__() ),butbeforeitisreturnedtothecaller. Theargu-
ments are those passed to the class constructor expression. If a base class has an __init__() method, the
derived class’s __init__() method, if any, must explicitly call it to ensure proper initialization of the base
classpartoftheinstance;forexample: super().__init__([args...]) .
Because __new__() and__init__() work together in constructing objects ( __new__() to create it, and
__init__() to customize it), no non- Nonevalue may be returned by __init__() ; doing so will cause a
TypeError toberaisedatruntime.
object. __del__ (self)
Calledwhentheinstanceisabouttobedestroyed. Thisisalsocalledafinalizeror(improperly)adestructor.
Ifabaseclasshasa __del__() method,thederivedclass’s __del__() method,ifany,mustexplicitlycall
ittoensureproperdeletionofthebaseclasspartoftheinstance.
Itispossible(thoughnotrecommended!) forthe __del__() methodtopostponedestructionoftheinstance
by creating a new reference to it. This is called object resurrection . It is implementation-dependent whether
__del__() is called a second time when a resurrected object is about to be destroyed; the current CPython
implementationonlycallsitonce.
Itisnotguaranteedthat __del__() methodsarecalledforobjectsthatstillexistwhentheinterpreterexits.
weakref.finalize providesastraightforwardwaytoregisteracleanupfunctiontobecalledwhenanobject
isgarbagecollected.
®Note
del xdoesn’tdirectlycall x.__del__() —theformerdecrementsthereferencecountfor xbyone,and
thelatterisonlycalledwhen x’sreferencecountreacheszero.
2The__hash__() ,__iter__() ,__reversed__() ,__contains__() ,__class_getitem__() and__fspath__() methods have
specialhandlingforthis. Otherswillstillraisea TypeError ,butmaydosobyrelyingonthebehaviorthat Noneisnotcallable.
3.3. Special method names 35
The Python Language Reference, Release 3.13.0
CPython implementation detail: Itispossibleforareferencecycletopreventthereferencecountofanobject
fromgoingtozero. Inthiscase,thecyclewillbelaterdetectedanddeletedbythe cyclic garbage collector . A
commoncauseofreferencecyclesiswhenanexceptionhasbeencaughtinalocalvariable. Theframe’slocals
then reference the exception, which references its own traceback, which references the locals of all frames
caughtinthetraceback.
µSee also
Documentationforthe gcmodule.
ÁWarning
Duetotheprecariouscircumstancesunderwhich __del__() methodsareinvoked,exceptionsthatoccur
duringtheirexecutionareignored,andawarningisprintedto sys.stderr instead. Inparticular:
•__del__() can be invoked when arbitrary code is being executed, including from any arbitrary
thread. If __del__() needstotakealockorinvokeanyotherblockingresource,itmaydeadlock
astheresourcemayalreadybetakenbythecodethatgetsinterruptedtoexecute __del__() .
•__del__() can be executed during interpreter shutdown. As a consequence, the global variables
itneedstoaccess(includingothermodules)mayalreadyhavebeendeletedorsetto None. Python
guaranteesthatglobalswhosenamebeginswithasingleunderscorearedeletedfromtheirmodule
beforeotherglobalsaredeleted;ifnootherreferencestosuchglobalsexist,thismayhelpinassuring
thatimportedmodulesarestillavailableatthetimewhenthe __del__() methodiscalled.
object. __repr__ (self)
Called by the repr()built-in function to compute the “official” string representation of an object. If at
all possible, this should look like a valid Python expression that could be used to recreate an object with
the same value (given an appropriate environment). If this is not possible, a string of the form <...some
useful description...> shouldbereturned. Thereturnvaluemustbeastringobject. Ifaclassdefines
__repr__() but not __str__() , then __repr__() is also used when an “informal” string representation
ofinstancesofthatclassisrequired.
This is typically used for debugging, so it is important that the representation is information-rich and unam-
biguous. Adefaultimplementationisprovidedbythe objectclassitself.
object. __str__ (self)
Calledby str(object) ,thedefault __format__() implementation,andthebuilt-infunction print(),to
computethe“informal”ornicelyprintablestringrepresentationofanobject. Thereturnvaluemustbeastr
object.
Thismethoddiffersfrom object.__repr__() inthatthereisnoexpectationthat __str__() returnavalid
Pythonexpression: amoreconvenientorconciserepresentationcanbeused.
Thedefaultimplementationdefinedbythebuilt-intype objectcallsobject.__repr__() .
object. __bytes__ (self)
Calledbybytestocomputeabyte-stringrepresentationofanobject. Thisshouldreturna bytesobject. The
objectclassitselfdoesnotprovidethismethod.
object. __format__ (self,format_spec )
Calledbythe format() built-infunction,andbyextension,evaluationof formatted string literals andthe str.
format() method, to produce a “formatted” string representation of an object. The format_spec argument
isastringthatcontainsadescriptionoftheformattingoptionsdesired. Theinterpretationofthe format_spec
argumentisuptothetypeimplementing __format__() ,howevermostclasseswilleitherdelegateformatting
tooneofthebuilt-intypes,oruseasimilarformattingoptionsyntax.
Seeformatspecforadescriptionofthestandardformattingsyntax.
Thereturnvaluemustbeastringobject.
36 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
Thedefaultimplementationbythe objectclassshouldbegivenanempty format_spec string. Itdelegatesto
__str__() .
Changed in version 3.4: The __format__ method of objectitself raises a TypeError if passed any non-
emptystring.
Changed in version 3.7: object.__format__(x, '') is now equivalent to str(x)rather than
format(str(x), '') .
object. __lt__ (self,other)
object. __le__ (self,other)
object. __eq__ (self,other)
object. __ne__ (self,other)
object. __gt__ (self,other)
object. __ge__ (self,other)
These are the so-called “rich comparison” methods. The correspondence between operator symbols and
methodnamesisasfollows: x<ycallsx.__lt__(y) ,x<=ycallsx.__le__(y) ,x==ycallsx.__eq__(y) ,
x!=ycallsx.__ne__(y) ,x>ycallsx.__gt__(y) ,and x>=ycallsx.__ge__(y) .
Arichcomparisonmethodmayreturnthesingleton NotImplemented ifitdoesnotimplementtheoperation
for a given pair of arguments. By convention, FalseandTrueare returned for a successful comparison.
However,thesemethodscanreturnanyvalue,soifthecomparisonoperatorisusedinaBooleancontext(e.g.,
intheconditionofan ifstatement),Pythonwillcall bool()onthevaluetodetermineiftheresultistrueor
false.
By default, objectimplements __eq__() by using is, returning NotImplemented in the case of a
false comparison: True if x is y else NotImplemented . For __ne__() , by default it delegates to
__eq__() and inverts the result unless it is NotImplemented . There are no other implied relationships
amongthecomparisonoperatorsordefaultimplementations;forexample,thetruthof (x<y or x==y) does
notimply x<=y. Toautomaticallygenerateorderingoperationsfromasinglerootoperation,see functools.
total_ordering() .
Bydefault,the objectclassprovidesimplementationsconsistentwith Value comparisons : equalitycompares
according to object identity, and order comparisons raise TypeError . Each default method may generate
theseresultsdirectly,butmayalsoreturn NotImplemented .
See the paragraph on __hash__() for some important notes on creating hashableobjects which support
customcomparisonoperationsandareusableasdictionarykeys.
Therearenoswapped-argumentversionsofthesemethods(tobeusedwhentheleftargumentdoesnotsup-
porttheoperationbuttherightargumentdoes);rather, __lt__() and__gt__() areeachother’sreflection,
__le__() and__ge__() areeachother’sreflection,and __eq__() and__ne__() aretheirownreflection.
If the operands are of different types, and the right operand’s type is a direct or indirect subclass of the left
operand’stype,thereflectedmethodoftherightoperandhaspriority,otherwisetheleftoperand’smethodhas
priority. Virtualsubclassingisnotconsidered.
When no appropriate method returns any value other than NotImplemented , the ==and!=operators will
fallbackto isandis not,respectively.
object. __hash__ (self)
Called by built-in function hash()and for operations on members of hashed collections including set,
frozenset , and dict. The __hash__() method should return an integer. The only required property
isthatobjectswhichcompareequalhavethesamehashvalue;itisadvisedtomixtogetherthehashvaluesof
thecomponentsoftheobjectthatalsoplayapartincomparisonofobjectsbypackingthemintoatupleand
hashingthetuple. Example:
def __hash__ (self ):
return hash ((self .name, self .nick, self .color))
3.3. Special method names 37
The Python Language Reference, Release 3.13.0
®Note
hash()truncates the value returned from an object’s custom __hash__() method to the size of a
Py_ssize_t . This is typically 8 bytes on 64-bit builds and 4 bytes on 32-bit builds. If an object’s
__hash__() must interoperate on builds of different bit sizes, be sure to check the width on all sup-
portedbuilds. Aneasywaytodothisiswith python -c "import sys; print(sys.hash_info.
width)".
If a class does not define an __eq__() method it should not define a __hash__() operation either; if it
defines __eq__() butnot __hash__() ,itsinstanceswillnotbeusableasitemsinhashablecollections. Ifa
classdefinesmutableobjectsandimplementsan __eq__() method, itshouldnotimplement __hash__() ,
sincetheimplementationof hashablecollectionsrequiresthatakey’shashvalueisimmutable(iftheobject’s
hashvaluechanges,itwillbeinthewronghashbucket).
User-definedclasseshave __eq__() and__hash__() methodsbydefault(inheritedfromthe objectclass);
withthem,allobjectscompareunequal(exceptwiththemselves)and x.__hash__() returnsanappropriate
valuesuchthat x == yimpliesboththat x is yandhash(x) == hash(y) .
Aclassthatoverrides __eq__() anddoesnotdefine __hash__() willhaveits __hash__() implicitlyset
toNone. When the __hash__() method of a class is None, instances of the class will raise an appropriate
TypeError when a program attempts to retrieve their hash value, and will also be correctly identified as
unhashablewhenchecking isinstance(obj, collections.abc.Hashable) .
If a class that overrides __eq__() needs to retain the implementation of __hash__() from a parent class,
theinterpretermustbetoldthisexplicitlybysetting __hash__ = <ParentClass>.__hash__ .
If a class that does not override __eq__() wishes to suppress hash support, it should include __hash__ =
Noneintheclassdefinition. Aclasswhichdefinesitsown __hash__() thatexplicitlyraisesa TypeError
wouldbeincorrectlyidentifiedashashablebyan isinstance(obj, collections.abc.Hashable) call.
®Note
By default, the __hash__() values of str and bytes objects are “salted” with an unpredictable random
value. AlthoughtheyremainconstantwithinanindividualPythonprocess,theyarenotpredictablebetween
repeatedinvocationsofPython.
This is intended to provide protection against a denial-of-service caused by carefully chosen inputs that
exploittheworstcaseperformanceofadictinsertion, O(n2)complexity. See http://ocert.org/advisories/
ocert-2011-003.html fordetails.
Changing hash values affects the iteration order of sets. Python has never made guarantees about this
ordering(andittypicallyvariesbetween32-bitand64-bitbuilds).
Seealso PYTHONHASHSEED .
Changedinversion3.3: Hashrandomizationisenabledbydefault.
object. __bool__ (self)
Called to implement truth value testing and the built-in operation bool(); should return FalseorTrue.
Whenthismethodisnotdefined, __len__() iscalled,ifitisdefined,andtheobjectisconsideredtrueifits
resultisnonzero. Ifaclassdefinesneither __len__() nor__bool__() (whichistrueofthe objectclass
itself),allitsinstancesareconsideredtrue.
3.3.2Customizing attribute access
Thefollowingmethodscanbedefinedtocustomizethemeaningofattributeaccess(useof,assignmentto,ordeletion
ofx.name)forclassinstances.
object. __getattr__ (self,name )
Calledwhenthedefaultattributeaccessfailswithan AttributeError (either __getattribute__() raises
38 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
anAttributeError because nameisnotaninstanceattributeoranattributeintheclasstreefor self; or
__get__() ofanamepropertyraises AttributeError ). Thismethodshouldeitherreturnthe(computed)
attributevalueorraisean AttributeError exception. The objectclassitselfdoesnotprovidethismethod.
Note that if the attribute is found through the normal mechanism, __getattr__() is not called. (This is
anintentionalasymmetrybetween __getattr__() and__setattr__() .) Thisisdonebothforefficiency
reasonsandbecauseotherwise __getattr__() wouldhavenowaytoaccessotherattributesoftheinstance.
Notethatatleastforinstancevariables, youcantaketotalcontrolbynotinsertinganyvaluesintheinstance
attribute dictionary (but instead inserting them in another object). See the __getattribute__() method
belowforawaytoactuallygettotalcontroloverattributeaccess.
object. __getattribute__ (self,name )
Called unconditionally to implement attribute accesses for instances of the class. If the class also de-
fines __getattr__() , the latter will not be called unless __getattribute__() either calls it explic-
itly or raises an AttributeError . This method should return the (computed) attribute value or raise an
AttributeError exception. In order to avoid infinite recursion in this method, its implementation should
alwayscallthebaseclassmethodwiththesamenametoaccessanyattributesitneeds,forexample, object.
__getattribute__(self, name) .
®Note
Thismethodmaystillbebypassedwhenlookingupspecialmethodsastheresultofimplicitinvocationvia
languagesyntaxor built-in functions . See Special method lookup .
Forcertainsensitiveattributeaccesses,raisesanauditingevent object.__getattr__ witharguments obj
andname.
object. __setattr__ (self,name,value )
Calledwhenanattributeassignmentisattempted. Thisiscalledinsteadofthenormalmechanism(i.e. store
thevalueintheinstancedictionary). nameistheattributename, valueisthevaluetobeassignedtoit.
If__setattr__() wantstoassigntoaninstanceattribute,itshouldcallthebaseclassmethodwiththesame
name,forexample, object.__setattr__(self, name, value) .
For certain sensitive attribute assignments, raises an auditing event object.__setattr__ with arguments
obj,name,value.
object. __delattr__ (self,name )
Like __setattr__() but for attribute deletion instead of assignment. This should only be implemented if
del obj.name ismeaningfulfortheobject.
Forcertainsensitiveattributedeletions,raisesanauditingevent object.__delattr__ witharguments obj
andname.
object. __dir__ (self)
Calledwhen dir()iscalledontheobject. Aniterablemustbereturned. dir()convertsthereturnediterable
toalistandsortsit.
Customizing module attribute access
Special names __getattr__ and__dir__can be also used to customize access to module attributes. The
__getattr__ function at the module level should accept one argument which is the name of an attribute and
returnthecomputedvalueorraisean AttributeError . Ifanattributeisnotfoundonamoduleobjectthroughthe
normal lookup, i.e. object.__getattribute__() , then __getattr__ is searched in the module __dict__
beforeraisingan AttributeError . Iffound,itiscalledwiththeattributenameandtheresultisreturned.
3.3. Special method names 39
The Python Language Reference, Release 3.13.0
The__dir__function should accept no arguments, and return an iterable of strings that represents the names ac-
cessibleonmodule. Ifpresent,thisfunctionoverridesthestandard dir()searchonamodule.
For a more fine grained customization of the module behavior (setting attributes, properties, etc.), one can set the
__class__ attributeofamoduleobjecttoasubclassof types.ModuleType . Forexample:
import sys
from types import ModuleType
class VerboseModule (ModuleType):
def __repr__ (self ):
return f'Verbose {self .__name__ }'
def __setattr__ (self , attr, value):
print (f'Setting {attr }...')
super ().__setattr__ (attr, value)
sys.modules[ __name__ ].__class__ =VerboseModule
®Note
Defining module __getattr__ and setting module __class__ only affect lookups made using the attribute
accesssyntax–directlyaccessingthemoduleglobals(whetherbycodewithinthemodule,orviaareferenceto
themodule’sglobalsdictionary)isunaffected.
Changedinversion3.5: __class__ moduleattributeisnowwritable.
Addedinversion3.7: __getattr__ and__dir__moduleattributes.
µSee also
PEP 562 - Module __getattr__ and __dir__
Describesthe __getattr__ and__dir__functionsonmodules.
Implementing Descriptors
Thefollowingmethodsonlyapplywhenaninstanceoftheclasscontainingthemethod(aso-called descriptorclass)
appearsinan ownerclass(thedescriptormustbeineithertheowner’sclassdictionaryorintheclassdictionaryfor
oneofitsparents). Intheexamplesbelow,“theattribute”referstotheattributewhosenameisthekeyoftheproperty
intheownerclass’ __dict__ . The objectclassitselfdoesnotimplementanyoftheseprotocols.
object. __get__ (self,instance,owner=None )
Called to get the attribute of the owner class (class attribute access) or of an instance of that class (instance
attribute access). The optional ownerargument is the owner class, while instanceis the instance that the
attributewasaccessedthrough,or Nonewhentheattributeisaccessedthroughthe owner.
Thismethodshouldreturnthecomputedattributevalueorraisean AttributeError exception.
PEP 252specifiesthat __get__() iscallablewithoneortwoarguments. Python’sownbuilt-indescriptors
support this specification; however, it is likely that some third-party tools have descriptors that require both
arguments. Python’sown __getattribute__() implementationalwayspassesinbothargumentswhether
theyarerequiredornot.
object. __set__ (self,instance,value )
Calledtosettheattributeonaninstance instanceoftheownerclasstoanewvalue, value.
Note, adding __set__() or__delete__() changes the kind of descriptor to a “data descriptor”. See In-
voking Descriptors formoredetails.
40 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
object. __delete__ (self,instance )
Calledtodeletetheattributeonaninstance instanceoftheownerclass.
Instancesofdescriptorsmayalsohavethe __objclass__ attributepresent:
object. __objclass__
Theattribute __objclass__ isinterpretedbythe inspectmoduleasspecifyingtheclasswherethisobject
was defined (setting this appropriately can assist in runtime introspection of dynamic class attributes). For
callables, itmayindicatethataninstanceofthegiventype(orasubclass)isexpectedorrequiredasthefirst
positional argument (for example, CPython sets this attribute for unbound methods that are implemented in
C).
Invoking Descriptors
Ingeneral,adescriptorisanobjectattributewith“bindingbehavior”,onewhoseattributeaccesshasbeenoverridden
bymethodsinthedescriptorprotocol: __get__() ,__set__() ,and __delete__() . Ifanyofthosemethodsare
definedforanobject,itissaidtobeadescriptor.
Thedefaultbehaviorforattributeaccessistoget,set,ordeletetheattributefromanobject’sdictionary. Forinstance,
a.xhasalookupchainstartingwith a.__dict__['x'] ,then type(a).__dict__['x'] ,andcontinuingthrough
thebaseclassesof type(a)excludingmetaclasses.
However,ifthelooked-upvalueisanobjectdefiningoneofthedescriptormethods,thenPythonmayoverridethe
default behavior and invoke the descriptor method instead. Where this occurs in the precedence chain depends on
whichdescriptormethodsweredefinedandhowtheywerecalled.
Thestartingpointfordescriptorinvocationisabinding, a.x. Howtheargumentsareassembleddependson a:
Direct Call
Thesimplestandleastcommoncalliswhenusercodedirectlyinvokesadescriptormethod: x.__get__(a) .
Instance Binding
Ifbindingtoanobjectinstance, a.xistransformedintothecall: type(a).__dict__['x'].__get__(a,
type(a)) .
Class Binding
Ifbindingtoaclass, A.xistransformedintothecall: A.__dict__['x'].__get__(None, A) .
Super Binding
Adottedlookupsuchas super(A, a).x searches a.__class__.__mro__ forabaseclass Bfollowing A
andthenreturns B.__dict__['x'].__get__(a, A) .Ifnotadescriptor, xisreturnedunchanged.
For instance bindings, the precedence of descriptor invocation depends on which descriptor methods are defined.
A descriptor can define any combination of __get__() ,__set__() and__delete__() . If it does not define
__get__() ,thenaccessingtheattributewillreturnthedescriptorobjectitselfunlessthereisavalueintheobject’s
instancedictionary. Ifthedescriptordefines __set__() and/or __delete__() ,itisadatadescriptor;ifitdefines
neither,itisanon-datadescriptor. Normally,datadescriptorsdefineboth __get__() and__set__() ,whilenon-
data descriptors have just the __get__() method. Data descriptors with __get__() and__set__() (and/or
__delete__() ) defined always override a redefinition in an instance dictionary. In contrast, non-data descriptors
canbeoverriddenbyinstances.
Pythonmethods(includingthosedecoratedwith @staticmethod and@classmethod )areimplementedasnon-
data descriptors. Accordingly, instances can redefine and override methods. This allows individual instances to
acquirebehaviorsthatdifferfromotherinstancesofthesameclass.
Theproperty() functionisimplementedasadatadescriptor. Accordingly,instancescannotoverridethebehavior
ofaproperty.
__slots__
__slots__allow us to explicitly declare data members (like properties) and deny the creation of __dict__ and
__weakref__ (unlessexplicitlydeclaredin __slots__oravailableinaparent.)
The space saved over using __dict__ can be significant. Attribute lookup speed can be significantly improved as
well.
3.3. Special method names 41
The Python Language Reference, Release 3.13.0
object. __slots__
This class variable can be assigned a string, iterable, or sequence of strings with variable names used by in-
stances. __slots__reservesspaceforthedeclaredvariablesandpreventstheautomaticcreationof __dict__
and__weakref__ foreachinstance.
Notesonusing __slots__:
•When inheriting from a class without __slots__, the __dict__ and__weakref__ attribute of the instances
willalwaysbeaccessible.
•Withouta __dict__ variable,instancescannotbeassignednewvariablesnotlistedinthe __slots__definition.
Attempts to assign to an unlisted variable name raises AttributeError . If dynamic assignment of new
variablesisdesired,thenadd '__dict__' tothesequenceofstringsinthe __slots__declaration.
•Without a __weakref__ variable for each instance, classes defining __slots__ do not support weak
references to its instances. If weak reference support is needed, then add '__weakref__' to the se-
quenceofstringsinthe __slots__declaration.
•__slots__areimplementedattheclasslevelbycreating descriptors foreachvariablename. Asaresult,class
attributescannotbeusedtosetdefaultvaluesforinstancevariablesdefinedby __slots__;otherwise,theclass
attributewouldoverwritethedescriptorassignment.
•Theactionofa __slots__declarationisnotlimitedtotheclasswhereitisdefined. __slots__declaredinparents
are available in child classes. However, instances of a child subclass will get a __dict__ and__weakref__
unlessthesubclassalsodefines __slots__(whichshouldonlycontainnamesofany additionalslots).
•If a class defines a slot also defined in a base class, the instance variable defined by the base class slot is
inaccessible(exceptbyretrievingitsdescriptordirectlyfromthebaseclass). Thisrendersthemeaningofthe
programundefined. Inthefuture,acheckmaybeaddedtopreventthis.
•TypeError willberaisedifnonempty __slots__aredefinedforaclassderivedfroma "variable-length"
built-in type suchas int,bytes,and tuple.
•Anynon-string iterablemaybeassignedto __slots__.
•Ifadictionary isusedtoassign __slots__,thedictionarykeyswillbeusedastheslotnames. Thevaluesof
thedictionarycanbeusedtoprovideper-attributedocstringsthatwillberecognisedby inspect.getdoc()
anddisplayedintheoutputof help().
•__class__ assignmentworksonlyifbothclasseshavethesame __slots__.
•Multiple inheritance with multiple slotted parent classes can be used, but only one parent is allowed to have
attributescreatedbyslots(theotherbasesmusthaveemptyslotlayouts)-violationsraise TypeError .
•If aniteratoris used for __slots__then a descriptoris created for each of the iterator’s values. However, the
__slots__attributewillbeanemptyiterator.
3.3.3Customizing class creation
Whenever a class inherits from another class, __init_subclass__() is called on the parent class. This way, it
is possible to write classes which change the behavior of subclasses. This is closely related to class decorators, but
whereclassdecoratorsonlyaffectthespecificclassthey’reappliedto, __init_subclass__ solelyappliestofuture
subclassesoftheclassdefiningthemethod.
classmethod object. __init_subclass__ (cls)
Thismethodiscalledwheneverthecontainingclassissubclassed. clsisthenthenewsubclass. Ifdefinedasa
normalinstancemethod,thismethodisimplicitlyconvertedtoaclassmethod.
Keyword arguments which are given to a new class are passed to the parent class’s __init_subclass__ .
For compatibility with other classes using __init_subclass__ , one should take out the needed keyword
argumentsandpasstheothersovertothebaseclass,asin:
class Philosopher :
def __init_subclass__ (cls,/, default_name, **kwargs):
super ().__init_subclass__( **kwargs)
(continuesonnextpage)
42 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
cls.default_name =default_name
class AustralianPhilosopher (Philosopher, default_name ="Bruce "):
pass
The default implementation object.__init_subclass__ does nothing, but raises an error if it is called
withanyarguments.
®Note
The metaclass hint metaclass is consumed by the rest of the type machinery, and is never passed to
__init_subclass__ implementations. The actual metaclass (rather than the explicit hint) can be ac-
cessedas type(cls) .
Addedinversion3.6.
When a class is created, type.__new__() scans the class variables and makes callbacks to those with a
__set_name__() hook.
object. __set_name__ (self,owner,name )
Automaticallycalledatthetimetheowningclass owneriscreated. Theobjecthasbeenassignedto namein
thatclass:
class A:
x=C() # Automatically calls: x.__set_name__(A, 'x')
Iftheclassvariableisassignedaftertheclassiscreated, __set_name__() willnotbecalledautomatically.
Ifneeded, __set_name__() canbecalleddirectly:
class A:
pass
c=C()
A.x=c # The hook is not called
c.__set_name__(A, 'x') # Manually invoke the hook
SeeCreating the class object formoredetails.
Addedinversion3.6.
Metaclasses
Bydefault,classesareconstructedusing type(). Theclassbodyisexecutedinanewnamespaceandtheclassname
isboundlocallytotheresultof type(name, bases, namespace) .
The class creation process can be customized by passing the metaclass keyword argument in the class definition
line,orbyinheritingfromanexistingclassthatincludedsuchanargument. Inthefollowingexample,both MyClass
andMySubclass areinstancesof Meta:
class Meta (type ):
pass
class MyClass (metaclass =Meta):
pass
class MySubclass (MyClass):
pass
3.3. Special method names 43
The Python Language Reference, Release 3.13.0
Anyotherkeywordargumentsthatarespecifiedintheclassdefinitionarepassedthroughtoallmetaclassoperations
describedbelow.
Whenaclassdefinitionisexecuted,thefollowingstepsoccur:
•MROentriesareresolved;
•theappropriatemetaclassisdetermined;
•theclassnamespaceisprepared;
•theclassbodyisexecuted;
•theclassobjectiscreated.
Resolving MRO entries
object. __mro_entries__ (self,bases )
Ifabasethatappearsinaclassdefinitionisnotaninstanceof type,thenan __mro_entries__() method
issearchedonthebase. Ifan __mro_entries__() methodisfound,thebaseissubstitutedwiththeresult
ofacallto __mro_entries__() whencreatingtheclass. Themethodiscalledwiththeoriginalbasestuple
passed to the basesparameter, and must return a tuple of classes that will be used instead of the base. The
returnedtuplemaybeempty: inthesecases,theoriginalbaseisignored.
µSee also
types.resolve_bases()
Dynamicallyresolvebasesthatarenotinstancesof type.
types.get_original_bases()
Retrieveaclass’s“originalbases”priortomodificationsby __mro_entries__() .
PEP 560
Coresupportfortypingmoduleandgenerictypes.
Determining the appropriate metaclass
Theappropriatemetaclassforaclassdefinitionisdeterminedasfollows:
•ifnobasesandnoexplicitmetaclassaregiven,then type()isused;
•ifanexplicitmetaclassisgivenanditis notaninstanceof type(),thenitisuseddirectlyasthemetaclass;
•ifaninstanceof type()isgivenastheexplicitmetaclass,orbasesaredefined,thenthemostderivedmetaclass
isused.
The most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i.e.
type(cls) ) of all specified base classes. The most derived metaclass is one which is a subtype of allof these
candidate metaclasses. If none of the candidate metaclasses meets that criterion, then the class definition will fail
withTypeError .
Preparing the class namespace
Once the appropriate metaclass has been identified, then the class namespace is prepared. If the metaclass has
a__prepare__ attribute,itiscalledas namespace = metaclass.__prepare__(name, bases, **kwds)
(wheretheadditionalkeywordarguments,ifany,comefromtheclassdefinition). The __prepare__ methodshould
beimplementedasa classmethod . Thenamespacereturnedby __prepare__ ispassedinto __new__,butwhen
thefinalclassobjectiscreatedthenamespaceiscopiedintoanew dict.
Ifthemetaclasshasno __prepare__ attribute,thentheclassnamespaceisinitialisedasanemptyorderedmapping.
µSee also
44 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
PEP 3115 - Metaclasses in Python 3000
Introducedthe __prepare__ namespacehook
Executing the class body
Theclassbodyisexecuted(approximately)as exec(body, globals(), namespace) . Thekeydifferencefrom
a normal call to exec()is that lexical scoping allows the class body (including any methods) to reference names
fromthecurrentandouterscopeswhentheclassdefinitionoccursinsideafunction.
However,evenwhentheclassdefinitionoccursinsidethefunction,methodsdefinedinsidetheclassstillcannotsee
names defined at the class scope. Class variables must be accessed through the first parameter of instance or class
methods,orthroughtheimplicitlexicallyscoped __class__ referencedescribedinthenextsection.
Creating the class object
Once the class namespace has been populated by executing the class body, the class object is created by calling
metaclass(name, bases, namespace, **kwds) (theadditionalkeywordspassedherearethesameasthose
passedto __prepare__ ).
Thisclassobjectistheonethatwillbereferencedbythezero-argumentformof super().__class__ isanimplicit
closurereferencecreatedbythecompilerifanymethodsinaclassbodyrefertoeither __class__ orsuper. This
allows the zero argument form of super()to correctly identify the class being defined based on lexical scoping,
whiletheclassorinstancethatwasusedtomakethecurrentcallisidentifiedbasedonthefirstargumentpassedto
themethod.
CPython implementation detail: In CPython 3.6 and later, the __class__ cell is passed to the metaclass as a
__classcell__ entry intheclassnamespace. If present, thismustbe propagatedupto the type.__new__ call
inorderfortheclasstobeinitialisedcorrectly. Failingtodosowillresultina RuntimeError inPython3.8.
Whenusingthedefaultmetaclass type,oranymetaclassthatultimatelycalls type.__new__ ,thefollowingaddi-
tionalcustomizationstepsareinvokedaftercreatingtheclassobject:
1)The type.__new__ method collects all of the attributes in the class namespace that define a
__set_name__() method;
2)Those __set_name__ methodsarecalledwiththeclassbeingdefinedandtheassignednameofthatparticular
attribute;
3)The__init_subclass__() hookiscalledontheimmediateparentofthenewclassinitsmethodresolution
order.
After the class object is created, it is passed to the class decorators included in the class definition (if any) and the
resultingobjectisboundinthelocalnamespaceasthedefinedclass.
Whenanewclassiscreatedby type.__new__ ,theobjectprovidedasthenamespaceparameteriscopiedtoanew
orderedmappingandtheoriginalobjectisdiscarded. Thenewcopyiswrappedinaread-onlyproxy,whichbecomes
the__dict__ attributeoftheclassobject.
µSee also
PEP 3135 - New super
Describestheimplicit __class__ closurereference
Uses for metaclasses
The potential uses for metaclasses are boundless. Some ideas that have been explored include enum, logging, in-
terface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource
locking/synchronization.
3.3. Special method names 45
The Python Language Reference, Release 3.13.0
3.3.4Customizing instance and subclass checks
Thefollowingmethodsareusedtooverridethedefaultbehaviorofthe isinstance() andissubclass() built-in
functions.
Inparticular,themetaclass abc.ABCMeta implementsthesemethodsinordertoallowtheadditionofAbstractBase
Classes(ABCs)as“virtualbaseclasses”toanyclassortype(includingbuilt-intypes),includingotherABCs.
type. __instancecheck__ (self,instance )
Returntrueif instanceshouldbeconsidereda(directorindirect)instanceof class. Ifdefined,calledtoimple-
ment isinstance(instance, class) .
type. __subclasscheck__ (self,subclass )
Returntrueif subclassshouldbeconsidereda(directorindirect)subclassof class. Ifdefined,calledtoimple-
ment issubclass(subclass, class) .
Notethatthesemethodsarelookeduponthetype(metaclass)ofaclass. Theycannotbedefinedasclassmethodsin
theactualclass. Thisisconsistentwiththelookupofspecialmethodsthatarecalledoninstances,onlyinthiscase
theinstanceisitselfaclass.
µSee also
PEP 3119 - Introducing Abstract Base Classes
Includes the specification for customizing isinstance() andissubclass() behavior through
__instancecheck__() and__subclasscheck__() ,withmotivationforthisfunctionalityinthecon-
textofaddingAbstractBaseClasses(seethe abcmodule)tothelanguage.
3.3.5Emulating generic types
Whenusing type annotations ,itisoftenusefulto parameterize ageneric type usingPython’ssquare-bracketsnotation.
Forexample,theannotation list[int] mightbeusedtosignifya listinwhichalltheelementsareoftype int.
µSee also
PEP 484 - Type Hints
IntroducingPython’sframeworkfortypeannotations
Generic Alias Types
Documentationforobjectsrepresentingparameterizedgenericclasses
Generics, user-defined generics and typing.Generic
Documentationonhowtoimplementgenericclassesthatcanbeparameterizedatruntimeandunderstood
bystatictype-checkers.
Aclasscan generallyonlybeparameterizedifitdefinesthespecialclassmethod __class_getitem__() .
classmethod object. __class_getitem__ (cls,key)
Returnanobjectrepresentingthespecializationofagenericclassbytypeargumentsfoundin key.
Whendefinedonaclass, __class_getitem__() isautomaticallyaclassmethod. Assuch,thereisnoneed
forittobedecoratedwith @classmethod whenitisdefined.
The purpose of __class_getitem__
Thepurposeof __class_getitem__() istoallowruntimeparameterizationofstandard-librarygenericclassesin
ordertomoreeasilyapply type hintstotheseclasses.
Toimplementcustomgenericclassesthatcanbeparameterizedatruntimeandunderstoodbystatictype-checkers,
usersshouldeitherinheritfromastandardlibraryclassthatalreadyimplements __class_getitem__() ,orinherit
from typing.Generic ,whichhasitsownimplementationof __class_getitem__() .
46 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
Customimplementationsof __class_getitem__() onclassesdefinedoutsideofthestandardlibrarymaynotbe
understood by third-party type-checkers such as mypy. Using __class_getitem__() on any class for purposes
otherthantypehintingisdiscouraged.
__class_getitem__ versus __getitem__
Usually,the subscription ofanobjectusingsquarebracketswillcallthe __getitem__() instancemethoddefinedon
theobject’sclass. However,iftheobjectbeingsubscribedisitselfaclass,theclassmethod __class_getitem__()
maybecalledinstead. __class_getitem__() shouldreturnaGenericAliasobjectifitisproperlydefined.
Presentedwiththe expression obj[x],thePythoninterpreterfollowssomethinglikethefollowingprocesstodecide
whether __getitem__() or__class_getitem__() shouldbecalled:
from inspect import isclass
def subscribe (obj, x):
"""Return the result of the expression 'obj[x]'"""
class_of_obj =type (obj)
# If the class of obj defines __getitem__,
# call class_of_obj.__getitem__(obj, x)
ifhasattr (class_of_obj, '__getitem__ '):
return class_of_obj .__getitem__ (obj, x)
# Else, if obj is a class and defines __class_getitem__,
# call obj.__class_getitem__(x)
elif isclass(obj) and hasattr (obj, '__class_getitem__ '):
return obj.__class_getitem__(x)
# Else, raise an exception
else :
raise TypeError (
f"'{class_of_obj .__name__ }'object is not subscriptable "
)
InPython,allclassesarethemselvesinstancesofotherclasses. Theclassofaclassisknownasthatclass’s metaclass,
andmostclasseshavethe typeclassastheirmetaclass. typedoesnotdefine __getitem__() ,meaningthatexpres-
sionssuchas list[int] ,dict[str, float] andtuple[str, bytes] allresultin __class_getitem__()
beingcalled:
>>> # list has class "type" as its metaclass, like most classes:
>>> type (list )
<class 'type'>
>>> type (dict )==type (list )==type (tuple )==type (str)==type (bytes )
True
>>> # "list[int]" calls "list.__class_getitem__(int)"
>>> list [int]
list[int]
>>> # list.__class_getitem__ returns a GenericAlias object:
>>> type (list [int])
<class 'types.GenericAlias'>
However,ifaclasshasacustommetaclassthatdefines __getitem__() ,subscribingtheclassmayresultindifferent
behaviour. Anexampleofthiscanbefoundinthe enummodule:
>>> from enum import Enum
>>> class Menu (Enum):
... """A breakfast menu"""
(continuesonnextpage)
3.3. Special method names 47
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
... SPAM ='spam '
... BACON ='bacon '
...
>>> # Enum classes have a custom metaclass:
>>> type (Menu)
<class 'enum.EnumMeta'>
>>> # EnumMeta defines __getitem__,
>>> # so __class_getitem__ is not called,
>>> # and the result is not a GenericAlias object:
>>> Menu[ 'SPAM ']
<Menu.SPAM: 'spam'>
>>> type (Menu[ 'SPAM '])
<enum 'Menu'>
µSee also
PEP 560 - Core Support for typing module and generic types
Introducing __class_getitem__() , and outlining when a subscription results in
__class_getitem__() beingcalledinsteadof __getitem__()
3.3.6Emulating callable objects
object. __call__ (self[,args...])
Calledwhentheinstanceis“called”asafunction;ifthismethodisdefined, x(arg1, arg2, ...) roughly
translatesto type(x).__call__(x, arg1, ...) . The objectclassitselfdoesnotprovidethismethod.
3.3.7Emulating container types
Thefollowingmethodscanbedefinedtoimplementcontainerobjects. Noneofthemareprovidedbythe object
class itself. Containers usually are sequences(such as listsortuples) ormappings(likedictionaries ), but can
represent other containers as well. The first set of methods is used either to emulate a sequence or to emulate a
mapping; the difference is that for a sequence, the allowable keys should be the integers kfor which 0 <= k < N
where Nis the length of the sequence, or sliceobjects, which define a range of items. It is also recommended
that mappings provide the methods keys(),values() ,items(),get(),clear(),setdefault() ,pop(),
popitem() ,copy(), and update() behaving similar to those for Python’s standard dictionary objects. The
collections.abc module provides a MutableMapping abstract base class to help create those methods from
a base set of __getitem__() ,__setitem__() ,__delitem__() , and keys(). Mutable sequences should
provide methods append() ,count(),index(),extend() ,insert() ,pop(),remove() ,reverse() and
sort(),likePythonstandard listobjects. Finally,sequencetypesshouldimplementaddition(meaningconcate-
nation)andmultiplication(meaningrepetition)bydefiningthemethods __add__() ,__radd__() ,__iadd__() ,
__mul__() ,__rmul__() and__imul__() described below; they should not define other numerical operators.
It is recommended that both mappings and sequences implement the __contains__() method to allow efficient
useofthe inoperator; formappings, inshouldsearchthemapping’skeys; forsequences,itshouldsearchthrough
the values. It is further recommended that both mappings and sequences implement the __iter__() method to
allowefficientiterationthroughthecontainer; formappings, __iter__() shoulditeratethroughtheobject’skeys;
forsequences,itshoulditeratethroughthevalues.
object. __len__ (self)
Calledtoimplementthebuilt-infunction len(). Shouldreturnthelengthoftheobject,aninteger >=0. Also,
anobjectthatdoesn’tdefinea __bool__() methodandwhose __len__() methodreturnszeroisconsidered
tobefalseinaBooleancontext.
CPython implementation detail: In CPython, the length is required to be at most sys.maxsize . If the
lengthislargerthan sys.maxsize somefeatures(suchas len())mayraise OverflowError . Toprevent
raising OverflowError bytruthvaluetesting,anobjectmustdefinea __bool__() method.
48 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
object. __length_hint__ (self)
Calledtoimplement operator.length_hint() . Shouldreturnanestimatedlengthfortheobject(which
maybegreaterorlessthantheactuallength). Thelengthmustbeaninteger >=0. Thereturnvaluemayalso
beNotImplemented ,whichistreatedthesameasifthe __length_hint__ methoddidn’texistatall. This
methodispurelyanoptimizationandisneverrequiredforcorrectness.
Addedinversion3.4.
®Note
Slicingisdoneexclusivelywiththefollowingthreemethods. Acalllike
a[1:2]=b
istranslatedto
a[slice (1,2,None )]=b
andsoforth. Missingsliceitemsarealwaysfilledinwith None.
object. __getitem__ (self,key)
Called to implement evaluation of self[key] . For sequencetypes, the accepted keys should be integers.
Optionally, they may support sliceobjects as well. Negative index support is also optional. If keyis of an
inappropriate type, TypeError may be raised; if keyis a value outside the set of indexes for the sequence
(afteranyspecialinterpretationofnegativevalues), IndexError shouldberaised. For mappingtypes,if key
ismissing(notinthecontainer), KeyError shouldberaised.
®Note
forloops expect that an IndexError will be raised for illegal indexes to allow proper detection of the
endofthesequence.
®Note
When subscripting aclass, the special class method __class_getitem__() may be called instead of
__getitem__() . See __class_getitem__ versus __getitem__ formoredetails.
object. __setitem__ (self,key,value )
Called to implement assignment to self[key] . Same note as for __getitem__() . This should only be
implementedformappingsiftheobjectssupportchangestothevaluesforkeys,orifnewkeyscanbeadded,
orforsequencesifelementscanbereplaced. Thesameexceptionsshouldberaisedforimproper keyvalues
asforthe __getitem__() method.
object. __delitem__ (self,key)
Called to implement deletion of self[key] . Same note as for __getitem__() . This should only be im-
plementedformappingsiftheobjectssupportremovalofkeys,orforsequencesifelementscanberemoved
fromthesequence. Thesameexceptionsshouldberaisedforimproper keyvaluesasforthe __getitem__()
method.
object. __missing__ (self,key)
Calledby dict.__getitem__() toimplement self[key] fordictsubclasseswhenkeyisnotinthedictio-
nary.
object. __iter__ (self)
This method is called when an iteratoris required for a container. This method should return a new iterator
objectthatcaniterateoveralltheobjectsinthecontainer. Formappings,itshoulditerateoverthekeysofthe
container.
3.3. Special method names 49
The Python Language Reference, Release 3.13.0
object. __reversed__ (self)
Called(ifpresent)bythe reversed() built-intoimplementreverseiteration. Itshouldreturnanewiterator
objectthatiteratesoveralltheobjectsinthecontainerinreverseorder.
Ifthe __reversed__() methodisnotprovided,the reversed() built-inwillfallbacktousingthesequence
protocol( __len__() and__getitem__() ). Objectsthatsupportthesequenceprotocolshouldonlyprovide
__reversed__() if they can provide an implementation that is more efficient than the one provided by
reversed() .
The membership test operators ( inandnot in) are normally implemented as an iteration through a container.
However, container objects can supply the following special method with a more efficient implementation, which
alsodoesnotrequiretheobjectbeiterable.
object. __contains__ (self,item)
Called to implement membership test operators. Should return true if itemis inself, false otherwise. For
mappingobjects,thisshouldconsiderthekeysofthemappingratherthanthevaluesorthekey-itempairs.
For objects that don’t define __contains__() , the membership test first tries iteration via __iter__() ,
thentheoldsequenceiterationprotocolvia __getitem__() ,seethis section in the language reference .
3.3.8Emulating numeric types
Thefollowingmethodscanbedefinedtoemulatenumericobjects. Methodscorrespondingtooperationsthatarenot
supportedbytheparticularkindofnumberimplemented(e.g.,bitwiseoperationsfornon-integralnumbers)should
beleftundefined.
object. __add__ (self,other)
object. __sub__ (self,other)
object. __mul__ (self,other)
object. __matmul__ (self,other)
object. __truediv__ (self,other)
object. __floordiv__ (self,other)
object. __mod__ (self,other)
object. __divmod__ (self,other)
object. __pow__ (self,other[,modulo])
object. __lshift__ (self,other)
object. __rshift__ (self,other)
object. __and__ (self,other)
object. __xor__ (self,other)
object. __or__ (self,other)
These methods are called to implement the binary arithmetic operations ( +,-,*,@,/,//,%,divmod() ,
pow(),**,<<,>>,&,^,|). Forinstance,toevaluatetheexpression x + y,where xisaninstanceofaclass
thathasan __add__() method, type(x).__add__(x, y) iscalled. The __divmod__() methodshould
betheequivalenttousing __floordiv__() and__mod__() ;itshouldnotberelatedto __truediv__() .
Note that __pow__() should be defined to accept an optional third argument if the ternary version of the
built-in pow()functionistobesupported.
If one of those methods does not support the operation with the supplied arguments, it should return
NotImplemented .
object. __radd__ (self,other)
object. __rsub__ (self,other)
object. __rmul__ (self,other)
object. __rmatmul__ (self,other)
object. __rtruediv__ (self,other)
object. __rfloordiv__ (self,other)
50 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
object. __rmod__ (self,other)
object. __rdivmod__ (self,other)
object. __rpow__ (self,other[,modulo])
object. __rlshift__ (self,other)
object. __rrshift__ (self,other)
object. __rand__ (self,other)
object. __rxor__ (self,other)
object. __ror__ (self,other)
These methods are called to implement the binary arithmetic operations ( +,-,*,@,/,//,%,divmod() ,
pow(),**,<<,>>,&,^,|) with reflected (swapped) operands. These functions are only called if the left
operanddoesnotsupportthecorrespondingoperation3andtheoperandsareofdifferenttypes.4Forinstance,
toevaluatetheexpression x - y,where yisaninstanceofaclassthathasan __rsub__() method, type(y).
__rsub__(y, x) iscalledif type(x).__sub__(x, y) returns NotImplemented .
Notethatternary pow()willnottrycalling __rpow__() (thecoercionruleswouldbecometoocomplicated).
®Note
Iftherightoperand’stypeisasubclassoftheleftoperand’stypeandthatsubclassprovidesadifferentim-
plementationofthereflectedmethodfortheoperation,thismethodwillbecalledbeforetheleftoperand’s
non-reflectedmethod. Thisbehaviorallowssubclassestooverridetheirancestors’operations.
object. __iadd__ (self,other)
object. __isub__ (self,other)
object. __imul__ (self,other)
object. __imatmul__ (self,other)
object. __itruediv__ (self,other)
object. __ifloordiv__ (self,other)
object. __imod__ (self,other)
object. __ipow__ (self,other[,modulo])
object. __ilshift__ (self,other)
object. __irshift__ (self,other)
object. __iand__ (self,other)
object. __ixor__ (self,other)
object. __ior__ (self,other)
Thesemethodsarecalledtoimplementtheaugmentedarithmeticassignments( +=,-=,*=,@=,/=,//=,%=,
**=,<<=,>>=,&=,^=,|=). Thesemethodsshouldattempttodotheoperationin-place(modifying self)and
returntheresult(whichcouldbe,butdoesnothavetobe, self). Ifaspecificmethodisnotdefined,orifthat
methodreturns NotImplemented ,theaugmentedassignmentfallsbacktothenormalmethods. Forinstance,
ifxis an instance of a class with an __iadd__() method, x += yis equivalent to x = x.__iadd__(y)
. If__iadd__() doesnotexist,orif x.__iadd__(y) returns NotImplemented ,x.__add__(y) andy.
__radd__(x) areconsidered,aswiththeevaluationof x + y. Incertainsituations,augmentedassignment
canresultinunexpectederrors(seefaq-augmented-assignment-tuple-error),butthisbehaviorisinfactpartof
thedatamodel.
object. __neg__ (self)
object. __pos__ (self)
object. __abs__ (self)
3“Doesnotsupport”heremeansthattheclasshasnosuchmethod,orthemethodreturns NotImplemented . Donotsetthemethodto None
ifyouwanttoforcefallbacktotherightoperand’sreflectedmethod—thatwillinsteadhavetheoppositeeffectofexplicitly blockingsuchfallback.
4Foroperandsofthesametype,itisassumedthatifthenon-reflectedmethod–suchas __add__() –failsthentheoveralloperationisnot
supported,whichiswhythereflectedmethodisnotcalled.
3.3. Special method names 51
The Python Language Reference, Release 3.13.0
object. __invert__ (self)
Calledtoimplementtheunaryarithmeticoperations( -,+,abs()and~).
object. __complex__ (self)
object. __int__ (self)
object. __float__ (self)
Called to implement the built-in functions complex() ,int()andfloat(). Should return a value of the
appropriatetype.
object. __index__ (self)
Called to implement operator.index() , and whenever Python needs to losslessly convert the numeric
objecttoanintegerobject(suchasinslicing,orinthebuilt-in bin(),hex()andoct()functions). Presence
ofthismethodindicatesthatthenumericobjectisanintegertype. Mustreturnaninteger.
If__int__() ,__float__() and__complex__() are not defined then corresponding built-in functions
int(),float()andcomplex() fallbackto __index__() .
object. __round__ (self[,ndigits])
object. __trunc__ (self)
object. __floor__ (self)
object. __ceil__ (self)
Called to implement the built-in function round()andmathfunctions trunc(),floor()andceil().
Unless ndigitsispassedto __round__() allthesemethodsshouldreturnthevalueoftheobjecttruncatedto
anIntegral (typicallyan int).
Thebuilt-infunction int()fallsbackto __trunc__() ifneither __int__() nor__index__() isdefined.
Changedinversion3.11: Thedelegationof int()to__trunc__() isdeprecated.
3.3.9With Statement Context Managers
Acontext manager isanobjectthatdefinestheruntimecontexttobeestablishedwhenexecutinga withstatement.
Thecontextmanagerhandlestheentryinto,andtheexitfrom,thedesiredruntimecontextfortheexecutionofthe
block of code. Context managers are normally invoked using the withstatement (described in section The with
statement),butcanalsobeusedbydirectlyinvokingtheirmethods.
Typical uses of context managers include saving and restoring various kinds of global state, locking and unlocking
resources,closingopenedfiles,etc.
Formoreinformationoncontextmanagers,seetypecontextmanager. The objectclassitselfdoesnotprovidethe
contextmanagermethods.
object. __enter__ (self)
Enter the runtime context related to this object. The withstatement will bind this method’s return value to
thetarget(s)specifiedinthe asclauseofthestatement,ifany.
object. __exit__ (self,exc_type,exc_value,traceback )
Exittheruntimecontextrelatedtothisobject. Theparametersdescribetheexceptionthatcausedthecontext
tobeexited. Ifthecontextwasexitedwithoutanexception,allthreeargumentswillbe None.
Ifanexceptionissupplied,andthemethodwishestosuppresstheexception(i.e.,preventitfrombeingprop-
agated),itshouldreturnatruevalue. Otherwise,theexceptionwillbeprocessednormallyuponexitfromthis
method.
Notethat __exit__() methodsshouldnotreraisethepassed-inexception;thisisthecaller’sresponsibility.
µSee also
PEP 343 - The “with” statement
Thespecification,background,andexamplesforthePython withstatement.
52 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
3.3.10 Customizing positional arguments in class pattern matching
When using a class name in a pattern, positional arguments in the pattern are not allowed by default, i.e. case
MyClass(x, y) istypicallyinvalidwithoutspecialsupportin MyClass. Tobeabletousethatkindofpattern,the
classneedstodefinea __match_args__ attribute.
object. __match_args__
Thisclassvariablecanbeassignedatupleofstrings. Whenthisclassisusedinaclasspatternwithpositional
arguments,eachpositionalargumentwillbeconvertedintoakeywordargument,usingthecorrespondingvalue
in__match_args__ asthekeyword. Theabsenceofthisattributeisequivalenttosettingitto ().
For example, if MyClass.__match_args__ is("left", "center", "right") that means that case
MyClass(x, y) is equivalent to case MyClass(left=x, center=y) . Note that the number of arguments
inthepatternmustbesmallerthanorequaltothenumberofelementsin __match_args__ ;ifitislarger,thepattern
matchattemptwillraisea TypeError .
Addedinversion3.10.
µSee also
PEP 634 - Structural Pattern Matching
ThespecificationforthePython matchstatement.
3.3.11 Emulating buffer types
ThebufferprotocolprovidesawayforPythonobjectstoexposeefficientaccesstoalow-levelmemoryarray. This
protocol is implemented by builtin types such as bytesandmemoryview , and third-party libraries may define
additionalbuffertypes.
WhilebuffertypesareusuallyimplementedinC,itisalsopossibletoimplementtheprotocolinPython.
object. __buffer__ (self,flags)
Calledwhenabufferisrequestedfrom self(forexample,bythe memoryview constructor). The flagsargument
isanintegerrepresentingthekindofbufferrequested,affectingforexamplewhetherthereturnedbufferisread-
onlyorwritable. inspect.BufferFlags providesaconvenientwaytointerprettheflags. Themethodmust
returna memoryview object.
object. __release_buffer__ (self,buffer )
Calledwhen a bufferisnolongerneeded. The bufferargumentisa memoryview object thatwaspreviously
returnedby __buffer__() . Themethodmustreleaseanyresourcesassociatedwiththebuffer. Thismethod
shouldreturn None. Bufferobjectsthatdonotneedtoperformanycleanuparenotrequiredtoimplementthis
method.
Addedinversion3.12.
µSee also
PEP 688 - Making the buffer protocol accessible in Python
IntroducesthePython __buffer__ and__release_buffer__ methods.
collections.abc.Buffer
ABCforbuffertypes.
3.3.12 Special method lookup
For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an
object’s type, not in the object’s instance dictionary. That behaviour is the reason why the following code raises an
exception:
3.3. Special method names 53
The Python Language Reference, Release 3.13.0
>>> class C:
... pass
...
>>> c=C()
>>> c.__len__ =lambda :5
>>> len(c)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : object of type 'C' has no len()
Therationalebehindthisbehaviourlieswithanumberofspecialmethodssuchas __hash__() and__repr__()
that are implemented by all objects, including type objects. If the implicit lookup of these methods used the con-
ventionallookupprocess,theywouldfailwheninvokedonthetypeobjectitself:
>>> 1.__hash__ ()==hash (1)
True
>>> int.__hash__ ()==hash (int)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : descriptor '__hash__' of 'int' object needs an argument
Incorrectly attempting to invoke an unbound method of a class in this way is sometimes referred to as ‘metaclass
confusion’,andisavoidedbybypassingtheinstancewhenlookingupspecialmethods:
>>> type (1).__hash__ (1)==hash (1)
True
>>> type (int).__hash__ (int)==hash (int)
True
Inadditiontobypassinganyinstanceattributesintheinterestofcorrectness,implicitspecialmethodlookupgenerally
alsobypassesthe __getattribute__() methodevenoftheobject’smetaclass:
>>> class Meta (type ):
... def __getattribute__ (*args):
... print ("Metaclass getattribute invoked ")
... return type .__getattribute__ (*args)
...
>>> class C(object , metaclass =Meta):
... def __len__ (self ):
... return 10
... def __getattribute__ (*args):
... print ("Class getattribute invoked ")
... return object .__getattribute__ (*args)
...
>>> c=C()
>>> c.__len__ () # Explicit lookup via instance
Class getattribute invoked
10
>>> type (c).__len__ (c) # Explicit lookup via type
Metaclass getattribute invoked
10
>>> len(c) # Implicit lookup
10
Bypassingthe __getattribute__() machineryinthisfashionprovidessignificantscopeforspeedoptimisations
withintheinterpreter,atthecostofsomeflexibilityinthehandlingofspecialmethods(thespecialmethod mustbe
setontheclassobjectitselfinordertobeconsistentlyinvokedbytheinterpreter).
54 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
3.4Coroutines
3.4.1Awaitable Objects
Anawaitableobjectgenerallyimplementsan __await__() method. Coroutine objects returnedfrom async def
functionsareawaitable.
®Note
Thegenerator iterator objectsreturnedfromgeneratorsdecoratedwith types.coroutine() arealsoawaitable,
buttheydonotimplement __await__() .
object. __await__ (self)
Must return an iterator. Should be used to implement awaitableobjects. For instance, asyncio.Future
implementsthismethodtobecompatiblewiththe awaitexpression. The objectclassitselfisnotawaitable
anddoesnotprovidethismethod.
®Note
Thelanguagedoesn’tplaceanyrestrictiononthetypeorvalueoftheobjectsyieldedbytheiteratorreturned
by__await__ , as this is specific to the implementation of the asynchronous execution framework (e.g.
asyncio)thatwillbemanagingthe awaitableobject.
Addedinversion3.5.
µSee also
PEP 492foradditionalinformationaboutawaitableobjects.
3.4.2Coroutine Objects
Coroutine objects areawaitableobjects. A coroutine’s execution can be controlled by calling __await__() and
iteratingovertheresult. Whenthecoroutinehasfinishedexecutingandreturns,theiteratorraises StopIteration ,
andtheexception’s valueattributeholdsthereturnvalue. Ifthecoroutineraisesanexception, itispropagatedby
theiterator. Coroutinesshouldnotdirectlyraiseunhandled StopIteration exceptions.
Coroutines also have the methods listed below, which are analogous to those of generators (see Generator-iterator
methods). However,unlikegenerators,coroutinesdonotdirectlysupportiteration.
Changedinversion3.5.2: Itisa RuntimeError toawaitonacoroutinemorethanonce.
coroutine. send (value )
Starts or resumes execution of the coroutine. If valueisNone, this is equivalent to advancing the iterator
returnedby __await__() . Ifvalueisnot None,thismethoddelegatestothe send()methodoftheiterator
that caused the coroutine to suspend. The result (return value, StopIteration , or other exception) is the
sameaswheniteratingoverthe __await__() returnvalue,describedabove.
coroutine. throw (value )
coroutine. throw (type[,value[,traceback]])
Raisesthespecifiedexceptioninthecoroutine. Thismethoddelegatestothe throw()methodoftheiterator
thatcausedthecoroutinetosuspend,ifithassuchamethod. Otherwise,theexceptionisraisedatthesuspen-
sionpoint. Theresult(returnvalue, StopIteration ,orotherexception)isthesameaswheniteratingover
the__await__() returnvalue,describedabove. Iftheexceptionisnotcaughtinthecoroutine,itpropagates
backtothecaller.
Changedinversion3.12: Thesecondsignature(type[,value[,traceback]])isdeprecatedandmayberemoved
inafutureversionofPython.
3.4. Coroutines 55
The Python Language Reference, Release 3.13.0
coroutine. close ()
Causesthecoroutinetocleanitselfupandexit. Ifthecoroutineissuspended,thismethodfirstdelegatestothe
close()methodoftheiteratorthatcausedthecoroutinetosuspend,ifithassuchamethod. Thenitraises
GeneratorExit at the suspension point, causing the coroutine to immediately clean itself up. Finally, the
coroutineismarkedashavingfinishedexecuting,evenifitwasneverstarted.
Coroutineobjectsareautomaticallyclosedusingtheaboveprocesswhentheyareabouttobedestroyed.
3.4.3Asynchronous Iterators
Anasynchronous iterator cancallasynchronouscodeinits __anext__ method.
Asynchronousiteratorscanbeusedinan async for statement.
Theobjectclassitselfdoesnotprovidethesemethods.
object. __aiter__ (self)
Mustreturnan asynchronous iterator object.
object. __anext__ (self)
Mustreturnan awaitableresultinginanextvalueoftheiterator. Shouldraisea StopAsyncIteration error
whentheiterationisover.
Anexampleofanasynchronousiterableobject:
class Reader :
async def readline (self ):
...
def __aiter__ (self ):
return self
async def __anext__ (self ):
val =await self .readline()
ifval ==b'':
raise StopAsyncIteration
return val
Addedinversion3.5.
Changed in version 3.7: Prior to Python 3.7, __aiter__() could return an awaitablethat would resolve to an
asynchronous iterator .
StartingwithPython3.7, __aiter__() mustreturnanasynchronousiteratorobject. Returninganythingelsewill
resultina TypeError error.
3.4.4Asynchronous Context Managers
Anasynchronous context manager is acontext manager that is able to suspend execution in its __aenter__ and
__aexit__ methods.
Asynchronouscontextmanagerscanbeusedinan async with statement.
Theobjectclassitselfdoesnotprovidethesemethods.
object. __aenter__ (self)
Semanticallysimilarto __enter__() ,theonlydifferencebeingthatitmustreturnan awaitable.
object. __aexit__ (self,exc_type,exc_value,traceback )
Semanticallysimilarto __exit__() ,theonlydifferencebeingthatitmustreturnan awaitable.
Anexampleofanasynchronouscontextmanagerclass:
56 Chapter 3. Data model
The Python Language Reference, Release 3.13.0
class AsyncContextManager :
async def __aenter__ (self ):
await log( 'entering context ')
async def __aexit__ (self , exc_type, exc, tb):
await log( 'exiting context ')
Addedinversion3.5.
3.4. Coroutines 57
The Python Language Reference, Release 3.13.0
58 Chapter 3. Data model
CHAPTER
FOUR
EXECUTION MODEL
4.1Structure of a program
APythonprogramisconstructedfromcodeblocks. A blockisapieceofPythonprogramtextthatisexecutedasa
unit. Thefollowingareblocks: amodule,afunctionbody,andaclassdefinition. Eachcommandtypedinteractively
isablock. Ascriptfile(afilegivenasstandardinputtotheinterpreterorspecifiedasacommandlineargumentto
theinterpreter)isacodeblock. Ascriptcommand(acommandspecifiedontheinterpretercommandlinewiththe
-coption)isacodeblock. Amodulerunasatoplevelscript(asmodule __main__ )fromthecommandlineusing
a-margumentisalsoacodeblock. Thestringargumentpassedtothebuilt-infunctions eval()andexec()isa
codeblock.
Acodeblockisexecutedinan execution frame . Aframecontainssomeadministrativeinformation(usedfordebug-
ging)anddetermineswhereandhowexecutioncontinuesafterthecodeblock’sexecutionhascompleted.
4.2Naming and binding
4.2.1Binding of names
Namesrefertoobjects. Namesareintroducedbynamebindingoperations.
Thefollowingconstructsbindnames:
•formalparameterstofunctions,
•classdefinitions,
•functiondefinitions,
•assignmentexpressions,
•targetsthatareidentifiersifoccurringinanassignment:
–forloopheader,
–after asinawithstatement, exceptclause, except*clause,orintheas-patterninstructuralpattern
matching,
–inacapturepatterninstructuralpatternmatching
•importstatements.
•typestatements.
•type parameter lists .
Theimportstatementoftheform from ... import * bindsallnamesdefinedintheimportedmodule,except
thosebeginningwithanunderscore. Thisformmayonlybeusedatthemodulelevel.
Atargetoccurringina delstatementisalsoconsideredboundforthispurpose(thoughtheactualsemanticsareto
unbindthename).
Eachassignmentorimportstatementoccurswithinablockdefinedbyaclassorfunctiondefinitionoratthemodule
level(thetop-levelcodeblock).
59
The Python Language Reference, Release 3.13.0
Ifanameisboundinablock,itisalocalvariableofthatblock,unlessdeclaredas nonlocal orglobal. Ifaname
isboundatthemodulelevel,itisaglobalvariable. (Thevariablesofthemodulecodeblockarelocalandglobal.) If
avariableisusedinacodeblockbutnotdefinedthere,itisa free variable .
Eachoccurrenceofanameintheprogramtextreferstothe bindingofthatnameestablishedbythefollowingname
resolutionrules.
4.2.2Resolution of names
Ascopedefinesthevisibilityofanamewithinablock. Ifalocalvariableisdefinedinablock,itsscopeincludesthat
block. Ifthedefinitionoccursinafunctionblock,thescopeextendstoanyblockscontainedwithinthedefiningone,
unlessacontainedblockintroducesadifferentbindingforthename.
When a name is used in a code block, it is resolved using the nearest enclosing scope. The set of all such scopes
visibletoacodeblockiscalledtheblock’s environment .
When a name is not found at all, a NameError exception is raised. If the current scope is a function scope, and
the name refers to a local variable that has not yet been bound to a value at the point where the name is used, an
UnboundLocalError exceptionisraised. UnboundLocalError isasubclassof NameError .
Ifanamebindingoperationoccursanywherewithinacodeblock,allusesofthenamewithintheblockaretreated
asreferencestothecurrentblock. Thiscanleadtoerrorswhenanameisusedwithinablockbeforeitisbound. This
ruleissubtle. Pythonlacksdeclarationsandallowsnamebindingoperationstooccuranywherewithinacodeblock.
The local variables of a code block can be determined by scanning the entire text of the block for name binding
operations. SeetheFAQentryonUnboundLocalErrorforexamples.
Ifthe globalstatementoccurswithinablock,allusesofthenamesspecifiedinthestatementrefertothebindings
ofthosenamesinthetop-levelnamespace. Namesareresolvedinthetop-levelnamespacebysearchingtheglobal
namespace,i.e. thenamespaceofthemodulecontainingthecodeblock,andthebuiltinsnamespace,thenamespace
of the module builtins . The global namespace is searched first. If the names are not found there, the builtins
namespaceissearchednext. Ifthenamesarealsonotfoundinthebuiltinsnamespace,newvariablesarecreatedin
theglobalnamespace. Theglobalstatementmustprecedeallusesofthelistednames.
Theglobalstatementhasthesamescopeasanamebindingoperationinthesameblock. Ifthenearestenclosing
scopeforafreevariablecontainsaglobalstatement,thefreevariableistreatedasaglobal.
Thenonlocal statementcausescorrespondingnamestorefertopreviouslyboundvariablesinthenearestenclosing
functionscope. SyntaxError israisedatcompiletimeifthegivennamedoesnotexistinanyenclosingfunction
scope. Type parameters cannotbereboundwiththe nonlocal statement.
The namespace for a module is automatically created the first time a module is imported. The main module for a
scriptisalwayscalled __main__ .
Classdefinitionblocksandargumentsto exec()andeval()arespecialinthecontextofnameresolution. Aclass
definitionisanexecutablestatementthatmayuseanddefinenames. Thesereferencesfollowthenormalrulesforname
resolution with an exception that unbound local variables are looked up in the global namespace. The namespace
of the class definition becomes the attribute dictionary of the class. The scope of names defined in a class block
is limited to the class block; it does not extend to the code blocks of methods. This includes comprehensions and
generator expressions, but it does not include annotation scopes , which have access to their enclosing class scopes.
Thismeansthatthefollowingwillfail:
class A:
a=42
b=list (a+ifor iinrange (10))
However,thefollowingwillsucceed:
class A:
type Alias =Nested
class Nested :pass
print (A.Alias .__value__) # <type 'A.Nested'>
60 Chapter 4. Execution model
The Python Language Reference, Release 3.13.0
4.2.3Annotation scopes
Type parameter lists andtypestatementsintroduce annotation scopes ,whichbehavemostlylikefunctionscopes,but
withsomeexceptionsdiscussedbelow. Annotations currentlydonotuseannotationscopes,buttheyareexpectedto
useannotationscopesinPython3.13when PEP 649isimplemented.
Annotationscopesareusedinthefollowingcontexts:
•Typeparameterlistsfor generic type aliases .
•Typeparameterlistsfor generic functions . Agenericfunction’sannotationsareexecutedwithintheannotation
scope,butitsdefaultsanddecoratorsarenot.
•Type parameter lists for generic classes . A generic class’s base classes and keyword arguments are executed
withintheannotationscope,butitsdecoratorsarenot.
•Thebounds,constraints,anddefaultvaluesfortypeparameters( lazily evaluated ).
•Thevalueoftypealiases( lazily evaluated ).
Annotationscopesdifferfromfunctionscopesinthefollowingways:
•Annotation scopes have access to their enclosing class namespace. If an annotation scope is immediately
withinaclassscope,orwithinanotherannotationscopethatisimmediatelywithinaclassscope,thecodein
theannotationscopecanusenamesdefinedintheclassscopeasifitwereexecuteddirectlywithintheclass
body. Thiscontrastswithregularfunctionsdefinedwithinclasses, whichcannotaccessnamesdefinedinthe
classscope.
•Expressions in annotation scopes cannot contain yield,yield from ,await, or:=expressions. (These
expressionsareallowedinotherscopescontainedwithintheannotationscope.)
•Names defined in annotation scopes cannot be rebound with nonlocal statements in inner scopes. This
includes only type parameters, as no other syntactic elements that can appear within annotation scopes can
introducenewnames.
•While annotation scopes have an internal name, that name is not reflected in the qualified name of objects
definedwithinthescope. Instead, the __qualname__ ofsuchobjectsisasiftheobjectweredefinedinthe
enclosingscope.
Addedinversion3.12: AnnotationscopeswereintroducedinPython3.12aspartof PEP 695.
Changedinversion3.13: Annotationscopesarealsousedfortypeparameterdefaults,asintroducedby PEP 696.
4.2.4Lazy evaluation
Thevaluesoftypealiasescreatedthroughthe typestatementare lazily evaluated . Thesameappliestothebounds,
constraints, and default values of type variables created through the type parameter syntax . This means that they
are not evaluated when the type alias or type variable is created. Instead, they are only evaluated when doing so is
necessarytoresolveanattributeaccess.
Example:
>>> type Alias =1/0
>>> Alias .__value__
Traceback (most recent call last):
...
ZeroDivisionError : division by zero
>>> def func [T: 1/0](): pass
>>> T=func .__type_params__[ 0]
>>> T.__bound__
Traceback (most recent call last):
...
ZeroDivisionError : division by zero
Heretheexceptionisraisedonlywhenthe __value__ attributeofthetypealiasorthe __bound__ attributeofthe
typevariableisaccessed.
4.2. Naming and binding 61
The Python Language Reference, Release 3.13.0
This behavior is primarily useful for references to types that have not yet been defined when the type alias or type
variableiscreated. Forexample,lazyevaluationenablescreationofmutuallyrecursivetypealiases:
from typing import Literal
type SimpleExpr =int |Parenthesized
type Parenthesized =tuple [Literal[ "("], Expr, Literal[ ")"]]
type Expr =SimpleExpr |tuple [SimpleExpr, Literal[ "+","-"], Expr]
Lazily evaluated values are evaluated in annotation scope , which means that names that appear inside the lazily
evaluatedvaluearelookedupasiftheywereusedintheimmediatelyenclosingscope.
Addedinversion3.12.
4.2.5Builtins and restricted execution
CPython implementation detail: Users should not touch __builtins__ ; it is strictly an implementation detail.
Users wanting to override values in the builtins namespace should importthebuiltins module and modify its
attributesappropriately.
The builtins namespace associated with the execution of a code block is actually found by looking up the name
__builtins__ in its global namespace; this should be a dictionary or a module (in the latter case the module’s
dictionaryisused). Bydefault,wheninthe __main__ module, __builtins__ isthebuilt-inmodule builtins ;
wheninanyothermodule, __builtins__ isanaliasforthedictionaryofthe builtins moduleitself.
4.2.6Interaction with dynamic features
Name resolution of free variables occurs at runtime, not at compile time. This means that the following code will
print42:
i=10
def f():
print (i)
i=42
f()
Theeval()andexec()functionsdonothaveaccesstothefullenvironmentforresolvingnames. Namesmaybe
resolved in the local and global namespaces of the caller. Free variables are not resolved in the nearest enclosing
namespace,butintheglobalnamespace.1Theexec()andeval()functionshaveoptionalargumentstooverride
theglobalandlocalnamespace. Ifonlyonenamespaceisspecified,itisusedforboth.
4.3Exceptions
Exceptions are a means of breaking out of the normal flow of control of a code block in order to handle errors or
other exceptional conditions. An exception is raisedat the point where the error is detected; it may be handledby
thesurroundingcodeblockorbyanycodeblockthatdirectlyorindirectlyinvokedthecodeblockwheretheerror
occurred.
The Python interpreter raises an exception when it detects a run-time error (such as division by zero). A Python
programcanalsoexplicitlyraiseanexceptionwiththe raisestatement. Exceptionhandlersarespecifiedwiththe
try…exceptstatement. The finallyclauseofsuchastatementcanbeusedtospecifycleanupcodewhichdoes
nothandletheexception,butisexecutedwhetheranexceptionoccurredornotintheprecedingcode.
Pythonusesthe“termination”modeloferrorhandling: anexceptionhandlercanfindoutwhathappenedandcontinue
execution at an outer level, but it cannot repair the cause of the error and retry the failing operation (except by re-
enteringtheoffendingpieceofcodefromthetop).
Whenanexceptionisnothandledatall,theinterpreterterminatesexecutionoftheprogram,orreturnstoitsinter-
activemainloop. Ineithercase,itprintsastacktraceback,exceptwhentheexceptionis SystemExit .
1Thislimitationoccursbecausethecodethatisexecutedbytheseoperationsisnotavailableatthetimethemoduleiscompiled.
62 Chapter 4. Execution model
The Python Language Reference, Release 3.13.0
Exceptionsareidentifiedbyclassinstances. The exceptclauseisselecteddependingontheclassoftheinstance:
it must reference the class of the instance or a non-virtual base class thereof. The instance can be received by the
handlerandcancarryadditionalinformationabouttheexceptionalcondition.
®Note
Exception messages are not part of the Python API. Their contents may change from one version of Python
to the next without warning and should not be relied on by code which will run under multiple versions of the
interpreter.
Seealsothedescriptionofthe trystatementinsection The try statement andraisestatementinsection The raise
statement.
4.3. Exceptions 63
The Python Language Reference, Release 3.13.0
64 Chapter 4. Execution model
CHAPTER
FIVE
THE IMPORT SYSTEM
Pythoncodeinone modulegainsaccesstothecodeinanothermodulebytheprocessof importingit. The import
statementisthemostcommonwayofinvokingtheimportmachinery,butitisnottheonlyway. Functionssuchas
importlib.import_module() andbuilt-in __import__() canalsobeusedtoinvoketheimportmachinery.
Theimportstatement combines two operations; it searches for the named module, then it binds the results of
that search to a name in the local scope. The search operation of the importstatement is defined as a call to the
__import__() function,withtheappropriatearguments. Thereturnvalueof __import__() isusedtoperform
thenamebindingoperationofthe importstatement. Seethe importstatementfortheexactdetailsofthatname
bindingoperation.
A direct call to __import__() performs only the module search and, if found, the module creation operation.
Whilecertainside-effectsmayoccur,suchastheimportingofparentpackages,andtheupdatingofvariouscaches
(including sys.modules ),onlythe importstatementperformsanamebindingoperation.
Whenan importstatementisexecuted,thestandardbuiltin __import__() functioniscalled. Othermechanisms
forinvokingtheimportsystem(suchas importlib.import_module() )maychoosetobypass __import__()
andusetheirownsolutionstoimplementimportsemantics.
Whenamoduleisfirstimported,Pythonsearchesforthemoduleandiffound,itcreatesamoduleobject1,initializing
it. Ifthenamedmodulecannotbefound,a ModuleNotFoundError israised. Pythonimplementsvariousstrategies
tosearchforthenamedmodulewhentheimportmachineryisinvoked. Thesestrategiescanbemodifiedandextended
byusingvarioushooksdescribedinthesectionsbelow.
Changed in version 3.3: The import system has been updated to fully implement the second phase of PEP 302.
Thereisnolongeranyimplicitimportmachinery-thefullimportsystemisexposedthrough sys.meta_path . In
addition,nativenamespacepackagesupporthasbeenimplemented(see PEP 420).
5.1importlib
Theimportlib module provides a rich API for interacting with the import system. For example importlib.
import_module() provides a recommended, simpler API than built-in __import__() for invoking the import
machinery. Refertothe importlib librarydocumentationforadditionaldetail.
5.2Packages
Python has only one type of module object, and all modules are of this type, regardless of whether the module is
implemented in Python, C, or something else. To help organize modules and provide a naming hierarchy, Python
hasaconceptof packages.
Youcanthinkofpackagesasthedirectoriesonafilesystemandmodulesasfileswithindirectories, butdon’ttake
this analogy too literally since packages and modules need not originate from the file system. For the purposes of
thisdocumentation,we’llusethisconvenientanalogyofdirectoriesandfiles. Likefilesystemdirectories,packages
areorganizedhierarchically,andpackagesmaythemselvescontainsubpackages,aswellasregularmodules.
1Seetypes.ModuleType .
65
The Python Language Reference, Release 3.13.0
It’simportanttokeepinmindthatallpackagesaremodules,butnotallmodulesarepackages. Orputanotherway,
packagesarejustaspecialkindofmodule. Specifically,anymodulethatcontainsa __path__ attributeisconsidered
apackage.
Allmoduleshaveaname. Subpackagenamesareseparatedfromtheirparentpackagenamebyadot,akintoPython’s
standardattributeaccesssyntax. Thusyoumighthaveapackagecalled email,whichinturnhasasubpackagecalled
email.mime andamodulewithinthatsubpackagecalled email.mime.text .
5.2.1Regular packages
Python defines two types of packages, regular packages andnamespace packages . Regular packages are traditional
packagesas they existedin Python3.2 andearlier. A regularpackageis typicallyimplemented as a directorycon-
tainingan __init__.py file. Whenaregularpackageisimported, this __init__.py fileisimplicitlyexecuted,
and the objects it defines are bound to names in the package’s namespace. The __init__.py file can contain the
samePythoncodethatanyothermodulecancontain,andPythonwilladdsomeadditionalattributestothemodule
whenitisimported.
Forexample,thefollowingfilesystemlayoutdefinesatoplevel parentpackagewiththreesubpackages:
parent /
__init__ .py
one/
__init__ .py
two/
__init__ .py
three /
__init__ .py
Importing parent.one willimplicitlyexecute parent/__init__.py andparent/one/__init__.py . Subse-
quentimportsof parent.two orparent.three willexecute parent/two/__init__.py andparent/three/
__init__.py respectively.
5.2.2Namespace packages
Anamespacepackageisacompositeofvarious portions,whereeachportioncontributesasubpackagetotheparent
package. Portionsmayresideindifferentlocationsonthefilesystem. Portionsmayalsobefoundinzipfiles,onthe
network, or anywhere else that Python searches during import. Namespace packages may or may not correspond
directlytoobjectsonthefilesystem;theymaybevirtualmodulesthathavenoconcreterepresentation.
Namespacepackagesdonotuseanordinarylistfortheir __path__ attribute. Theyinsteaduseacustomiterabletype
whichwillautomaticallyperformanewsearchforpackageportionsonthenextimportattemptwithinthatpackage
ifthepathoftheirparentpackage(or sys.path foratoplevelpackage)changes.
Withnamespacepackages,thereisno parent/__init__.py file. Infact,theremaybemultiple parentdirectories
found during import search, where each one is provided by a different portion. Thus parent/one may not be
physically located next to parent/two . In this case, Python will create a namespace package for the top-level
parentpackagewheneveritoroneofitssubpackagesisimported.
Seealso PEP 420forthenamespacepackagespecification.
5.3Searching
Tobeginthesearch, Pythonneedsthe fully qualified nameofthemodule(orpackage, butforthepurposesofthis
discussion,thedifferenceisimmaterial)beingimported. Thisnamemaycomefromvariousargumentstothe import
statement,orfromtheparameterstothe importlib.import_module() or__import__() functions.
This name will be used in various phases of the import search, and it may be the dotted path to a submodule, e.g.
foo.bar.baz . Inthiscase, Pythonfirsttriestoimport foo, then foo.bar, andfinally foo.bar.baz . Ifanyof
theintermediateimportsfail,a ModuleNotFoundError israised.
66 Chapter 5. The import system
The Python Language Reference, Release 3.13.0
5.3.1The module cache
Thefirstplacecheckedduringimportsearchis sys.modules . Thismappingservesasacacheofallmodulesthat
have been previously imported, including the intermediate paths. So if foo.bar.baz was previously imported,
sys.modules will contain entries for foo,foo.bar, and foo.bar.baz . Each key will have as its value the
correspondingmoduleobject.
During import, the module name is looked up in sys.modules and if present, the associated value is the module
satisfyingtheimport,andtheprocesscompletes. However,ifthevalueis None,thena ModuleNotFoundError is
raised. Ifthemodulenameismissing,Pythonwillcontinuesearchingforthemodule.
sys.modules iswritable. Deletingakeymaynotdestroytheassociatedmodule(asothermodulesmayholdrefer-
encestoit),butitwillinvalidatethecacheentryforthenamedmodule,causingPythontosearchanewforthenamed
moduleuponitsnextimport. Thekeycanalsobeassignedto None,forcingthenextimportofthemoduletoresult
inaModuleNotFoundError .
Bewarethough,asifyoukeepareferencetothemoduleobject,invalidateitscacheentryin sys.modules ,andthen
re-import the named module, the two module objects will notbe the same. By contrast, importlib.reload()
willreusethe samemoduleobject,andsimplyreinitialisethemodulecontentsbyrerunningthemodule’scode.
5.3.2Finders and loaders
If the named module is not found in sys.modules , then Python’s import protocol is invoked to find and load the
module. Thisprotocolconsistsoftwoconceptualobjects, findersandloaders. Afinder’sjobistodeterminewhether
itcanfindthenamedmoduleusingwhateverstrategyitknowsabout. Objectsthatimplementbothoftheseinterfaces
arereferredtoas importers-theyreturnthemselveswhentheyfindthattheycanloadtherequestedmodule.
Pythonincludesanumberofdefaultfindersandimporters. Thefirstoneknowshowtolocatebuilt-inmodules,and
the second knows how to locate frozen modules. A third default finder searches an import path for modules. The
import path isalistoflocationsthatmaynamefilesystempathsorzipfiles. Itcanalsobeextendedtosearchforany
locatableresource,suchasthoseidentifiedbyURLs.
Theimportmachineryisextensible,sonewfinderscanbeaddedtoextendtherangeandscopeofmodulesearching.
Findersdonotactuallyloadmodules. Iftheycanfindthenamedmodule,theyreturna module spec ,anencapsulation
ofthemodule’simport-relatedinformation,whichtheimportmachinerythenuseswhenloadingthemodule.
Thefollowingsectionsdescribetheprotocolforfindersandloadersinmoredetail,includinghowyoucancreateand
registernewonestoextendtheimportmachinery.
Changed in version 3.4: In previous versions of Python, finders returned loadersdirectly, whereas now they return
modulespecswhich containloaders. Loadersarestillusedduringimportbuthavefewerresponsibilities.
5.3.3Import hooks
Theimportmachineryisdesignedtobeextensible;theprimarymechanismforthisarethe import hooks . Thereare
twotypesofimporthooks: meta hooks andimport path hooks .
Metahooksarecalledatthestartofimportprocessing,beforeanyotherimportprocessinghasoccurred,otherthan
sys.modules cachelookup. Thisallowsmetahookstooverride sys.path processing, frozenmodules, oreven
built-inmodules. Metahooksareregisteredbyaddingnewfinderobjectsto sys.meta_path ,asdescribedbelow.
Import path hooks are called as part of sys.path (orpackage.__path__ ) processing, at the point where their
associatedpathitemisencountered. Importpathhooksareregisteredbyaddingnewcallablesto sys.path_hooks
asdescribedbelow.
5.3.4The meta path
When the named module is not found in sys.modules , Python next searches sys.meta_path , which contains
a list of meta path finder objects. These finders are queried in order to see if they know how to handle the named
module. Meta path finders mustimplement a method called find_spec() which takes three arguments: a name,
an import path, and (optionally) a target module. The meta path finder can use any strategy it wants to determine
whetheritcanhandlethenamedmoduleornot.
5.3. Searching 67
The Python Language Reference, Release 3.13.0
Ifthemetapathfinderknowshowtohandlethenamedmodule,itreturnsaspecobject. Ifitcannothandlethenamed
module, it returns None. Ifsys.meta_path processing reaches the end of its list without returning a spec, then
aModuleNotFoundError is raised. Any other exceptions raised are simply propagated up, aborting the import
process.
Thefind_spec() methodofmetapathfindersiscalledwithtwoorthreearguments. Thefirstisthefullyqualified
name of the module being imported, for example foo.bar.baz . The second argument is the path entries to use
forthemodulesearch. Fortop-levelmodules,thesecondargumentis None,butforsubmodulesorsubpackages,the
second argument is the value of the parent package’s __path__ attribute. If the appropriate __path__ attribute
cannotbeaccessed,a ModuleNotFoundError israised. Thethirdargumentisanexistingmoduleobjectthatwill
bethetargetofloadinglater. Theimportsystempassesinatargetmoduleonlyduringreload.
The meta path may be traversed multiple times for a single import request. For example, assuming none of the
modules involved has already been cached, importing foo.bar.baz will first perform a top level import, calling
mpf.find_spec("foo", None, None) on each meta path finder ( mpf). After foohas been imported, foo.
barwill be imported by traversing the meta path a second time, calling mpf.find_spec("foo.bar", foo.
__path__, None) . Once foo.barhasbeenimported,thefinaltraversalwillcall mpf.find_spec("foo.bar.
baz", foo.bar.__path__, None) .
Somemetapathfindersonlysupporttoplevelimports. Theseimporterswillalwaysreturn Nonewhenanythingother
thanNoneispassedasthesecondargument.
Python’sdefault sys.meta_path hasthreemetapathfinders,onethatknowshowtoimportbuilt-inmodules,one
thatknowshowtoimportfrozenmodules,andonethatknowshowtoimportmodulesfroman import path (i.e. the
path based finder ).
Changedinversion3.4: The find_spec() methodofmetapathfindersreplaced find_module() ,whichisnow
deprecated. Whileitwillcontinuetoworkwithoutchange, theimportmachinerywilltryitonlyifthefinderdoes
notimplement find_spec() .
Changedinversion3.10: Useof find_module() bytheimportsystemnowraises ImportWarning .
Changedinversion3.12: find_module() hasbeenremoved. Use find_spec() instead.
5.4Loading
Ifandwhenamodulespecisfound,theimportmachinerywilluseit(andtheloaderitcontains)whenloadingthe
module. Hereisanapproximationofwhathappensduringtheloadingportionofimport:
module =None
ifspec .loader isnot None and hasattr (spec .loader, 'create_module '):
# It is assumed 'exec_module' will also be defined on the loader.
module =spec .loader .create_module(spec)
ifmodule isNone :
module =ModuleType(spec .name)
# The import-related module attributes get set here:
_init_module_attrs(spec, module)
ifspec .loader isNone :
# unsupported
raise ImportError
ifspec .origin isNone and spec .submodule_search_locations isnot None :
# namespace package
sys.modules[spec .name] =module
elif not hasattr (spec .loader, 'exec_module '):
module =spec .loader .load_module(spec .name)
else :
sys.modules[spec .name] =module
try:
spec .loader .exec_module(module)
(continuesonnextpage)
68 Chapter 5. The import system
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
except BaseException :
try:
del sys.modules[spec .name]
except KeyError :
pass
raise
return sys.modules[spec .name]
Notethefollowingdetails:
•Ifthereisanexistingmoduleobjectwiththegivennamein sys.modules ,importwillhavealreadyreturned
it.
•Themodulewillexistin sys.modules beforetheloaderexecutesthemodulecode. Thisiscrucialbecause
the module code may (directly or indirectly) import itself; adding it to sys.modules beforehand prevents
unboundedrecursionintheworstcaseandmultipleloadinginthebest.
•If loading fails, the failing module – and only the failing module – gets removed from sys.modules . Any
modulealreadyinthe sys.modules cache,andanymodulethatwassuccessfullyloadedasaside-effect,must
remaininthecache. Thiscontrastswithreloadingwhereeventhefailingmoduleisleftin sys.modules .
•After the module is created but before execution, the import machinery sets the import-related module at-
tributes(“_init_module_attrs”inthepseudo-codeexampleabove),assummarizedina later section .
•Moduleexecutionisthekeymomentofloadinginwhichthemodule’snamespacegetspopulated. Execution
isentirelydelegatedtotheloader,whichgetstodecidewhatgetspopulatedandhow.
•The module created during loading and passed to exec_module() may not be the one returned at the end of
import2.
Changed in version 3.4: The import system has taken over the boilerplate responsibilities of loaders. These were
previouslyperformedbythe importlib.abc.Loader.load_module() method.
5.4.1Loaders
Module loaders provide the critical function of loading: module execution. The import machinery calls the
importlib.abc.Loader.exec_module() method with a single argument, the module object to execute. Any
valuereturnedfrom exec_module() isignored.
Loadersmustsatisfythefollowingrequirements:
•If the module is a Python module (as opposed to a built-in module or a dynamically loaded extension), the
loadershouldexecutethemodule’scodeinthemodule’sglobalnamespace( module.__dict__ ).
•Iftheloadercannotexecutethemodule,itshouldraisean ImportError ,althoughanyotherexceptionraised
during exec_module() willbepropagated.
In many cases, the finder and loader can be the same object; in such cases the find_spec() method would just
returnaspecwiththeloadersetto self.
Module loaders may opt in to creating the module object during loading by implementing a create_module()
method. It takes one argument, the module spec, and returns the new module object to use during loading.
create_module() does not need to set any attributes on the module object. If the method returns None, the
importmachinerywillcreatethenewmoduleitself.
Addedinversion3.4: The create_module() methodofloaders.
Changedinversion3.4: The load_module() methodwasreplacedby exec_module() andtheimportmachinery
assumedalltheboilerplateresponsibilitiesofloading.
2The importlib implementation avoids using the return value directly. Instead, it gets the module object by looking the module name up
insys.modules . The indirect effect of this is that an imported module may replace itself in sys.modules . This is implementation-specific
behaviorthatisnotguaranteedtoworkinotherPythonimplementations.
5.4. Loading 69
The Python Language Reference, Release 3.13.0
Forcompatibilitywithexistingloaders,theimportmachinerywillusethe load_module() methodofloadersifit
existsandtheloaderdoesnotalsoimplement exec_module() . However, load_module() hasbeendeprecated
andloadersshouldimplement exec_module() instead.
Theload_module() methodmustimplementalltheboilerplateloadingfunctionalitydescribedaboveinaddition
toexecutingthemodule. Allthesameconstraintsapply,withsomeadditionalclarification:
•Ifthereisanexistingmoduleobjectwiththegivennamein sys.modules ,theloadermustusethatexisting
module. (Otherwise, importlib.reload() willnotworkcorrectly.) Ifthenamedmoduledoesnotexistin
sys.modules ,theloadermustcreateanewmoduleobjectandadditto sys.modules .
•Themodule mustexistin sys.modules beforetheloaderexecutesthemodulecode, topreventunbounded
recursionormultipleloading.
•If loading fails, the loader must remove any modules it has inserted into sys.modules , but it must remove
onlythefailingmodule(s),andonlyiftheloaderitselfhasloadedthemodule(s)explicitly.
Changed in version 3.5: A DeprecationWarning is raised when exec_module() is defined but
create_module() isnot.
Changedinversion3.6: An ImportError israisedwhen exec_module() isdefinedbut create_module() is
not.
Changedinversion3.10: Useof load_module() willraise ImportWarning .
5.4.2Submodules
Whenasubmoduleisloadedusinganymechanism(e.g. importlib APIs,the importorimport-from statements,
or built-in __import__() ) a binding is placed in the parent module’s namespace to the submodule object. For
example,ifpackage spamhasasubmodule foo,afterimporting spam.foo ,spamwillhaveanattribute foowhich
isboundtothesubmodule. Let’ssayyouhavethefollowingdirectorystructure:
spam /
__init__ .py
foo.py
andspam/__init__.py hasthefollowinglineinit:
from .foo import Foo
thenexecutingthefollowingputsnamebindingsfor fooandFoointhe spammodule:
>>> import spam
>>> spam .foo
<module 'spam.foo' from '/tmp/imports/spam/foo.py'>
>>> spam .Foo
<class 'spam.foo.Foo'>
Given Python’s familiar name binding rules this might seem surprising, but it’s actually a fundamental feature of
theimportsystem. Theinvariantholdingisthatifyouhave sys.modules['spam'] andsys.modules['spam.
foo'](asyouwouldaftertheaboveimport),thelattermustappearasthe fooattributeoftheformer.
5.4.3Module specs
The import machinery uses a variety of information about each module during import, especially before loading.
Most of the information is common to all modules. The purpose of a module’s spec is to encapsulate this import-
relatedinformationonaper-modulebasis.
Usingaspecduringimportallowsstatetobetransferredbetweenimportsystemcomponents,e.g. betweenthefinder
that creates the module spec and the loader that executes it. Most importantly, it allows the import machinery to
performtheboilerplateoperationsofloading,whereaswithoutamodulespectheloaderhadthatresponsibility.
70 Chapter 5. The import system
The Python Language Reference, Release 3.13.0
The module’s spec is exposed as module.__spec__ . Setting __spec__ appropriately applies equally to modules
initialized during interpreter startup . Theoneexceptionis __main__ ,where __spec__ isset to None in some cases .
SeeModuleSpec fordetailsonthecontentsofthemodulespec.
Addedinversion3.4.
5.4.4__path__ attributes on modules
The__path__ attributeshouldbea(possiblyempty) sequenceofstringsenumeratingthelocationswherethepack-
age’ssubmoduleswillbefound. Bydefinition,ifamodulehasa __path__ attribute,itisa package.
Apackage’s __path__ attributeisusedduringimportsofitssubpackages. Withintheimportmachinery,itfunctions
much the same as sys.path , i.e. providing a list of locations to search for modules during import. However,
__path__ istypicallymuchmoreconstrainedthan sys.path .
Thesamerulesusedfor sys.path alsoapplytoapackage’s __path__ .sys.path_hooks (describedbelow)are
consultedwhentraversingapackage’s __path__ .
A package’s __init__.py file may set or alter the package’s __path__ attribute, and this was typically the way
namespace packages were implemented prior to PEP 420. With the adoption of PEP 420, namespace packages
nolongerneedtosupply __init__.py filescontainingonly __path__ manipulationcode;theimportmachinery
automaticallysets __path__ correctlyforthenamespacepackage.
5.4.5Module reprs
Bydefault,allmoduleshaveausablerepr,howeverdependingontheattributessetabove,andinthemodule’sspec,
youcanmoreexplicitlycontrolthereprofmoduleobjects.
Ifthemodulehasaspec( __spec__ ),theimportmachinerywilltrytogenerateareprfromit. Ifthatfailsorthereis
nospec,theimportsystemwillcraftadefaultreprusingwhateverinformationisavailableonthemodule. Itwilltryto
usethe module.__name__ ,module.__file__ ,and module.__loader__ asinputintotherepr,withdefaults
forwhateverinformationismissing.
Herearetheexactrulesused:
•Ifthemodulehasa __spec__ attribute,theinformationinthespecisusedtogeneratetherepr. The“name”,
“loader”,“origin”,and“has_location”attributesareconsulted.
•Ifthemodulehasa __file__ attribute,thisisusedaspartofthemodule’srepr.
•Ifthemodulehasno __file__ butdoeshavea __loader__ thatisnot None,thentheloader’sreprisused
aspartofthemodule’srepr.
•Otherwise,justusethemodule’s __name__ intherepr.
Changedinversion3.12: Useof module_repr() ,havingbeendeprecatedsincePython3.4,wasremovedinPython
3.12andisnolongercalledduringtheresolutionofamodule’srepr.
5.4.6Cached bytecode invalidation
Before Python loads cached bytecode from a .pycfile, it checks whether the cache is up-to-date with the source
.pyfile. Bydefault,Pythondoesthisbystoringthesource’slast-modifiedtimestampandsizeinthecachefilewhen
writingit. Atruntime,theimportsystemthenvalidatesthecachefilebycheckingthestoredmetadatainthecache
fileagainstthesource’smetadata.
Pythonalsosupports“hash-based”cachefiles,whichstoreahashofthesourcefile’scontentsratherthanitsmetadata.
Therearetwovariantsofhash-based .pycfiles: checkedandunchecked. Forcheckedhash-based .pycfiles,Python
validatesthecachefilebyhashingthesourcefileandcomparingtheresultinghashwiththehashinthecachefile. If
a checked hash-based cache file is found to be invalid, Python regenerates it and writes a new checked hash-based
cachefile. Foruncheckedhash-based .pycfiles,Pythonsimplyassumesthecachefileisvalidifitexists. Hash-based
.pycfilesvalidationbehaviormaybeoverriddenwiththe --check-hash-based-pycs flag.
Changed inversion 3.7: Addedhash-based .pycfiles. Previously, Pythononly supportedtimestamp-basedinvali-
dationofbytecodecaches.
5.4. Loading 71
The Python Language Reference, Release 3.13.0
5.5The Path Based Finder
Asmentionedpreviously,Pythoncomeswithseveraldefaultmetapathfinders. Oneofthese,calledthe path based
finder(PathFinder ),searchesan import path ,whichcontainsalistof path entries . Eachpathentrynamesalocation
tosearchformodules.
The path based finder itself doesn’t know how to import anything. Instead, it traverses the individual path entries,
associatingeachofthemwithapathentryfinderthatknowshowtohandlethatparticularkindofpath.
The default set of path entry finders implement all the semantics for finding modules on the file system, handling
specialfiletypessuchasPythonsourcecode( .pyfiles),Pythonbytecode( .pycfiles)andsharedlibraries(e.g. .so
files). Whensupportedbythe zipimport moduleinthestandardlibrary,thedefaultpathentryfindersalsohandle
loadingallofthesefiletypes(otherthansharedlibraries)fromzipfiles.
Path entries need not be limited to file system locations. They can refer to URLs, database queries, or any other
locationthatcanbespecifiedasastring.
The path based finder provides additional hooks and protocols so that you can extend and customize the types of
searchablepathentries. Forexample,ifyouwantedtosupportpathentriesasnetworkURLs,youcouldwriteahook
thatimplementsHTTPsemanticstofindmodulesontheweb. Thishook(acallable)wouldreturna path entry finder
supportingtheprotocoldescribedbelow,whichwasthenusedtogetaloaderforthemodulefromtheweb.
Awordofwarning: thissectionandthepreviousbothusetheterm finder,distinguishingbetweenthembyusingthe
terms meta path finder andpath entry finder . Thesetwotypesoffindersareverysimilar,supportsimilarprotocols,
andfunctioninsimilarwaysduringtheimportprocess,butit’simportanttokeepinmindthattheyaresubtlydifferent.
In particular, meta path finders operate at the beginning of the import process, as keyed off the sys.meta_path
traversal.
Bycontrast,pathentryfindersareinasenseanimplementationdetailofthepathbasedfinder,andinfact,ifthepath
basedfinderweretoberemovedfrom sys.meta_path ,noneofthepathentryfindersemanticswouldbeinvoked.
5.5.1Path entry finders
Thepath based finder isresponsibleforfindingandloadingPythonmodulesandpackageswhoselocationisspecified
withastring path entry. Mostpathentriesnamelocationsinthefilesystem,buttheyneednotbelimitedtothis.
Asametapathfinder,the path based finder implementsthe find_spec() protocolpreviouslydescribed,however
itexposesadditionalhooksthatcanbeusedtocustomizehowmodulesarefoundandloadedfromthe import path .
Three variables are used by the path based finder ,sys.path ,sys.path_hooks and sys.
path_importer_cache . The __path__ attributes on package objects are also used. These provide additional
waysthattheimportmachinerycanbecustomized.
sys.path contains a list of strings providing search locations for modules and packages. It is initialized from the
PYTHONPATH environment variable and various other installation- and implementation-specific defaults. Entries in
sys.path cannamedirectoriesonthefilesystem,zipfiles,andpotentiallyother“locations”(seethe sitemodule)
thatshouldbesearchedformodules,suchasURLs,ordatabasequeries. Onlystringsshouldbepresenton sys.path ;
allotherdatatypesareignored.
Thepath based finder is ameta path finder , so the import machinery begins the import path search by calling the
pathbasedfinder’s find_spec() methodasdescribedpreviously. Whenthe pathargumentto find_spec() is
given,itwillbealistofstringpathstotraverse-typicallyapackage’s __path__ attributeforanimportwithinthat
package. Ifthe pathargumentis None,thisindicatesatoplevelimportand sys.path isused.
The path based finder iterates over every entry in the search path, and for each of these, looks for an appropriate
path entry finder (PathEntryFinder ) for the path entry. Because this can be an expensive operation (e.g. there
may be stat()call overheads for this search), the path based finder maintains a cache mapping path entries to
pathentryfinders. Thiscacheismaintainedin sys.path_importer_cache (despitethename,thiscacheactually
storesfinderobjectsratherthanbeinglimitedto importerobjects). Inthisway,theexpensivesearchforaparticular
path entry location’s path entry finder need only be done once. User code is free to remove cache entries from
sys.path_importer_cache forcingthepathbasedfindertoperformthepathentrysearchagain.
Ifthepathentryisnotpresentinthecache,thepathbasedfinderiteratesovereverycallablein sys.path_hooks .
Eachofthe path entry hooks inthislistiscalledwithasingleargument,thepathentrytobesearched. Thiscallable
72 Chapter 5. The import system
The Python Language Reference, Release 3.13.0
mayeitherreturna path entry finder thatcanhandlethepathentry,oritmayraise ImportError . AnImportError
isusedbythepathbasedfindertosignalthatthehookcannotfinda path entry finder forthat path entry. Theexception
isignoredand import path iterationcontinues. Thehookshouldexpecteitherastringorbytesobject;theencoding
ofbytesobjectsisuptothehook(e.g. itmaybeafilesystemencoding,UTF-8,orsomethingelse),andifthehook
cannotdecodetheargument,itshouldraise ImportError .
Ifsys.path_hooks iteration ends with no path entry finder being returned, then the path based finder’s
find_spec() method will store Noneinsys.path_importer_cache (to indicate that there is no finder for
thispathentry)andreturn None,indicatingthatthis meta path finder couldnotfindthemodule.
If apath entry finder isreturned by one of the path entry hook callables on sys.path_hooks , then the following
protocolisusedtoaskthefinderforamodulespec,whichisthenusedwhenloadingthemodule.
The current working directory – denoted by an empty string – is handled slightly differently from other en-
tries on sys.path . First, if the current working directory is found to not exist, no value is stored in sys.
path_importer_cache . Second, the value for the current working directory is looked up fresh for each mod-
ule lookup. Third, the path used for sys.path_importer_cache and returned by importlib.machinery.
PathFinder.find_spec() willbetheactualcurrentworkingdirectoryandnottheemptystring.
5.5.2Path entry finder protocol
Inordertosupportimportsofmodulesandinitializedpackagesandalsotocontributeportionstonamespacepackages,
pathentryfindersmustimplementthe find_spec() method.
find_spec() takestwoarguments: thefullyqualifiednameofthemodulebeingimported,andthe(optional)target
module. find_spec() returnsafullypopulatedspecforthemodule. Thisspecwillalwayshave“loader”set(with
oneexception).
To indicate to the import machinery that the spec represents a namespace portion, the path entry finder sets
submodule_search_locations toalistcontainingtheportion.
Changed in version 3.4: find_spec() replaced find_loader() andfind_module() , both of which are now
deprecated,butwillbeusedif find_spec() isnotdefined.
Olderpathentryfindersmayimplementoneofthesetwodeprecatedmethodsinsteadof find_spec() . Themeth-
ods are still respected for the sake of backward compatibility. However, if find_spec() is implemented on the
pathentryfinder,thelegacymethodsareignored.
find_loader() takes one argument, the fully qualified name of the module being imported. find_loader()
returnsa2-tuplewherethefirstitemistheloaderandtheseconditemisanamespace portion.
For backwards compatibility with other implementations of the import protocol, many path entry finders also sup-
port the same, traditional find_module() method that meta path finders support. However path entry finder
find_module() methods are never called with a pathargument (they are expected to record the appropriate
pathinformationfromtheinitialcalltothepathhook).
Thefind_module() method on path entry finders is deprecated, as it does not allow the path entry finder to
contribute portions to namespace packages. If both find_loader() andfind_module() exist on a path entry
finder,theimportsystemwillalwayscall find_loader() inpreferenceto find_module() .
Changed in version 3.10: Calls to find_module() andfind_loader() by the import system will raise
ImportWarning .
Changedinversion3.12: find_module() andfind_loader() havebeenremoved.
5.6Replacing the standard import system
The most reliable mechanism for replacing the entire import system is to delete the default contents of sys.
meta_path ,replacingthementirelywithacustommetapathhook.
IfitisacceptabletoonlyalterthebehaviourofimportstatementswithoutaffectingotherAPIsthataccesstheimport
system,thenreplacingthebuiltin __import__() functionmaybesufficient. Thistechniquemayalsobeemployed
atthemoduleleveltoonlyalterthebehaviourofimportstatementswithinthatmodule.
5.6. Replacing the standard import system 73
The Python Language Reference, Release 3.13.0
To selectively prevent the import of some modules from a hook early on the meta path (rather than disabling the
standardimportsystementirely),itissufficienttoraise ModuleNotFoundError directlyfrom find_spec() in-
steadofreturning None. Thelatterindicatesthatthemetapathsearchshouldcontinue, whileraisinganexception
terminatesitimmediately.
5.7Package Relative Imports
Relativeimportsuseleadingdots. Asingleleadingdotindicatesarelativeimport,startingwiththecurrentpackage.
Two or more leading dots indicate a relative import to the parent(s) of the current package, one level per dot after
thefirst. Forexample,giventhefollowingpackagelayout:
package /
__init__ .py
subpackage1 /
__init__ .py
moduleX .py
moduleY .py
subpackage2 /
__init__ .py
moduleZ .py
moduleA .py
Ineither subpackage1/moduleX.py orsubpackage1/__init__.py ,thefollowingarevalidrelativeimports:
from .moduleY import spam
from .moduleY import spam asham
from .import moduleY
from ..subpackage1 import moduleY
from ..subpackage2 .moduleZ import eggs
from ..moduleA import foo
Absolute imports may use either the import <> orfrom <> import <> syntax, but relative imports may only
usethesecondform;thereasonforthisisthat:
import XXX.YYY.ZZZ
shouldexpose XXX.YYY.ZZZ asausableexpression,but.moduleYisnotavalidexpression.
5.8Special considerations for __main__
The__main__ module is a special case relative to Python’s import system. As noted elsewhere, the __main__
module is directly initialized at interpreter startup, much like sysandbuiltins . However, unlike those two, it
doesn’tstrictlyqualifyasabuilt-inmodule. Thisisbecausethemannerinwhich __main__ isinitializeddependson
theflagsandotheroptionswithwhichtheinterpreterisinvoked.
5.8.1__main__.__spec__
Dependingonhow __main__ isinitialized, __main__.__spec__ getssetappropriatelyorto None.
When Python is started with the -moption, __spec__ is set to the module spec of the corresponding module or
package. __spec__ isalsopopulatedwhenthe __main__ moduleisloadedaspartofexecutingadirectory,zipfile
orother sys.path entry.
Intheremainingcases __main__.__spec__ issetto None,asthecodeusedtopopulatethe __main__ doesnot
corresponddirectlywithanimportablemodule:
•interactiveprompt
•-coption
74 Chapter 5. The import system
The Python Language Reference, Release 3.13.0
•runningfromstdin
•runningdirectlyfromasourceorbytecodefile
Notethat __main__.__spec__ isalways Noneinthelastcase, even ifthefilecouldtechnicallybeimporteddirectly
asamoduleinstead. Usethe -mswitchifvalidmodulemetadataisdesiredin __main__ .
Note also that even when __main__ corresponds with an importable module and __main__.__spec__ is set
accordingly, they’restillconsidered distinctmodules. Thisisduetothefactthatblocksguardedby if __name__
== "__main__": checks only execute when the module is used to populate the __main__ namespace, and not
duringnormalimport.
5.9References
TheimportmachineryhasevolvedconsiderablysincePython’searlydays. Theoriginal specificationforpackages is
stillavailabletoread,althoughsomedetailshavechangedsincethewritingofthatdocument.
Theoriginalspecificationfor sys.meta_path wasPEP 302,withsubsequentextensionin PEP 420.
PEP 420introduced namespace packages forPython3.3. PEP 420alsointroducedthe find_loader() protocol
asanalternativeto find_module() .
PEP 366describestheadditionofthe __package__ attributeforexplicitrelativeimportsinmainmodules.
PEP 328introducedabsoluteandexplicitrelativeimportsandinitiallyproposed __name__ forsemantics PEP 366
wouldeventuallyspecifyfor __package__ .
PEP 338definesexecutingmodulesasscripts.
PEP 451addstheencapsulationofper-moduleimportstateinspecobjects. Italsooff-loadsmostoftheboilerplate
responsibilitiesofloadersbackontotheimportmachinery. ThesechangesallowthedeprecationofseveralAPIsin
theimportsystemandalsoadditionofnewmethodstofindersandloaders.
5.9. References 75
The Python Language Reference, Release 3.13.0
76 Chapter 5. The import system
CHAPTER
SIX
EXPRESSIONS
ThischapterexplainsthemeaningoftheelementsofexpressionsinPython.
Syntax Notes: Inthisandthefollowingchapters,extendedBNFnotationwillbeusedtodescribesyntax,notlexical
analysis. When(onealternativeof)asyntaxrulehastheform
name::= othername
andnosemanticsaregiven,thesemanticsofthisformof namearethesameasfor othername .
6.1Arithmetic conversions
When a description of an arithmetic operator below uses the phrase “the numeric arguments are converted to a
commontype”,thismeansthattheoperatorimplementationforbuilt-intypesworksasfollows:
•Ifeitherargumentisacomplexnumber,theotherisconvertedtocomplex;
•otherwise,ifeitherargumentisafloating-pointnumber,theotherisconvertedtofloatingpoint;
•otherwise,bothmustbeintegersandnoconversionisnecessary.
Some additional rules apply for certain operators (e.g., a string as a left argument to the ‘%’ operator). Extensions
mustdefinetheirownconversionbehavior.
6.2Atoms
Atomsarethemostbasicelementsofexpressions. Thesimplestatomsareidentifiersorliterals. Formsenclosedin
parentheses,bracketsorbracesarealsocategorizedsyntacticallyasatoms. Thesyntaxforatomsis:
atom ::= identifier |literal |enclosure
enclosure ::= parenth_form |list_display |dict_display |set_display
|generator_expression |yield_atom
6.2.1Identifiers (Names)
Anidentifieroccurringasanatomisaname. Seesection Identifiers and keywords forlexicaldefinitionandsection
Naming and binding fordocumentationofnamingandbinding.
When the name is bound to an object, evaluation of the atom yields that object. When a name is not bound, an
attempttoevaluateitraisesa NameError exception.
77
The Python Language Reference, Release 3.13.0
Private name mangling
Whenanidentifierthattextuallyoccursinaclassdefinitionbeginswithtwoormoreunderscorecharactersanddoes
notendintwoormoreunderscores,itisconsidereda private name ofthatclass.
µSee also
Theclass specifications .
Moreprecisely,privatenamesaretransformedtoalongerformbeforecodeisgeneratedforthem. Ifthetransformed
nameislongerthan255characters,implementation-definedtruncationmayhappen.
The transformation is independent of the syntactical context in which the identifier is used but only the following
privateidentifiersaremangled:
•Anynameusedasthenameofavariablethatisassignedorreadoranynameofanattributebeingaccessed.
The__name__ attributeofnestedfunctions,classes,andtypealiasesishowevernotmangled.
•Thenameofimportedmodules, e.g., __spaminimport __spam . Ifthemoduleispartofapackage(i.e.,
itsnamecontainsadot),thenameis notmangled,e.g.,the __fooinimport __foo.bar isnotmangled.
•Thenameofanimportedmember,e.g., __finfrom spam import __f .
Thetransformationruleisdefinedasfollows:
•Theclassname,withleadingunderscoresremovedandasingleleadingunderscoreinserted,isinsertedinfront
oftheidentifier,e.g.,theidentifier __spamoccurringinaclassnamed Foo,_Fooor__Fooistransformedto
_Foo__spam .
•If the class name consists only of underscores, the transformation is the identity, e.g., the identifier __spam
occurringinaclassnamed _or__isleftasis.
6.2.2Literals
Pythonsupportsstringandbytesliteralsandvariousnumericliterals:
literal ::= stringliteral |bytesliteral
|integer |floatnumber |imagnumber
Evaluationofaliteralyieldsanobjectofthegiventype(string,bytes,integer,floating-pointnumber,complexnum-
ber) with the given value. The value may be approximated in the case of floating-point and imaginary (complex)
literals. Seesection Literalsfordetails.
All literals correspond to immutable data types, and hence the object’s identity is less important than its value.
Multiple evaluations of literals with the same value (either the same occurrence in the program text or a different
occurrence)mayobtainthesameobjectoradifferentobjectwiththesamevalue.
6.2.3Parenthesized forms
Aparenthesizedformisanoptionalexpressionlistenclosedinparentheses:
parenth_form ::= "(" [ starred_expression ] ")"
Aparenthesizedexpressionlistyieldswhateverthatexpressionlistyields: ifthelistcontainsatleastonecomma,it
yieldsatuple;otherwise,ityieldsthesingleexpressionthatmakesuptheexpressionlist.
Anemptypairofparenthesesyieldsanemptytupleobject. Sincetuplesareimmutable,thesamerulesasforliterals
apply(i.e.,twooccurrencesoftheemptytuplemayormaynotyieldthesameobject).
78 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
Notethattuplesarenotformedbytheparentheses,butratherbyuseofthecomma. Theexceptionistheemptytuple,
for which parentheses arerequired — allowing unparenthesized “nothing” in expressions would cause ambiguities
andallowcommontypostopassuncaught.
6.2.4Displays for lists, sets and dictionaries
For constructing a list, a set or a dictionary Python provides special syntax called “displays”, each of them in two
flavors:
•eitherthecontainercontentsarelistedexplicitly,or
•theyarecomputedviaasetofloopingandfilteringinstructions,calleda comprehension .
Commonsyntaxelementsforcomprehensionsare:
comprehension ::= assignment_expression comp_for
comp_for ::= ["async"] "for" target_list "in" or_test [comp_iter ]
comp_iter ::= comp_for |comp_if
comp_if ::= "if" or_test [comp_iter ]
Thecomprehensionconsistsofasingleexpressionfollowedbyatleastone forclauseandzeroormore fororif
clauses. Inthiscase,theelementsofthenewcontainerarethosethatwouldbeproducedbyconsideringeachofthe
fororifclausesablock,nestingfromlefttoright,andevaluatingtheexpressiontoproduceanelementeachtime
theinnermostblockisreached.
However,asidefromtheiterableexpressionintheleftmost forclause,thecomprehensionisexecutedinaseparate
implicitlynestedscope. Thisensuresthatnamesassignedtointhetargetlistdon’t“leak”intotheenclosingscope.
Theiterableexpressionintheleftmost forclauseisevaluateddirectlyintheenclosingscopeandthenpassedasan
argumenttotheimplicitlynestedscope. Subsequent forclausesandanyfilterconditionintheleftmost forclause
cannotbeevaluatedintheenclosingscopeastheymaydependonthevaluesobtainedfromtheleftmostiterable. For
example: [x*y for x in range(10) for y in range(x, x+10)] .
Toensurethecomprehensionalwaysresultsinacontaineroftheappropriatetype, yieldandyield from expres-
sionsareprohibitedintheimplicitlynestedscope.
Since Python 3.6, in an async def function, an async for clause may be used to iterate over a asynchronous
iterator. Acomprehensioninan async def functionmayconsistofeithera fororasync for clausefollowing
theleadingexpression,maycontainadditional fororasync for clauses,andmayalsouse awaitexpressions.
If a comprehension contains async for clauses, or if it contains awaitexpressions or other asynchronous com-
prehensionsanywhereexcepttheiterableexpressionintheleftmost forclause,itiscalledan asynchronous compre-
hension. Anasynchronouscomprehensionmaysuspendtheexecutionofthecoroutinefunctioninwhichitappears.
Seealso PEP 530.
Addedinversion3.6: Asynchronouscomprehensionswereintroduced.
Changedinversion3.8: yieldandyield from prohibitedintheimplicitlynestedscope.
Changed in version 3.11: Asynchronous comprehensions are now allowed inside comprehensions in asynchronous
functions. Outercomprehensionsimplicitlybecomeasynchronous.
6.2.5List displays
Alistdisplayisapossiblyemptyseriesofexpressionsenclosedinsquarebrackets:
list_display ::= "[" [ flexible_expression_list |comprehension ] "]"
Alistdisplayyieldsanewlistobject,thecontentsbeingspecifiedbyeitheralistofexpressionsoracomprehension.
Whenacomma-separatedlistofexpressionsissupplied,itselementsareevaluatedfromlefttorightandplacedinto
the list object in that order. When a comprehension is supplied, the list is constructed from the elements resulting
fromthecomprehension.
6.2. Atoms 79
The Python Language Reference, Release 3.13.0
6.2.6Set displays
Asetdisplayisdenotedbycurlybracesanddistinguishablefromdictionarydisplaysbythelackofcolonsseparating
keysandvalues:
set_display ::= "{" ( flexible_expression_list |comprehension ) "}"
Asetdisplayyieldsa newmutablesetobject, thecontentsbeingspecifiedbyeithera sequenceofexpressionsora
comprehension. Whenacomma-separatedlistofexpressionsissupplied,itselementsareevaluatedfromlefttoright
and added to the set object. When a comprehension is supplied, the set is constructed from the elements resulting
fromthecomprehension.
Anemptysetcannotbeconstructedwith {};thisliteralconstructsanemptydictionary.
6.2.7Dictionary displays
Adictionarydisplayisapossiblyemptyseriesofdictitems(key/valuepairs)enclosedincurlybraces:
dict_display ::= "{" [ dict_item_list |dict_comprehension ] "}"
dict_item_list ::= dict_item ("," dict_item )* [","]
dict_item ::= expression ":" expression | "**" or_expr
dict_comprehension ::= expression ":" expression comp_for
Adictionarydisplayyieldsanewdictionaryobject.
Ifacomma-separatedsequenceofdictitemsisgiven,theyareevaluatedfromlefttorighttodefinetheentriesofthe
dictionary: eachkeyobjectisusedasakeyintothedictionarytostorethecorrespondingvalue. Thismeansthatyou
canspecifythesamekeymultipletimesinthedictitemlist,andthefinaldictionary’svalueforthatkeywillbethe
lastonegiven.
Adoubleasterisk **denotes dictionary unpacking . Itsoperandmustbea mapping. Eachmappingitemisaddedto
thenewdictionary. Latervaluesreplacevaluesalreadysetbyearlierdictitemsandearlierdictionaryunpackings.
Addedinversion3.5: Unpackingintodictionarydisplays,originallyproposedby PEP 448.
A dict comprehension, in contrast to list and set comprehensions, needs two expressions separated with a colon
followed by the usual “for” and “if” clauses. When the comprehension is run, the resulting key and value elements
areinsertedinthenewdictionaryintheordertheyareproduced.
Restrictionsonthetypesofthekeyvaluesarelistedearlierinsection The standard type hierarchy . (Tosummarize,the
keytypeshouldbe hashable,whichexcludesallmutableobjects.) Clashesbetweenduplicatekeysarenotdetected;
thelastvalue(textuallyrightmostinthedisplay)storedforagivenkeyvalueprevails.
Changedinversion3.8: PriortoPython3.8,indictcomprehensions,theevaluationorderofkeyandvaluewasnot
well-defined. InCPython,thevaluewasevaluatedbeforethekey. Startingwith3.8,thekeyisevaluatedbeforethe
value,asproposedby PEP 572.
6.2.8Generator expressions
Ageneratorexpressionisacompactgeneratornotationinparentheses:
generator_expression ::= "(" expression comp_for ")"
Ageneratorexpressionyieldsanewgeneratorobject. Itssyntaxisthesameasforcomprehensions,exceptthatitis
enclosedinparenthesesinsteadofbracketsorcurlybraces.
Variablesusedinthegeneratorexpressionareevaluatedlazilywhenthe __next__() methodiscalledforthegen-
eratorobject(inthesamefashionasnormalgenerators). However,theiterableexpressionintheleftmost forclause
isimmediatelyevaluated,sothatanerrorproducedbyitwillbeemittedatthepointwherethegeneratorexpression
isdefined,ratherthanatthepointwherethefirstvalueisretrieved. Subsequent forclausesandanyfiltercondition
80 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
in the leftmost forclause cannot be evaluated in the enclosing scope as they may depend on the values obtained
fromtheleftmostiterable. Forexample: (x*y for x in range(10) for y in range(x, x+10)) .
Theparenthesescanbeomittedoncallswithonlyoneargument. Seesection Callsfordetails.
Toavoidinterferingwiththeexpectedoperationofthegeneratorexpressionitself, yieldandyield from expres-
sionsareprohibitedintheimplicitlydefinedgenerator.
If a generator expression contains either async for clauses or awaitexpressions it is called an asynchronous
generator expression . Anasynchronousgeneratorexpressionreturnsanewasynchronousgeneratorobject,whichis
anasynchronousiterator(see Asynchronous Iterators ).
Addedinversion3.6: Asynchronousgeneratorexpressionswereintroduced.
Changedinversion3.7: PriortoPython3.7,asynchronousgeneratorexpressionscouldonlyappearin async def
coroutines. Startingwith3.7,anyfunctioncanuseasynchronousgeneratorexpressions.
Changedinversion3.8: yieldandyield from prohibitedintheimplicitlynestedscope.
6.2.9Yield expressions
yield_atom ::= "(" yield_expression ")"
yield_from ::= "yield" "from" expression
yield_expression ::= "yield" yield_list |yield_from
Theyieldexpressionisusedwhendefininga generatorfunctionoran asynchronous generator functionandthuscan
onlybeusedinthebodyofafunctiondefinition. Usingayieldexpressioninafunction’sbodycausesthatfunction
to be a generator function, and using it in an async def function’s body causes that coroutine function to be an
asynchronousgeneratorfunction. Forexample:
def gen(): # defines a generator function
yield 123
async def agen (): # defines an asynchronous generator function
yield 123
Duetotheirsideeffectsonthecontainingscope, yieldexpressionsarenotpermittedaspartoftheimplicitlydefined
scopesusedtoimplementcomprehensionsandgeneratorexpressions.
Changedinversion3.8: Yieldexpressionsprohibitedintheimplicitlynestedscopesusedtoimplementcomprehen-
sionsandgeneratorexpressions.
Generatorfunctionsaredescribedbelow,whileasynchronousgeneratorfunctionsaredescribedseparatelyinsection
Asynchronous generator functions .
When a generator function is called, it returns an iterator known as a generator. That generator then controls the
executionofthegeneratorfunction. Theexecutionstartswhenoneofthegenerator’smethodsiscalled. Atthattime,
theexecutionproceedstothefirstyieldexpression,whereitissuspendedagain,returningthevalueof yield_list
tothegenerator’scaller,or Noneifyield_list isomitted. Bysuspended,wemeanthatalllocalstateisretained,
including the current bindings of local variables, the instruction pointer, the internal evaluation stack, and the state
of any exception handling. When the execution is resumed by calling one of the generator’s methods, the function
canproceedexactlyasiftheyieldexpressionwerejustanotherexternalcall. Thevalueoftheyieldexpressionafter
resumingdependsonthemethodwhichresumedtheexecution. If __next__() isused(typicallyviaeithera for
orthe next()builtin)thentheresultis None. Otherwise,if send()isused,thentheresultwillbethevaluepassed
intothatmethod.
Allofthismakesgeneratorfunctionsquitesimilartocoroutines;theyyieldmultipletimes,theyhavemorethanone
entry point and their execution can be suspended. The only difference is that a generator function cannot control
wheretheexecutionshouldcontinueafterityields;thecontrolisalwaystransferredtothegenerator’scaller.
Yield expressions are allowed anywhere in a tryconstruct. If the generator is not resumed before it is finalized
(byreachingazeroreferencecountorbybeinggarbagecollected),thegenerator-iterator’s close()methodwillbe
called,allowinganypending finallyclausestoexecute.
6.2. Atoms 81
The Python Language Reference, Release 3.13.0
When yield from <expr> isused,thesuppliedexpressionmustbeaniterable. Thevaluesproducedbyiterating
thatiterablearepasseddirectlytothecallerofthecurrentgenerator’smethods. Anyvaluespassedinwith send()
andanyexceptionspassedinwith throw()arepassedtotheunderlyingiteratorifithastheappropriatemethods.
Ifthisisnotthecase,then send()willraise AttributeError orTypeError ,while throw()willjustraisethe
passedinexceptionimmediately.
Whentheunderlyingiteratoriscomplete,the valueattributeoftheraised StopIteration instancebecomesthe
value of the yield expression. It can be either set explicitly when raising StopIteration , or automatically when
thesubiteratorisagenerator(byreturningavaluefromthesubgenerator).
Changedinversion3.3: Added yield from <expr> todelegatecontrolflowtoasubiterator.
Theparenthesesmaybeomittedwhentheyieldexpressionisthesoleexpressionontherighthandsideofanassign-
mentstatement.
µSee also
PEP 255 - Simple Generators
Theproposalforaddinggeneratorsandthe yieldstatementtoPython.
PEP 342 - Coroutines via Enhanced Generators
TheproposaltoenhancetheAPIandsyntaxofgenerators,makingthemusableassimplecoroutines.
PEP 380 - Syntax for Delegating to a Subgenerator
Theproposaltointroducethe yield_from syntax,makingdelegationtosubgeneratorseasy.
PEP 525 - Asynchronous Generators
Theproposalthatexpandedon PEP 492byaddinggeneratorcapabilitiestocoroutinefunctions.
Generator-iterator methods
Thissubsectiondescribesthemethodsofageneratoriterator. Theycanbeusedtocontroltheexecutionofagenerator
function.
Notethatcallinganyofthegeneratormethodsbelowwhenthegeneratorisalreadyexecutingraisesa ValueError
exception.
generator. __next__ ()
Startstheexecutionofageneratorfunctionorresumesitatthelastexecutedyieldexpression. Whenagenerator
functionisresumedwitha __next__() method,thecurrentyieldexpressionalwaysevaluatesto None. The
executionthencontinuestothenextyieldexpression,wherethegeneratorissuspendedagain,andthevalueof
theyield_list isreturnedto __next__() ’scaller. Ifthegeneratorexitswithoutyieldinganothervalue,a
StopIteration exceptionisraised.
Thismethodisnormallycalledimplicitly,e.g. bya forloop,orbythebuilt-in next()function.
generator. send (value )
Resumestheexecutionand“sends”avalueintothegeneratorfunction. The valueargumentbecomestheresult
ofthecurrentyieldexpression. The send()methodreturnsthenextvalueyieldedbythegenerator,orraises
StopIteration if the generator exits without yielding another value. When send()is called to start the
generator,itmustbecalledwith Noneastheargument,becausethereisnoyieldexpressionthatcouldreceive
thevalue.
generator. throw (value )
generator. throw (type[,value[,traceback]])
Raises an exception at the point where the generator was paused, and returns the next value yielded by the
generator function. If the generator exits without yielding another value, a StopIteration exception is
raised. If the generator function does not catch the passed-in exception, or raises a different exception, then
thatexceptionpropagatestothecaller.
Intypicaluse,thisiscalledwithasingleexceptioninstancesimilartothewaythe raisekeywordisused.
82 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
For backwards compatibility, however, the second signature is supported, following a convention from older
versionsofPython. The typeargumentshouldbeanexceptionclass,and valueshouldbeanexceptioninstance.
Ifthe valueisnotprovided,the typeconstructoriscalledtogetaninstance. If tracebackisprovided,itisset
ontheexception,otherwiseanyexisting __traceback__ attributestoredin valuemaybecleared.
Changedinversion3.12: Thesecondsignature(type[,value[,traceback]])isdeprecatedandmayberemoved
inafutureversionofPython.
generator. close ()
Raises a GeneratorExit at the point where the generator function was paused. If the generator function
catches the exception and returns a value, this value is returned from close(). If the generator function
isalreadyclosed,orraises GeneratorExit (bynotcatchingtheexception), close()returns None. Ifthe
generatoryieldsavalue,a RuntimeError israised. Ifthegeneratorraisesanyotherexception,itispropagated
to the caller. If the generator has already exited due to an exception or normal exit, close()returns None
andhasnoothereffect.
Changedinversion3.13: Ifageneratorreturnsavalueuponbeingclosed,thevalueisreturnedby close().
Examples
Hereisasimpleexamplethatdemonstratesthebehaviorofgeneratorsandgeneratorfunctions:
>>> def echo (value =None ):
... print ("Execution starts when 'next() 'is called for the first time. ")
... try:
... while True :
... try:
... value =(yield value)
... except Exception ase:
... value =e
... finally :
... print ("Don't forget to clean up when 'close() 'is called. ")
...
>>> generator =echo( 1)
>>> print (next (generator))
Execution starts when 'next()' is called for the first time.
1
>>> print (next (generator))
None
>>> print (generator .send( 2))
2
>>> generator .throw( TypeError ,"spam ")
TypeError('spam',)
>>> generator .close()
Don't forget to clean up when 'close()' is called.
Forexamplesusing yield from ,seepep-380in“What’sNewinPython.”
Asynchronous generator functions
Thepresenceofayieldexpressioninafunctionormethoddefinedusing async def furtherdefinesthefunctionas
anasynchronous generator function.
When an asynchronous generator function is called, it returns an asynchronous iterator known as an asynchronous
generatorobject. Thatobjectthencontrolstheexecutionofthegeneratorfunction. Anasynchronousgeneratorobject
istypicallyusedinan async for statementinacoroutinefunctionanalogouslytohowageneratorobjectwouldbe
usedina forstatement.
Callingoneoftheasynchronousgenerator’smethodsreturnsan awaitableobject,andtheexecutionstartswhenthis
objectisawaitedon. Atthattime,theexecutionproceedstothefirstyieldexpression,whereitissuspendedagain,
returningthevalueof yield_list totheawaitingcoroutine. Aswithagenerator,suspensionmeansthatalllocal
6.2. Atoms 83
The Python Language Reference, Release 3.13.0
stateisretained,includingthecurrentbindingsoflocalvariables,theinstructionpointer,theinternalevaluationstack,
andthestateofanyexceptionhandling. Whentheexecutionisresumedbyawaitingonthenextobjectreturnedby
theasynchronousgenerator’smethods,thefunctioncanproceedexactlyasiftheyieldexpressionwerejustanother
externalcall. Thevalueoftheyieldexpressionafterresumingdependsonthemethodwhichresumedtheexecution.
If__anext__() is used then the result is None. Otherwise, if asend()is used, then the result will be the value
passedintothatmethod.
If an asynchronous generator happens to exit early by break, the caller task being cancelled, or other exceptions,
thegenerator’sasynccleanupcodewillrunandpossiblyraiseexceptionsoraccesscontextvariablesinanunexpected
context–perhapsafterthelifetimeoftasksitdepends,orduringtheeventloopshutdownwhentheasync-generator
garbage collection hook is called. To prevent this, the caller must explicitly close the async generator by calling
aclose() methodtofinalizethegeneratorandultimatelydetachitfromtheeventloop.
In an asynchronous generator function, yield expressions are allowed anywhere in a tryconstruct. However, if an
asynchronousgeneratorisnotresumedbeforeitisfinalized(byreachingazeroreferencecountorbybeinggarbage
collected), then a yield expression within a tryconstruct could result in a failure to execute pending finally
clauses. Inthiscase,itistheresponsibilityoftheeventlooporschedulerrunningtheasynchronousgeneratortocall
the asynchronous generator-iterator’s aclose() method and run the resulting coroutine object, thus allowing any
pending finallyclausestoexecute.
Totakecareoffinalizationuponeventlooptermination,aneventloopshoulddefinea finalizerfunctionwhichtakes
anasynchronousgenerator-iteratorandpresumablycalls aclose() andexecutesthecoroutine. This finalizermaybe
registeredbycalling sys.set_asyncgen_hooks() . Whenfirstiteratedover,anasynchronousgenerator-iterator
willstoretheregistered finalizertobecalleduponfinalization. Forareferenceexampleofa finalizermethodseethe
implementationof asyncio.Loop.shutdown_asyncgens inLib/asyncio/base_events.py .
Theexpression yield from <expr> isasyntaxerrorwhenusedinanasynchronousgeneratorfunction.
Asynchronous generator-iterator methods
Thissubsectiondescribesthemethodsofanasynchronousgeneratoriterator,whichareusedtocontroltheexecution
ofageneratorfunction.
coroutine agen. __anext__ ()
Returnsanawaitablewhichwhenrunstartstoexecutetheasynchronousgeneratororresumesitatthelastexe-
cutedyieldexpression. Whenanasynchronousgeneratorfunctionisresumedwithan __anext__() method,
the current yield expression always evaluates to Nonein the returned awaitable, which when run will con-
tinue to the next yield expression. The value of the yield_list of the yield expression is the value of the
StopIteration exceptionraisedbythecompletingcoroutine. Iftheasynchronousgeneratorexitswithout
yielding another value, the awaitable instead raises a StopAsyncIteration exception, signalling that the
asynchronousiterationhascompleted.
Thismethodisnormallycalledimplicitlybya async for loop.
coroutine agen. asend (value )
Returns an awaitable which when run resumes the execution of the asynchronous generator. As with the
send()methodforagenerator,this“sends”avalueintotheasynchronousgeneratorfunction,andthe value
argumentbecomestheresultofthecurrentyieldexpression. Theawaitablereturnedbythe asend()method
will return the next value yielded by the generator as the value of the raised StopIteration , or raises
StopAsyncIteration iftheasynchronousgeneratorexitswithoutyieldinganothervalue. When asend()
iscalledtostarttheasynchronousgenerator,itmustbecalledwith Noneastheargument,becausethereisno
yieldexpressionthatcouldreceivethevalue.
coroutine agen. athrow (value )
coroutine agen. athrow (type[,value[,traceback]])
Returnsanawaitablethatraisesanexceptionoftype typeatthepointwheretheasynchronousgeneratorwas
paused,andreturnsthenextvalueyieldedbythegeneratorfunctionasthevalueoftheraised StopIteration
exception. If the asynchronous generator exits without yielding another value, a StopAsyncIteration
exceptionisraisedbytheawaitable. Ifthegeneratorfunctiondoesnotcatchthepassed-inexception,orraises
adifferentexception,thenwhentheawaitableisrunthatexceptionpropagatestothecalleroftheawaitable.
84 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
Changedinversion3.12: Thesecondsignature(type[,value[,traceback]])isdeprecatedandmayberemoved
inafutureversionofPython.
coroutine agen. aclose ()
Returns an awaitable that when run will throw a GeneratorExit into the asynchronous generator func-
tion at the point where it was paused. If the asynchronous generator function then exits gracefully, is al-
ready closed, or raises GeneratorExit (by not catching the exception), then the returned awaitable will
raisea StopIteration exception. Anyfurtherawaitablesreturnedbysubsequentcallstotheasynchronous
generator will raise a StopAsyncIteration exception. If the asynchronous generator yields a value, a
RuntimeError is raised by the awaitable. If the asynchronous generator raises any other exception, it is
propagatedtothecalleroftheawaitable. Iftheasynchronousgeneratorhasalreadyexitedduetoanexception
ornormalexit,thenfurthercallsto aclose() willreturnanawaitablethatdoesnothing.
6.3Primaries
Primariesrepresentthemosttightlyboundoperationsofthelanguage. Theirsyntaxis:
primary ::= atom |attributeref |subscription |slicing |call
6.3.1Attribute references
Anattributereferenceisaprimaryfollowedbyaperiodandaname:
attributeref ::= primary "." identifier
The primary must evaluate to an object of a type that supports attribute references, which most objects do. This
objectisthenaskedtoproducetheattributewhosenameistheidentifier. Thetypeandvalueproducedisdetermined
bytheobject. Multipleevaluationsofthesameattributereferencemayyielddifferentobjects.
This production can be customized by overriding the __getattribute__() method or the __getattr__()
method. The __getattribute__() methodiscalledfirstandeitherreturnsavalueorraises AttributeError
iftheattributeisnotavailable.
Ifan AttributeError israisedandtheobjecthasa __getattr__() method,thatmethodiscalledasafallback.
6.3.2Subscriptions
The subscription of an instance of a container class will generally select an element from the container. The sub-
scriptionofa generic class willgenerallyreturnaGenericAliasobject.
subscription ::= primary "[" flexible_expression_list "]"
Whenanobjectissubscripted,theinterpreterwillevaluatetheprimaryandtheexpressionlist.
Theprimarymustevaluatetoanobjectthatsupportssubscription. Anobjectmaysupportsubscriptionthroughdefin-
ingoneorbothof __getitem__() and__class_getitem__() . Whentheprimaryissubscripted,theevaluated
resultoftheexpressionlistwillbepassedtooneofthesemethods. Formoredetailsonwhen __class_getitem__
iscalledinsteadof __getitem__ ,see__class_getitem__ versus __getitem__ .
If the expression list contains at least one comma, or if any of the expressions are starred, the expression list will
evaluate to a tuplecontaining the items of the expression list. Otherwise, the expression list will evaluate to the
valueofthelist’ssolemember.
Changedinversion3.11: Expressionsinanexpressionlistmaybestarred. See PEP 646.
Forbuilt-inobjects,therearetwotypesofobjectsthatsupportsubscriptionvia __getitem__() :
6.3. Primaries 85
The Python Language Reference, Release 3.13.0
1.Mappings. Iftheprimaryisa mapping,theexpressionlistmustevaluatetoanobjectwhosevalueisoneofthe
keys of the mapping, and the subscription selects the value in the mapping that corresponds to that key. An
exampleofabuiltinmappingclassisthe dictclass.
2.Sequences. Iftheprimaryisa sequence,theexpressionlistmustevaluatetoan intoraslice(asdiscussed
inthefollowingsection). Examplesofbuiltinsequenceclassesincludethe str,listandtupleclasses.
The formal syntax makes no special provision for negative indices in sequences. However, built-in sequences all
providea __getitem__() methodthatinterpretsnegativeindicesbyaddingthelengthofthesequencetotheindex
so that, for example, x[-1]selects the last item of x. The resulting value must be a nonnegative integer less than
thenumberofitemsinthesequence,andthesubscriptionselectstheitemwhoseindexisthatvalue(countingfrom
zero). Sincethesupportfornegativeindicesandslicingoccursintheobject’s __getitem__() method,subclasses
overridingthismethodwillneedtoexplicitlyaddthatsupport.
Astringis a special kind of sequence whose items are characters. A character is not a separate data type but a
stringofexactlyonecharacter.
6.3.3Slicings
Aslicingselectsarangeofitemsinasequenceobject(e.g.,astring,tupleorlist). Slicingsmaybeusedasexpressions
orastargetsinassignmentor delstatements. Thesyntaxforaslicing:
slicing ::= primary "[" slice_list "]"
slice_list ::= slice_item ("," slice_item )* [","]
slice_item ::= expression |proper_slice
proper_slice ::= [lower_bound ] ":" [ upper_bound ] [ ":" [ stride ] ]
lower_bound ::= expression
upper_bound ::= expression
stride ::= expression
Thereisambiguityintheformalsyntaxhere: anythingthatlookslikeanexpressionlistalsolookslikeaslicelist,so
anysubscriptioncanbe interpretedas a slicing. Ratherthanfurthercomplicatingthesyntax, thisisdisambiguated
bydefiningthatinthiscasetheinterpretationasasubscriptiontakespriorityovertheinterpretationasaslicing(this
isthecaseiftheslicelistcontainsnoproperslice).
The semantics for a slicing are as follows. The primary is indexed (using the same __getitem__() method as
normalsubscription)withakeythatisconstructedfromtheslicelist,asfollows. Iftheslicelistcontainsatleastone
comma,thekeyisatuplecontainingtheconversionofthesliceitems;otherwise,theconversionofthelonesliceitem
isthekey. Theconversionofasliceitemthatisanexpressionisthatexpression. Theconversionofapropersliceis
asliceobject(seesection The standard type hierarchy )whose start,stopandstepattributesarethevaluesofthe
expressionsgivenaslowerbound,upperboundandstride,respectively,substituting Noneformissingexpressions.
6.3.4Calls
Acallcallsacallableobject(e.g.,a function)withapossiblyemptyseriesof arguments:
call ::= primary "(" [ argument_list [","] | comprehension ] ")"
argument_list ::= positional_arguments ["," starred_and_keywords ]
["," keywords_arguments ]
|starred_and_keywords ["," keywords_arguments ]
|keywords_arguments
positional_arguments ::= positional_item ("," positional_item)*
positional_item ::= assignment_expression | "*" expression
starred_and_keywords ::= ("*" expression |keyword_item )
("," "*" expression | "," keyword_item )*
keywords_arguments ::= (keyword_item | "**" expression )
("," keyword_item | "," "**" expression )*
keyword_item ::= identifier "=" expression
86 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
An optional trailing comma may be present after the positional and keyword arguments but does not affect the
semantics.
Theprimarymustevaluatetoacallableobject(user-definedfunctions,built-infunctions,methodsofbuilt-inobjects,
classobjects,methodsofclassinstances,andallobjectshavinga __call__() methodarecallable). Allargument
expressions are evaluated before the call is attempted. Please refer to section Function definitions for the syntax of
formal parameterlists.
Ifkeywordargumentsarepresent,theyarefirstconvertedtopositionalarguments,asfollows. First,alistofunfilled
slots is created for the formal parameters. If there are N positional arguments, they are placed in the first N slots.
Next, for each keyword argument, the identifier is used to determine the corresponding slot (if the identifier is the
sameasthefirstformalparametername,thefirstslotisused,andsoon). Iftheslotisalreadyfilled,a TypeError
exceptionisraised. Otherwise,theargumentisplacedintheslot,fillingit(eveniftheexpressionis None,itfillsthe
slot). Whenallargumentshavebeenprocessed,theslotsthatarestillunfilledarefilledwiththecorrespondingdefault
valuefromthefunctiondefinition. (Defaultvaluesarecalculated,once,whenthefunctionisdefined;thus,amutable
objectsuchasalistordictionaryusedasdefaultvaluewillbesharedbyallcallsthatdon’tspecifyanargumentvalue
forthecorrespondingslot;thisshouldusuallybeavoided.) Ifthereareanyunfilledslotsforwhichnodefaultvalueis
specified,a TypeError exceptionisraised. Otherwise,thelistoffilledslotsisusedastheargumentlistforthecall.
CPython implementation detail: Animplementationmayprovidebuilt-infunctionswhosepositionalparameters
donothavenames,eveniftheyare‘named’forthepurposeofdocumentation,andwhichthereforecannotbesupplied
bykeyword. InCPython,thisisthecaseforfunctionsimplementedinCthatuse PyArg_ParseTuple() toparse
theirarguments.
Iftherearemorepositionalargumentsthanthereareformalparameterslots,a TypeError exceptionisraised,unless
a formal parameter using the syntax *identifier is present; in this case, that formal parameter receives a tuple
containingtheexcesspositionalarguments(oranemptytupleiftherewerenoexcesspositionalarguments).
Ifanykeywordargumentdoesnotcorrespondtoaformalparametername,a TypeError exceptionisraised,unlessa
formalparameterusingthesyntax **identifier ispresent;inthiscase,thatformalparameterreceivesadictionary
containing the excess keyword arguments (using the keywords as keys and the argument values as corresponding
values),ora(new)emptydictionaryiftherewerenoexcesskeywordarguments.
Ifthesyntax *expression appearsinthefunctioncall, expression mustevaluatetoan iterable. Elementsfrom
theseiterablesaretreatedasiftheywereadditionalpositionalarguments. Forthecall f(x1, x2, *y, x3, x4) ,
ifyevaluatestoasequence y1,…,yM,thisisequivalenttoacallwithM+4positionalarguments x1,x2,y1,…,yM,
x3,x4.
Aconsequenceofthisisthatalthoughthe *expression syntaxmayappear afterexplicitkeywordarguments,itis
processed beforethekeywordarguments(andany **expression arguments–seebelow). So:
>>> def f(a, b):
... print (a, b)
...
>>> f(b=1,*(2,))
2 1
>>> f(a=1,*(2,))
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : f() got multiple values for keyword argument 'a'
>>> f(1,*(2,))
1 2
It is unusual for both keyword arguments and the *expression syntax to be used in the same call, so in practice
thisconfusiondoesnotoftenarise.
If the syntax **expression appears in the function call, expression must evaluate to a mapping, the contents
ofwhicharetreatedasadditionalkeywordarguments. Ifaparametermatchingakeyhasalreadybeengivenavalue
(byanexplicitkeywordargument,orfromanotherunpacking),a TypeError exceptionisraised.
When **expression isused,eachkeyinthismappingmustbeastring. Eachvaluefromthemappingisassigned
tothefirstformalparametereligibleforkeywordassignmentwhosenameisequaltothekey. Akeyneednotbea
Pythonidentifier(e.g. "max-temp °F" isacceptable,althoughitwillnotmatchanyformalparameterthatcouldbe
6.3. Primaries 87
The Python Language Reference, Release 3.13.0
declared). Ifthereisnomatchtoaformalparameterthekey-valuepairiscollectedbythe **parameter,ifthereis
one,orifthereisnot,a TypeError exceptionisraised.
Formalparametersusingthesyntax *identifier or**identifier cannotbeusedaspositionalargumentslots
oraskeywordargumentnames.
Changedinversion3.5: Functioncallsacceptanynumberof *and**unpackings,positionalargumentsmayfollow
iterable unpackings ( *), and keyword arguments may follow dictionary unpackings ( **). Originally proposed by
PEP 448.
Acallalwaysreturnssomevalue,possibly None,unlessitraisesanexception. Howthisvalueiscomputeddepends
onthetypeofthecallableobject.
Ifitis—
a user-defined function:
Thecodeblockforthefunctionisexecuted,passingittheargumentlist. Thefirstthingthecodeblockwilldo
isbindtheformalparameterstothearguments;thisisdescribedinsection Function definitions . Whenthecode
block executes a returnstatement, this specifies the return value of the function call. If execution reaches
theendofthecodeblockwithoutexecutinga returnstatement,thereturnvalueis None.
a built-in function or method:
Theresultisuptotheinterpreter;seebuilt-in-funcsforthedescriptionsofbuilt-infunctionsandmethods.
a class object:
Anewinstanceofthatclassisreturned.
a class instance method:
Thecorrespondinguser-definedfunctioniscalled,withanargumentlistthatisonelongerthantheargument
listofthecall: theinstancebecomesthefirstargument.
a class instance:
Theclassmustdefinea __call__() method;theeffectisthenthesameasifthatmethodwascalled.
6.4Await expression
Suspendtheexecutionof coroutineonan awaitableobject. Canonlybeusedinsidea coroutine function .
await_expr ::= "await" primary
Addedinversion3.5.
6.5The power operator
Thepoweroperatorbindsmoretightlythanunaryoperatorsonitsleft; itbindslesstightlythanunaryoperatorson
itsright. Thesyntaxis:
power::= (await_expr |primary ) ["**" u_expr ]
Thus, in an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left
(thisdoesnotconstraintheevaluationorderfortheoperands): -1**2resultsin -1.
Thepoweroperatorhasthesamesemanticsasthebuilt-in pow()function,whencalledwithtwoarguments: ityields
itsleftargumentraisedtothepowerofitsrightargument. Thenumericargumentsarefirstconvertedtoacommon
type,andtheresultisofthattype.
Forintoperands,theresulthasthesametypeastheoperandsunlessthesecondargumentisnegative;inthatcase,all
argumentsareconvertedtofloatandafloatresultisdelivered. Forexample, 10**2returns 100,but10**-2returns
0.01.
88 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
Raising 0.0toanegativepowerresultsina ZeroDivisionError . Raisinganegativenumbertoafractionalpower
resultsina complexnumber. (Inearlierversionsitraiseda ValueError .)
Thisoperationcanbecustomizedusingthespecial __pow__() and__rpow__() methods.
6.6Unary arithmetic and bitwise operations
Allunaryarithmeticandbitwiseoperationshavethesamepriority:
u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr
Theunary -(minus)operatoryieldsthenegationofitsnumericargument;theoperationcanbeoverriddenwiththe
__neg__() specialmethod.
The unary +(plus) operator yields its numeric argument unchanged; the operation can be overridden with the
__pos__() specialmethod.
The unary ~(invert) operator yields the bitwise inversion of its integer argument. The bitwise inversion of xis
definedas -(x+1). Itonlyappliestointegralnumbersortocustomobjectsthatoverridethe __invert__() special
method.
Inallthreecases,iftheargumentdoesnothavethepropertype,a TypeError exceptionisraised.
6.7Binary arithmetic operations
The binary arithmetic operations have the conventional priority levels. Note that some of these operations also
applytocertainnon-numerictypes. Apartfromthepoweroperator,thereareonlytwolevels,oneformultiplicative
operatorsandoneforadditiveoperators:
m_expr ::= u_expr |m_expr "*" u_expr |m_expr "@" m_expr |
m_expr "//" u_expr |m_expr "/" u_expr |
m_expr "%" u_expr
a_expr ::= m_expr |a_expr "+" m_expr |a_expr "-" m_expr
The*(multiplication)operatoryieldstheproductofitsarguments. Theargumentsmusteitherbothbenumbers,or
oneargumentmustbeanintegerandtheothermustbeasequence. Intheformercase,thenumbersareconvertedtoa
commontypeandthenmultipliedtogether. Inthelattercase,sequencerepetitionisperformed;anegativerepetition
factoryieldsanemptysequence.
Thisoperationcanbecustomizedusingthespecial __mul__() and__rmul__() methods.
The@(at)operatorisintendedtobeusedformatrixmultiplication. NobuiltinPythontypesimplementthisoperator.
Thisoperationcanbecustomizedusingthespecial __matmul__() and__rmatmul__() methods.
Addedinversion3.5.
The/(division)and //(floordivision)operatorsyieldthequotientoftheirarguments. Thenumericargumentsare
first converted to a common type. Division of integers yields a float, while floor division of integers results in an
integer; the result is that of mathematical division with the ‘floor’ function applied to the result. Division by zero
raisesthe ZeroDivisionError exception.
Thedivisionoperationcanbecustomizedusingthespecial __truediv__() and__rtruediv__() methods. The
floordivisionoperationcanbecustomizedusingthespecial __floordiv__() and__rfloordiv__() methods.
The%(modulo) operator yields the remainder from the division of the first argument by the second. The numeric
argumentsarefirstconvertedtoacommontype. Azerorightargumentraisesthe ZeroDivisionError exception.
Theargumentsmaybefloating-pointnumbers,e.g., 3.14%0.7 equals 0.34(since 3.14equals 4*0.7 + 0.34 .)
6.6. Unary arithmetic and bitwise operations 89
The Python Language Reference, Release 3.13.0
Themodulooperatoralwaysyieldsaresultwiththesamesignasitssecondoperand(orzero);theabsolutevalueof
theresultisstrictlysmallerthantheabsolutevalueofthesecondoperand1.
Thefloordivisionandmodulooperatorsareconnectedbythefollowingidentity: x == (x//y)*y + (x%y) . Floor
divisionandmoduloarealsoconnectedwiththebuilt-infunction divmod() :divmod(x, y) == (x//y, x%y) .2.
In addition to performing the modulo operation on numbers, the %operator is also overloaded by string objects to
performold-stylestringformatting(alsoknownasinterpolation). Thesyntaxforstringformattingisdescribedinthe
PythonLibraryReference,sectionold-string-formatting.
Themodulooperationcanbecustomizedusingthespecial __mod__() and__rmod__() methods.
Thefloordivisionoperator,themodulooperator,andthe divmod() functionarenotdefinedforcomplexnumbers.
Instead,converttoafloating-pointnumberusingthe abs()functionifappropriate.
The+(addition) operator yields the sum of its arguments. The arguments must either both be numbers or both
be sequences of the same type. In the former case, the numbers are converted to a common type and then added
together. Inthelattercase,thesequencesareconcatenated.
Thisoperationcanbecustomizedusingthespecial __add__() and__radd__() methods.
The-(subtraction)operatoryieldsthedifferenceofitsarguments. Thenumericargumentsarefirstconvertedtoa
commontype.
Thisoperationcanbecustomizedusingthespecial __sub__() and__rsub__() methods.
6.8Shifting operations
Theshiftingoperationshavelowerprioritythanthearithmeticoperations:
shift_expr ::= a_expr |shift_expr ("<<" | ">>") a_expr
Theseoperatorsacceptintegersasarguments. Theyshiftthefirstargumenttotheleftorrightbythenumberofbits
givenbythesecondargument.
The left shift operation can be customized using the special __lshift__() and__rlshift__() methods. The
rightshiftoperationcanbecustomizedusingthespecial __rshift__() and__rrshift__() methods.
Arightshiftby nbitsisdefinedasfloordivisionby pow(2,n) . Aleftshiftby nbitsisdefinedasmultiplicationwith
pow(2,n) .
6.9Binary bitwise operations
Eachofthethreebitwiseoperationshasadifferentprioritylevel:
and_expr ::= shift_expr |and_expr "&" shift_expr
xor_expr ::= and_expr |xor_expr "^" and_expr
or_expr ::= xor_expr |or_expr "|" xor_expr
The&operatoryieldsthebitwiseANDofitsarguments, whichmustbeintegersoroneofthemmustbea custom
objectoverriding __and__() or__rand__() specialmethods.
The^operatoryieldsthebitwiseXOR(exclusiveOR)ofitsarguments,whichmustbeintegersoroneofthemmust
beacustomobjectoverriding __xor__() or__rxor__() specialmethods.
1While abs(x%y) < abs(y) istruemathematically,forfloatsitmaynotbetruenumericallyduetoroundoff. Forexample,andassuming
a platform on which a Python float is an IEEE 754 double-precision number, in order that -1e-100 % 1e100 have the same sign as 1e100,
the computed result is -1e-100 + 1e100 , which is numerically exactly equal to 1e100. The function math.fmod() returns a result whose
sign matches the sign of the first argument instead, and so returns -1e-100in this case. Which approach is more appropriate depends on the
application.
2Ifxisveryclosetoanexactintegermultipleofy,it’spossiblefor x//ytobeonelargerthan (x-x%y)//y duetorounding. Insuchcases,
Pythonreturnsthelatterresult,inordertopreservethat divmod(x,y)[0] * y + x % y beverycloseto x.
90 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
The|operatoryieldsthebitwise(inclusive)ORofitsarguments,whichmustbeintegersoroneofthemmustbea
customobjectoverriding __or__() or__ror__() specialmethods.
6.10Comparisons
Unlike C, all comparison operations in Python have the same priority, which is lower than that of any arithmetic,
shiftingorbitwiseoperation. AlsounlikeC,expressionslike a < b < c havetheinterpretationthatisconventional
inmathematics:
comparison ::= or_expr (comp_operator or_expr )*
comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="
| "is" ["not"] | ["not"] "in"
Comparisonsyieldbooleanvalues: TrueorFalse. Custom rich comparison methods mayreturnnon-booleanvalues.
InthiscasePythonwillcall bool()onsuchvalueinbooleancontexts.
Comparisons can be chained arbitrarily, e.g., x < y <= z is equivalent to x < y and y <= z , except that yis
evaluatedonlyonce(butinbothcases zisnotevaluatedatallwhen x < yisfoundtobefalse).
Formally, if a,b,c, …,y,zare expressions and op1,op2, …,opNare comparison operators, then a op1 b op2
c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z , except that each expression is
evaluatedatmostonce.
Note that a op1 b op2 c doesn’t imply any kind of comparison between aandc, so that, e.g., x < y > z is
perfectlylegal(thoughperhapsnotpretty).
6.10.1 Value comparisons
Theoperators <,>,==,>=,<=,and !=comparethevaluesoftwoobjects. Theobjectsdonotneedtohavethesame
type.
Chapter Objects, values and types statesthatobjectshaveavalue(inadditiontotypeandidentity). Thevalueofan
objectisaratherabstractnotioninPython: Forexample,thereisnocanonicalaccessmethodforanobject’svalue.
Also, there is no requirement that the value of an object should be constructed in a particular way, e.g. comprised
ofallitsdataattributes. Comparisonoperatorsimplementaparticularnotionofwhatthevalueofanobjectis. One
canthinkofthemasdefiningthevalueofanobjectindirectly,bymeansoftheircomparisonimplementation.
Because all types are (direct or indirect) subtypes of object, they inherit the default comparison behavior from
object. Typescancustomizetheircomparisonbehaviorbyimplementing rich comparison methods like__lt__() ,
describedin Basic customization .
The default behavior for equality comparison ( ==and!=) is based on the identity of the objects. Hence, equality
comparisonofinstanceswiththesameidentityresultsinequality,andequalitycomparisonofinstanceswithdifferent
identitiesresultsininequality. Amotivationforthisdefaultbehavioristhedesirethatallobjectsshouldbereflexive
(i.e.x is yimplies x == y).
Adefaultordercomparison( <,>,<=,and >=)isnotprovided;anattemptraises TypeError . Amotivationforthis
defaultbehavioristhelackofasimilarinvariantasforequality.
Thebehaviorofthedefaultequalitycomparison,thatinstanceswithdifferentidentitiesarealwaysunequal,maybe
incontrasttowhattypeswillneedthathaveasensibledefinitionofobjectvalueandvalue-basedequality. Suchtypes
willneedtocustomizetheircomparisonbehavior,andinfact,anumberofbuilt-intypeshavedonethat.
Thefollowinglistdescribesthecomparisonbehaviorofthemostimportantbuilt-intypes.
•Numbersofbuilt-innumerictypes(typesnumeric)andofthestandardlibrarytypes fractions.Fraction
anddecimal.Decimal canbecomparedwithinandacrosstheirtypes,withtherestrictionthatcomplexnum-
bersdonotsupportordercomparison. Withinthelimitsofthetypesinvolved,theycomparemathematically
(algorithmically)correctwithoutlossofprecision.
Thenot-a-numbervalues float('NaN') anddecimal.Decimal('NaN') arespecial. Anyorderedcom-
parison of a number to a not-a-number value is false. A counter-intuitive implication is that not-a-number
6.10. Comparisons 91
The Python Language Reference, Release 3.13.0
valuesarenotequaltothemselves. Forexample,if x = float('NaN') ,3 < x,x < 3andx == xareall
false,while x != xistrue. ThisbehavioriscompliantwithIEEE754.
•NoneandNotImplemented aresingletons. PEP 8advisesthatcomparisonsforsingletonsshouldalwaysbe
donewith isoris not,nevertheequalityoperators.
•Binarysequences(instancesof bytesorbytearray )canbecomparedwithinandacrosstheirtypes. They
comparelexicographicallyusingthenumericvaluesoftheirelements.
•Strings (instances of str) compare lexicographically using the numerical Unicode code points (the result of
thebuilt-infunction ord())oftheircharacters.3
Stringsandbinarysequencescannotbedirectlycompared.
•Sequences(instancesof tuple,list,orrange)canbecomparedonlywithineachoftheirtypes,withthe
restriction that ranges do not support order comparison. Equality comparison across these types results in
inequality,andorderingcomparisonacrossthesetypesraises TypeError .
Sequences compare lexicographically using comparison of corresponding elements. The built-in containers
typically assume identical objects are equal to themselves. That lets them bypass equality tests for identical
objectstoimproveperformanceandtomaintaintheirinternalinvariants.
Lexicographicalcomparisonbetweenbuilt-incollectionsworksasfollows:
–For two collections to compare equal, they must be of the same type, have the same length, and each
pair of corresponding elements must compare equal (for example, [1,2] == (1,2) is false because
thetypeisnotthesame).
–Collections that support order comparison are ordered the same as their first unequal elements (for ex-
ample, [1,2,x] <= [1,2,y] has the same value as x <= y). If a corresponding element does not
exist,theshortercollectionisorderedfirst(forexample, [1,2] < [1,2,3] istrue).
•Mappings(instancesof dict)compareequalifandonlyiftheyhaveequal (key, value) pairs. Equality
comparisonofthekeysandvaluesenforcesreflexivity.
Ordercomparisons( <,>,<=,and >=)raise TypeError .
•Sets(instancesof setorfrozenset )canbecomparedwithinandacrosstheirtypes.
Theydefineordercomparisonoperatorstomeansubsetandsupersettests. Thoserelationsdonotdefinetotal
orderings(forexample,thetwosets {1,2}and{2,3}arenotequal,norsubsetsofoneanother,norsupersets
ofoneanother). Accordingly,setsarenotappropriateargumentsforfunctionswhichdependontotalordering
(forexample, min(),max(),and sorted() produceundefinedresultsgivenalistofsetsasinputs).
Comparisonofsetsenforcesreflexivityofitselements.
•Most other built-in types have no comparison methods implemented, so they inherit the default comparison
behavior.
User-definedclassesthatcustomizetheircomparisonbehaviorshouldfollowsomeconsistencyrules,ifpossible:
•Equalitycomparisonshouldbereflexive. Inotherwords,identicalobjectsshouldcompareequal:
x is yimplies x == y
•Comparisonshouldbesymmetric. Inotherwords,thefollowingexpressionsshouldhavethesameresult:
x == yandy == x
x != yandy != x
3TheUnicodestandarddistinguishesbetween code points (e.g. U+0041)and abstract characters (e.g. “LATINCAPITALLETTERA”).While
most abstract characters in Unicode are only represented using one code point, there is a number of abstract characters that can in addition be
representedusingasequenceofmorethanonecodepoint. Forexample,theabstractcharacter“LATINCAPITALLETTERCWITHCEDILLA”
can be represented as a single precomposed character at code position U+00C7, or as a sequence of a base character at code position U+0043
(LATINCAPITALLETTERC),followedbya combining character atcodepositionU+0327(COMBININGCEDILLA).
The comparison operators on strings compare at the level of Unicode code points. This may be counter-intuitive to humans. For example,
"\u00C7" == "\u0043\u0327" isFalse, even though both strings represent the same abstract character “LATIN CAPITAL LETTER C
WITHCEDILLA”.
Tocomparestringsatthelevelofabstractcharacters(thatis,inawayintuitivetohumans),use unicodedata.normalize() .
92 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
x < yandy > x
x <= yandy >= x
•Comparisonshouldbetransitive. Thefollowing(non-exhaustive)examplesillustratethat:
x > y and y > z implies x > z
x < y and y <= z implies x < z
•Inverse comparison should result in the boolean negation. In other words, the following expressions should
havethesameresult:
x == yandnot x != y
x < yandnot x >= y (fortotalordering)
x > yandnot x <= y (fortotalordering)
Thelasttwoexpressionsapplytototallyorderedcollections(e.g. tosequences, butnottosetsormappings).
Seealsothe total_ordering() decorator.
•Thehash()resultshouldbeconsistentwithequality. Objectsthatareequalshouldeitherhavethesamehash
value,orbemarkedasunhashable.
Pythondoesnotenforcetheseconsistencyrules. Infact, thenot-a-numbervaluesarean examplefornotfollowing
theserules.
6.10.2 Membership test operations
The operators inandnot intest for membership. x in sevaluates to Trueifxis a member of s, and False
otherwise. x not in s returns the negation of x in s. All built-in sequences and set types support this as well
asdictionary, forwhich intestswhetherthedictionaryhasagivenkey. Forcontainertypessuchaslist, tuple, set,
frozenset,dict,orcollections.deque,theexpression x in yisequivalentto any(x is e or x == e for e in
y).
Forthestringandbytestypes, x in yisTrueifandonlyif xisasubstringof y. Anequivalenttestis y.find(x)
!= -1. Emptystringsarealwaysconsideredtobeasubstringofanyotherstring,so "" in "abc" willreturn True.
For user-defined classes which define the __contains__() method, x in yreturns Trueify.
__contains__(x) returnsatruevalue,and Falseotherwise.
Foruser-definedclasseswhichdonotdefine __contains__() butdodefine __iter__() ,x in yisTrueifsome
value z,forwhichtheexpression x is z or x == z istrue,isproducedwhileiteratingover y. Ifanexceptionis
raisedduringtheiteration,itisasif inraisedthatexception.
Lastly, the old-style iteration protocol is tried: if a class defines __getitem__() ,x in yisTrueif and only if
thereisanon-negativeintegerindex isuchthat x is y[i] or x == y[i] ,andnolowerintegerindexraisesthe
IndexError exception. (Ifanyotherexceptionisraised,itisasif inraisedthatexception).
Theoperator not inisdefinedtohavetheinversetruthvalueof in.
6.10.3 Identity comparisons
Theoperators isandis nottestforanobject’sidentity: x is yistrueifandonlyif xandyarethesameobject.
AnObject’sidentityisdeterminedusingthe id()function. x is not y yieldstheinversetruthvalue.4
6.11Boolean operations
or_test ::= and_test |or_test "or" and_test
and_test ::= not_test |and_test "and" not_test
not_test ::= comparison | "not" not_test
4Duetoautomaticgarbage-collection,freelists,andthedynamicnatureofdescriptors,youmaynoticeseeminglyunusualbehaviourincertain
usesofthe isoperator,likethoseinvolvingcomparisonsbetweeninstancemethods,orconstants. Checktheirdocumentationformoreinfo.
6.11. Boolean operations 93
The Python Language Reference, Release 3.13.0
In the context of Boolean operations, and also when expressions are used by control flow statements, the following
valuesareinterpretedasfalse: False,None,numericzeroofalltypes,andemptystringsandcontainers(including
strings,tuples,lists,dictionaries,setsandfrozensets). Allothervaluesareinterpretedastrue. User-definedobjects
cancustomizetheirtruthvaluebyprovidinga __bool__() method.
Theoperator notyields Trueifitsargumentisfalse, Falseotherwise.
Theexpression x and yfirstevaluates x;ifxisfalse,itsvalueisreturned;otherwise, yisevaluatedandtheresulting
valueisreturned.
Theexpression x or yfirstevaluates x;ifxistrue,itsvalueisreturned;otherwise, yisevaluatedandtheresulting
valueisreturned.
Note that neither andnororrestrict the value and type they return to FalseandTrue, but rather return the last
evaluated argument. This is sometimes useful, e.g., if sis a string that should be replaced by a default value if it
isempty,theexpression s or 'foo' yieldsthedesiredvalue. Because nothastocreateanewvalue,itreturnsa
booleanvalueregardlessofthetypeofitsargument(forexample, not 'foo' produces Falseratherthan ''.)
6.12Assignment expressions
assignment_expression ::= [identifier ":="] expression
Anassignmentexpression(sometimesalsocalleda“namedexpression”or“walrus”)assignsan expression toan
identifier ,whilealsoreturningthevalueofthe expression .
Onecommonusecaseiswhenhandlingmatchedregularexpressions:
ifmatching :=pattern .search(data):
do_something(matching)
Or,whenprocessingafilestreaminchunks:
while chunk :=file .read( 9000 ):
process(chunk)
Assignment expressions must be surrounded by parentheses when used as expression statements and when used
as sub-expressions in slicing, conditional, lambda, keyword-argument, and comprehension-if expressions and in
assert,with, and assignment statements. In all other places where they can be used, parentheses are not re-
quired,includingin ifandwhilestatements.
Addedinversion3.8: See PEP 572formoredetailsaboutassignmentexpressions.
6.13Conditional expressions
conditional_expression ::= or_test ["if" or_test "else" expression ]
expression ::= conditional_expression |lambda_expr
Conditionalexpressions(sometimescalleda“ternaryoperator”)havethelowestpriorityofallPythonoperations.
The expression x if C else y first evaluates the condition, Crather than x. IfCis true, xis evaluated and its
valueisreturned;otherwise, yisevaluatedanditsvalueisreturned.
SeePEP 308formoredetailsaboutconditionalexpressions.
6.14Lambdas
lambda_expr ::= "lambda" [ parameter_list ] ":" expression
94 Chapter 6. Expressions
The Python Language Reference, Release 3.13.0
Lambda expressions (sometimes called lambda forms) are used to create anonymous functions. The expression
lambda parameters: expression yieldsafunctionobject. Theunnamedobjectbehaveslikeafunctionobject
definedwith:
def <lambda>(parameters):
return expression
Seesection Function definitions forthesyntaxofparameterlists. Notethatfunctionscreatedwithlambdaexpressions
cannotcontainstatementsorannotations.
6.15Expression lists
starred_expression ::= ["*"] or_expr
flexible_expression ::= assignment_expression |starred_expression
flexible_expression_list ::= flexible_expression ("," flexible_expression )* [","]
starred_expression_list ::= starred_expression ("," starred_expression )* [","]
expression_list ::= expression ("," expression )* [","]
yield_list ::= expression_list |starred_expression "," [ starred_expression_list ]
Exceptwhenpartofalistorsetdisplay,anexpressionlistcontainingatleastonecommayieldsatuple. Thelength
ofthetupleisthenumberofexpressionsinthelist. Theexpressionsareevaluatedfromlefttoright.
Anasterisk *denotes iterable unpacking . Itsoperandmustbean iterable. Theiterableisexpandedintoasequence
ofitems,whichareincludedinthenewtuple,list,orset,atthesiteoftheunpacking.
Addedinversion3.5: Iterableunpackinginexpressionlists,originallyproposedby PEP 448.
Addedinversion3.11: Anyiteminanexpressionlistmaybestarred. See PEP 646.
A trailing comma is required only to create a one-item tuple, such as 1,; it is optional in all other cases. A single
expressionwithoutatrailingcommadoesn’tcreateatuple,butratheryieldsthevalueofthatexpression. (Tocreate
anemptytuple,useanemptypairofparentheses: ().)
6.16Evaluation order
Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is
evaluatedbeforetheleft-handside.
Inthefollowinglines,expressionswillbeevaluatedinthearithmeticorderoftheirsuffixes:
expr1, expr2, expr3, expr4
(expr1, expr2, expr3, expr4)
{expr1: expr2, expr3: expr4}
expr1 +expr2 *(expr3 -expr4)
expr1(expr2, expr3, *expr4, **expr5)
expr3, expr4 =expr1, expr2
6.17Operator precedence
ThefollowingtablesummarizestheoperatorprecedenceinPython,fromhighestprecedence(mostbinding)tolowest
precedence (least binding). Operators in the same box have the same precedence. Unless the syntax is explicitly
given,operatorsarebinary. Operatorsinthesameboxgrouplefttoright(exceptforexponentiationandconditional
expressions,whichgroupfromrighttoleft).
Note that comparisons, membership tests, and identity tests, all have the same precedence and have a left-to-right
chainingfeatureasdescribedinthe Comparisons section.
6.15. Expression lists 95
The Python Language Reference, Release 3.13.0
Operator Description
(expressions...) ,
[expressions...] , {key: value...} ,
{expressions...}Binding or parenthesized expression, list display,
dictionarydisplay,setdisplay
x[index] ,x[index:index] ,x(arguments...) ,x.
attributeSubscription,slicing,call,attributereference
await x Awaitexpression
** Exponentiation5
+x,-x,~x Positive,negative,bitwiseNOT
*,@,/,//,% Multiplication, matrix multiplication, division,
floordivision,remainder6
+,- Additionandsubtraction
<<,>> Shifts
& BitwiseAND
^ BitwiseXOR
| BitwiseOR
in,not in,is,is not,<,<=,>,>=,!=,== Comparisons, including membership tests and
identitytests
not x BooleanNOT
and BooleanAND
or BooleanOR
if–else Conditionalexpression
lambda Lambdaexpression
:= Assignmentexpression
5Thepoweroperator **bindslesstightlythananarithmeticorbitwiseunaryoperatoronitsright,thatis, 2**-1is0.5.
6The%operatorisalsousedforstringformatting;thesameprecedenceapplies.
96 Chapter 6. Expressions
CHAPTER
SEVEN
SIMPLE STATEMENTS
A simple statement is comprised within a single logical line. Several simple statements may occur on a single line
separatedbysemicolons. Thesyntaxforsimplestatementsis:
simple_stmt ::= expression_stmt
|assert_stmt
|assignment_stmt
|augmented_assignment_stmt
|annotated_assignment_stmt
|pass_stmt
|del_stmt
|return_stmt
|yield_stmt
|raise_stmt
|break_stmt
|continue_stmt
|import_stmt
|future_stmt
|global_stmt
|nonlocal_stmt
|type_stmt
7.1Expression statements
Expressionstatementsareused(mostlyinteractively)tocomputeandwriteavalue,or(usually)tocallaprocedure
(afunctionthatreturnsnomeaningfulresult;inPython,proceduresreturnthevalue None). Otherusesofexpression
statementsareallowedandoccasionallyuseful. Thesyntaxforanexpressionstatementis:
expression_stmt ::= starred_expression
Anexpressionstatementevaluatestheexpressionlist(whichmaybeasingleexpression).
In interactive mode, if the value is not None, it is converted to a string using the built-in repr()function and the
resultingstringiswrittentostandardoutputonalinebyitself(exceptiftheresultis None, so thatprocedurecalls
donotcauseanyoutput.)
7.2Assignment statements
Assignmentstatementsareusedto(re)bindnamestovaluesandtomodifyattributesoritemsofmutableobjects:
assignment_stmt ::= (target_list "=")+ ( starred_expression |yield_expression )
97
The Python Language Reference, Release 3.13.0
target_list ::= target ("," target )* [","]
target ::= identifier
| "(" [ target_list ] ")"
| "[" [ target_list ] "]"
|attributeref
|subscription
|slicing
| "*" target
(Seesection Primariesforthesyntaxdefinitionsfor attributeref ,subscription ,andslicing.)
An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-
separatedlist,thelatteryieldingatuple)andassignsthesingleresultingobjecttoeachofthetargetlists,fromleftto
right.
Assignmentisdefinedrecursivelydependingontheformofthetarget(list). Whenatargetispartofamutableobject
(anattributereference,subscriptionorslicing),themutableobjectmustultimatelyperformtheassignmentanddecide
aboutitsvalidity,andmayraiseanexceptioniftheassignmentisunacceptable. Therulesobservedbyvarioustypes
andtheexceptionsraisedaregivenwiththedefinitionoftheobjecttypes(seesection The standard type hierarchy ).
Assignmentofanobjecttoatargetlist,optionallyenclosedinparenthesesorsquarebrackets,isrecursivelydefined
asfollows.
•If the target list is a single target with no trailing comma, optionally in parentheses, the object is assigned to
thattarget.
•Else:
–Ifthetargetlistcontainsonetargetprefixedwithanasterisk,calleda“starred”target: Theobjectmust
beaniterablewithatleastasmanyitemsastherearetargetsinthetargetlist,minusone. Thefirstitems
oftheiterableareassigned,fromlefttoright,tothetargetsbeforethestarredtarget. Thefinalitemsof
theiterableareassignedtothetargetsafterthestarredtarget. Alistoftheremainingitemsintheiterable
isthenassignedtothestarredtarget(thelistcanbeempty).
–Else: Theobjectmustbeaniterablewiththesamenumberofitemsastherearetargetsinthetargetlist,
andtheitemsareassigned,fromlefttoright,tothecorrespondingtargets.
Assignmentofanobjecttoasingletargetisrecursivelydefinedasfollows.
•Ifthetargetisanidentifier(name):
–Ifthenamedoesnotoccurina globalornonlocal statementinthecurrentcodeblock: thenameis
boundtotheobjectinthecurrentlocalnamespace.
–Otherwise: thenameisboundtotheobjectintheglobalnamespaceortheouternamespacedetermined
bynonlocal ,respectively.
The name is rebound if it was already bound. This may cause the reference count for the object previously
bound to the name to reach zero, causing the object to be deallocated and its destructor (if it has one) to be
called.
•If the target is an attribute reference: The primary expression in the reference is evaluated. It should yield
an object with assignable attributes; if this is not the case, TypeError is raised. That object is then asked
toassigntheassignedobjecttothegivenattribute;ifitcannotperformtheassignment,itraisesanexception
(usuallybutnotnecessarily AttributeError ).
Note: Iftheobjectisaclassinstanceandtheattributereferenceoccursonbothsidesoftheassignmentoperator,
theright-handsideexpression, a.xcanaccesseitheraninstanceattributeor(ifnoinstanceattributeexists)a
classattribute. Theleft-handsidetarget a.xisalwayssetasaninstanceattribute,creatingitifnecessary. Thus,
the two occurrences of a.xdo not necessarily refer to the same attribute: if the right-hand side expression
referstoaclassattribute,theleft-handsidecreatesanewinstanceattributeasthetargetoftheassignment:
class Cls:
x=3 # class variable
(continuesonnextpage)
98 Chapter 7. Simple statements
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
inst =Cls()
inst .x=inst .x+1 # writes inst.x as 4 leaving Cls.x as 3
This description does not necessarily apply to descriptor attributes, such as properties created with
property() .
•If the target is a subscription: The primary expression in the reference is evaluated. It should yield either
a mutable sequence object (such as a list) or a mapping object (such as a dictionary). Next, the subscript
expressionisevaluated.
Iftheprimaryisamutablesequenceobject(suchasalist),thesubscriptmustyieldaninteger. Ifitisnegative,
thesequence’slengthisaddedtoit. Theresultingvaluemustbeanonnegativeintegerlessthanthesequence’s
length, andthesequenceisaskedtoassigntheassignedobjecttoitsitemwiththatindex. Iftheindexisout
ofrange, IndexError israised(assignmenttoasubscriptedsequencecannotaddnewitemstoalist).
Iftheprimaryisamappingobject(suchasadictionary),thesubscriptmusthaveatypecompatiblewiththe
mapping’skeytype,andthemappingisthenaskedtocreateakey/valuepairwhichmapsthesubscripttothe
assigned object. This can either replace an existing key/value pair with the same key value, or insert a new
key/valuepair(ifnokeywiththesamevalueexisted).
Foruser-definedobjects,the __setitem__() methodiscalledwithappropriatearguments.
•Ifthetargetisaslicing: Theprimaryexpressioninthereferenceisevaluated. Itshouldyieldamutablesequence
object(suchasalist). Theassignedobjectshouldbeasequenceobjectofthesametype. Next,thelowerand
upper bound expressions are evaluated, insofar they are present; defaults are zero and the sequence’s length.
Theboundsshouldevaluatetointegers. Ifeitherboundisnegative, thesequence’slengthisaddedtoit. The
resulting bounds are clipped to lie between zero and the sequence’s length, inclusive. Finally, the sequence
object is asked to replace the slice with the items of the assigned sequence. The length of the slice may be
differentfromthelengthoftheassignedsequence,thuschangingthelengthofthetargetsequence,ifthetarget
sequenceallowsit.
CPython implementation detail: In the current implementation, the syntax for targets is taken to be the same as
forexpressions,andinvalidsyntaxisrejectedduringthecodegenerationphase,causinglessdetailederrormessages.
Althoughthedefinitionofassignmentimpliesthatoverlapsbetweentheleft-handsideandtheright-handsideare‘si-
multaneous’(forexample a, b = b, a swapstwovariables),overlaps withinthecollectionofassigned-tovariables
occurleft-to-right,sometimesresultinginconfusion. Forinstance,thefollowingprogramprints [0, 2]:
x=[0,1]
i=0
i, x[i] =1,2 # i is updated, then x[i] is updated
print (x)
µSee also
PEP 3132 - Extended Iterable Unpacking
Thespecificationforthe *targetfeature.
7.2.1Augmented assignment statements
Augmentedassignmentisthecombination,inasinglestatement,ofabinaryoperationandanassignmentstatement:
augmented_assignment_stmt ::= augtarget augop (expression_list |yield_expression )
augtarget ::= identifier |attributeref |subscription |slicing
augop ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**="
| ">>=" | "<<=" | "&=" | "^=" | "|="
(Seesection Primariesforthesyntaxdefinitionsofthelastthreesymbols.)
7.2. Assignment statements 99
The Python Language Reference, Release 3.13.0
Anaugmentedassignmentevaluatesthetarget(which,unlikenormalassignmentstatements,cannotbeanunpacking)
and the expression list, performs the binary operation specific to the type of assignment on the two operands, and
assignstheresulttotheoriginaltarget. Thetargetisonlyevaluatedonce.
An augmented assignment statement like x += 1can be rewritten as x = x + 1 to achieve a similar, but not
exactlyequaleffect. Intheaugmentedversion, xisonlyevaluatedonce. Also,whenpossible,theactualoperationis
performed in-place,meaningthatratherthancreatinganewobjectandassigningthattothetarget,theoldobjectis
modifiedinstead.
Unlikenormalassignments,augmentedassignmentsevaluatetheleft-handside beforeevaluatingtheright-handside.
For example, a[i] += f(x) first looks-up a[i], then it evaluates f(x)and performs the addition, and lastly, it
writestheresultbackto a[i].
With the exception of assigning to tuples and multiple targets in a single statement, the assignment done by aug-
mentedassignmentstatementsishandledthesamewayasnormalassignments. Similarly,withtheexceptionofthe
possible in-placebehavior,thebinaryoperationperformedbyaugmentedassignmentisthesameasthenormalbinary
operations.
For targets which are attribute references, the same caveat about class and instance attributes applies as for regular
assignments.
7.2.2Annotated assignment statements
Annotation assignmentisthecombination,inasinglestatement,ofavariableorattributeannotationandanoptional
assignmentstatement:
annotated_assignment_stmt ::= augtarget ":" expression
["=" ( starred_expression |yield_expression )]
Thedifferencefromnormal Assignment statements isthatonlyasingletargetisallowed.
Theassignmenttargetisconsidered“simple”ifitconsistsofasinglenamethatisnotenclosedinparentheses. For
simple assignment targets, if in class or module scope, the annotations are evaluated and stored in a special class
or module attribute __annotations__ that is a dictionary mapping from variable names (mangled if private) to
evaluated annotations. This attribute is writable and is automatically created at the start of class or module body
execution,ifannotationsarefoundstatically.
Iftheassignmenttargetisnotsimple(anattribute,subscriptnode,orparenthesizedname),theannotationisevaluated
ifinclassormodulescope,butnotstored.
If a name is annotated in a function scope, then this name is local for that scope. Annotations are never evaluated
andstoredinfunctionscopes.
Iftherighthandsideispresent,anannotatedassignmentperformstheactualassignmentbeforeevaluatingannotations
(where applicable). If the right hand side is not present for an expression target, then the interpreter evaluates the
targetexceptforthelast __setitem__() or__setattr__() call.
µSee also
PEP 526 - Syntax for Variable Annotations
Theproposalthataddedsyntaxforannotatingthetypesofvariables(includingclassvariablesandinstance
variables),insteadofexpressingthemthroughcomments.
PEP 484 - Type hints
Theproposalthataddedthe typingmoduletoprovideastandardsyntaxfortypeannotationsthatcanbe
usedinstaticanalysistoolsandIDEs.
Changed in version 3.8: Now annotated assignments allow the same expressions in the right hand side as regular
assignments. Previously,someexpressions(likeun-parenthesizedtupleexpressions)causedasyntaxerror.
100 Chapter 7. Simple statements
The Python Language Reference, Release 3.13.0
7.3The assert statement
Assertstatementsareaconvenientwaytoinsertdebuggingassertionsintoaprogram:
assert_stmt ::= "assert" expression ["," expression ]
Thesimpleform, assert expression ,isequivalentto
if__debug__:
ifnot expression: raise AssertionError
Theextendedform, assert expression1, expression2 ,isequivalentto
if__debug__:
ifnot expression1: raise AssertionError (expression2)
Theseequivalencesassumethat __debug__ andAssertionError refertothebuilt-invariableswiththosenames.
Inthecurrentimplementation,thebuilt-invariable __debug__ isTrueundernormalcircumstances, Falsewhen
optimizationisrequested(commandlineoption -O).Thecurrentcodegeneratoremitsnocodeforanassertstatement
when optimization is requested at compile time. Note that it is unnecessary to include the source code for the
expressionthatfailedintheerrormessage;itwillbedisplayedaspartofthestacktrace.
Assignmentsto __debug__ areillegal. Thevalueforthebuilt-invariableisdeterminedwhentheinterpreterstarts.
7.4The passstatement
pass_stmt ::= "pass"
passis a null operation — when it is executed, nothing happens. It is useful as a placeholder when a statement is
requiredsyntactically,butnocodeneedstobeexecuted,forexample:
def f(arg): pass # a function that does nothing (yet)
class C:pass # a class with no methods (yet)
7.5The delstatement
del_stmt ::= "del" target_list
Deletionisrecursivelydefinedverysimilartothewayassignmentisdefined. Ratherthanspellingitoutinfulldetails,
herearesomehints.
Deletionofatargetlistrecursivelydeleteseachtarget,fromlefttoright.
Deletionofanameremovesthebindingofthatnamefromthelocalorglobalnamespace,dependingonwhetherthe
nameoccursina globalstatementinthesamecodeblock. Ifthenameisunbound,a NameError exceptionwill
beraised.
Deletion of attribute references, subscriptions and slicings is passed to the primary object involved; deletion of a
slicingisingeneralequivalenttoassignmentofanemptysliceoftherighttype(buteventhisisdeterminedbythe
slicedobject).
Changed in version 3.2: Previously it was illegal to delete a name from the local namespace if it occurs as a free
variableinanestedblock.
7.3. The assert statement 101
The Python Language Reference, Release 3.13.0
7.6The return statement
return_stmt ::= "return" [ expression_list ]
returnmayonlyoccursyntacticallynestedinafunctiondefinition,notwithinanestedclassdefinition.
Ifanexpressionlistispresent,itisevaluated,else Noneissubstituted.
returnleavesthecurrentfunctioncallwiththeexpressionlist(or None)asreturnvalue.
When returnpassescontroloutofa trystatementwitha finallyclause,that finallyclauseisexecutedbefore
reallyleavingthefunction.
Inageneratorfunction,the returnstatementindicatesthatthegeneratorisdoneandwillcause StopIteration
to be raised. The returned value (if any) is used as an argument to construct StopIteration and becomes the
StopIteration.value attribute.
In an asynchronous generator function, an empty returnstatement indicates that the asynchronous generator is
done and will cause StopAsyncIteration to be raised. A non-empty returnstatement is a syntax error in an
asynchronousgeneratorfunction.
7.7The yieldstatement
yield_stmt ::= yield_expression
Ayieldstatement is semantically equivalent to a yield expression . The yield statement can be used to omit the
parentheses that would otherwise be required in the equivalent yield expression statement. For example, the yield
statements
yield <expr >
yield from <expr >
areequivalenttotheyieldexpressionstatements
(yield <expr >)
(yield from <expr >)
Yieldexpressionsandstatementsareonlyusedwhendefininga generatorfunction,andareonlyusedinthebodyof
thegeneratorfunction. Usingyieldinafunctiondefinitionissufficienttocausethatdefinitiontocreateagenerator
functioninsteadofanormalfunction.
Forfulldetailsof yieldsemantics,refertothe Yield expressions section.
7.8The raisestatement
raise_stmt ::= "raise" [ expression ["from" expression ]]
Ifnoexpressionsarepresent, raisere-raisestheexceptionthatiscurrentlybeinghandled,whichisalsoknownas
theactive exception . Ifthereisn’tcurrentlyanactiveexception,a RuntimeError exceptionisraisedindicatingthat
thisisanerror.
Otherwise, raiseevaluatesthefirstexpressionastheexceptionobject. Itmustbeeithera subclassoraninstance
ofBaseException . Ifitisaclass,theexceptioninstancewillbeobtainedwhenneededbyinstantiatingtheclass
withnoarguments.
Thetypeoftheexceptionistheexceptioninstance’sclass,the valueistheinstanceitself.
A traceback object is normally created automatically when an exception is raised and attached to it as the
__traceback__ attribute. You can create an exception and set your own traceback in one step using the
102 Chapter 7. Simple statements
The Python Language Reference, Release 3.13.0
with_traceback() exception method (which returns the same exception instance, with its traceback set to its
argument),likeso:
raise Exception ("foo occurred ").with_traceback(tracebackobj)
Thefromclause is used for exception chaining: if given, the second expression must be another exception class
or instance. If the second expression is an exception instance, it will be attached to the raised exception as the
__cause__ attribute (which is writable). If the expression is an exception class, the class will be instantiated and
the resulting exception instance will be attached to the raised exception as the __cause__ attribute. If the raised
exceptionisnothandled,bothexceptionswillbeprinted:
>>> try:
... print (1/0)
... except Exception asexc:
... raise RuntimeError ("Something bad happened ")from exc
...
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
print (1/0)
~~^~~
ZeroDivisionError : division by zero
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
File "<stdin>" , line 4, in <module>
raise RuntimeError ("Something bad happened ")from exc
RuntimeError : Something bad happened
Asimilarmechanismworksimplicitlyifanewexceptionisraisedwhenanexceptionisalreadybeinghandled. An
exceptionmaybehandledwhenan exceptorfinallyclause,ora withstatement,isused. Thepreviousexception
isthenattachedasthenewexception’s __context__ attribute:
>>> try:
... print (1/0)
... except :
... raise RuntimeError ("Something bad happened ")
...
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
print (1/0)
~~^~~
ZeroDivisionError : division by zero
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "<stdin>" , line 4, in <module>
raise RuntimeError ("Something bad happened ")
RuntimeError : Something bad happened
Exceptionchainingcanbeexplicitlysuppressedbyspecifying Noneinthe fromclause:
>>> try:
... print (1/0)
... except :
... raise RuntimeError ("Something bad happened ")from None
...
(continuesonnextpage)
7.8. The raisestatement 103
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
Traceback (most recent call last):
File "<stdin>" , line 4, in <module>
RuntimeError : Something bad happened
Additionalinformationonexceptionscanbefoundinsection Exceptions,andinformationabouthandlingexceptions
isinsection The try statement .
Changedinversion3.3: Noneisnowpermittedas Yinraise X from Y .
Addedthe __suppress_context__ attributetosuppressautomaticdisplayoftheexceptioncontext.
Changed in version 3.11: If the traceback of the active exception is modified in an exceptclause, a subsequent
raisestatementre-raisestheexceptionwiththemodifiedtraceback. Previously, theexceptionwasre-raisedwith
thetracebackithadwhenitwascaught.
7.9The breakstatement
break_stmt ::= "break"
breakmayonlyoccursyntacticallynestedina fororwhileloop, butnotnestedinafunctionorclassdefinition
withinthatloop.
Itterminatesthenearestenclosingloop,skippingtheoptional elseclauseiftheloophasone.
Ifaforloopisterminatedby break,theloopcontroltargetkeepsitscurrentvalue.
When breakpassescontroloutofa trystatementwitha finallyclause,that finallyclauseisexecutedbefore
reallyleavingtheloop.
7.10The continue statement
continue_stmt ::= "continue"
continue mayonlyoccursyntacticallynestedina fororwhileloop,butnotnestedinafunctionorclassdefinition
withinthatloop. Itcontinueswiththenextcycleofthenearestenclosingloop.
When continue passes control out of a trystatement with a finallyclause, that finallyclause is executed
beforereallystartingthenextloopcycle.
7.11The import statement
import_stmt ::= "import" module ["as" identifier ] ("," module ["as" identifier ])*
| "from" relative_module "import" identifier ["as" identifier ]
("," identifier ["as" identifier ])*
| "from" relative_module "import" "(" identifier ["as" identifier ]
("," identifier ["as" identifier ])* [","] ")"
| "from" relative_module "import" "*"
module ::= (identifier ".")* identifier
relative_module ::= "."* module | "."+
Thebasicimportstatement(no fromclause)isexecutedintwosteps:
1.findamodule,loadingandinitializingitifnecessary
2.defineanameornamesinthelocalnamespaceforthescopewherethe importstatementoccurs.
When the statement contains multiple clauses (separated by commas) the two steps are carried out separately for
eachclause,justasthoughtheclauseshadbeenseparatedoutintoindividualimportstatements.
104 Chapter 7. Simple statements
The Python Language Reference, Release 3.13.0
Thedetailsofthefirststep,findingandloadingmodules,aredescribedingreaterdetailinthesectiononthe import
system,whichalsodescribesthevarioustypesofpackagesandmodulesthatcanbeimported,aswellasallthehooks
thatcanbeusedtocustomizetheimportsystem. Notethatfailuresinthisstepmayindicateeitherthatthemodule
couldnotbelocated, orthatanerroroccurredwhileinitializingthemodule,whichincludesexecutionofthemodule’s
code.
If the requested module is retrieved successfully, it will be made available in the local namespace in one of three
ways:
•Ifthemodulenameisfollowedby as,thenthenamefollowing asisbounddirectlytotheimportedmodule.
•Ifnoothernameisspecified,andthemodulebeingimportedisatoplevelmodule,themodule’snameisbound
inthelocalnamespaceasareferencetotheimportedmodule
•Ifthemodulebeingimportedis notatoplevelmodule, thenthenameofthetoplevelpackagethatcontains
themoduleisboundinthelocalnamespaceasareferencetothetoplevelpackage. Theimportedmodulemust
beaccessedusingitsfullqualifiednameratherthandirectly
Thefromformusesaslightlymorecomplexprocess:
1.findthemodulespecifiedinthe fromclause,loadingandinitializingitifnecessary;
2.foreachoftheidentifiersspecifiedinthe importclauses:
1.checkiftheimportedmodulehasanattributebythatname
2.ifnot,attempttoimportasubmodulewiththatnameandthenchecktheimportedmoduleagainforthat
attribute
3.iftheattributeisnotfound, ImportError israised.
4.otherwise,areferencetothatvalueisstoredinthelocalnamespace,usingthenameinthe asclauseifit
ispresent,otherwiseusingtheattributename
Examples:
import foo # foo imported and bound locally
import foo.bar.baz # foo, foo.bar, and foo.bar.baz imported, foo bound ␣
,→locally
import foo.bar.baz asfbb # foo, foo.bar, and foo.bar.baz imported, foo.bar.baz ␣
,→bound as fbb
from foo.bar import baz # foo, foo.bar, and foo.bar.baz imported, foo.bar.baz ␣
,→bound as baz
from foo import attr # foo imported and foo.attr bound as attr
If the list of identifiers is replaced by a star ( '*'), all public names defined in the module are bound in the local
namespaceforthescopewherethe importstatementoccurs.
Thepublic names defined by a module are determined by checking the module’s namespace for a variable named
__all__; if defined, it must be a sequence of strings which are names defined or imported by that module. The
names given in __all__are all considered public and are required to exist. If __all__is not defined, the set of
publicnamesincludesallnamesfoundinthemodule’snamespacewhichdonotbeginwithanunderscorecharacter
('_').__all__should contain the entire public API. It is intended to avoid accidentally exporting items that are
notpartoftheAPI(suchaslibrarymoduleswhichwereimportedandusedwithinthemodule).
Thewildcardformofimport— from module import * —isonlyallowedatthemodulelevel. Attemptingto
useitinclassorfunctiondefinitionswillraisea SyntaxError .
Whenspecifyingwhatmoduletoimportyoudonothavetospecifytheabsolutenameofthemodule. Whenamodule
orpackageiscontainedwithinanotherpackageitispossibletomakearelativeimportwithinthesametoppackage
withouthavingtomentionthepackagename. Byusingleadingdotsinthespecifiedmoduleorpackageafter from
youcanspecifyhowhightotraverseupthecurrentpackagehierarchywithoutspecifyingexactnames. Oneleading
dotmeansthecurrentpackagewherethemodulemakingtheimportexists. Twodotsmeansuponepackagelevel.
Threedotsisuptwolevels,etc. Soifyouexecute from . import mod fromamoduleinthe pkgpackagethenyou
willendupimporting pkg.mod. Ifyouexecute from ..subpkg2 import mod fromwithin pkg.subpkg1 you
7.11. The import statement 105
The Python Language Reference, Release 3.13.0
willimport pkg.subpkg2.mod . Thespecificationforrelativeimportsiscontainedinthe Package Relative Imports
section.
importlib.import_module() isprovidedtosupportapplicationsthatdeterminedynamicallythemodulestobe
loaded.
Raises an auditing event importwith arguments module,filename ,sys.path ,sys.meta_path ,sys.
path_hooks .
7.11.1 Future statements
Afuture statement isadirectivetothecompilerthataparticularmoduleshouldbecompiledusingsyntaxorsemantics
thatwillbeavailableinaspecifiedfuturereleaseofPythonwherethefeaturebecomesstandard.
ThefuturestatementisintendedtoeasemigrationtofutureversionsofPythonthatintroduceincompatiblechangesto
thelanguage. Itallowsuseofthenewfeaturesonaper-modulebasisbeforethereleaseinwhichthefeaturebecomes
standard.
future_stmt ::= "from" "__future__" "import" feature ["as" identifier ]
("," feature ["as" identifier ])*
| "from" "__future__" "import" "(" feature ["as" identifier ]
("," feature ["as" identifier ])* [","] ")"
feature ::= identifier
Afuturestatementmustappearnearthetopofthemodule. Theonlylinesthatcanappearbeforeafuturestatement
are:
•themoduledocstring(ifany),
•comments,
•blanklines,and
•otherfuturestatements.
Theonlyfeaturethatrequiresusingthefuturestatementis annotations (seePEP 563).
All historical features enabled by the future statement are still recognized by Python 3. The list includes
absolute_import ,division ,generators ,generator_stop ,unicode_literals ,print_function ,
nested_scopes andwith_statement . They are all redundant because they are always enabled, and only kept
forbackwardscompatibility.
Afuturestatementisrecognizedandtreatedspeciallyatcompiletime: Changestothesemanticsofcoreconstructs
areoftenimplementedbygeneratingdifferentcode. Itmayevenbethecasethatanewfeatureintroducesnewincom-
patiblesyntax(suchasanewreservedword),inwhichcasethecompilermayneedtoparsethemoduledifferently.
Suchdecisionscannotbepushedoffuntilruntime.
Foranygivenrelease,thecompilerknowswhichfeaturenameshavebeendefined,andraisesacompile-timeerror
ifafuturestatementcontainsafeaturenotknowntoit.
The direct runtime semantics are the same as for any import statement: there is a standard module __future__ ,
describedlater,anditwillbeimportedintheusualwayatthetimethefuturestatementisexecuted.
Theinterestingruntimesemanticsdependonthespecificfeatureenabledbythefuturestatement.
Notethatthereisnothingspecialaboutthestatement:
import __future__ [asname]
Thatisnotafuturestatement;it’sanordinaryimportstatementwithnospecialsemanticsorsyntaxrestrictions.
Code compiled by calls to the built-in functions exec()andcompile() that occur in a module Mcontaining a
futurestatementwill,bydefault,usethenewsyntaxorsemanticsassociatedwiththefuturestatement. Thiscanbe
controlledbyoptionalargumentsto compile() —seethedocumentationofthatfunctionfordetails.
106 Chapter 7. Simple statements
The Python Language Reference, Release 3.13.0
A future statement typed at an interactive interpreter prompt will take effect for the rest of the interpreter session.
If an interpreter is started with the -ioption, is passed a script name to execute, and the script includes a future
statement,itwillbeineffectintheinteractivesessionstartedafterthescriptisexecuted.
µSee also
PEP 236 - Back to the __future__
Theoriginalproposalforthe__future__mechanism.
7.12The global statement
global_stmt ::= "global" identifier ("," identifier )*
Theglobalstatementisadeclarationwhichholdsfortheentirecurrentcodeblock. Itmeansthatthelistedidentifiers
aretobeinterpretedasglobals. Itwouldbeimpossibletoassigntoaglobalvariablewithout global,althoughfree
variablesmayrefertoglobalswithoutbeingdeclaredglobal.
Names listed in a globalstatement must not be used in the same code block textually preceding that global
statement.
Names listed in a globalstatement must not be defined as formal parameters, or as targets in withstatements
orexceptclauses, or in a fortarget list, classdefinition, function definition, importstatement, or variable
annotation.
CPython implementation detail: The current implementation does not enforce some of these restrictions, but
programsshouldnotabusethisfreedom,asfutureimplementationsmayenforcethemorsilentlychangethemeaning
oftheprogram.
Programmer’s note: globalis a directive to the parser. It applies only to code parsed at the same time as the
globalstatement. In particular, a globalstatement contained in a string or code object supplied to the built-in
exec()function does not affect the code block containing the function call, and code contained in such a string
is unaffected by globalstatements in the code containing the function call. The same applies to the eval()and
compile() functions.
7.13The nonlocal statement
nonlocal_stmt ::= "nonlocal" identifier ("," identifier )*
Whenthedefinitionofafunctionorclassisnested(enclosed)withinthedefinitionsofotherfunctions,itsnonlocal
scopesarethelocalscopesoftheenclosingfunctions. The nonlocal statementcausesthelistedidentifierstorefer
to names previously bound in nonlocal scopes. It allows encapsulated code to rebind such nonlocal identifiers. If a
nameisboundinmorethanonenonlocalscope,thenearestbindingisused. Ifanameisnotboundinanynonlocal
scope,orifthereisnononlocalscope,a SyntaxError israised.
Thenonlocalstatementappliestotheentirescopeofafunctionorclassbody. A SyntaxError israisedifavariable
isusedorassignedtopriortoitsnonlocaldeclarationinthescope.
µSee also
PEP 3104 - Access to Names in Outer Scopes
Thespecificationforthe nonlocal statement.
Programmer’s note: nonlocal isadirectivetotheparserandappliesonlytocodeparsedalongwithit. Seethe
noteforthe globalstatement.
7.12. The global statement 107
The Python Language Reference, Release 3.13.0
7.14The typestatement
type_stmt ::= 'type' identifier [type_params ] "=" expression
Thetypestatementdeclaresatypealias,whichisaninstanceof typing.TypeAliasType .
Forexample,thefollowingstatementcreatesatypealias:
type Point =tuple [float ,float ]
Thiscodeisroughlyequivalentto:
annotation -def VALUE_OF_Point ():
return tuple [float ,float ]
Point =typing .TypeAliasType( "Point ", VALUE_OF_Point())
annotation-def indicatesan annotation scope , whichbehavesmostlylikeafunction,butwithseveralsmalldif-
ferences.
Thevalueofthetypealiasisevaluatedintheannotationscope. Itisnotevaluatedwhenthetypealiasiscreated,but
onlywhenthevalueisaccessedthroughthetypealias’s __value__ attribute(see Lazy evaluation ). Thisallowsthe
typealiastorefertonamesthatarenotyetdefined.
Typealiasesmaybemadegenericbyaddinga type parameter list afterthename. See Generic type aliases formore.
typeisasoft keyword .
Addedinversion3.12.
µSee also
PEP 695 - Type Parameter Syntax
Introducedthe typestatementandsyntaxforgenericclassesandfunctions.
108 Chapter 7. Simple statements
CHAPTER
EIGHT
COMPOUND STATEMENTS
Compoundstatementscontain(groupsof)otherstatements;theyaffectorcontroltheexecutionofthoseotherstate-
ments in some way. In general, compound statements span multiple lines, although in simple incarnations a whole
compoundstatementmaybecontainedinoneline.
Theif,whileandforstatementsimplementtraditionalcontrolflowconstructs. tryspecifiesexceptionhandlers
and/or cleanup code for a group of statements, while the withstatement allows the execution of initialization and
finalizationcodearoundablockofcode. Functionandclassdefinitionsarealsosyntacticallycompoundstatements.
Acompoundstatementconsistsofoneormore‘clauses.’ Aclauseconsistsofaheaderanda‘suite.’ Theclauseheaders
ofaparticularcompoundstatementareallatthesameindentationlevel. Eachclauseheaderbeginswithauniquely
identifyingkeywordandendswithacolon. Asuiteisagroupofstatementscontrolledbyaclause. Asuitecanbeone
ormoresemicolon-separatedsimplestatementsonthesamelineastheheader,followingtheheader’scolon,oritcan
beoneormoreindentedstatementsonsubsequentlines. Onlythelatterformofasuitecancontainnestedcompound
statements; thefollowingisillegal, mostlybecauseitwouldn’tbecleartowhich ifclauseafollowing elseclause
wouldbelong:
iftest1: iftest2: print (x)
Alsonotethatthesemicolonbindstighterthanthecoloninthiscontext,sothatinthefollowingexample,eitherall
ornoneofthe print()callsareexecuted:
ifx<y<z:print (x); print (y); print (z)
Summarizing:
compound_stmt ::= if_stmt
|while_stmt
|for_stmt
|try_stmt
|with_stmt
|match_stmt
|funcdef
|classdef
|async_with_stmt
|async_for_stmt
|async_funcdef
suite ::= stmt_list NEWLINE | NEWLINE INDENT statement + DEDENT
statement ::= stmt_list NEWLINE | compound_stmt
stmt_list ::= simple_stmt (";" simple_stmt )* [";"]
Notethatstatementsalwaysendina NEWLINEpossiblyfollowedbya DEDENT.Alsonotethatoptionalcontinuation
clausesalwaysbeginwithakeywordthatcannotstartastatement,thustherearenoambiguities(the‘dangling else’
problemissolvedinPythonbyrequiringnested ifstatementstobeindented).
Theformattingofthegrammarrulesinthefollowingsectionsplaceseachclauseonaseparatelineforclarity.
109
The Python Language Reference, Release 3.13.0
8.1The ifstatement
Theifstatementisusedforconditionalexecution:
if_stmt ::= "if" assignment_expression ":" suite
("elif" assignment_expression ":" suite )*
["else" ":" suite ]
Itselectsexactlyoneofthesuitesbyevaluatingtheexpressionsonebyoneuntiloneisfoundtobetrue(seesection
Boolean operations for the definition of true and false); then that suite is executed (and no other part of the if
statementisexecutedorevaluated). Ifallexpressionsarefalse,thesuiteofthe elseclause,ifpresent,isexecuted.
8.2The whilestatement
Thewhilestatementisusedforrepeatedexecutionaslongasanexpressionistrue:
while_stmt ::= "while" assignment_expression ":" suite
["else" ":" suite ]
Thisrepeatedlyteststheexpressionand,ifitistrue,executesthefirstsuite;iftheexpressionisfalse(whichmaybe
thefirsttimeitistested)thesuiteofthe elseclause,ifpresent,isexecutedandtheloopterminates.
Abreakstatement executed in the first suite terminates the loop without executing the elseclause’s suite. A
continue statementexecutedinthefirstsuiteskipstherestofthesuiteandgoesbacktotestingtheexpression.
8.3The forstatement
Theforstatementisusedtoiterateovertheelementsofasequence(suchasastring,tupleorlist)orotheriterable
object:
for_stmt ::= "for" target_list "in" starred_list ":" suite
["else" ":" suite ]
Thestarred_list expression is evaluated once; it should yield an iterableobject. An iteratoris created for that
iterable. Thefirstitemprovidedbytheiteratoristhenassignedtothetargetlistusingthestandardrulesforassign-
ments (see Assignment statements ), and the suite is executed. This repeats for each item provided by the iterator.
Whentheiteratorisexhausted,thesuiteinthe elseclause,ifpresent,isexecuted,andtheloopterminates.
Abreakstatement executed in the first suite terminates the loop without executing the elseclause’s suite. A
continue statementexecutedinthefirstsuiteskipstherestofthesuiteandcontinueswiththenextitem, orwith
theelseclauseifthereisnonextitem.
Thefor-loopmakesassignmentstothevariablesinthetargetlist. Thisoverwritesallpreviousassignmentstothose
variablesincludingthosemadeinthesuiteofthefor-loop:
for iinrange (10):
print (i)
i=5 # this will not affect the for-loop
# because i will be overwritten with the next
# index in the range
Names in the target list are not deleted when the loop is finished, but if the sequence is empty, they will not have
beenassignedtoatallbytheloop. Hint: thebuilt-intype range()representsimmutablearithmeticsequencesof
integers. Forinstance,iterating range(3) successivelyyields0,1,andthen2.
Changedinversion3.11: Starredelementsarenowallowedintheexpressionlist.
110 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
8.4The trystatement
Thetrystatementspecifiesexceptionhandlersand/orcleanupcodeforagroupofstatements:
try_stmt ::= try1_stmt |try2_stmt |try3_stmt
try1_stmt ::= "try" ":" suite
("except" [ expression ["as" identifier ]] ":" suite )+
["else" ":" suite ]
["finally" ":" suite ]
try2_stmt ::= "try" ":" suite
("except" "*" expression ["as" identifier ] ":" suite )+
["else" ":" suite ]
["finally" ":" suite ]
try3_stmt ::= "try" ":" suite
"finally" ":" suite
Additionalinformationonexceptionscanbefoundinsection Exceptions,andinformationonusingthe raisestate-
menttogenerateexceptionsmaybefoundinsection The raise statement .
8.4.1 except clause
Theexceptclause(s) specify one or more exception handlers. When no exception occurs in the tryclause, no
exceptionhandlerisexecuted. Whenanexceptionoccursinthe trysuite,asearchforanexceptionhandlerisstarted.
This search inspects the exceptclauses in turn until one is found that matches the exception. An expression-less
exceptclause,ifpresent,mustbelast;itmatchesanyexception.
Foran exceptclausewithanexpression,theexpressionmustevaluatetoanexceptiontypeoratupleofexception
types. Theraisedexceptionmatchesan exceptclausewhoseexpressionevaluatestotheclassora non-virtual base
classoftheexceptionobject,ortoatuplethatcontainssuchaclass.
Ifno exceptclausematchestheexception, thesearchforan exceptionhandlercontinuesinthesurroundingcode
andontheinvocationstack.1
If the evaluation of an expression in the header of an exceptclause raises an exception, the original search for a
handleriscanceledandasearchstartsforthenewexceptioninthesurroundingcodeandonthecallstack(itistreated
asiftheentire trystatementraisedtheexception).
Whenamatching exceptclauseisfound,theexceptionisassignedtothetargetspecifiedafterthe askeywordinthat
exceptclause,ifpresent,andthe exceptclause’ssuiteisexecuted. All exceptclausesmusthaveanexecutable
block. When the end of this block is reached, execution continues normally after the entire trystatement. (This
means that if two nested handlers exist for the same exception, and the exception occurs in the tryclause of the
innerhandler,theouterhandlerwillnothandletheexception.)
Whenanexceptionhasbeenassignedusing as target ,itisclearedattheendofthe exceptclause. Thisisasif
except EasN:
foo
wastranslatedto
except EasN:
try:
foo
finally :
del N
1Theexceptionispropagatedtotheinvocationstackunlessthereisa finallyclausewhichhappenstoraiseanotherexception. Thatnew
exceptioncausestheoldonetobelost.
8.4. The trystatement 111
The Python Language Reference, Release 3.13.0
This means the exception must be assigned to a different name to be able to refer to it after the exceptclause.
Exceptions are cleared because with the traceback attached to them, they form a reference cycle with the stack
frame,keepingalllocalsinthatframealiveuntilthenextgarbagecollectionoccurs.
Before an exceptclause’s suite is executed, the exception is stored in the sysmodule, where it can be accessed
fromwithinthebodyofthe exceptclausebycalling sys.exception() . Whenleavinganexceptionhandler,the
exceptionstoredinthe sysmoduleisresettoitspreviousvalue:
>>> print (sys .exception())
None
>>> try:
... raise TypeError
... except :
... print (repr (sys .exception()))
... try:
... raise ValueError
... except :
... print (repr (sys .exception()))
... print (repr (sys .exception()))
...
TypeError()
ValueError()
TypeError()
>>> print (sys .exception())
None
8.4.2 except* clause
Theexcept*clause(s) are used for handling ExceptionGroup s. The exception type for matching is interpreted
as in the case of except, but in the case of exception groups we can have partial matches when the type matches
someoftheexceptionsinthegroup. Thismeansthatmultiple except*clausescanexecute,eachhandlingpartof
theexceptiongroup. Eachclauseexecutesatmostonceandhandlesanexceptiongroupofallmatchingexceptions.
Eachexceptioninthegroupishandledbyatmostone except*clause,thefirstthatmatchesit.
>>> try:
... raise ExceptionGroup( "eg",
... [ValueError (1),TypeError (2),OSError (3),OSError (4)])
... except *TypeError ase:
... print (f'caught {type (e)}with nested {e.exceptions }')
... except *OSError ase:
... print (f'caught {type (e)}with nested {e.exceptions }')
...
caught <class 'ExceptionGroup'> with nested (TypeError(2),)
caught <class 'ExceptionGroup'> with nested (OSError(3), OSError(4))
+ Exception Group Traceback (most recent call last):
| File "<stdin>", line 2, in <module>
| ExceptionGroup: eg
+-+---------------- 1 ----------------
| ValueError: 1
+------------------------------------
Any remaining exceptions that were not handled by any except*clause are re-raised at the end, along with all
exceptionsthatwereraisedfromwithinthe except*clauses. Ifthislistcontainsmorethanoneexceptiontoreraise,
theyarecombinedintoanexceptiongroup.
Iftheraisedexceptionisnotanexceptiongroupanditstypematchesoneofthe except*clauses,itiscaughtand
wrappedbyanexceptiongroupwithanemptymessagestring.
112 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
>>> try:
... raise BlockingIOError
... except *BlockingIOError ase:
... print (repr (e))
...
ExceptionGroup('', (BlockingIOError()))
Anexcept*clausemusthaveamatchingexpression;itcannotbe except*: . Furthermore,thisexpressioncannot
containexceptiongrouptypes,becausethatwouldhaveambiguoussemantics.
Itisnotpossibletomix exceptandexcept*inthesame try.break,continue andreturncannotappearin
anexcept*clause.
8.4.3 elseclause
Theoptional elseclauseisexecutedifthecontrolflowleavesthe trysuite,noexceptionwasraised,andno return,
continue , orbreakstatement was executed. Exceptions in the elseclause are not handled by the preceding
exceptclauses.
8.4.4 finally clause
Iffinallyispresent,itspecifiesa‘cleanup’handler. The tryclauseisexecuted,includingany exceptandelse
clauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The
finallyclause is executed. If there is a saved exception it is re-raised at the end of the finallyclause. If the
finallyclause raises another exception, the saved exception is set as the context of the new exception. If the
finallyclauseexecutesa return,breakorcontinue statement,thesavedexceptionisdiscarded:
>>> def f():
... try:
... 1/0
... finally :
... return 42
...
>>> f()
42
Theexceptioninformationisnotavailabletotheprogramduringexecutionofthe finallyclause.
When a return,breakorcontinue statement is executed in the trysuite of a try…finallystatement, the
finallyclauseisalsoexecuted‘onthewayout.’
The return value of a function is determined by the last returnstatement executed. Since the finallyclause
alwaysexecutes,a returnstatementexecutedinthe finallyclausewillalwaysbethelastoneexecuted:
>>> def foo():
... try:
... return 'try'
... finally :
... return 'finally '
...
>>> foo()
'finally'
Changed in version 3.8: Prior to Python 3.8, a continue statement was illegal in the finallyclause due to a
problemwiththeimplementation.
8.4. The trystatement 113
The Python Language Reference, Release 3.13.0
8.5The withstatement
Thewithstatement is used to wrap the execution of a block with methods defined by a context manager (see
section With Statement Context Managers ). This allows common try…except…finallyusage patterns to be
encapsulatedforconvenientreuse.
with_stmt ::= "with" ( "(" with_stmt_contents ","? ")" | with_stmt_contents ) ":" suite
with_stmt_contents ::= with_item ("," with_item )*
with_item ::= expression ["as" target ]
Theexecutionofthe withstatementwithone“item”proceedsasfollows:
1.Thecontextexpression(theexpressiongiveninthe with_item )isevaluatedtoobtainacontextmanager.
2.Thecontextmanager’s __enter__() isloadedforlateruse.
3.Thecontextmanager’s __exit__() isloadedforlateruse.
4.Thecontextmanager’s __enter__() methodisinvoked.
5.Ifatargetwasincludedinthe withstatement,thereturnvaluefrom __enter__() isassignedtoit.
®Note
The withstatement guarantees that if the __enter__() method returns without an error, then
__exit__() will always be called. Thus, if an error occurs during the assignment to the target list, it
willbetreatedthesameasanerroroccurringwithinthesuitewouldbe. Seestep7below.
6.Thesuiteisexecuted.
7.Thecontextmanager’s __exit__() methodisinvoked. Ifanexceptioncausedthesuitetobeexited,itstype,
value,andtracebackarepassedasargumentsto __exit__() . Otherwise,three Noneargumentsaresupplied.
Ifthesuitewasexitedduetoanexception,andthereturnvaluefromthe __exit__() methodwasfalse,the
exceptionisreraised. Ifthereturnvaluewastrue, theexceptionissuppressed, andexecutioncontinueswith
thestatementfollowingthe withstatement.
Ifthesuitewasexitedforanyreasonotherthananexception,thereturnvaluefrom __exit__() isignored,
andexecutionproceedsatthenormallocationforthekindofexitthatwastaken.
Thefollowingcode:
with EXPRESSION asTARGET:
SUITE
issemanticallyequivalentto:
manager =(EXPRESSION)
enter =type (manager) .__enter__
exit =type (manager) .__exit__
value =enter(manager)
try:
TARGET =value
SUITE
except :
ifnot exit(manager, *sys.exc_info()):
raise
else :
exit(manager, None ,None ,None )
114 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
Withmorethanoneitem,thecontextmanagersareprocessedasifmultiple withstatementswerenested:
with A() asa, B() asb:
SUITE
issemanticallyequivalentto:
with A() asa:
with B() asb:
SUITE
You can also write multi-item context managers in multiple lines if the items are surrounded by parentheses. For
example:
with (
A() asa,
B() asb,
):
SUITE
Changedinversion3.1: Supportformultiplecontextexpressions.
Changedinversion3.10: Supportforusinggroupingparenthesestobreakthestatementinmultiplelines.
µSee also
PEP 343 - The “with” statement
Thespecification,background,andexamplesforthePython withstatement.
8.6The matchstatement
Addedinversion3.10.
Thematchstatementisusedforpatternmatching. Syntax:
match_stmt ::= 'match' subject_expr ":" NEWLINE INDENT case_block + DEDENT
subject_expr ::= star_named_expression "," star_named_expressions?
| named_expression
case_block ::= 'case' patterns [guard ] ":" block
®Note
Thissectionusessinglequotestodenote soft keywords .
Patternmatchingtakesapatternasinput(following case)andasubjectvalue(following match). Thepattern(which
maycontainsubpatterns)ismatchedagainstthesubjectvalue. Theoutcomesare:
•Amatchsuccessorfailure(alsotermedapatternsuccessorfailure).
•Possiblebindingofmatchedvaluestoaname. Theprerequisitesforthisarefurtherdiscussedbelow.
Thematchandcasekeywordsare soft keywords .
µSee also
•PEP 634–StructuralPatternMatching: Specification
8.6. The matchstatement 115
The Python Language Reference, Release 3.13.0
•PEP 636–StructuralPatternMatching: Tutorial
8.6.1Overview
Here’sanoverviewofthelogicalflowofamatchstatement:
1.The subject expression subject_expr is evaluated and a resulting subject value obtained. If the subject
expressioncontainsacomma,atupleisconstructedusingthestandardrules.
2.Each pattern in a case_block is attempted to match with the subject value. The specific rules for success
or failure are described below. The match attempt can also bind some or all of the standalone names within
thepattern. Theprecisepatternbindingrulesvaryperpatterntypeandarespecifiedbelow. Name bindings
made during a successful pattern match outlive the executed block and can be used after the match
statement.
®Note
Duringfailedpatternmatches,somesubpatternsmaysucceed. Donotrelyonbindingsbeingmadefora
failed match. Conversely, do not rely on variables remaining unchanged after a failed match. The exact
behavior is dependent on implementation and may vary. This is an intentional decision made to allow
differentimplementationstoaddoptimizations.
3.If the pattern succeeds, the corresponding guard (if present) is evaluated. In this case all name bindings are
guaranteedtohavehappened.
•Iftheguardevaluatesastrueorismissing,the blockinside case_block isexecuted.
•Otherwise,thenext case_block isattemptedasdescribedabove.
•Iftherearenofurthercaseblocks,thematchstatementiscompleted.
®Note
Users should generally never rely on a pattern being evaluated. Depending on implementation, the interpreter
maycachevaluesoruseotheroptimizationswhichskiprepeatedevaluations.
Asamplematchstatement:
>>> flag =False
>>> match (100,200):
... case (100,300): # Mismatch: 200 != 300
... print ('Case 1 ')
... case (100,200)ifflag: # Successful match, but guard fails
... print ('Case 2 ')
... case (100, y): # Matches and binds y to 200
... print (f'Case 3, y: {y}')
... case _:# Pattern not attempted
... print ('Case 4, I match anything! ')
...
Case 3, y: 200
Inthiscase, if flagisaguard. Readmoreaboutthatinthenextsection.
116 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
8.6.2Guards
guard::= "if" named_expression
Aguard(whichispartofthe case)mustsucceedforcodeinsidethe caseblocktoexecute. Ittakestheform: if
followedbyanexpression.
Thelogicalflowofa caseblockwitha guardfollows:
1.Checkthatthepatterninthe caseblocksucceeded. Ifthepatternfailed,the guardisnotevaluatedandthe
nextcaseblockischecked.
2.Ifthepatternsucceeded,evaluatethe guard.
•Ifthe guardconditionevaluatesastrue,thecaseblockisselected.
•Ifthe guardconditionevaluatesasfalse,thecaseblockisnotselected.
•Ifthe guardraisesanexceptionduringevaluation,theexceptionbubblesup.
Guardsareallowedtohavesideeffectsastheyareexpressions. Guardevaluationmustproceedfromthefirsttothe
last case block, one at a time, skipping case blocks whose pattern(s) don’t all succeed. (I.e., guard evaluation must
happeninorder.) Guardevaluationmuststoponceacaseblockisselected.
8.6.3Irrefutable Case Blocks
Anirrefutablecaseblockisamatch-allcaseblock. Amatchstatementmayhaveatmostoneirrefutablecaseblock,
anditmustbelast.
Acaseblockisconsideredirrefutableifithasnoguardanditspatternisirrefutable. Apatternisconsideredirrefutable
ifwecanprovefromitssyntaxalonethatitwillalwayssucceed. Onlythefollowingpatternsareirrefutable:
•AS Patterns whoseleft-handsideisirrefutable
•OR Patterns containingatleastoneirrefutablepattern
•Capture Patterns
•Wildcard Patterns
•parenthesizedirrefutablepatterns
8.6.4Patterns
®Note
ThissectionusesgrammarnotationsbeyondstandardEBNF:
•thenotation SEP.RULE+ isshorthandfor RULE (SEP RULE)*
•thenotation !RULEisshorthandforanegativelookaheadassertion
Thetop-levelsyntaxfor patterns is:
patterns ::= open_sequence_pattern |pattern
pattern ::= as_pattern |or_pattern
closed_pattern ::= |literal_pattern
|capture_pattern
|wildcard_pattern
|value_pattern
|group_pattern
|sequence_pattern
|mapping_pattern
8.6. The matchstatement 117
The Python Language Reference, Release 3.13.0
|class_pattern
Thedescriptionsbelowwillincludeadescription“insimpleterms”ofwhatapatterndoesforillustrationpurposes
(creditstoRaymondHettingerforadocumentthatinspiredmostofthedescriptions). Notethatthesedescriptions
are purely for illustration purposes and may notreflect the underlying implementation. Furthermore, they do not
coverallvalidforms.
OR Patterns
AnORpatternistwoormorepatternsseparatedbyverticalbars |. Syntax:
or_pattern ::= "|". closed_pattern +
Onlythefinalsubpatternmaybe irrefutable,andeachsubpatternmustbindthesamesetofnamestoavoidambiguity.
An OR pattern matches each of its subpatterns in turn to the subject value, until one succeeds. The OR pattern is
thenconsideredsuccessful. Otherwise,ifnoneofthesubpatternssucceed,theORpatternfails.
Insimpleterms, P1 | P2 | ... willtrytomatch P1,ifitfailsitwilltrytomatch P2,succeedingimmediatelyif
anysucceeds,failingotherwise.
AS Patterns
AnASpatternmatchesanORpatternontheleftofthe askeywordagainstasubject. Syntax:
as_pattern ::= or_pattern "as" capture_pattern
IftheORpatternfails,theASpatternfails. Otherwise,theASpatternbindsthesubjecttothenameontherightof
theaskeywordandsucceeds. capture_pattern cannotbea _.
Insimpleterms P as NAME willmatchwith P,andonsuccessitwillset NAME = <subject> .
Literal Patterns
Aliteralpatterncorrespondstomost literalsinPython. Syntax:
literal_pattern ::= signed_number
|signed_number "+" NUMBER
|signed_number "-" NUMBER
| strings
| "None"
| "True"
| "False"
signed_number ::= ["-"] NUMBER
The rule stringsand the token NUMBERare defined in the standard Python grammar . Triple-quoted strings are
supported. Rawstringsandbytestringsaresupported. f-stringsarenotsupported.
Theforms signed_number '+' NUMBER andsigned_number '-' NUMBER areforexpressing complex num-
bers;theyrequirearealnumberontheleftandanimaginarynumberontheright. E.g. 3 + 4j.
In simple terms, LITERALwill succeed only if <subject> == LITERAL . For the singletons None,Trueand
False,theisoperatorisused.
118 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
Capture Patterns
Acapturepatternbindsthesubjectvaluetoaname. Syntax:
capture_pattern ::= !'_' NAME
A single underscore _is not a capture pattern (this is what !'_'expresses). It is instead treated as a
wildcard_pattern .
Inagivenpattern,agivennamecanonlybeboundonce. E.g. case x, x: ... isinvalidwhile case [x] | x:
...isallowed.
Capturepatternsalwayssucceed. Thebindingfollowsscopingrulesestablishedbytheassignmentexpressionoperator
inPEP 572;thenamebecomesalocalvariableintheclosestcontainingfunctionscopeunlessthere’sanapplicable
globalornonlocal statement.
Insimpleterms NAMEwillalwayssucceedanditwillset NAME = <subject> .
Wildcard Patterns
Awildcardpatternalwayssucceeds(matchesanything)andbindsnoname. Syntax:
wildcard_pattern ::= '_'
_isasoft keyword withinanypattern,butonlywithinpatterns. Itisanidentifier,asusual,evenwithin matchsubject
expressions, guards,and caseblocks.
Insimpleterms, _willalwayssucceed.
Value Patterns
AvaluepatternrepresentsanamedvalueinPython. Syntax:
value_pattern ::= attr
attr ::= name_or_attr "." NAME
name_or_attr ::= attr | NAME
ThedottednameinthepatternislookedupusingstandardPython name resolution rules . Thepatternsucceedsifthe
valuefoundcomparesequaltothesubjectvalue(usingthe ==equalityoperator).
Insimpleterms NAME1.NAME2 willsucceedonlyif <subject> == NAME1.NAME2
®Note
If the same value occurs multiple times in the same match statement, the interpreter may cache the first value
foundandreuseitratherthanrepeatthesamelookup. Thiscacheisstrictlytiedtoagivenexecutionofagiven
matchstatement.
Group Patterns
Agrouppatternallowsuserstoaddparenthesesaroundpatternstoemphasizetheintendedgrouping. Otherwise,it
hasnoadditionalsyntax. Syntax:
group_pattern ::= "(" pattern ")"
Insimpleterms (P)hasthesameeffectas P.
8.6. The matchstatement 119
The Python Language Reference, Release 3.13.0
Sequence Patterns
Asequencepatterncontainsseveralsubpatternstobematchedagainstsequenceelements. Thesyntaxissimilarto
theunpackingofalistortuple.
sequence_pattern ::= "[" [ maybe_sequence_pattern ] "]"
| "(" [ open_sequence_pattern ] ")"
open_sequence_pattern ::= maybe_star_pattern "," [ maybe_sequence_pattern ]
maybe_sequence_pattern ::= ",". maybe_star_pattern + ","?
maybe_star_pattern ::= star_pattern |pattern
star_pattern ::= "*" ( capture_pattern |wildcard_pattern )
Thereisnodifferenceifparenthesesorsquarebracketsareusedforsequencepatterns(i.e. (...)vs[...]).
®Note
A single pattern enclosed in parentheses without a trailing comma (e.g. (3 | 4)) is a group pattern . While a
singlepatternenclosedinsquarebrackets(e.g. [3 | 4])isstillasequencepattern.
At most one star subpattern may be in a sequence pattern. The star subpattern may occur in any position. If no
star subpattern is present, the sequence pattern is a fixed-length sequence pattern; otherwise it is a variable-length
sequencepattern.
Thefollowingisthelogicalflowformatchingasequencepatternagainstasubjectvalue:
1.Ifthesubjectvalueisnotasequence2,thesequencepatternfails.
2.Ifthesubjectvalueisaninstanceof str,bytesorbytearray thesequencepatternfails.
3.Thesubsequentstepsdependonwhetherthesequencepatternisfixedorvariable-length.
Ifthesequencepatternisfixed-length:
1.Ifthelengthofthesubjectsequenceisnotequaltothenumberofsubpatterns,thesequencepatternfails
2.Subpatterns in the sequence pattern are matched to their corresponding items in the subject sequence
from left to right. Matching stops as soon as a subpattern fails. If all subpatterns succeed in matching
theircorrespondingitem,thesequencepatternsucceeds.
Otherwise,ifthesequencepatternisvariable-length:
1.Ifthelengthofthesubjectsequenceislessthanthenumberofnon-starsubpatterns,thesequencepattern
fails.
2.Theleadingnon-starsubpatternsarematchedtotheircorrespondingitemsasforfixed-lengthsequences.
2Inpatternmatching,asequenceisdefinedasoneofthefollowing:
•aclassthatinheritsfrom collections.abc.Sequence
•aPythonclassthathasbeenregisteredas collections.abc.Sequence
•abuiltinclassthathasits(CPython) Py_TPFLAGS_SEQUENCE bitset
•aclassthatinheritsfromanyoftheabove
Thefollowingstandardlibraryclassesaresequences:
•array.array
•collections.deque
•list
•memoryview
•range
•tuple
®Note
Subjectvaluesoftype str,bytes,and bytearray donotmatchsequencepatterns.
120 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
3.If the previous step succeeds, the star subpattern matches a list formed of the remaining subject items,
excludingtheremainingitemscorrespondingtonon-starsubpatternsfollowingthestarsubpattern.
4.Remaining non-star subpatterns are matched to their corresponding subject items, as for a fixed-length
sequence.
®Note
Thelengthofthesubjectsequenceisobtainedvia len()(i.e. viathe __len__() protocol). Thislength
maybecachedbytheinterpreterinasimilarmanneras value patterns .
Insimpleterms [P1, P2, P3, …, P<N>]matchesonlyifallthefollowinghappens:
•check <subject> isasequence
•len(subject) == <N>
•P1matches <subject>[0] (notethatthismatchcanalsobindnames)
•P2matches <subject>[1] (notethatthismatchcanalsobindnames)
•…andsoonforthecorrespondingpattern/element.
Mapping Patterns
Amappingpatterncontainsoneormorekey-valuepatterns. Thesyntaxissimilartotheconstructionofadictionary.
Syntax:
mapping_pattern ::= "{" [ items_pattern ] "}"
items_pattern ::= ",". key_value_pattern + ","?
key_value_pattern ::= (literal_pattern |value_pattern ) ":" pattern
|double_star_pattern
double_star_pattern ::= "**" capture_pattern
Atmostonedoublestarpatternmaybeinamappingpattern. Thedoublestarpatternmustbethelastsubpatternin
themappingpattern.
Duplicatekeysinmappingpatternsaredisallowed. Duplicateliteralkeyswillraisea SyntaxError . Twokeysthat
otherwisehavethesamevaluewillraisea ValueError atruntime.
Thefollowingisthelogicalflowformatchingamappingpatternagainstasubjectvalue:
1.Ifthesubjectvalueisnotamapping3,themappingpatternfails.
2.Ifeverykeygiveninthemappingpatternispresentinthesubjectmapping,andthepatternforeachkeymatches
thecorrespondingitemofthesubjectmapping,themappingpatternsucceeds.
3.If duplicate keys are detected in the mapping pattern, the pattern is considered invalid. A SyntaxError is
raisedforduplicateliteralvalues;ora ValueError fornamedkeysofthesamevalue.
®Note
Key-value pairs are matched using the two-argument form of the mapping subject’s get()method. Matched
key-value pairs must already be present in the mapping, and not created on-the-fly via __missing__() or
__getitem__() .
3Inpatternmatching,amappingisdefinedasoneofthefollowing:
•aclassthatinheritsfrom collections.abc.Mapping
•aPythonclassthathasbeenregisteredas collections.abc.Mapping
•abuiltinclassthathasits(CPython) Py_TPFLAGS_MAPPING bitset
•aclassthatinheritsfromanyoftheabove
Thestandardlibraryclasses dictandtypes.MappingProxyType aremappings.
8.6. The matchstatement 121
The Python Language Reference, Release 3.13.0
Insimpleterms {KEY1: P1, KEY2: P2, ... } matchesonlyifallthefollowinghappens:
•check <subject> isamapping
•KEY1 in <subject>
•P1matches <subject>[KEY1]
•…andsoonforthecorrespondingKEY/patternpair.
Class Patterns
Aclasspatternrepresentsaclassanditspositionalandkeywordarguments(ifany). Syntax:
class_pattern ::= name_or_attr "(" [ pattern_arguments ","?] ")"
pattern_arguments ::= positional_patterns ["," keyword_patterns ]
|keyword_patterns
positional_patterns ::= ",". pattern +
keyword_patterns ::= ",". keyword_pattern +
keyword_pattern ::= NAME "=" pattern
Thesamekeywordshouldnotberepeatedinclasspatterns.
Thefollowingisthelogicalflowformatchingaclasspatternagainstasubjectvalue:
1.Ifname_or_attr isnotaninstanceofthebuiltin type,raise TypeError .
2.Ifthesubjectvalueisnotaninstanceof name_or_attr (testedvia isinstance() ),theclasspatternfails.
3.Ifnopatternargumentsarepresent,thepatternsucceeds. Otherwise,thesubsequentstepsdependonwhether
keywordorpositionalargumentpatternsarepresent.
For a number of built-in types (specified below), a single positional subpattern is accepted which will match
theentiresubject;forthesetypeskeywordpatternsalsoworkasforothertypes.
Ifonlykeywordpatternsarepresent,theyareprocessedasfollows,onebyone:
I.Thekeywordislookedupasanattributeonthesubject.
•Ifthisraisesanexceptionotherthan AttributeError ,theexceptionbubblesup.
•Ifthisraises AttributeError ,theclasspatternhasfailed.
•Else,thesubpatternassociatedwiththekeywordpatternismatchedagainstthesubject’sattributevalue.
Ifthisfails,theclasspatternfails;ifthissucceeds,thematchproceedstothenextkeyword.
II.Ifallkeywordpatternssucceed,theclasspatternsucceeds.
If any positional patterns are present, they are converted to keyword patterns using the __match_args__
attributeontheclass name_or_attr beforematching:
I.Theequivalentof getattr(cls, "__match_args__", ()) iscalled.
•Ifthisraisesanexception,theexceptionbubblesup.
•Ifthereturnedvalueisnotatuple,theconversionfailsand TypeError israised.
•If there are more positional patterns than len(cls.__match_args__) ,TypeError is
raised.
•Otherwise,positionalpattern iisconvertedtoakeywordpatternusing __match_args__[i]
asthekeyword. __match_args__[i] mustbeastring;ifnot TypeError israised.
•Ifthereareduplicatekeywords, TypeError israised.
122 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
µSee also
Customizing positional arguments in class pattern matching
II. Once all positional patterns have been converted to keyword patterns,
thematchproceedsasiftherewereonlykeywordpatterns.
Forthefollowingbuilt-intypesthehandlingofpositionalsubpatternsisdifferent:
•bool
•bytearray
•bytes
•dict
•float
•frozenset
•int
•list
•set
•str
•tuple
These classes accept a single positional argument, and the pattern there is matched against the whole object
ratherthananattribute. Forexample int(0|1) matchesthevalue 0,butnotthevalue 0.0.
Insimpleterms CLS(P1, attr=P2) matchesonlyifthefollowinghappens:
•isinstance(<subject>, CLS)
•convert P1toakeywordpatternusing CLS.__match_args__
•Foreachkeywordargument attr=P2:
–hasattr(<subject>, "attr")
–P2matches <subject>.attr
•…andsoonforthecorrespondingkeywordargument/patternpair.
µSee also
•PEP 634–StructuralPatternMatching: Specification
•PEP 636–StructuralPatternMatching: Tutorial
8.7Function definitions
Afunctiondefinitiondefinesauser-definedfunctionobject(seesection The standard type hierarchy ):
funcdef ::= [decorators ] "def" funcname [type_params ] "(" [ parameter_list ] ")"
["->" expression ] ":" suite
decorators ::= decorator +
decorator ::= "@" assignment_expression NEWLINE
parameter_list ::= defparameter ("," defparameter )* "," "/" ["," [ parameter_list_no_posonly ]]
|parameter_list_no_posonly
8.7. Function definitions 123
The Python Language Reference, Release 3.13.0
parameter_list_no_posonly ::= defparameter ("," defparameter )* ["," [ parameter_list_starargs ]]
|parameter_list_starargs
parameter_list_starargs ::= "*" [ star_parameter ] ("," defparameter )* ["," ["**" parameter [","]]]
| "**" parameter [","]
parameter ::= identifier [":" expression ]
star_parameter ::= identifier [":" ["*"] expression ]
defparameter ::= parameter ["=" expression ]
funcname ::= identifier
Afunctiondefinitionisanexecutablestatement. Itsexecutionbindsthefunctionnameinthecurrentlocalnamespace
toafunctionobject(awrapperaroundtheexecutablecodeforthefunction). Thisfunctionobjectcontainsareference
tothecurrentglobalnamespaceastheglobalnamespacetobeusedwhenthefunctioniscalled.
Thefunctiondefinitiondoesnotexecutethefunctionbody;thisgetsexecutedonlywhenthefunctioniscalled.4
A function definition may be wrapped by one or more decoratorexpressions. Decorator expressions are evaluated
whenthefunctionisdefined,inthescopethatcontainsthefunctiondefinition. Theresultmustbeacallable,which
isinvokedwiththefunctionobjectastheonlyargument. Thereturnedvalueisboundtothefunctionnameinstead
ofthefunctionobject. Multipledecoratorsareappliedinnestedfashion. Forexample,thefollowingcode
@f1(arg)
@f2
def func (): pass
isroughlyequivalentto
def func (): pass
func =f1(arg)(f2(func))
exceptthattheoriginalfunctionisnottemporarilyboundtothename func.
Changed in version 3.9: Functions may be decorated with any valid assignment_expression . Previously, the
grammarwasmuchmorerestrictive;see PEP 614fordetails.
Alistof type parameters maybegiveninsquarebracketsbetweenthefunction’snameandtheopeningparenthesisfor
itsparameterlist. Thisindicatestostatictypecheckersthatthefunctionisgeneric. Atruntime,thetypeparameters
canberetrievedfromthefunction’s __type_params__ attribute. See Generic functions formore.
Changedinversion3.12: TypeparameterlistsarenewinPython3.12.
Whenoneormore parameters havetheform parameter =expression,thefunctionissaidtohave“defaultparameter
values.” Foraparameterwithadefaultvalue,thecorresponding argumentmaybeomittedfromacall,inwhichcase
theparameter’sdefaultvalueissubstituted. Ifaparameterhasadefaultvalue,allfollowingparametersupuntilthe
“*”mustalsohaveadefaultvalue—thisisasyntacticrestrictionthatisnotexpressedbythegrammar.
Default parameter values are evaluated from left to right when the function definition is executed. Thismeans
thattheexpressionisevaluatedonce,whenthefunctionisdefined,andthatthesame“pre-computed”valueisused
foreachcall. Thisisespeciallyimportanttounderstandwhenadefaultparametervalueisamutableobject,suchas
alistoradictionary: ifthefunctionmodifiestheobject(e.g. byappendinganitemtoalist),thedefaultparameter
valueisineffectmodified. Thisisgenerallynotwhatwasintended. Awayaroundthisistouse Noneasthedefault,
andexplicitlytestforitinthebodyofthefunction,e.g.:
def whats_on_the_telly (penguin =None ):
ifpenguin isNone :
penguin =[]
penguin .append( "property of the zoo ")
return penguin
Functioncallsemanticsaredescribedinmoredetailinsection Calls. Afunctioncallalwaysassignsvaluestoallpa-
rametersmentionedintheparameterlist,eitherfrompositionalarguments,fromkeywordarguments,orfromdefault
4A stringliteralappearingas thefirststatementinthefunction bodyistransformedintothefunction’s __doc__attribute andthereforethe
function’s docstring.
124 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
values. Iftheform“ *identifier ”ispresent,itisinitializedtoatuplereceivinganyexcesspositionalparameters,
defaulting to the empty tuple. If the form “ **identifier ” is present, it is initialized to a new ordered mapping
receiving any excess keyword arguments, defaulting to a new empty mapping of the same type. Parameters after
“*” or “ *identifier ” are keyword-only parameters and may only be passed by keyword arguments. Parameters
before“ /”arepositional-onlyparametersandmayonlybepassedbypositionalarguments.
Changed in version 3.8: The /function parameter syntax may be used to indicate positional-only parameters. See
PEP 570fordetails.
Parameters may have an annotation of the form “ : expression ” following the parameter name. Any parameter
mayhaveanannotation,eventhoseoftheform *identifier or**identifier . (Asaspecialcase,parameters
of the form *identifier may have an annotation “ : *expression ”.) Functions may have “return” annotation
of the form “ -> expression ” after the parameter list. These annotations can be any valid Python expression.
The presence of annotations does not change the semantics of a function. The annotation values are available as
valuesofadictionarykeyedbytheparameters’namesinthe __annotations__ attributeofthefunctionobject. If
theannotations importfrom __future__ isused,annotationsarepreservedasstringsatruntimewhichenables
postponedevaluation. Otherwise,theyareevaluatedwhenthefunctiondefinitionisexecuted. Inthiscaseannotations
maybeevaluatedinadifferentorderthantheyappearinthesourcecode.
Changedinversion3.11: Parametersoftheform“ *identifier ”mayhaveanannotation“ : *expression ”. See
PEP 646.
Itisalsopossibletocreateanonymousfunctions(functionsnotboundtoaname),forimmediateuseinexpressions.
Thisuseslambdaexpressions,describedinsection Lambdas. Notethatthelambdaexpressionismerelyashorthand
for a simplified function definition; a function defined in a “ def” statement can be passed around or assigned to
anothernamejustlikeafunctiondefinedbyalambdaexpression. The“ def”formisactuallymorepowerfulsinceit
allowstheexecutionofmultiplestatementsandannotations.
Programmer’s note: Functions are first-class objects. A “ def” statement executed inside a function definition
definesalocalfunctionthatcanbereturnedorpassedaround. Freevariablesusedinthenestedfunctioncanaccess
thelocalvariablesofthefunctioncontainingthedef. Seesection Naming and binding fordetails.
µSee also
PEP 3107 - Function Annotations
Theoriginalspecificationforfunctionannotations.
PEP 484 - Type Hints
Definitionofastandardmeaningforannotations: typehints.
PEP 526 - Syntax for Variable Annotations
Abilitytotypehintvariabledeclarations,includingclassvariablesandinstancevariables.
PEP 563 - Postponed Evaluation of Annotations
Support for forward references within annotations by preserving annotations in a string form at runtime
insteadofeagerevaluation.
PEP 318 - Decorators for Functions and Methods
Functionandmethoddecoratorswereintroduced. Classdecoratorswereintroducedin PEP 3129.
8.8Class definitions
Aclassdefinitiondefinesaclassobject(seesection The standard type hierarchy ):
classdef ::= [decorators ] "class" classname [type_params ] [inheritance ] ":" suite
inheritance ::= "(" [ argument_list ] ")"
classname ::= identifier
Aclassdefinitionisanexecutablestatement. Theinheritancelistusuallygivesalistofbaseclasses(see Metaclasses
formoreadvanceduses),soeachiteminthelistshouldevaluatetoaclassobjectwhichallowssubclassing. Classes
8.8. Class definitions 125
The Python Language Reference, Release 3.13.0
withoutaninheritancelistinherit,bydefault,fromthebaseclass object;hence,
class Foo:
pass
isequivalentto
class Foo(object ):
pass
The class’s suite is then executed in a new execution frame (see Naming and binding ), using a newly created local
namespace and the original global namespace. (Usually, the suite contains mostly function definitions.) When the
class’s suite finishes execution, its execution frame is discarded but its local namespace is saved.5A class object is
thencreatedusingtheinheritancelistforthebaseclassesandthesavedlocalnamespacefortheattributedictionary.
Theclassnameisboundtothisclassobjectintheoriginallocalnamespace.
Theorderinwhichattributesaredefinedintheclassbodyispreservedinthenewclass’s __dict__ . Notethatthis
isreliableonlyrightaftertheclassiscreatedandonlyforclassesthatweredefinedusingthedefinitionsyntax.
Classcreationcanbecustomizedheavilyusing metaclasses .
Classescanalsobedecorated: justlikewhendecoratingfunctions,
@f1(arg)
@f2
class Foo:pass
isroughlyequivalentto
class Foo:pass
Foo =f1(arg)(f2(Foo))
Theevaluationrulesforthedecoratorexpressionsarethesameasforfunctiondecorators. Theresultisthenbound
totheclassname.
Changed in version 3.9: Classes may be decorated with any valid assignment_expression . Previously, the
grammarwasmuchmorerestrictive;see PEP 614fordetails.
A list of type parameters may be given in square brackets immediately after the class’s name. This indicates to
static type checkers that the class is generic. At runtime, the type parameters can be retrieved from the class’s
__type_params__ attribute. See Generic classes formore.
Changedinversion3.12: TypeparameterlistsarenewinPython3.12.
Programmer’s note: Variablesdefinedintheclassdefinitionareclassattributes; theyaresharedbyinstances. In-
stanceattributescanbesetinamethodwith self.name = value . Bothclassandinstanceattributesareaccessible
through the notation “ self.name ”, and an instance attribute hides a class attribute with the same name when ac-
cessedinthisway. Classattributescanbeusedasdefaultsforinstanceattributes,butusingmutablevaluestherecan
leadtounexpectedresults. Descriptors canbeusedtocreateinstancevariableswithdifferentimplementationdetails.
µSee also
PEP 3115 - Metaclasses in Python 3000
Theproposalthatchangedthedeclarationofmetaclassestothecurrentsyntax,andthesemanticsforhow
classeswithmetaclassesareconstructed.
PEP 3129 - Class Decorators
Theproposalthataddedclassdecorators. Functionandmethoddecoratorswereintroducedin PEP 318.
5Astringliteralappearingasthefirststatementintheclassbodyistransformedintothenamespace’s __doc__itemandthereforetheclass’s
docstring.
126 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
8.9Coroutines
Addedinversion3.5.
8.9.1Coroutine function definition
async_funcdef ::= [decorators ] "async" "def" funcname "(" [ parameter_list ] ")"
["->" expression ] ":" suite
ExecutionofPythoncoroutinescanbesuspendedandresumedatmanypoints(see coroutine).awaitexpressions,
async for andasync with canonlybeusedinthebodyofacoroutinefunction.
Functions defined with async def syntax are always coroutine functions, even if they do not contain awaitor
asynckeywords.
Itisa SyntaxError tousea yield from expressioninsidethebodyofacoroutinefunction.
Anexampleofacoroutinefunction:
async def func (param1, param2):
do_stuff()
await some_coroutine()
Changedinversion3.7: awaitandasyncarenowkeywords; previouslytheywereonlytreatedassuchinsidethe
bodyofacoroutinefunction.
8.9.2The async for statement
async_for_stmt ::= "async" for_stmt
Anasynchronous iterable providesan __aiter__ methodthatdirectlyreturnsan asynchronous iterator ,whichcan
callasynchronouscodeinits __anext__ method.
Theasync for statementallowsconvenientiterationoverasynchronousiterables.
Thefollowingcode:
async for TARGET inITER:
SUITE
else :
SUITE2
Issemanticallyequivalentto:
iter =(ITER)
iter =type (iter ).__aiter__ (iter )
running =True
while running:
try:
TARGET =await type (iter ).__anext__ (iter )
except StopAsyncIteration :
running =False
else :
SUITE
else :
SUITE2
Seealso __aiter__() and__anext__() fordetails.
Itisa SyntaxError tousean async for statementoutsidethebodyofacoroutinefunction.
8.9. Coroutines 127
The Python Language Reference, Release 3.13.0
8.9.3The async with statement
async_with_stmt ::= "async" with_stmt
Anasynchronous context manager isacontext manager thatisabletosuspendexecutioninits enterandexitmethods.
Thefollowingcode:
async with EXPRESSION asTARGET:
SUITE
issemanticallyequivalentto:
manager =(EXPRESSION)
aenter =type (manager) .__aenter__
aexit =type (manager) .__aexit__
value =await aenter(manager)
hit_except =False
try:
TARGET =value
SUITE
except :
hit_except =True
ifnot await aexit(manager, *sys.exc_info()):
raise
finally :
ifnot hit_except:
await aexit(manager, None ,None ,None )
Seealso __aenter__() and__aexit__() fordetails.
Itisa SyntaxError tousean async with statementoutsidethebodyofacoroutinefunction.
µSee also
PEP 492 - Coroutines with async and await syntax
TheproposalthatmadecoroutinesaproperstandaloneconceptinPython,andaddedsupportingsyntax.
8.10Type parameter lists
Addedinversion3.12.
Changedinversion3.13: Supportfordefaultvalueswasadded(see PEP 696).
type_params ::= "[" type_param ("," type_param )* "]"
type_param ::= typevar |typevartuple |paramspec
typevar ::= identifier (":" expression )? ("=" expression )?
typevartuple ::= "*" identifier ("=" expression )?
paramspec ::= "**" identifier ("=" expression )?
Functions(including coroutines),classesandtype aliases maycontainatypeparameterlist:
def max[T](args: list [T]) ->T:
...
(continuesonnextpage)
128 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
async def amax [T](args: list [T]) ->T:
...
class Bag[T]:
def __iter__ (self )->Iterator[T]:
...
def add(self , arg: T) ->None :
...
type ListOrSet[T] =list [T] |set[T]
Semantically,thisindicatesthatthefunction,class,ortypealiasisgenericoveratypevariable. Thisinformationis
primarilyusedbystatictypecheckers,andatruntime,genericobjectsbehavemuchliketheirnon-genericcounter-
parts.
Typeparametersaredeclaredinsquarebrackets( [])immediatelyafterthenameofthefunction,class,ortypealias.
Thetypeparametersareaccessiblewithinthescopeofthegenericobject,butnotelsewhere. Thus,afteradeclaration
def func[T](): pass ,thename Tisnotavailableinthemodulescope. Below,thesemanticsofgenericobjects
aredescribedwithmoreprecision. Thescopeoftypeparametersismodeledwithaspecialfunction(technically,an
annotation scope )thatwrapsthecreationofthegenericobject.
Genericfunctions,classes,andtypealiaseshavea __type_params__ attributelistingtheirtypeparameters.
Typeparameterscomeinthreekinds:
•typing.TypeVar ,introducedbyaplainname(e.g., T).Semantically,thisrepresentsasingletypetoatype
checker.
•typing.TypeVarTuple ,introducedbyanameprefixedwithasingleasterisk(e.g., *Ts). Semantically,this
standsforatupleofanynumberoftypes.
•typing.ParamSpec ,introducedbyanameprefixedwithtwoasterisks(e.g., **P).Semantically,thisstands
fortheparametersofacallable.
typing.TypeVar declarations can define boundsandconstraints with a colon ( :) followed by an expression. A
single expression after the colon indicates a bound (e.g. T: int). Semantically, this means that the typing.
TypeVarcanonlyrepresenttypesthatarea subtypeofthisbound. A parenthesizedtupleofexpressionsafterthe
colon indicates a set of constraints (e.g. T: (str, bytes) ). Each member of the tuple should be a type (again,
thisisnotenforcedatruntime). Constrainedtypevariablescanonlytakeononeofthetypesinthelistofconstraints.
Fortyping.TypeVar s declared using the type parameter list syntax, the bound and constraints are not evaluated
whenthegenericobjectiscreated,butonlywhenthevalueisexplicitlyaccessedthroughtheattributes __bound__
and__constraints__ . Toaccomplishthis,theboundsorconstraintsareevaluatedinaseparate annotation scope .
typing.TypeVarTuple sand typing.ParamSpec scannothaveboundsorconstraints.
All three flavors of type parameters can also have a default value , which is used when the type parameter is not
explicitlyprovided. Thisisaddedbyappendingasingleequalssign( =)followedbyanexpression. Likethebounds
andconstraintsoftypevariables,thedefaultvalueisnotevaluatedwhentheobjectiscreated,butonlywhenthetype
parameter’s __default__ attributeisaccessed. Tothisend,thedefaultvalueisevaluatedinaseparate annotation
scope. Ifnodefaultvalueisspecifiedforatypeparameter,the __default__ attributeissettothespecialsentinel
object typing.NoDefault .
Thefollowingexampleindicatesthefullsetofallowedtypeparameterdeclarations:
def overly_generic [
SimpleTypeVar,
TypeVarWithDefault =int,
TypeVarWithBound: int,
TypeVarWithConstraints: ( str,bytes ),
*SimpleTypeVarTuple =(int,float ),
(continuesonnextpage)
8.10. Type parameter lists 129
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
**SimpleParamSpec =(str,bytearray ),
](
a: SimpleTypeVar,
b: TypeVarWithDefault,
c: TypeVarWithBound,
d: Callable[SimpleParamSpec, TypeVarWithConstraints],
*e: SimpleTypeVarTuple,
):...
8.10.1 Generic functions
Genericfunctionsaredeclaredasfollows:
def func [T](arg: T): ...
Thissyntaxisequivalentto:
annotation -def TYPE_PARAMS_OF_func ():
T=typing .TypeVar( "T")
def func (arg: T): ...
func .__type_params__ =(T,)
return func
func =TYPE_PARAMS_OF_func()
Here annotation-def indicates an annotation scope , which is not actually bound to any name at runtime. (One
otherlibertyistakeninthetranslation: thesyntaxdoesnotgothroughattributeaccessonthe typingmodule,but
createsaninstanceof typing.TypeVar directly.)
Theannotationsofgenericfunctionsareevaluatedwithintheannotationscopeusedfordeclaringthetypeparameters,
butthefunction’sdefaultsanddecoratorsarenot.
Thefollowingexampleillustratesthescopingrulesforthesecases,aswellasforadditionalflavorsoftypeparameters:
@decorator
def func [T: int,*Ts, **P](*args: *Ts, arg: Callable[P, T] =some_default):
...
Exceptforthe lazy evaluation ofthe TypeVarbound,thisisequivalentto:
DEFAULT_OF_arg =some_default
annotation -def TYPE_PARAMS_OF_func ():
annotation -def BOUND_OF_T ():
return int
# In reality, BOUND_OF_T() is evaluated only on demand.
T=typing .TypeVar( "T", bound =BOUND_OF_T())
Ts=typing .TypeVarTuple( "Ts")
P=typing .ParamSpec( "P")
def func (*args: *Ts, arg: Callable[P, T] =DEFAULT_OF_arg):
...
func .__type_params__ =(T, Ts, P)
return func
func =decorator(TYPE_PARAMS_OF_func())
Thecapitalizednameslike DEFAULT_OF_arg arenotactuallyboundatruntime.
130 Chapter 8. Compound statements
The Python Language Reference, Release 3.13.0
8.10.2 Generic classes
Genericclassesaredeclaredasfollows:
class Bag[T]: ...
Thissyntaxisequivalentto:
annotation -def TYPE_PARAMS_OF_Bag ():
T=typing .TypeVar( "T")
class Bag(typing .Generic[T]):
__type_params__ =(T,)
...
return Bag
Bag =TYPE_PARAMS_OF_Bag()
Here again annotation-def (not a real keyword) indicates an annotation scope , and the name
TYPE_PARAMS_OF_Bag isnotactuallyboundatruntime.
Generic classes implicitly inherit from typing.Generic . The base classes and keyword arguments of generic
classesareevaluatedwithinthetypescopeforthetypeparameters,anddecoratorsareevaluatedoutsidethatscope.
Thisisillustratedbythisexample:
@decorator
class Bag(Base[T], arg =T): ...
Thisisequivalentto:
annotation -def TYPE_PARAMS_OF_Bag ():
T=typing .TypeVar( "T")
class Bag(Base[T], typing .Generic[T], arg =T):
__type_params__ =(T,)
...
return Bag
Bag =decorator(TYPE_PARAMS_OF_Bag())
8.10.3 Generic type aliases
Thetypestatementcanalsobeusedtocreateagenerictypealias:
type ListOrSet[T] =list [T] |set[T]
Exceptforthe lazy evaluation ofthevalue,thisisequivalentto:
annotation -def TYPE_PARAMS_OF_ListOrSet ():
T=typing .TypeVar( "T")
annotation -def VALUE_OF_ListOrSet ():
return list [T] |set[T]
# In reality, the value is lazily evaluated
return typing .TypeAliasType( "ListOrSet ", VALUE_OF_ListOrSet(), type_params =(T,
,→))
ListOrSet =TYPE_PARAMS_OF_ListOrSet()
Here, annotation-def (not a real keyword) indicates an annotation scope . The capitalized names like
TYPE_PARAMS_OF_ListOrSet arenotactuallyboundatruntime.
8.10. Type parameter lists 131
The Python Language Reference, Release 3.13.0
132 Chapter 8. Compound statements
CHAPTER
NINE
TOP-LEVEL COMPONENTS
ThePythoninterpretercangetitsinputfromanumberofsources: fromascriptpassedtoitasstandardinputoras
programargument,typedininteractively,fromamodulesourcefile,etc. Thischaptergivesthesyntaxusedinthese
cases.
9.1Complete Python programs
Whilealanguagespecificationneednotprescribehowthelanguageinterpreterisinvoked,itisusefultohaveanotion
ofacompletePythonprogram. AcompletePythonprogramisexecutedinaminimallyinitializedenvironment: all
built-inandstandardmodulesareavailable,butnonehavebeeninitialized,exceptfor sys(varioussystemservices),
builtins (built-in functions, exceptions and None) and __main__ . The latter is used to provide the local and
globalnamespaceforexecutionofthecompleteprogram.
ThesyntaxforacompletePythonprogramisthatforfileinput,describedinthenextsection.
Theinterpretermayalsobeinvokedininteractivemode;inthiscase,itdoesnotreadandexecuteacompleteprogram
butreadsandexecutesonestatement(possiblycompound)atatime. Theinitialenvironmentisidenticaltothatofa
completeprogram;eachstatementisexecutedinthenamespaceof __main__ .
A complete program can be passed to the interpreter in three forms: with the -cstringcommand line option, as a
filepassedasthefirstcommandlineargument,orasstandardinput. Ifthefileorstandardinputisattydevice,the
interpreterentersinteractivemode;otherwise,itexecutesthefileasacompleteprogram.
9.2File input
Allinputreadfromnon-interactivefileshasthesameform:
file_input ::= (NEWLINE | statement )*
Thissyntaxisusedinthefollowingsituations:
•whenparsingacompletePythonprogram(fromafileorfromastring);
•whenparsingamodule;
•whenparsingastringpassedtothe exec()function;
9.3Interactive input
Inputininteractivemodeisparsedusingthefollowinggrammar:
interactive_input ::= [stmt_list ] NEWLINE | compound_stmt NEWLINE
Notethata(top-level)compoundstatementmustbefollowedbyablanklineininteractivemode; thisisneededto
helptheparserdetecttheendoftheinput.
133
The Python Language Reference, Release 3.13.0
9.4Expression input
eval()isusedforexpressioninput. Itignoresleadingwhitespace. Thestringargumentto eval()musthavethe
followingform:
eval_input ::= expression_list NEWLINE*
134 Chapter 9. Top-level components
CHAPTER
TEN
FULL GRAMMAR SPECIFICATION
ThisisthefullPythongrammar,deriveddirectlyfromthegrammarusedtogeneratetheCPythonparser(see Gram-
mar/python.gram ). Theversionhereomitsdetailsrelatedtocodegenerationanderrorrecovery.
The notation is a mixture of EBNFandPEG. In particular, &followed by a symbol, token or parenthesized group
indicatesapositivelookahead(i.e.,isrequiredtomatchbutnotconsumed),while !indicatesanegativelookahead
(i.e.,isrequired nottomatch). Weusethe |separatortomeanPEG’s“orderedchoice”(writtenas /intraditional
PEGgrammars). See PEP 617formoredetailsonthegrammar’ssyntax.
# PEG grammar for Python
# ========================= START OF THE GRAMMAR =========================
# General grammatical elements and rules:
#
# * Strings with double quotes (") denote SOFT KEYWORDS
# * Strings with single quotes (') denote KEYWORDS
# * Upper case names (NAME) denote tokens in the Grammar/Tokens file
# * Rule names starting with "invalid_" are used for specialized syntax errors
# - These rules are NOT used in the first pass of the parser.
# - Only if the first pass fails to parse, a second pass including the invalid
# rules will be executed.
# - If the parser fails in the second phase with a generic syntax error, the
# location of the generic failure of the first pass will be used (this avoids
# reporting incorrect locations due to the invalid rules).
# - The order of the alternatives involving invalid rules matter
# (like any rule in PEG).
#
# Grammar Syntax (see PEP 617 for more information):
#
# rule_name: expression
# Optionally, a type can be included right after the rule name, which
# specifies the return type of the C or Python function corresponding to the
# rule:
# rule_name[return_type]: expression
# If the return type is omitted, then a void * is returned in C and an Any in
# Python.
# e1 e2
# Match e1, then match e2.
# e1 | e2
# Match e1 or e2.
# The first alternative can also appear on the line after the rule name for
# formatting purposes. In that case, a | must be used before the first
# alternative, like so:
(continuesonnextpage)
135
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
# rule_name[return_type]:
# | first_alt
# | second_alt
# ( e )
# Match e (allows also to use other operators in the group like '(e)*')
# [ e ] or e?
# Optionally match e.
# e*
# Match zero or more occurrences of e.
# e+
# Match one or more occurrences of e.
# s.e+
# Match one or more occurrences of e, separated by s. The generated parse tree
# does not include the separator. This is otherwise identical to (e (s e)*).
# &e
# Succeed if e can be parsed, without consuming any input.
# !e
# Fail if e can be parsed, without consuming any input.
# ~
# Commit to the current alternative, even if it fails to parse.
# &&e
# Eager parse e. The parser will not backtrack and will immediately
# fail with SyntaxError if e cannot be parsed.
#
# STARTING RULES
# ==============
file : [statements ] ENDMARKER
interactive :statement_newline
eval :expressions NEWLINE *ENDMARKER
func_type : '(' [ type_expressions ] ')' '->' expression NEWLINE *ENDMARKER
# GENERAL STATEMENTS
# ==================
statements :statement +
statement :compound_stmt |simple_stmts
statement_newline :
|compound_stmt NEWLINE
|simple_stmts
|NEWLINE
|ENDMARKER
simple_stmts :
|simple_stmt !';' NEWLINE # Not needed, there for speedup
|';'.simple_stmt +[';'] NEWLINE
# NOTE: assignment MUST precede expression, else parsing a simple assignment
# will throw a SyntaxError.
simple_stmt :
|assignment
|type_alias
|star_expressions
(continuesonnextpage)
136 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
|return_stmt
|import_stmt
|raise_stmt
|'pass'
|del_stmt
|yield_stmt
|assert_stmt
|'break'
|'continue'
|global_stmt
|nonlocal_stmt
compound_stmt :
|function_def
|if_stmt
|class_def
|with_stmt
|for_stmt
|try_stmt
|while_stmt
|match_stmt
# SIMPLE STATEMENTS
# =================
# NOTE: annotated_rhs may start with 'yield'; yield_expr must start with 'yield'
assignment :
|NAME ':' expression ['=' annotated_rhs ]
|('(' single_target ')'
|single_subscript_attribute_target ) ':' expression ['=' annotated_rhs ]
|(star_targets '=' ) +(yield_expr |star_expressions ) !'=' [TYPE_COMMENT]
|single_target augassign ~ (yield_expr |star_expressions )
annotated_rhs :yield_expr |star_expressions
augassign :
|'+='
|'-='
|'*='
|'@='
|'/='
|'%='
|'&='
|'|='
|'^='
|'<<='
|'>>='
|'**='
|'//='
return_stmt :
|'return' [star_expressions ]
raise_stmt :
|'raise' expression ['from' expression ]
|'raise'
(continuesonnextpage)
137
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
global_stmt :'global' ','.NAME +
nonlocal_stmt :'nonlocal' ','.NAME +
del_stmt :
|'del' del_targets &(';' |NEWLINE)
yield_stmt :yield_expr
assert_stmt :'assert' expression [',' expression ]
import_stmt :
|import_name
|import_from
# Import statements
# -----------------
import_name :'import' dotted_as_names
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from :
|'from' ('.' |'...') *dotted_name 'import' import_from_targets
|'from' ('.' |'...') +'import' import_from_targets
import_from_targets :
|'(' import_from_as_names [','] ')'
|import_from_as_names !','
|'*'
import_from_as_names :
|','.import_from_as_name +
import_from_as_name :
|NAME [ 'as' NAME ]
dotted_as_names :
|','.dotted_as_name +
dotted_as_name :
|dotted_name ['as' NAME ]
dotted_name :
|dotted_name '.' NAME
|NAME
# COMPOUND STATEMENTS
# ===================
# Common elements
# ---------------
block :
|NEWLINE INDENT statements DEDENT
|simple_stmts
decorators : ('@' named_expression NEWLINE ) +
# Class definitions
# -----------------
class_def :
(continuesonnextpage)
138 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
|decorators class_def_raw
|class_def_raw
class_def_raw :
|'class' NAME [ type_params ] ['(' [ arguments ] ')' ] ':' block
# Function definitions
# --------------------
function_def :
|decorators function_def_raw
|function_def_raw
function_def_raw :
|'def' NAME [ type_params ] '(' [ params ] ')' ['->' expression ] ':' [ func_type_
,→comment ]block
|'async' 'def' NAME [ type_params ] '(' [ params ] ')' ['->' expression ] ':' ␣
,→[func_type_comment ]block
# Function parameters
# -------------------
params :
|parameters
parameters :
|slash_no_default param_no_default *param_with_default *[star_etc ]
|slash_with_default param_with_default *[star_etc ]
|param_no_default +param_with_default *[star_etc ]
|param_with_default +[star_etc ]
|star_etc
# Some duplication here because we can't write (',' | &')'),
# which is because we don't support empty alternatives (yet).
slash_no_default :
|param_no_default +'/' ','
|param_no_default +'/' &')'
slash_with_default :
|param_no_default *param_with_default +'/' ','
|param_no_default *param_with_default +'/' &')'
star_etc :
|'*' param_no_default param_maybe_default *[kwds ]
|'*' param_no_default_star_annotation param_maybe_default *[kwds ]
|'*' ',' param_maybe_default +[kwds ]
|kwds
kwds :
|'**' param_no_default
# One parameter. This *includes* a following comma and type comment.
#
# There are three styles:
# - No default
# - With default
(continuesonnextpage)
139
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
# - Maybe with default
#
# There are two alternative forms of each, to deal with type comments:
# - Ends in a comma followed by an optional type comment
# - No comma, optional type comment, must be followed by close paren
# The latter form is for a final parameter without trailing comma.
#
param_no_default :
|param ',' TYPE_COMMENT ?
|param TYPE_COMMENT ?&')'
param_no_default_star_annotation :
|param_star_annotation ',' TYPE_COMMENT ?
|param_star_annotation TYPE_COMMENT ?&')'
param_with_default :
|param default ',' TYPE_COMMENT ?
|param default TYPE_COMMENT ?&')'
param_maybe_default :
|param default ?',' TYPE_COMMENT ?
|param default ?TYPE_COMMENT ?&')'
param : NAME annotation ?
param_star_annotation : NAME star_annotation
annotation : ':' expression
star_annotation : ':' star_expression
default : '=' expression |invalid_default
# If statement
# ------------
if_stmt :
|'if' named_expression ':' block elif_stmt
|'if' named_expression ':' block [else_block ]
elif_stmt :
|'elif' named_expression ':' block elif_stmt
|'elif' named_expression ':' block [else_block ]
else_block :
|'else' ':' block
# While statement
# ---------------
while_stmt :
|'while' named_expression ':' block [else_block ]
# For statement
# -------------
for_stmt :
|'for' star_targets 'in' ~star_expressions ':' [TYPE_COMMENT] block [else_
,→block ]
|'async' 'for' star_targets 'in' ~star_expressions ':' [TYPE_COMMENT] block ␣
,→[else_block ]
# With statement
# --------------
(continuesonnextpage)
140 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
with_stmt :
|'with' '(' ',' .with_item +','?')' ':' [TYPE_COMMENT] block
|'with' ','.with_item +':' [TYPE_COMMENT] block
|'async' 'with' '(' ',' .with_item +','?')' ':' block
|'async' 'with' ','.with_item +':' [TYPE_COMMENT] block
with_item :
|expression 'as' star_target &(',' |')' |':')
|expression
# Try statement
# -------------
try_stmt :
|'try' ':' block finally_block
|'try' ':' block except_block +[else_block ] [finally_block ]
|'try' ':' block except_star_block +[else_block ] [finally_block ]
# Except statement
# ----------------
except_block :
|'except' expression ['as' NAME ] ':' block
|'except' ':' block
except_star_block :
|'except' '*' expression ['as' NAME ] ':' block
finally_block :
|'finally' ':' block
# Match statement
# ---------------
match_stmt :
|"match" subject_expr ':' NEWLINE INDENT case_block +DEDENT
subject_expr :
|star_named_expression ',' star_named_expressions ?
|named_expression
case_block :
|"case" patterns guard ?':' block
guard :'if' named_expression
patterns :
|open_sequence_pattern
|pattern
pattern :
|as_pattern
|or_pattern
as_pattern :
|or_pattern 'as' pattern_capture_target
(continuesonnextpage)
141
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
or_pattern :
|'|'.closed_pattern +
closed_pattern :
|literal_pattern
|capture_pattern
|wildcard_pattern
|value_pattern
|group_pattern
|sequence_pattern
|mapping_pattern
|class_pattern
# Literal patterns are used for equality and identity constraints
literal_pattern :
|signed_number !('+' |'-')
|complex_number
|strings
|'None'
|'True'
|'False'
# Literal expressions are used to restrict permitted mapping pattern keys
literal_expr :
|signed_number !('+' |'-')
|complex_number
|strings
|'None'
|'True'
|'False'
complex_number :
|signed_real_number '+' imaginary_number
|signed_real_number '-' imaginary_number
signed_number :
|NUMBER
|'-' NUMBER
signed_real_number :
|real_number
|'-' real_number
real_number :
|NUMBER
imaginary_number :
|NUMBER
capture_pattern :
|pattern_capture_target
pattern_capture_target :
|!"_" NAME !('.' |'(' |'=')
wildcard_pattern :
(continuesonnextpage)
142 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
|"_"
value_pattern :
|attr !('.' |'(' |'=')
attr :
|name_or_attr '.' NAME
name_or_attr :
|attr
|NAME
group_pattern :
|'(' pattern ')'
sequence_pattern :
|'[' maybe_sequence_pattern ?']'
|'(' open_sequence_pattern ?')'
open_sequence_pattern :
|maybe_star_pattern ',' maybe_sequence_pattern ?
maybe_sequence_pattern :
|','.maybe_star_pattern +','?
maybe_star_pattern :
|star_pattern
|pattern
star_pattern :
|'*' pattern_capture_target
|'*' wildcard_pattern
mapping_pattern :
|'{' '}'
|'{' double_star_pattern ','?'}'
|'{' items_pattern ',' double_star_pattern ','?'}'
|'{' items_pattern ','?'}'
items_pattern :
|','.key_value_pattern +
key_value_pattern :
|(literal_expr |attr ) ':' pattern
double_star_pattern :
|'**' pattern_capture_target
class_pattern :
|name_or_attr '(' ')'
|name_or_attr '(' positional_patterns ','?')'
|name_or_attr '(' keyword_patterns ','?')'
|name_or_attr '(' positional_patterns ',' keyword_patterns ','?')'
positional_patterns :
|','.pattern +
(continuesonnextpage)
143
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
keyword_patterns :
|','.keyword_pattern +
keyword_pattern :
|NAME '=' pattern
# Type statement
# ---------------
type_alias :
|"type" NAME [ type_params ] '=' expression
# Type parameter declaration
# --------------------------
type_params :
|invalid_type_params
|'[' type_param_seq ']'
type_param_seq : ',' .type_param +[',']
type_param :
|NAME [ type_param_bound ] [type_param_default ]
|'*' NAME [ type_param_starred_default ]
|'**' NAME [ type_param_default ]
type_param_bound : ':' expression
type_param_default : '=' expression
type_param_starred_default : '=' star_expression
# EXPRESSIONS
# -----------
expressions :
|expression (',' expression )+[',']
|expression ','
|expression
expression :
|disjunction 'if' disjunction 'else' expression
|disjunction
|lambdef
yield_expr :
|'yield' 'from' expression
|'yield' [star_expressions ]
star_expressions :
|star_expression (',' star_expression )+[',']
|star_expression ','
|star_expression
star_expression :
|'*' bitwise_or
|expression
(continuesonnextpage)
144 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
star_named_expressions : ',' .star_named_expression +[',']
star_named_expression :
|'*' bitwise_or
|named_expression
assignment_expression :
|NAME ':=' ~ expression
named_expression :
|assignment_expression
|expression !':='
disjunction :
|conjunction ('or' conjunction )+
|conjunction
conjunction :
|inversion ('and' inversion )+
|inversion
inversion :
|'not' inversion
|comparison
# Comparison operators
# --------------------
comparison :
|bitwise_or compare_op_bitwise_or_pair +
|bitwise_or
compare_op_bitwise_or_pair :
|eq_bitwise_or
|noteq_bitwise_or
|lte_bitwise_or
|lt_bitwise_or
|gte_bitwise_or
|gt_bitwise_or
|notin_bitwise_or
|in_bitwise_or
|isnot_bitwise_or
|is_bitwise_or
eq_bitwise_or : '==' bitwise_or
noteq_bitwise_or :
|('!=' ) bitwise_or
lte_bitwise_or : '<=' bitwise_or
lt_bitwise_or : '<' bitwise_or
gte_bitwise_or : '>=' bitwise_or
gt_bitwise_or : '>' bitwise_or
notin_bitwise_or :'not' 'in' bitwise_or
in_bitwise_or :'in' bitwise_or
isnot_bitwise_or :'is' 'not' bitwise_or
is_bitwise_or :'is' bitwise_or
(continuesonnextpage)
145
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
# Bitwise operators
# -----------------
bitwise_or :
|bitwise_or '|' bitwise_xor
|bitwise_xor
bitwise_xor :
|bitwise_xor '^' bitwise_and
|bitwise_and
bitwise_and :
|bitwise_and '&' shift_expr
|shift_expr
shift_expr :
|shift_expr '<<' sum
|shift_expr '>>' sum
|sum
# Arithmetic operators
# --------------------
sum:
|sum '+' term
|sum '-' term
|term
term :
|term '*' factor
|term '/' factor
|term '//' factor
|term '%' factor
|term '@' factor
|factor
factor :
|'+' factor
|'-' factor
|'~' factor
|power
power :
|await_primary '**' factor
|await_primary
# Primary elements
# ----------------
# Primary elements are things like "obj.something.something", "obj[something]",
,→"obj(something)", "obj" ...
await_primary :
|'await' primary
|primary
(continuesonnextpage)
146 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
primary :
|primary '.' NAME
|primary genexp
|primary '(' [ arguments ] ')'
|primary '[' slices ']'
|atom
slices :
|slice !','
|','.(slice |starred_expression )+[',']
slice :
|[expression ] ':' [ expression ] [':' [ expression ] ]
|named_expression
atom :
|NAME
|'True'
|'False'
|'None'
|strings
|NUMBER
|(tuple |group |genexp )
|(list |listcomp )
|(dict |set |dictcomp |setcomp )
|'...'
group :
|'(' ( yield_expr |named_expression ) ')'
# Lambda functions
# ----------------
lambdef :
|'lambda' [lambda_params ] ':' expression
lambda_params :
|lambda_parameters
# lambda_parameters etc. duplicates parameters but without annotations
# or type comments, and if there's no comma after a parameter, we expect
# a colon, not a close parenthesis. (For more, see parameters above.)
#
lambda_parameters :
|lambda_slash_no_default lambda_param_no_default *lambda_param_with_default *␣
,→[lambda_star_etc ]
|lambda_slash_with_default lambda_param_with_default *[lambda_star_etc ]
|lambda_param_no_default +lambda_param_with_default *[lambda_star_etc ]
|lambda_param_with_default +[lambda_star_etc ]
|lambda_star_etc
lambda_slash_no_default :
|lambda_param_no_default +'/' ','
|lambda_param_no_default +'/' &':'
(continuesonnextpage)
147
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
lambda_slash_with_default :
|lambda_param_no_default *lambda_param_with_default +'/' ','
|lambda_param_no_default *lambda_param_with_default +'/' &':'
lambda_star_etc :
|'*' lambda_param_no_default lambda_param_maybe_default *[lambda_kwds ]
|'*' ',' lambda_param_maybe_default +[lambda_kwds ]
|lambda_kwds
lambda_kwds :
|'**' lambda_param_no_default
lambda_param_no_default :
|lambda_param ','
|lambda_param &':'
lambda_param_with_default :
|lambda_param default ','
|lambda_param default &':'
lambda_param_maybe_default :
|lambda_param default ?','
|lambda_param default ?&':'
lambda_param : NAME
# LITERALS
# ========
fstring_middle :
|fstring_replacement_field
|FSTRING_MIDDLE
fstring_replacement_field :
|'{' annotated_rhs '='?[fstring_conversion ] [fstring_full_format_spec ] '}'
fstring_conversion :
|"!" NAME
fstring_full_format_spec :
|':' fstring_format_spec *
fstring_format_spec :
|FSTRING_MIDDLE
|fstring_replacement_field
fstring :
|FSTRING_START fstring_middle *FSTRING_END
string : STRING
strings : (fstring |string )+
list :
|'[' [ star_named_expressions ] ']'
tuple :
|'(' [ star_named_expression ',' [ star_named_expressions ] ] ')'
set: '{' star_named_expressions '}'
# Dicts
# -----
dict :
(continuesonnextpage)
148 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
|'{' [ double_starred_kvpairs ] '}'
double_starred_kvpairs : ',' .double_starred_kvpair +[',']
double_starred_kvpair :
|'**' bitwise_or
|kvpair
kvpair :expression ':' expression
# Comprehensions & Generators
# ---------------------------
for_if_clauses :
|for_if_clause +
for_if_clause :
|'async' 'for' star_targets 'in' ~disjunction ('if' disjunction )*
|'for' star_targets 'in' ~disjunction ('if' disjunction )*
listcomp :
|'[' named_expression for_if_clauses ']'
setcomp :
|'{' named_expression for_if_clauses '}'
genexp :
|'(' ( assignment_expression |expression !':=') for_if_clauses ')'
dictcomp :
|'{' kvpair for_if_clauses '}'
# FUNCTION CALL ARGUMENTS
# =======================
arguments :
|args [','] &')'
args :
|','.(starred_expression |(assignment_expression |expression !':=') !'=') +␣
,→[',' kwargs ]
|kwargs
kwargs :
|','.kwarg_or_starred +',' ',' .kwarg_or_double_starred +
|','.kwarg_or_starred +
|','.kwarg_or_double_starred +
starred_expression :
|'*' expression
kwarg_or_starred :
|NAME '=' expression
|starred_expression
kwarg_or_double_starred :
(continuesonnextpage)
149
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
|NAME '=' expression
|'**' expression
# ASSIGNMENT TARGETS
# ==================
# Generic targets
# ---------------
# NOTE: star_targets may contain *bitwise_or, targets may not.
star_targets :
|star_target !','
|star_target (',' star_target )*[',']
star_targets_list_seq : ',' .star_target +[',']
star_targets_tuple_seq :
|star_target (',' star_target )+[',']
|star_target ','
star_target :
|'*' (!'*' star_target )
|target_with_star_atom
target_with_star_atom :
|t_primary '.' NAME ! t_lookahead
|t_primary '[' slices ']' ! t_lookahead
|star_atom
star_atom :
|NAME
|'(' target_with_star_atom ')'
|'(' [ star_targets_tuple_seq ] ')'
|'[' [ star_targets_list_seq ] ']'
single_target :
|single_subscript_attribute_target
|NAME
|'(' single_target ')'
single_subscript_attribute_target :
|t_primary '.' NAME ! t_lookahead
|t_primary '[' slices ']' ! t_lookahead
t_primary :
|t_primary '.' NAME & t_lookahead
|t_primary '[' slices ']' & t_lookahead
|t_primary genexp &t_lookahead
|t_primary '(' [ arguments ] ')' & t_lookahead
|atom &t_lookahead
t_lookahead : '(' |'[' |'.'
# Targets for del statements
# --------------------------
(continuesonnextpage)
150 Chapter 10. Full Grammar specification
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
del_targets : ',' .del_target +[',']
del_target :
|t_primary '.' NAME ! t_lookahead
|t_primary '[' slices ']' ! t_lookahead
|del_t_atom
del_t_atom :
|NAME
|'(' del_target ')'
|'(' [ del_targets ] ')'
|'[' [ del_targets ] ']'
# TYPING ELEMENTS
# ---------------
# type_expressions allow */** but ignore them
type_expressions :
|','.expression +',' '*' expression ',' '**' expression
|','.expression +',' '*' expression
|','.expression +',' '**' expression
|'*' expression ',' '**' expression
|'*' expression
|'**' expression
|','.expression +
func_type_comment :
|NEWLINE TYPE_COMMENT &(NEWLINE INDENT) # Must be followed by indented block
|TYPE_COMMENT
# ========================= END OF THE GRAMMAR ===========================
# ========================= START OF INVALID RULES =======================
151
The Python Language Reference, Release 3.13.0
152 Chapter 10. Full Grammar specification
APPENDIX
A
GLOSSARY
>>>
The default Python prompt of the interactive shell. Often seen for code examples which can be executed
interactivelyintheinterpreter.
...
Canreferto:
•The default Python prompt of the interactive shell when entering the code for an indented code block,
when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or
triplequotes),orafterspecifyingadecorator.
•TheEllipsis built-inconstant.
abstract base class
Abstractbaseclassescomplement duck-typing byprovidingawaytodefineinterfaceswhenothertechniques
likehasattr() wouldbeclumsyorsubtlywrong(forexamplewith magic methods ). ABCsintroducevirtual
subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and
issubclass() ;seethe abcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-
tures (in the collections.abc module), numbers (in the numbersmodule), streams (in the iomodule),
import finders and loaders (in the importlib.abc module). You can create your own ABCs with the abc
module.
annotation
Alabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention
asatype hint.
Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-
tributes, and functions are stored in the __annotations__ special attribute of modules, classes, and func-
tions,respectively.
Seevariable annotation ,function annotation ,PEP 484andPEP 526,whichdescribethisfunctionality. Also
seeannotations-howtoforbestpracticesonworkingwithannotations.
argument
Avaluepassedtoa function(ormethod)whencallingthefunction. Therearetwokindsofargument:
•keyword argument : anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa
valueinadictionaryprecededby **. Forexample, 3and5arebothkeywordargumentsinthefollowing
callsto complex() :
complex (real =3, imag =5)
complex (**{'real ':3,'imag ':5})
•positional argument : anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe
beginningofanargumentlistand/orbepassedaselementsofan iterableprecededby *. Forexample, 3
and5arebothpositionalargumentsinthefollowingcalls:
complex (3,5)
complex (*(3,5))
153
The Python Language Reference, Release 3.13.0
Arguments are assigned to the named local variables in a function body. See the Callssection for the rules
governingthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument; theevaluated
valueisassignedtothelocalvariable.
Seealsothe parameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
andPEP 362.
asynchronous context manager
Anobjectwhichcontrolstheenvironmentseeninan async with statementbydefining __aenter__() and
__aexit__() methods. Introducedby PEP 492.
asynchronous generator
A function which returns an asynchronous generator iterator . It looks like a coroutine function defined with
async def except that it contains yieldexpressions for producing a series of values usable in an async
forloop.
Usually refers to an asynchronous generator function, but may refer to an asynchronous generator iterator in
somecontexts. Incaseswheretheintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
Anasynchronousgeneratorfunctionmaycontain awaitexpressionsaswellas async for ,and async with
statements.
asynchronous generator iterator
Anobjectcreatedbya asynchronous generator function.
Thisisan asynchronous iterator whichwhencalledusingthe __anext__() methodreturnsanawaitableobject
whichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe asynchronous generator iterator effectivelyresumeswithanother
awaitablereturnedby __anext__() ,itpicksupwhereitleftoff. See PEP 492andPEP 525.
asynchronous iterable
An object, that can be used in an async for statement. Must return an asynchronous iterator from its
__aiter__() method. Introducedby PEP 492.
asynchronous iterator
An object that implements the __aiter__() and__anext__() methods. __anext__() must return an
awaitableobject. async for resolves the awaitables returned by an asynchronous iterator’s __anext__()
methoduntilitraisesa StopAsyncIteration exception. Introducedby PEP 492.
attribute
Avalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,
ifanobject ohasanattribute aitwouldbereferencedas o.a.
Itispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedby Identifiers and keywords ,
forexampleusing setattr() ,iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadotted
expression,andwouldinsteadneedtoberetrievedwith getattr() .
awaitable
An object that can be used in an awaitexpression. Can be a coroutineor an object with an __await__()
method. Seealso PEP 492.
BDFL
BenevolentDictatorForLife,a.k.a. GuidovanRossum ,Python’screator.
binary file
Afile objectabletoreadandwrite bytes-like objects . Examplesofbinaryfilesarefilesopenedinbinarymode
('rb','wb'or'rb+'),sys.stdin.buffer ,sys.stdout.buffer , andinstancesof io.BytesIO and
gzip.GzipFile .
Seealso text fileforafileobjectabletoreadandwrite strobjects.
borrowed reference
InPython’sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot
ownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection
canremovethelast strong reference totheobjectandsodestroyit.
154 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
Calling Py_INCREF() onthe borrowed reference isrecommendedtoconvertittoa strong reference in-place,
exceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. The Py_NewRef()
functioncanbeusedtocreateanew strong reference .
bytes-like object
An object that supports the bufferobjects and can export a C- contiguous buffer. This includes all bytes,
bytearray ,and array.array objects,aswellasmanycommon memoryview objects. Bytes-likeobjects
can be used for variousoperations that work withbinary data; these include compression, saving to a binary
file,andsendingoverasocket.
Someoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas“read-write
bytes-likeobjects”. Examplemutablebufferobjectsinclude bytearray anda memoryview ofabytearray .
Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”);
examplesoftheseinclude bytesanda memoryview ofabytesobject.
bytecode
Pythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython
interpreter. Thebytecodeisalsocachedin .pycfilessothatexecutingthesamefileisfasterthesecondtime
(recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a
virtual machine thatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare
notexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.
Alistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.
callable
Acallableisanobjectthatcanbecalled,possiblywithasetofarguments(see argument),withthefollowing
syntax:
callable (argument1, argument2, argumentN)
Afunction,andbyextensiona method,isacallable. Aninstanceofaclassthatimplementsthe __call__()
methodisalsoacallable.
callback
Asubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.
class
A template for creating user-defined objects. Class definitions normally contain method definitions which
operateoninstancesoftheclass.
class variable
Avariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).
closure variable
Afree variable referencedfroma nested scope thatisdefinedinanouterscoperatherthanbeingresolvedat
runtime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to
allowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.
Forexample,inthe innerfunctioninthefollowingcode,both xandprintarefree variables ,butonly xis
aclosure variable :
def outer ():
x=0
def inner ():
nonlocal x
x+=1
print (x)
return inner
Duetothe codeobject.co_freevars attribute(which,despiteitsname,onlyincludesthenamesofclosure
variablesratherthanlistingallreferencedfreevariables),themoregeneral free variable termissometimesused
evenwhentheintendedmeaningistoreferspecificallytoclosurevariables.
155
The Python Language Reference, Release 3.13.0
complex number
Anextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand
animaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof -1),often
written iin mathematics or jin engineering. Python has built-in support for complex numbers, which are
writtenwiththislatternotation;theimaginarypartiswrittenwitha jsuffix,e.g., 3+1j. Togetaccesstocom-
plexequivalentsofthe mathmodule,use cmath. Useofcomplexnumbersisafairlyadvancedmathematical
feature. Ifyou’renotawareofaneedforthem,it’salmostcertainyoucansafelyignorethem.
context
Thistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:
•Thetemporarystateorenvironmentestablishedbya context manager viaa withstatement.
•The collection of keyvalue bindings associated with a particular contextvars.Context object and
accessedvia ContextVar objects. Alsosee context variable .
•Acontextvars.Context object. Alsosee current context .
context management protocol
The__enter__() and__exit__() methodscalledbythe withstatement. See PEP 343.
context manager
An object which implements the context management protocol and controls the environment seen in a with
statement. See PEP 343.
context variable
A variable whose value depends on which context is the current context . Values are accessed via
contextvars.ContextVar objects. Context variables are primarily used to isolate state between concur-
rentasynchronoustasks.
contiguous
Abufferisconsideredcontiguousexactlyifitiseither C-contiguous orFortran contiguous . Zero-dimensional
buffersareCandFortrancontiguous. Inone-dimensionalarrays, theitemsmustbelaidoutinmemorynext
toeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the
lastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous
arrays,thefirstindexvariesthefastest.
coroutine
Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at
anotherpoint. Coroutinescanbeentered, exited, andresumedatmanydifferentpoints. Theycanbeimple-
mentedwiththe async def statement. Seealso PEP 492.
coroutine function
Afunctionwhichreturnsa coroutineobject. Acoroutinefunctionmaybedefinedwiththe async def state-
ment, and may contain await,async for , and async with keywords. These were introduced by PEP
492.
CPython
ThecanonicalimplementationofthePythonprogramminglanguage,asdistributedon python.org. Theterm
“CPython”isusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.
current context
Thecontext(contextvars.Context object) that is currently used by ContextVar objects to access (get
or set) the values of context variables . Each thread has its own current context. Frameworks for executing
asynchronous tasks (see asyncio) associate each task with a context which becomes the current context
wheneverthetaskstartsorresumesexecution.
decorator
Afunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe @wrapper syntax.
Commonexamplesfordecoratorsare classmethod() andstaticmethod() .
Thedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-
alent:
156 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
def f(arg):
...
f=staticmethod (f)
@staticmethod
def f(arg):
...
The same concept exists for classes, but is less commonly used there. See the documentation for function
definitionsandclass definitions formoreaboutdecorators.
descriptor
Anyobjectwhichdefinesthemethods __get__() ,__set__() ,or__delete__() . Whenaclassattribute
is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.bto get,
set or delete an attribute looks up the object named bin the class dictionary for a, but if bis a descriptor,
the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of
Pythonbecausetheyarethebasisformanyfeaturesincludingfunctions, methods, properties, classmethods,
staticmethods,andreferencetosuperclasses.
For more information about descriptors’ methods, see Implementing Descriptors or the Descriptor How To
Guide.
dictionary
Anassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith __hash__()
and__eq__() methods. CalledahashinPerl.
dictionary comprehension
A compact way to process all or part of the elements in an iterable and return a dictionary with the re-
sults. results = {n: n ** 2 for n in range(10)} generatesadictionarycontainingkey nmapped
tovalue n ** 2. See Displays for lists, sets and dictionaries .
dictionary view
Theobjectsreturnedfrom dict.keys() ,dict.values() ,and dict.items() arecalleddictionaryviews.
They providea dynamicview onthe dictionary’sentries, whichmeans thatwhen thedictionary changes, the
view reflects these changes. To force the dictionary view to become a full list use list(dictview) . See
dict-views.
docstring
A string literal which appears as the first expression in a class, function or module. While ignored when the
suite is executed, it is recognized by the compiler and put into the __doc__attribute of the enclosing class,
function or module. Since it is available via introspection, it is the canonical place for documentation of the
object.
duck-typing
Aprogrammingstylewhichdoesnotlookatanobject’stypetodetermineifithastherightinterface;instead,
the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be
a duck.”) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility
by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (Note,
however, that duck-typing can be complemented with abstract base classes .) Instead, it typically employs
hasattr() testsor EAFPprogramming.
EAFP
Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of
valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is
characterizedbythepresenceofmany tryandexceptstatements. Thetechniquecontrastswiththe LBYL
stylecommontomanyotherlanguagessuchasC.
expression
Apieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof
expressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In
contrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealso statementswhich
cannotbeusedasexpressions,suchas while. Assignmentsarealsostatements,notexpressions.
157
The Python Language Reference, Release 3.13.0
extension module
AmodulewritteninCorC++,usingPython’sCAPItointeractwiththecoreandwithusercode.
f-string
String literals prefixed with 'f'or'F'are commonly called “f-strings” which is short for formatted string
literals. Seealso PEP 498.
file object
Anobjectexposingafile-orientedAPI(withmethodssuchas read()orwrite())toanunderlyingresource.
Dependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof
storageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).
Fileobjectsarealsocalled file-like objects orstreams.
There are actually three categories of file objects: raw binary files , buffered binary files andtext files. Their
interfaces are defined in the iomodule. The canonical way to create a file object is by using the open()
function.
file-like object
Asynonymfor file object.
filesystem encoding and error handler
EncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto
theoperatingsystem.
Thefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding
failstoprovidethisguarantee,APIfunctionscanraise UnicodeError .
Thesys.getfilesystemencoding() andsys.getfilesystemencodeerrors() functions can be
usedtogetthefilesystemencodinganderrorhandler.
Thefilesystem encoding and error handler areconfiguredatPythonstartupbythe PyConfig_Read() func-
tion: see filesystem_encoding andfilesystem_errors membersof PyConfig .
Seealsothe locale encoding .
finder
Anobjectthattriestofindthe loaderforamodulethatisbeingimported.
Therearetwotypesoffinder: meta path finders forusewith sys.meta_path ,andpath entry finders foruse
withsys.path_hooks .
SeeFinders and loaders andimportlib formuchmoredetail.
floor division
Mathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris //. Forexample,the
expression 11 // 4evaluates to 2in contrast to the 2.75returned by float true division. Note that (-11)
// 4is-3becausethatis -2.75rounded downward. See PEP 238.
free threading
AthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.
Thisisincontrasttothe global interpreter lock whichallowsonlyonethreadtoexecutePythonbytecodeata
time. See PEP 703.
free variable
Formally,asdefinedinthe language execution model ,afreevariableisanyvariableusedinanamespacewhich
isnotalocalvariableinthatnamespace. See closure variable foranexample. Pragmatically,duetothenameof
thecodeobject.co_freevars attribute,thetermisalsosometimesusedasasynonymfor closure variable .
function
Aseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormore argumentswhich
maybeusedintheexecutionofthebody. Seealso parameter,method,andthe Function definitions section.
function annotation
Anannotation ofafunctionparameterorreturnvalue.
Function annotations are usually used for type hints: for example, this function is expected to take two int
argumentsandisalsoexpectedtohavean intreturnvalue:
158 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
def sum_two_numbers (a: int, b: int)->int:
return a+b
Functionannotationsyntaxisexplainedinsection Function definitions .
Seevariable annotation andPEP 484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest
practicesonworkingwithannotations.
__future__
Afuture statement ,from __future__ import <feature> , directs the compiler to compile the current
moduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The __future__
moduledocumentsthepossiblevaluesof feature. Byimportingthismoduleandevaluatingitsvariables,you
canseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:
>>> import __future__
>>> __future__ .division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
garbage collection
Theprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference
countingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector
canbecontrolledusingthe gcmodule.
generator
A function which returns a generator iterator . It looks like a normal function except that it contains yield
expressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe
next()function.
Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where
theintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
generator iterator
Anobjectcreatedbya generatorfunction.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe generator iterator resumes,itpicksupwhereitleftoff(incontrast
tofunctionswhichstartfreshoneveryinvocation).
generator expression
Anexpression that returns an iterator. It looks like a normal expression followed by a forclause defining a
loop variable, range, and an optional ifclause. The combined expression generates values for an enclosing
function:
>>> sum(i*ifor iinrange (10)) # sum of squares 0, 1, 4, ... 81
285
generic function
Afunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-
plementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.
Seealsothe single dispatch glossaryentry,the functools.singledispatch() decorator,and PEP 443.
generic type
Atypethat can be parameterized; typically a container class such as listordict. Used for type hintsand
annotations .
Formoredetails,seegenericaliastypes, PEP 483,PEP 484,PEP 585,andthe typingmodule.
GIL
Seeglobal interpreter lock .
global interpreter lock
The mechanism used by the CPythoninterpreter to assure that only one thread executes Python bytecodeat
a time. This simplifies the CPython implementation by making the object model (including critical built-in
159
The Python Language Reference, Release 3.13.0
types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier
fortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor
machines.
However,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen
doingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen
doingI/O.
As of Python 3.13, the GIL can be disabled using the --disable-gil build configuration. After building
Pythonwiththisoption,codemustberunwith -X gil=0 oraftersettingthe PYTHON_GIL=0 environment
variable. This feature enables improved performance for multi-threaded applications and makes it easier to
usemulti-coreCPUsefficiently. Formoredetails,see PEP 703.
hash-based pyc
Abytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto
determineitsvalidity. See Cached bytecode invalidation .
hashable
Anobjectis hashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa __hash__()
method), and can be compared to other objects (it needs an __eq__() method). Hashable objects which
compareequalmusthavethesamehashvalue.
Hashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe
hashvalueinternally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)
arenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.
Objectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except
withthemselves),andtheirhashvalueisderivedfromtheir id().
IDLE
AnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-
ronmentwhichshipswiththestandarddistributionofPython.
immortal
Immortal objects areaCPythonimplementationdetailintroducedin PEP 683.
If an object is immortal, its reference count is never modified, and therefore it is never deallocated while the
interpreterisrunning. Forexample, TrueandNoneareimmortalinCPython.
immutable
An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot
bealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein
placeswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.
import path
Alistoflocations(or path entries )thataresearchedbythe path based finder formodulestoimport. During
import, this list of locations usually comes from sys.path , but for subpackages it may also come from the
parentpackage’s __path__ attribute.
importing
TheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.
importer
Anobjectthatbothfindsandloadsamodule;botha finderandloaderobject.
interactive
Pythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter
prompt, immediately execute them and see their results. Just launch pythonwith no arguments (possibly
by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect
modulesandpackages(remember help(x)). Formoreoninteractivemode,seetut-interac.
interpreted
Pythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause
ofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly
160 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
creating an executable which is then run. Interpreted languages typically have a shorter development/debug
cyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealso interactive.
interpreter shutdown
Whenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated
resources, such as modules and various critical internal structures. It also makes several calls to the garbage
collector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-
cutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction
anymore(commonexamplesarelibrarymodulesorthewarningsmachinery).
The main reason for interpreter shutdown is that the __main__ module or the script being run has finished
executing.
iterable
An object capable of returning its members one at a time. Examples of iterables include all sequence types
(such as list,str, and tuple) and some non-sequence types like dict,file objects, and objects of any
classesyoudefinewithan __iter__() methodorwitha __getitem__() methodthatimplements sequence
semantics.
Iterables can be used in a forloop and in many other places where a sequence is needed ( zip(),map(),
…). Whenaniterableobjectispassed as anargumentto thebuilt-infunction iter(), itreturnsan iterator
fortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot
necessarytocall iter()ordealwithiteratorobjectsyourself. The forstatementdoesthatautomaticallyfor
you,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealso iterator,
sequence,andgenerator.
iterator
An object representing a stream of data. Repeated calls to the iterator’s __next__() method (or passing
ittothebuilt-infunction next())returnsuccessiveitemsinthestream. Whennomoredataareavailablea
StopIteration exceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls
toits __next__() methodjustraise StopIteration again. Iteratorsarerequiredtohavean __iter__()
methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces
whereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A
containerobject(suchasa list)producesafreshnewiteratoreachtimeyoupassittothe iter()function
oruseitina forloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused
inthepreviousiterationpass,makingitappearlikeanemptycontainer.
Moreinformationcanbefoundintypeiter.
CPython implementation detail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine
__iter__() . Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof
iteratoroperations.
key function
Akeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,
locale.strxfrm() isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.
A number of tools in Python accept key functions to control how elements are ordered or grouped. They
include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq.
nlargest() ,and itertools.groupby() .
There are several ways to create a key function. For example. the str.lower() method can serve as a
key function for case insensitive sorts. Alternatively, a key function can be built from a lambdaexpression
suchas lambda r: (r[0], r[2]) . Also, operator.attrgetter() ,operator.itemgetter() ,and
operator.methodcaller() are three key function constructors. See the Sorting HOW TO for examples
ofhowtocreateandusekeyfunctions.
keyword argument
Seeargument.
lambda
Ananonymousinlinefunctionconsistingofasingle expressionwhichisevaluatedwhenthefunctioniscalled.
Thesyntaxtocreatealambdafunctionis lambda [parameters]: expression
161
The Python Language Reference, Release 3.13.0
LBYL
Lookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This
stylecontrastswiththe EAFPapproachandischaracterizedbythepresenceofmany ifstatements.
In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the
looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can
failifanotherthreadremoves keyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved
withlocksorbyusingtheEAFPapproach.
list
Abuilt-inPython sequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist
sinceaccesstoelementsis O(1).
list comprehension
Acompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result
= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generatesalistofstringscon-
tainingevenhexnumbers(0x..) intherangefrom0to255. The ifclauseisoptional. Ifomitted,allelements
inrange(256) areprocessed.
loader
Anobjectthatloadsamodule. Itmustdefineamethodnamed load_module() . Aloaderistypicallyreturned
byafinder. Seealso:
•Finders and loaders
•importlib.abc.Loader
•PEP 302
locale encoding
On Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.
LC_CTYPE, new_locale) .
OnWindows,itistheANSIcodepage(ex: "cp1252" ).
OnAndroidandVxWorks,Pythonuses "utf-8"asthelocaleencoding.
locale.getencoding() canbeusedtogetthelocaleencoding.
Seealsothe filesystem encoding and error handler .
magic method
Aninformalsynonymfor special method .
mapping
A container object that supports arbitrary key lookups and implements the methods specified in the
collections.abc.Mapping orcollections.abc.MutableMapping abstract base classes. Exam-
ples include dict,collections.defaultdict ,collections.OrderedDict andcollections.
Counter.
meta path finder
Afinderreturnedbyasearchof sys.meta_path . Metapathfindersarerelatedto, butdifferentfrom path
entry finders .
Seeimportlib.abc.MetaPathFinder forthemethodsthatmetapathfindersimplement.
metaclass
The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The
metaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-
gramming languages provide a default implementation. What makes Python special is that it is possible to
createcustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide
powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking
objectcreation,implementingsingletons,andmanyothertasks.
Moreinformationcanbefoundin Metaclasses .
162 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
method
Afunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod
willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self). See functionandnested scope .
method resolution order
Method Resolution Order is the order in which base classes are searched for a member during lookup. See
python_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.
module
AnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary
Pythonobjects. ModulesareloadedintoPythonbytheprocessof importing.
Seealso package.
module spec
Anamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceof importlib.
machinery.ModuleSpec .
Seealso Module specs .
MRO
Seemethod resolution order .
mutable
Mutableobjectscanchangetheirvaluebutkeeptheir id(). Seealso immutable.
named tuple
Theterm“namedtuple”appliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare
alsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.
Several built-in types are named tuples, including the values returned by time.localtime() andos.
stat(). Anotherexampleis sys.float_info :
>>> sys.float_info[ 1] # indexed access
1024
>>> sys.float_info .max_exp # named field access
1024
>>> isinstance (sys .float_info, tuple ) # kind of tuple
True
Some named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be
created from a regular class definition that inherits from tupleand that defines named fields. Such a class
canbewrittenbyhand,oritcanbecreatedbyinheriting typing.NamedTuple ,orwiththefactoryfunction
collections.namedtuple() . The latter techniques also add some extra methods that may not be found
inhand-writtenorbuilt-innamedtuples.
namespace
The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,
global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support
modularitybypreventingnamingconflicts. Forinstance,thefunctions builtins.open andos.open() are
distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear
which module implements a function. For instance, writing random.seed() oritertools.islice()
makesitclearthatthosefunctionsareimplementedbythe randomanditertools modules,respectively.
namespace package
APEP 420 packagewhich serves only as a container for subpackages. Namespace packages may have no
physical representation, and specifically are not like a regular package because they have no __init__.py
file.
Seealso module.
nested scope
The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another
functioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference
163
The Python Language Reference, Release 3.13.0
andnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables
readandwritetotheglobalnamespace. The nonlocal allowswritingtoouterscopes.
new-style class
Old name for the flavor of classes now used for all class objects. In earlier Python versions, only
new-style classes could use Python’s newer, versatile features like __slots__ , descriptors, properties,
__getattribute__() ,classmethods,andstaticmethods.
object
Anydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany
new-style class .
optimized scope
A scope where target local variable names are reliably known to the compiler when the code is compiled,
allowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,
coroutines, comprehensions, and generator expressions are optimized in this fashion. Note: most interpreter
optimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames
arerestrictedtooptimizedscopes.
package
A Python modulewhich can contain submodules or recursively, subpackages. Technically, a package is a
Pythonmodulewitha __path__ attribute.
Seealso regular package andnamespace package .
parameter
Anamedentityina function(ormethod)definitionthatspecifiesan argument(orinsomecases,arguments)
thatthefunctioncanaccept. Therearefivekindsofparameter:
•positional-or-keyword : specifiesanargumentthatcanbepassedeither positionally orasa keyword argu-
ment. Thisisthedefaultkindofparameter,forexample fooandbarinthefollowing:
def func (foo, bar =None ):...
•positional-only : specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters
canbedefinedbyincludinga /characterintheparameterlistofthefunctiondefinitionafterthem,for
example posonly1andposonly2inthefollowing:
def func (posonly1, posonly2, /, positional_or_keyword): ...
•keyword-only : specifies an argument that can be supplied only by keyword. Keyword-only parameters
canbedefinedbyincludingasinglevar-positionalparameterorbare *intheparameterlistofthefunction
definitionbeforethem,forexample kw_only1andkw_only2inthefollowing:
def func (arg, *, kw_only1, kw_only2): ...
•var-positional : specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition
toanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby
prependingtheparameternamewith *,forexample argsinthefollowing:
def func (*args, **kwargs): ...
•var-keyword : specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-
wordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending
theparameternamewith **,forexample kwargsintheexampleabove.
Parameters can specify both optional and required arguments, as well as default values for some optional
arguments.
Seealsothe argumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
theinspect.Parameter class,the Function definitions section,and PEP 362.
path entry
Asinglelocationonthe import path whichthe path based finder consultstofindmodulesforimporting.
164 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
path entry finder
Afinderreturned by a callable on sys.path_hooks (i.e. a path entry hook ) which knows how to locate
modulesgivena path entry.
Seeimportlib.abc.PathEntryFinder forthemethodsthatpathentryfindersimplement.
path entry hook
Acallableonthe sys.path_hooks listwhichreturnsa path entry finder ifitknowshowtofindmoduleson
aspecific path entry.
path based finder
Oneofthedefault meta path finders whichsearchesan import path formodules.
path-like object
An object representing a file system path. A path-like object is either a strorbytesobject representing
a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike
protocol can be converted to a strorbytesfile system path by calling the os.fspath() function; os.
fsdecode() andos.fsencode() can be used to guarantee a strorbytesresult instead, respectively.
Introducedby PEP 519.
PEP
PythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,
ordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical
specificationandarationaleforproposedfeatures.
PEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity
input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is
responsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.
SeePEP 1.
portion
A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as
definedin PEP 420.
positional argument
Seeargument.
provisional API
A provisional API is one which has been deliberately excluded from the standard library’s backwards com-
patibility guarantees. While major changes to such interfaces are not expected, as long as they are marked
provisional, backwards incompatible changes (up to and including removal of the interface) may occur if
deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if
seriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.
Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every
attemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.
Thisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign
errorsforextendedperiodsoftime. See PEP 411formoredetails.
provisional package
Seeprovisional API .
Python 3000
NicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe
distantfuture.) Thisisalsoabbreviated“Py3k”.
Pythonic
AnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan
implementing code using concepts common to other languages. For example, a common idiom in Python is
toloopoverallelementsofan iterableusinga forstatement. Manyotherlanguagesdon’thavethistype of
construct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:
165
The Python Language Reference, Release 3.13.0
for iinrange (len(food)):
print (food[i])
Asopposedtothecleaner,Pythonicmethod:
for piece infood:
print (piece)
qualified name
Adottednameshowingthe“path”fromamodule’sglobalscopetoaclass,functionormethoddefinedinthat
module, as defined in PEP 3155 . For top-level functions and classes, the qualified name is the same as the
object’sname:
>>> class C:
... class D:
... def meth (self ):
... pass
...
>>> C.__qualname__
'C'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth .__qualname__
'C.D.meth'
Whenusedtorefertomodules,the fully qualified name meanstheentiredottedpathtothemodule,including
anyparentpackages,e.g. email.mime.text :
>>> import email .mime .text
>>> email .mime .text .__name__
'email.mime.text'
reference count
Thenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.
Some objects are immortaland have reference counts that are never modified, and therefore the objects are
never deallocated. Reference counting is generally not visible to Python code, but it is a key element of the
CPythonimplementation. Programmers can call the sys.getrefcount() function to return the reference
countforaparticularobject.
regular package
Atraditional package,suchasadirectorycontainingan __init__.py file.
Seealso namespace package .
REPL
Anacronymforthe“read–eval–printloop”,anothernameforthe interactiveinterpretershell.
__slots__
Adeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating
instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for
rarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.
sequence
Aniterablewhich supports efficient element access using integer indices via the __getitem__() special
method and defines a __len__() method that returns the length of the sequence. Some built-in sequence
typesare list,str,tuple,and bytes. Notethat dictalsosupports __getitem__() and__len__() ,
but is considered a mapping rather than a sequence because the lookups use arbitrary hashablekeys rather
thanintegers.
Thecollections.abc.Sequence abstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust
__getitem__() and__len__() ,adding count(),index(),__contains__() ,and __reversed__() .
166 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
Types that implement this expanded interface can be registered explicitly using register() . For more
documentationonsequencemethodsgenerally,seeCommonSequenceOperations.
set comprehension
Acompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results
= {c for c in 'abracadabra' if c not in 'abc'} generatesthesetofstrings {'r', 'd'} . See
Displays for lists, sets and dictionaries .
single dispatch
Aformof generic function dispatchwheretheimplementationischosenbasedonthetypeofasingleargument.
slice
Anobjectusuallycontainingaportionofa sequence. Asliceiscreatedusingthesubscriptnotation, []with
colons between numbers when several are given, such as in variable_name[1:3:5] . The bracket (sub-
script)notationuses sliceobjectsinternally.
soft deprecated
A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The
APIremainsdocumentedandtested,butwillnotbeenhancedfurther.
Softdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.
SeePEP387: SoftDeprecation .
special method
AmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such
methodshavenamesstartingandendingwithdoubleunderscores. Specialmethodsaredocumentedin Special
method names .
statement
Astatementispartofasuite(a“block”ofcode). Astatementiseitheran expressionoroneofseveralconstructs
withakeyword,suchas if,whileorfor.
static type checker
An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See also
type hintsandthe typingmodule.
strong reference
In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the
reference. Thestrongreferenceistakenbycalling Py_INCREF() whenthereferenceiscreatedandreleased
withPy_DECREF() whenthereferenceisdeleted.
ThePy_NewRef() functioncanbeusedtocreateastrongreferencetoanobject. Usually,the Py_DECREF()
functionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking
onereference.
Seealso borrowed reference .
text encoding
AstringinPythonisasequenceofUnicodecodepoints(inrange U+0000–U+10FFFF ).Tostoreortransfer
astring,itneedstobeserializedasasequenceofbytes.
Serializingastringintoasequenceofbytesisknownas“encoding”,andrecreatingthestringfromthesequence
ofbytesisknownas“decoding”.
Thereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas“textencodings”.
text file
Afile objectabletoreadandwrite strobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream
andhandlesthe text encoding automatically. Examplesoftextfilesarefilesopenedintextmode( 'r'or'w'),
sys.stdin ,sys.stdout ,andinstancesof io.StringIO .
Seealso binary file forafileobjectabletoreadandwrite bytes-like objects .
triple-quoted string
Astringwhichisboundbythreeinstancesofeitheraquotationmark(”)oranapostrophe(‘). Whiletheydon’t
provide any functionality not available with single-quoted strings, they are useful for a number of reasons.
167
The Python Language Reference, Release 3.13.0
Theyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines
withouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.
type
ThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject’stypeis
accessibleasits __class__ attributeorcanberetrievedwith type(obj) .
type alias
Asynonymforatype,createdbyassigningthetypetoanidentifier.
Typealiasesareusefulforsimplifying type hints. Forexample:
def remove_gray_shades (
colors: list [tuple [int,int,int]]) ->list [tuple [int,int,int]]:
pass
couldbemademorereadablelikethis:
Color =tuple [int,int,int]
def remove_gray_shades (colors: list [Color]) ->list [Color]:
pass
SeetypingandPEP 484,whichdescribethisfunctionality.
type hint
Anannotation thatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn
value.
Type hints are optional and are not enforced by Python but they are useful to static type checkers . They can
alsoaidIDEswithcodecompletionandrefactoring.
Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using
typing.get_type_hints() .
SeetypingandPEP 484,whichdescribethisfunctionality.
universal newlines
Amannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix
end-of-lineconvention '\n',theWindowsconvention '\r\n',andtheoldMacintoshconvention '\r'. See
PEP 278andPEP 3116,aswellas bytes.splitlines() foranadditionaluse.
variable annotation
Anannotation ofavariableoraclassattribute.
Whenannotatingavariableoraclassattribute,assignmentisoptional:
class C:
field: 'annotation '
Variableannotationsareusuallyusedfor type hints: forexamplethisvariableisexpectedtotake intvalues:
count: int =0
Variableannotationsyntaxisexplainedinsection Annotated assignment statements .
Seefunction annotation ,PEP 484andPEP 526,whichdescribethisfunctionality. Alsoseeannotations-howto
forbestpracticesonworkingwithannotations.
virtual environment
AcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade
PythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon
thesamesystem.
Seealso venv.
168 Appendix A. Glossary
The Python Language Reference, Release 3.13.0
virtual machine
Acomputerdefinedentirelyinsoftware. Python’svirtualmachineexecutesthe bytecodeemittedbythebyte-
codecompiler.
Zen of Python
ListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.
Thelistingcanbefoundbytyping“ import this ”attheinteractiveprompt.
169
The Python Language Reference, Release 3.13.0
170 Appendix A. Glossary
APPENDIX
B
ABOUT THESE DOCUMENTS
Thesedocumentsaregeneratedfrom reStructuredText sourcesby Sphinx,adocumentprocessorspecificallywritten
forthePythondocumentation.
Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you
want to contribute, please take a look at the reporting-bugs page for information on how to do so. New volunteers
arealwayswelcome!
Manythanksgoto:
•FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandwriterofmuchofthecontent;
•theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;
•FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.
B.1Contributors to the Python Documentation
ManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.
SeeMisc/ACKS inthePythonsourcedistributionforapartiallistofcontributors.
ItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation
–ThankYou!
171
The Python Language Reference, Release 3.13.0
172 Appendix B. About these documents
APPENDIX
C
HISTORY AND LICENSE
C.1History of the software
Pythonwascreatedintheearly1990s byGuidovanRossumatStichtingMathematischCentrum(CWI, see https:
//www.cwi.nl/ )intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython’sprincipalauthor,
althoughitincludesmanycontributionsfromothers.
In1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,see https:
//www.cnri.reston.va.us/ )inReston,Virginiawherehereleasedseveralversionsofthesoftware.
In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen Python-
Labsteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations(nowZopeCorporation;
seehttps://www.zope.org/ ). In2001, thePythonSoftwareFoundation(PSF,see https://www.python.org/psf/ )was
formed,anon-profitorganizationcreatedspecificallytoownPython-relatedIntellectualProperty. ZopeCorporation
isasponsoringmemberofthePSF.
AllPythonreleasesareOpenSource(see https://opensource.org/ fortheOpenSourceDefinition). Historically,most,
butnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.
Release Derivedfrom Year Owner GPLcompatible?
0.9.0thru1.2 n/a 1991-1995 CWI yes
1.3thru1.5.2 1.2 1995-1999 CNRI yes
1.6 1.5.2 2000 CNRI no
2.0 1.6 2000 BeOpen.com no
1.6.1 1.6 2001 CNRI no
2.1 2.0+1.6.1 2001 PSF no
2.0.1 2.0+1.6.1 2001 PSF yes
2.1.1 2.1+2.0.1 2001 PSF yes
2.1.2 2.1.1 2002 PSF yes
2.1.3 2.1.2 2002 PSF yes
2.2andabove 2.1.1 2001-now PSF yes
®Note
GPL-compatibledoesn’tmeanthatwe’redistributingPythonundertheGPL.AllPythonlicenses,unliketheGPL,
let you distribute a modified version without making your changes open source. The GPL-compatible licenses
makeitpossibletocombinePythonwithothersoftwarethatisreleasedundertheGPL;theothersdon’t.
ThankstothemanyoutsidevolunteerswhohaveworkedunderGuido’sdirectiontomakethesereleasespossible.
173
The Python Language Reference, Release 3.13.0
C.2Terms and conditions for accessing or otherwise using Python
Pythonsoftwareanddocumentationarelicensedunderthe PSF License Agreement .
StartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF
LicenseAgreementandthe Zero-Clause BSD license .
Some software incorporated into Python is under different licenses. The licenses are listed with code falling under
thatlicense. See Licenses and Acknowledgements for Incorporated Software foranincompletelistoftheselicenses.
C.2.1PSF LICENSE AGREEMENT FOR PYTHON 3.13.0
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
the Individual or Organization ("Licensee") accessing and otherwise using Python
3.13.0 software in source or binary form and its associated documentation.
2. Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 3.13.0 alone or in any derivative
version, provided, however, that PSF's License Agreement and PSF's notice of
copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
Reserved" are retained in Python 3.13.0 alone or in any derivative version
prepared by Licensee.
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 3.13.0 or any part thereof, and wants to make the
derivative work available to others as provided herein, then Licensee hereby
agrees to include in any such work a brief summary of the changes made to Python
3.13.0.
4. PSF is making Python 3.13.0 available to Licensee on an "AS IS" basis.
PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF PYTHON 3.13.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.13.0
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.13.0, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. Nothing in this License Agreement shall be deemed to create any relationship
of agency, partnership, or joint venture between PSF and Licensee. This License
Agreement does not grant permission to use PSF trademarks or trade name in a
trademark sense to endorse or promote products or services of Licensee, or any
third party.
8. By copying, installing or otherwise using Python 3.13.0, Licensee agrees
to be bound by the terms and conditions of this License Agreement.
174 Appendix C. History and License
The Python Language Reference, Release 3.13.0
C.2.2BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
BEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
("Licensee") accessing and otherwise using this software in source or binary
form and its associated documentation ("the Software").
2. Subject to the terms and conditions of this BeOpen Python License Agreement,
BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
to reproduce, analyze, test, perform and/or display publicly, prepare derivative
works, distribute, and otherwise use the Software alone or in any derivative
version, provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee.
3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
ADVISED OF THE POSSIBILITY THEREOF.
5. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
6. This License Agreement shall be governed by and interpreted in all respects
by the law of the State of California, excluding conflict of law provisions.
Nothing in this License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between BeOpen and Licensee. This License
Agreement does not grant permission to use BeOpen trademarks or trade names in a
trademark sense to endorse or promote products or services of Licensee, or any
third party. As an exception, the "BeOpen Python" logos available at
http://www.pythonlabs.com/logos.html may be used according to the permissions
granted on that web page.
7. By copying, installing or otherwise using the software, Licensee agrees to be
bound by the terms and conditions of this License Agreement.
C.2.3CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
1. This LICENSE AGREEMENT is between the Corporation for National Research
Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
("CNRI"), and the Individual or Organization ("Licensee") accessing and
otherwise using Python 1.6.1 software in source or binary form and its
associated documentation.
2. Subject to the terms and conditions of this License Agreement, CNRI hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
(continuesonnextpage)
C.2. Terms and conditions for accessing or otherwise using Python 175
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
prepared by Licensee. Alternately, in lieu of CNRI's License Agreement,
Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
is made available subject to the terms and conditions in CNRI's License
Agreement. This Agreement together with Python 1.6.1 may be located on the
internet using the following unique, persistent identifier (known as a handle):
1895.22/1013. This Agreement may also be obtained from a proxy server on the
internet using the following URL: http://hdl.handle.net/1895.22/1013."
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
work available to others as provided herein, then Licensee hereby agrees to
include in any such work a brief summary of the changes made to Python 1.6.1.
4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis. CNRI
MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. This License Agreement shall be governed by the federal intellectual property
law of the United States, including without limitation the federal copyright
law, and, to the extent such U.S. federal law does not apply, by the law of the
Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
Notwithstanding the foregoing, with regard to derivative works based on Python
1.6.1 that incorporate non-separable material that was previously distributed
under the GNU General Public License (GPL), the law of the Commonwealth of
Virginia shall govern this License Agreement only as to issues arising under or
with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in
this License Agreement shall be deemed to create any relationship of agency,
partnership, or joint venture between CNRI and Licensee. This License Agreement
does not grant permission to use CNRI trademarks or trade name in a trademark
sense to endorse or promote products or services of Licensee, or any third
party.
8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
conditions of this License Agreement.
C.2.4CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands. All rights reserved.
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
(continuesonnextpage)
176 Appendix C. History and License
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.
STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
C.2.5ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCU-
MENTATION
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3Licenses and Acknowledgements for Incorporated Software
Thissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated
inthePythondistribution.
C.3.1Mersenne Twister
The_randomCextensionunderlyingthe randommoduleincludescodebasedonadownloadfrom http://www.math.
sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html . Thefollowingaretheverbatimcommentsfromthe
originalcode:
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.
Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 177
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
C.3.2Sockets
Thesocketmoduleusesthefunctions, getaddrinfo() ,andgetnameinfo() ,whicharecodedinseparatesource
filesfromtheWIDEProject, https://www.wide.ad.jp/ .
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
178 Appendix C. History and License
The Python Language Reference, Release 3.13.0
C.3.3Asynchronous socket services
Thetest.support.asynchat andtest.support.asyncore modulescontainthefollowingnotice:
Copyright 1996 by Sam Rushing
All Rights Reserved
Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.
SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
C.3.4Cookie management
Thehttp.cookies modulecontainsthefollowingnotice:
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
All Rights Reserved
Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3.5Execution tracing
Thetracemodulecontainsthefollowingnotice:
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err... reserved and offered to the public under the terms of the
Python 2.2 license.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 179
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com
Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke
Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.
Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
C.3.6UUencode and UUdecode functions
Theuucodeccontainsthefollowingnotice:
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
between ascii and binary. This results in a 1000-fold speedup. The C
version is still 5 times faster, though.
- Arguments more compliant with Python standard
180 Appendix C. History and License
The Python Language Reference, Release 3.13.0
C.3.7XML Remote Procedure Calls
Thexmlrpc.client modulecontainsthefollowingnotice:
The XML-RPC client interface is
Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh
By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:
Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
C.3.8test_epoll
Thetest.test_epoll modulecontainsthefollowingnotice:
Copyright (c) 2001-2006 Twisted Matrix Laboratories.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3. Licenses and Acknowledgements for Incorporated Software 181
The Python Language Reference, Release 3.13.0
C.3.9Select kqueue
Theselectmodulecontainsthefollowingnoticeforthekqueueinterface:
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.10 SipHash24
Thefile Python/pyhash.c containsMarekMajkowski’implementationofDanBernstein’sSipHash24algorithm.
Itcontainsthefollowingnote:
<MIT License>
Copyright (c) 2013 Marek Majkowski <marek@popcount.org>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>
Original location:
https://github.com/majek/csiphash/
Solution inspired by code from:
Samuel Neves (supercop/crypto_auth/siphash24/little)
djb (supercop/crypto_auth/siphash24/little2)
Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
182 Appendix C. History and License
The Python Language Reference, Release 3.13.0
C.3.11 strtod and dtoa
Thefile Python/dtoa.c ,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,
is derived from the file of the same name by David M. Gay, currently available from https://web.archive.org/web/
20220517033456/http://www.netlib.org/fp/dtoa.c . The original file, as retrieved on March 16, 2009, contains the
followingcopyrightandlicensingnotice:
/****************************************************************
*
* The author of this software is David M. Gay.
*
* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
*
* Permission to use, copy, modify, and distribute this software for any
* purpose without fee is hereby granted, provided that this entire notice
* is included in all copies of any software which is or includes a copy
* or modification of this software and in all copies of the supporting
* documentation for such software.
*
* THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
*
***************************************************************/
C.3.12 OpenSSL
The modules hashlib,posixandssluse the OpenSSL library for added performance if made available by the
operatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL
libraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived
fromthat,theApacheLicensev2applies:
Apache License
Version 2.0, January 2004
https://www.apache.org/licenses/
TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
1. Definitions.
"License" shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.
"Licensor" shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.
"Legal Entity" shall mean the union of the acting entity and all
other entities that control, are controlled by, or are under common
control with that entity. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.
"You" (or "Your") shall mean an individual or Legal Entity
exercising permissions granted by this License.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 183
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
"Source" form shall mean the preferred form for making modifications,
including but not limited to software source code, documentation
source, and configuration files.
"Object" form shall mean any form resulting from mechanical
transformation or translation of a Source form, including but
not limited to compiled object code, generated documentation,
and conversions to other media types.
"Work" shall mean the work of authorship, whether in Source or
Object form, made available under the License, as indicated by a
copyright notice that is included in or attached to the work
(an example is provided in the Appendix below).
"Derivative Works" shall mean any work, whether in Source or Object
form, that is based on (or derived from) the Work and for which the
editorial revisions, annotations, elaborations, or other modifications
represent, as a whole, an original work of authorship. For the purposes
of this License, Derivative Works shall not include works that remain
separable from, or merely link (or bind by name) to the interfaces of,
the Work and Derivative Works thereof.
"Contribution" shall mean any work of authorship, including
the original version of the Work and any modifications or additions
to that Work or Derivative Works thereof, that is intentionally
submitted to Licensor for inclusion in the Work by the copyright owner
or by an individual or Legal Entity authorized to submit on behalf of
the copyright owner. For the purposes of this definition, "submitted"
means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems,
and issue tracking systems that are managed by, or on behalf of, the
Licensor for the purpose of discussing and improving the Work, but
excluding communication that is conspicuously marked or otherwise
designated in writing by the copyright owner as "Not a Contribution."
"Contributor" shall mean Licensor and any individual or Legal Entity
on behalf of whom a Contribution has been received by Licensor and
subsequently incorporated within the Work.
2. Grant of Copyright License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the
Work and such Derivative Works in Source or Object form.
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
(except as stated in this section) patent license to make, have made,
use, offer to sell, sell, import, and otherwise transfer the Work,
where such license applies only to those patent claims licensable
by such Contributor that are necessarily infringed by their
Contribution(s) alone or by combination of their Contribution(s)
with the Work to which such Contribution(s) was submitted. If You
(continuesonnextpage)
184 Appendix C. History and License
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work
or a Contribution incorporated within the Work constitutes direct
or contributory patent infringement, then any patent licenses
granted to You under this License for that Work shall terminate
as of the date such litigation is filed.
4. Redistribution. You may reproduce and distribute copies of the
Work or Derivative Works thereof in any medium, with or without
modifications, and in Source or Object form, provided that You
meet the following conditions:
(a) You must give any other recipients of the Work or
Derivative Works a copy of this License; and
(b) You must cause any modified files to carry prominent notices
stating that You changed the files; and
(c) You must retain, in the Source form of any Derivative Works
that You distribute, all copyright, patent, trademark, and
attribution notices from the Source form of the Work,
excluding those notices that do not pertain to any part of
the Derivative Works; and
(d) If the Work includes a "NOTICE" text file as part of its
distribution, then any Derivative Works that You distribute must
include a readable copy of the attribution notices contained
within such NOTICE file, excluding those notices that do not
pertain to any part of the Derivative Works, in at least one
of the following places: within a NOTICE text file distributed
as part of the Derivative Works; within the Source form or
documentation, if provided along with the Derivative Works; or,
within a display generated by the Derivative Works, if and
wherever such third-party notices normally appear. The contents
of the NOTICE file are for informational purposes only and
do not modify the License. You may add Your own attribution
notices within Derivative Works that You distribute, alongside
or as an addendum to the NOTICE text from the Work, provided
that such additional attribution notices cannot be construed
as modifying the License.
You may add Your own copyright statement to Your modifications and
may provide additional or different license terms and conditions
for use, reproduction, or distribution of Your modifications, or
for any such Derivative Works as a whole, provided Your use,
reproduction, and distribution of the Work otherwise complies with
the conditions stated in this License.
5. Submission of Contributions. Unless You explicitly state otherwise,
any Contribution intentionally submitted for inclusion in the Work
by You to the Licensor shall be under the terms and conditions of
this License, without any additional terms or conditions.
Notwithstanding the above, nothing herein shall supersede or modify
the terms of any separate license agreement you may have executed
with Licensor regarding such Contributions.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 185
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
6. Trademarks. This License does not grant permission to use the trade
names, trademarks, service marks, or product names of the Licensor,
except as required for reasonable and customary use in describing the
origin of the Work and reproducing the content of the NOTICE file.
7. Disclaimer of Warranty. Unless required by applicable law or
agreed to in writing, Licensor provides the Work (and each
Contributor provides its Contributions) on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied, including, without limitation, any warranties or conditions
of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
PARTICULAR PURPOSE. You are solely responsible for determining the
appropriateness of using or redistributing the Work and assume any
risks associated with Your exercise of permissions under this License.
8. Limitation of Liability. In no event and under no legal theory,
whether in tort (including negligence), contract, or otherwise,
unless required by applicable law (such as deliberate and grossly
negligent acts) or agreed to in writing, shall any Contributor be
liable to You for damages, including any direct, indirect, special,
incidental, or consequential damages of any character arising as a
result of this License or out of the use or inability to use the
Work (including but not limited to damages for loss of goodwill,
work stoppage, computer failure or malfunction, or any and all
other commercial damages or losses), even if such Contributor
has been advised of the possibility of such damages.
9. Accepting Warranty or Additional Liability. While redistributing
the Work or Derivative Works thereof, You may choose to offer,
and charge a fee for, acceptance of support, warranty, indemnity,
or other liability obligations and/or rights consistent with this
License. However, in accepting such obligations, You may act only
on Your own behalf and on Your sole responsibility, not on behalf
of any other Contributor, and only if You agree to indemnify,
defend, and hold each Contributor harmless for any liability
incurred by, or claims asserted against, such Contributor by reason
of your accepting any such warranty or additional liability.
END OF TERMS AND CONDITIONS
C.3.13 expat
Thepyexpat extension is built using an included copy of the expat sources unless the build is configured
--with-system-expat :
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
and Clark Cooper
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
(continuesonnextpage)
186 Appendix C. History and License
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.14 libffi
The_ctypesCextensionunderlyingthe ctypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless
thebuildisconfigured --with-system-libffi :
Copyright (c) 1996-2008 Red Hat, Inc and others.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
C.3.15 zlib
Thezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo
oldtobeusedforthebuild:
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler
This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 187
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
Jean-loup Gailly Mark Adler
jloup@gzip.org madler@alumni.caltech.edu
C.3.16 cfuhash
Theimplementationofthehashtableusedbythe tracemalloc isbasedonthecfuhashproject:
Copyright (c) 2005 Don Owens
All rights reserved.
This code is released under the BSD license:
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.
* Neither the name of the author nor the names of its
contributors may be used to endorse or promote products derived
from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
C.3.17 libmpdec
The_decimal Cextensionunderlyingthe decimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary
unlessthebuildisconfigured --with-system-libmpdec :
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.
Redistribution and use in source and binary forms, with or without
(continuesonnextpage)
188 Appendix C. History and License
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.18 W3C C14N test suite
TheC14N2.0testsuiteinthe testpackage( Lib/test/xmltestdata/c14n-20/ )wasretrievedfromtheW3C
websiteathttps://www.w3.org/TR/xml-c14n2-testcases/ andisdistributedunderthe3-clauseBSDlicense:
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of works must retain the original copyright notice,
this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
used to endorse or promote products derived from this work without
specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. Licenses and Acknowledgements for Incorporated Software 189
The Python Language Reference, Release 3.13.0
C.3.19 mimalloc
MITLicense:
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
C.3.20 asyncio
Partsofthe asynciomoduleareincorporatedfrom uvloop0.16 ,whichisdistributedundertheMITlicense:
Copyright (c) 2015-2021 MagicStack Inc. http://magic.io
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.21 Global Unbounded Sequences (GUS)
The file Python/qsbr.c is adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation
schemeinsubr_smr.c . Thefileisdistributedunderthe2-ClauseBSDLicense:
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
(continuesonnextpage)
190 Appendix C. History and License
The Python Language Reference, Release 3.13.0
(continuedfrompreviouspage)
are met:
1. Redistributions of source code must retain the above copyright
notice unmodified, this list of conditions, and the following
disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. Licenses and Acknowledgements for Incorporated Software 191
The Python Language Reference, Release 3.13.0
192 Appendix C. History and License
APPENDIX
D
COPYRIGHT
Pythonandthisdocumentationis:
Copyright©2001-2024PythonSoftwareFoundation. Allrightsreserved.
Copyright©2000BeOpen.com. Allrightsreserved.
Copyright©1995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.
Copyright©1991-1995StichtingMathematischCentrum. Allrightsreserved.
SeeHistory and License forcompletelicenseandpermissionsinformation.
193
The Python Language Reference, Release 3.13.0
194 Appendix D. Copyright
INDEX
Non-alphabetical
...,153
ellipsis literal ,18
'''
string literal ,10
{}(curly brackets )
dictionary expression ,80
in formatted string literal ,12
set expression ,80
.(dot)
attribute reference ,85
in numeric literal ,15
!(exclamation )
in formatted string literal ,12
-(minus)
binary operator ,90
unary operator ,89
'(single quote )
string literal ,9
! patterns ,117
"(double quote )
string literal ,9
"""
string literal ,10
#(hash)
comment,5
source encoding declaration ,5
%(percent)
operator ,89
%=
augmented assignment ,99
&(ampersand )
operator ,90
&=
augmented assignment ,99
()(parentheses )
call,86
class definition ,125
function definition ,123
generator expression ,80
in assignment target list ,98
tuple display ,78
*(asterisk)
function definition ,124
import statement ,105
in assignment target list ,98in expression lists ,95
in function calls ,87
operator ,89
**
function definition ,124
in dictionary displays ,80
in function calls ,87
operator ,88
**=
augmented assignment ,99
*=
augmented assignment ,99
+(plus)
binary operator ,90
unary operator ,89
+=
augmented assignment ,99
,(comma),78
argument list ,86
expression list ,79,80,95,101,125
identifier list ,107
import statement ,104
in dictionary displays ,80
in target list ,98
parameter list ,123
slicing,86
with statement ,114
/(slash)
function definition ,124
operator ,89
//
operator ,89
//=
augmented assignment ,99
/=
augmented assignment ,99
0b
integer literal ,14
0o
integer literal ,14
0x
integer literal ,14
:(colon)
annotated variable ,100
compound statement ,110,111,114,115,123,
125
195
The Python Language Reference, Release 3.13.0
function annotations ,125
in dictionary expressions ,80
in formatted string literal ,12
lambda expression ,94
slicing,86
:=(colon equals ),94
;(semicolon),109
<(less)
operator ,91
<<
operator ,90
<<=
augmented assignment ,99
<=
operator ,91
!=
operator ,91
-=
augmented assignment ,99
=(equals)
assignment statement ,97
class definition ,43
for help in debugging using string
literals ,12
function definition ,124
in function calls ,86
==
operator ,91
->
function annotations ,125
>(greater)
operator ,91
>=
operator ,91
>>
operator ,90
>>=
augmented assignment ,99
>>>,153
@(at)
class definition ,126
function definition ,124
operator ,89
[](square brackets )
in assignment target list ,98
list expression ,79
subscription ,85
\(backslash)
escape sequence ,10
\\
escape sequence ,10
\a
escape sequence ,10
\b
escape sequence ,10
\f
escape sequence ,10
\Nescape sequence ,10
\n
escape sequence ,10
\r
escape sequence ,10
\t
escape sequence ,10
\U
escape sequence ,10
\u
escape sequence ,10
\v
escape sequence ,10
\x
escape sequence ,10
^(caret)
operator ,90
^=
augmented assignment ,99
_(underscore)
in numeric literal ,14,15
_, identifiers ,9
__, identifiers ,9
__abs__() (object method ),51
__add__() (object method ),50
__aenter__() (object method ),56
__aexit__() (object method ),56
__aiter__() (object method ),56
__all__(optional module attribute ),105
__and__() (object method ),50
__anext__() (agen method ),84
__anext__() (object method ),56
__annotations__ (class attribute ),28
__annotations__ (function attribute ),22
__annotations__ (module attribute ),24,26
__annotations__ (type attribute ),28
__await__() (object method ),55
__bases__ (class attribute ),28
__bases__ (type attribute ),28
__bool__() (object method ),38,48
__buffer__() (object method ),53
__bytes__() (object method ),36
__cached__ (module attribute ),24,26
__call__() (object method ),48,88
__cause__ (exception attribute ),103
__ceil__() (object method ),52
__class__ (instance attribute ),29
__class__ (method cell ),45
__class__ (module attribute ),39
__class__ (object attribute ),29
__class_getitem__() (object class method ),46
__classcell__ (class namespace entry ),45
__closure__ (function attribute ),21
__code__ (function attribute ),22
__complex__() (object method ),52
__contains__() (object method ),50
__context__ (exception attribute ),103
__debug__ ,101
196 Index
The Python Language Reference, Release 3.13.0
__defaults__ (function attribute ),22
__del__() (object method ),35
__delattr__() (object method ),39
__delete__() (object method ),40
__delitem__() (object method ),49
__dict__ (class attribute ),28
__dict__ (function attribute ),22
__dict__ (instance attribute ),29
__dict__ (module attribute ),27
__dict__ (object attribute ),29
__dict__ (type attribute ),28
__dir__(module attribute ),39
__dir__() (object method ),39
__divmod__() (object method ),50
__doc__(class attribute ),28
__doc__(function attribute ),22
__doc__(method attribute ),22,23
__doc__(module attribute ),24,26
__doc__(type attribute ),28
__enter__() (object method ),52
__eq__() (object method ),37
__exit__() (object method ),52
__file__ (module attribute ),24,26
__firstlineno__ (class attribute ),28
__firstlineno__ (type attribute ),28
__float__() (object method ),52
__floor__() (object method ),52
__floordiv__() (object method ),50
__format__() (object method ),36
__func__ (method attribute ),22,23
__future__ ,159
future statement ,106
__ge__() (object method ),37
__get__() (object method ),40
__getattr__ (module attribute ),39
__getattr__() (object method ),38
__getattribute__() (object method ),39
__getitem__() (mapping object method ),34
__getitem__() (object method ),49
__globals__ (function attribute ),21
__gt__() (object method ),37
__hash__() (object method ),37
__iadd__() (object method ),51
__iand__() (object method ),51
__ifloordiv__() (object method ),51
__ilshift__() (object method ),51
__imatmul__() (object method ),51
__imod__() (object method ),51
__imul__() (object method ),51
__index__() (object method ),52
__init__() (object method ),35
__init_subclass__() (object class method ),42
__instancecheck__() (type method ),46
__int__() (object method ),52
__invert__() (object method ),51
__ior__() (object method ),51
__ipow__() (object method ),51
__irshift__() (object method ),51__isub__() (object method ),51
__iter__() (object method ),49
__itruediv__() (object method ),51
__ixor__() (object method ),51
__kwdefaults__ (function attribute ),22
__le__() (object method ),37
__len__() (mapping object method ),38
__len__() (object method ),48
__length_hint__() (object method ),48
__loader__ (module attribute ),24,25
__lshift__() (object method ),50
__lt__() (object method ),37
__main__
module,60,133
__matmul__() (object method ),50
__missing__() (object method ),49
__mod__() (object method ),50
__module__ (class attribute ),28
__module__ (function attribute ),22
__module__ (method attribute ),22,23
__module__ (type attribute ),28
__mro__(type attribute ),28
__mro_entries__() (object method ),44
__mul__() (object method ),50
__name__ (class attribute ),28
__name__ (function attribute ),22
__name__ (method attribute ),22,23
__name__ (module attribute ),24,25
__name__ (type attribute ),28
__ne__() (object method ),37
__neg__() (object method ),51
__new__() (object method ),35
__next__() (generator method ),82
__objclass__ (object attribute ),41
__or__() (object method ),50
__package__ (module attribute ),24,25
__path__ (module attribute ),24,26
__pos__() (object method ),51
__pow__() (object method ),50
__prepare__ (metaclass method ),44
__qualname__ (function attribute ),22
__qualname__ (type attribute ),28
__radd__() (object method ),50
__rand__() (object method ),50
__rdivmod__() (object method ),50
__release_buffer__() (object method ),53
__repr__() (object method ),36
__reversed__() (object method ),49
__rfloordiv__() (object method ),50
__rlshift__() (object method ),50
__rmatmul__() (object method ),50
__rmod__() (object method ),50
__rmul__() (object method ),50
__ror__() (object method ),50
__round__() (object method ),52
__rpow__() (object method ),50
__rrshift__() (object method ),50
__rshift__() (object method ),50
Index 197
The Python Language Reference, Release 3.13.0
__rsub__() (object method ),50
__rtruediv__() (object method ),50
__rxor__() (object method ),50
__self__ (method attribute ),22,23
__set__() (object method ),40
__set_name__() (object method ),43
__setattr__() (object method ),39
__setitem__() (object method ),49
__slots__ ,166
__spec__ (module attribute ),24,25
__static_attributes__ (class attribute ),28
__static_attributes__ (type attribute ),28
__str__() (object method ),36
__sub__() (object method ),50
__subclasscheck__() (type method ),46
__subclasses__() (type method ),29
__traceback__ (exception attribute ),102
__truediv__() (object method ),50
__trunc__() (object method ),52
__type_params__ (class attribute ),28
__type_params__ (function attribute ),22
__type_params__ (type attribute ),28
__xor__() (object method ),50
|(vertical bar )
operator ,90
|=
augmented assignment ,99
~(tilde)
operator ,89
A
abs
built-in function ,52
abstract base class ,153
aclose() (agen method ),85
addition ,90
and
bitwise,90
operator ,94
annotated
assignment ,100
annotation ,153
annotations
function ,125
anonymous
function ,94
argument ,153
call semantics ,86
function ,21
function definition ,124
arithmetic
conversion ,77
operation ,binary,89
operation ,unary,89
array
module,20
as
except clause ,111import statement ,105
keyword,104,111,114,115
match statement ,115
with statement ,114
AS pattern, OR pattern, capture pattern,
wildcard pattern ,117
ASCII,4,9
asend()(agen method ),84
assert
statement ,101
AssertionError
exception ,101
assertions
debugging ,101
assignment
annotated ,100
attribute ,97,98
augmented ,99
class attribute ,27
class instance attribute ,29
expression ,94
slicing,99
statement ,20,97
subscription ,99
target list ,98
assignment expression ,94
async
keyword,127
async def
statement ,127
async for
in comprehensions ,79
statement ,127
async with
statement ,127
asynchronous context manager ,154
asynchronous generator ,154
asynchronous iterator ,23
function ,23
asynchronous generator iterator ,154
asynchronous iterable ,154
asynchronous iterator ,154
asynchronous-generator
object,84
athrow() (agen method ),84
atom,77
attribute ,18,154
assignment ,97,98
assignment ,class,27
assignment ,class instance ,29
class,27
class instance ,29
deletion ,101
generic special ,18
reference ,85
special,18
AttributeError
exception ,85
198 Index
The Python Language Reference, Release 3.13.0
augmented
assignment ,99
await
in comprehensions ,79
keyword,88,127
awaitable ,154
B
b'
bytes literal ,10
b"
bytes literal ,10
backslash character ,6
BDFL,154
binary
arithmetic operation ,89
bitwise operation ,90
binary file ,154
binary literal ,14
binding
global name ,107
name,59,97,104,105,123,125
bitwise
and,90
operation ,binary,90
operation ,unary,89
or,90
xor,90
blank line ,6
block,59
code,59
BNF,4,77
Boolean
object,19
operation ,93
borrowed reference ,154
break
statement ,104,110,113
built-in
method,24
built-in function
abs,52
bytes,36
call,88
chr,20
compile,107
complex,52
divmod,50,51
eval,107,134
exec,107
float,52
hash,37
id,17
int,52
len,1921,48
object,24,88
open,29
ord,20pow,50,51
print,36
range,110
repr,97
round,52
slice,34
type,17,43
built-in method
call,88
object,24,88
builtins
module,133
byte,20
bytearray ,20
bytecode ,29,155
bytes,20
built-in function ,36
bytes literal ,9
bytes-like object ,155
C
C,10
language ,18,19,24,91
call,86
built-in function ,88
built-in method ,88
class instance ,88
class object ,27,88
function ,21,88
instance ,48,88
method,88
procedure ,97
user-defined function ,88
callable ,155
object,21,86
callback ,155
case
keyword,115
match,115
case block ,117
C-contiguous ,156
chaining
comparisons ,91
exception ,103
character ,20,86
chr
built-in function ,20
class,155
attribute ,27
attribute assignment ,27
body,45
constructor ,35
definition ,102,125
instance ,29
name,125
object,27,88,125
statement ,125
class instance
Index 199
The Python Language Reference, Release 3.13.0
attribute ,29
attribute assignment ,29
call,88
object,27,29,88
class object
call,27,88
class variable ,155
clause,109
clear()(frame method ),33
close()(coroutine method ),56
close()(generator method ),83
closure variable ,155
co_argcount (code object attribute ),29
co_argcount (codeobject attribute ),30
co_cellvars (code object attribute ),29
co_cellvars (codeobject attribute ),30
co_code(code object attribute ),29
co_code(codeobject attribute ),30
co_consts (code object attribute ),29
co_consts (codeobject attribute ),30
co_filename (code object attribute ),29
co_filename (codeobject attribute ),30
co_firstlineno (code object attribute ),29
co_firstlineno (codeobject attribute ),30
co_flags (code object attribute ),29
co_flags (codeobject attribute ),30
co_freevars (code object attribute ),29
co_freevars (codeobject attribute ),30
co_kwonlyargcount (code object attribute ),29
co_kwonlyargcount (codeobject attribute ),30
co_lines() (codeobject method ),31
co_lnotab (code object attribute ),29
co_lnotab (codeobject attribute ),30
co_name(code object attribute ),29
co_name(codeobject attribute ),30
co_names (code object attribute ),29
co_names (codeobject attribute ),30
co_nlocals (code object attribute ),29
co_nlocals (codeobject attribute ),30
co_positions() (codeobject method ),31
co_posonlyargcount (code object attribute ),29
co_posonlyargcount (codeobject attribute ),30
co_qualname (code object attribute ),29
co_qualname (codeobject attribute ),30
co_stacksize (code object attribute ),29
co_stacksize (codeobject attribute ),30
co_varnames (code object attribute ),29
co_varnames (codeobject attribute ),30
code
block,59
code object ,29
collections
module,20
comma,78
trailing ,95
command line ,133
comment,5
comparison ,91comparisons ,37
chaining ,91
compile
built-in function ,107
complex
built-in function ,52
number,19
object,19
complex literal ,14
complex number ,156
compound
statement ,109
comprehensions ,79
dictionary ,80
list,79
set,80
Conditional
expression ,93
conditional
expression ,94
constant ,9
constructor
class,35
container ,17,27
context,156
context management protocol ,156
context manager ,52,156
context variable ,156
contiguous ,156
continue
statement ,104,110,113
conversion
arithmetic ,77
string,36,97
coroutine ,54,81,156
function ,23
coroutine function ,156
CPython,156
current context ,156
D
dangling
else,109
data,17
type,18
type,immutable ,78
dbm.gnu
module,21
dbm.ndbm
module,21
debugging
assertions ,101
decimal literal ,14
decorator ,156
DEDENT token ,7,109
def
statement ,123
default
200 Index
The Python Language Reference, Release 3.13.0
parameter value ,124
definition
class,102,125
function ,102,123
del
statement ,35,101
deletion
attribute ,101
target,101
target list ,101
delimiters ,15
descriptor ,157
destructor ,35,98
dictionary ,157
comprehensions ,80
display,80
object,21,27,37,80,85,99
dictionary comprehension ,157
dictionary view ,157
display
dictionary ,80
list,79
set,80
division ,89
divmod
built-in function ,50,51
docstring ,125,157
documentation string ,31
duck-typing ,157
E
e
in numeric literal ,15
EAFP,157
elif
keyword,110
Ellipsis
object,18
else
conditional expression ,94
dangling ,109
keyword,104,110,111,113
empty
list,79
tuple,20,78
encoding declarations (source file),5
environment ,60
environment variable
PYTHON_GIL ,160
PYTHONHASHSEED ,38
PYTHONNODEBUGRANGES ,31
PYTHONPATH ,72
error handling ,62
errors,62
escape sequence ,10
eval
built-in function ,107,134
evaluationorder,95
exc_info (in module sys ),33
except
keyword,111
except_star
keyword,112
exception ,62,102
AssertionError ,101
AttributeError ,85
chaining ,103
GeneratorExit ,83,85
handler,33
ImportError ,104
NameError ,77
raising,102
StopAsyncIteration ,84
StopIteration ,82,102
TypeError ,89
ValueError ,90
ZeroDivisionError ,89
exception handler ,62
exclusive
or,90
exec
built-in function ,107
execution
frame,59,125
restricted ,62
stack,33
execution model ,59
expression ,77,157
assignment ,94
Conditional ,93
conditional ,94
generator ,80
lambda,94,125
list,95,97
statement ,97
yield,81
extension
module,18
extension module ,158
F
f'
formatted string literal ,10
f"
formatted string literal ,10
f-string ,158
f_back(frame attribute ),32
f_builtins (frame attribute ),32
f_code(frame attribute ),32
f_globals (frame attribute ),32
f_lasti(frame attribute ),32
f_lineno (frame attribute ),32,33
f_locals (frame attribute ),32
f_trace(frame attribute ),32,33
f_trace_lines (frame attribute ),32,33
Index 201
The Python Language Reference, Release 3.13.0
f_trace_opcodes (frame attribute ),32,33
False,19
file object ,158
file-like object ,158
filesystem encoding and error handler ,158
finalizer ,35
finally
keyword,102,104,111,113
find_spec
finder,67
finder,67,158
find_spec ,67
float
built-in function ,52
floating-point
number,19
object,19
floating-point literal ,14
floor division ,158
for
in comprehensions ,79
statement ,104,110
form
lambda,94
format() (built-in function )
__str__() (object method ),36
formatted string literal ,12
Fortran contiguous ,156
frame
execution ,59,125
object,32
free
variable ,59
free threading ,158
free variable ,158
from
import statement ,59,105
keyword,81,104
yield from expression ,81
frozenset
object,21
fstring,12
f-string ,12
function ,158
annotations ,125
anonymous ,94
argument ,21
call,21,88
call,user-defined ,88
definition ,102,123
generator ,81,102
name,123
object,21,24,88,123
user-defined ,21
function annotation ,158
future
statement ,106G
garbage collection ,17,159
generator ,159
expression ,80
function ,23,81,102
iterator ,23,102
object,31,80,82
generator expression ,159
generator iterator ,159
GeneratorExit
exception ,83,85
generic
special attribute ,18
generic function ,159
generic type ,159
GIL,159
global
name binding ,107
namespace ,21
statement ,101,107
global interpreter lock ,159
grammar,4
grouping ,6
guard,117
H
handle an exception ,62
handler
exception ,33
hash
built-in function ,37
hash character ,5
hash-based pyc ,160
hashable ,80,160
hexadecimal literal ,14
hierarchy
type,18
hooks
import,67
meta,67
path,67
I
id
built-in function ,17
identifier ,8,77
identity
test,93
identity of an object ,17
IDLE,160
if
conditional expression ,94
in comprehensions ,79
keyword,115
statement ,110
imaginary literal ,14
immortal ,160
immutable ,160
202 Index
The Python Language Reference, Release 3.13.0
data type ,78
object,20,78,80
immutable object ,17
immutable sequence
object,20
immutable types
subclassing ,35
import
hooks,67
statement ,24,104
import hooks ,67
import machinery ,65
import path ,160
importer ,160
ImportError
exception ,104
importing ,160
in
keyword,110
operator ,93
inclusive
or,90
INDENT token ,7
indentation ,6
index operation ,19
indices() (slice method ),34
inheritance ,125
input,134
instance
call,48,88
class,29
object,27,29,88
int
built-in function ,52
integer,20
object,19
representation ,19
integer literal ,14
interactive ,160
interactive mode ,133
internal type ,29
interpolated string literal ,12
interpreted ,160
interpreter ,133
interpreter shutdown ,161
inversion ,89
invocation ,21
io
module,29
irrefutable case block ,117
is
operator ,93
is not
operator ,93
item
sequence ,85
string,86
item selection ,19iterable ,161
unpacking ,95
iterator ,161
J
j
in numeric literal ,15
Java
language ,19
K
key,80
key function ,161
key/value pair ,80
keyword,8,9
as,104,111,114,115
async,127
await,88,127
case,115
elif,110
else,104,110,111,113
except,111
except_star ,112
finally,102,104,111,113
from,81,104
if,115
in,110
yield,81
keyword argument ,161
L
lambda,161
expression ,94,125
form,94
language
C,18,19,24,91
Java,19
last_traceback (in module sys ),33
LBYL,162
leading whitespace ,6
len
built-in function ,1921,48
lexical analysis ,5
lexical definitions ,4
line continuation ,6
line joining ,5,6
line structure ,5
list,162
assignment ,target,98
comprehensions ,79
deletion target ,101
display,79
empty,79
expression ,95,97
object,20,79,85,86,99
target,98,110
list comprehension ,162
literal,9,78
Index 203
The Python Language Reference, Release 3.13.0
loader,67,162
locale encoding ,162
logical line ,5
loop
statement ,104,110
loop control
target,104
M
magic
method,162
magic method ,162
makefile() (socket method ),29
mangling
name,77
mapping,162
object,21,29,85,99
match
case,115
statement ,115
matrix multiplication ,89
membership
test,93
meta
hooks,67
meta hooks ,67
meta path finder ,162
metaclass ,43,162
metaclass hint ,44
method,163
built-in ,24
call,88
magic,162
object,22,24,88
special,167
user-defined ,22
method resolution order ,163
minus,89
module,163
__main__ ,60,133
array,20
builtins ,133
collections ,20
dbm.gnu,21
dbm.ndbm ,21
extension ,18
importing ,104
io,29
namespace ,24
object,24,85
sys,112,133
module spec ,67,163
modulo,89
MRO,163
mro()(type method ),28
multiplication ,89
mutable,163
object,20,97,99mutable object ,17
mutable sequence
object,20
N
name,8,59,77
binding,59,97,104,105,123,125
binding,global,107
class,125
function ,123
mangling ,77
rebinding ,97
unbinding ,101
named expression ,94
named tuple ,163
NameError
exception ,77
NameError (built-in exception ),60
names
private,77
namespace ,59,163
global,21
module,24
package,66
namespace package ,163
negation ,89
nested scope ,163
new-style class ,164
NEWLINE token ,5,109
None
object,18,97
nonlocal
statement ,107
not
operator ,94
not in
operator ,93
notation ,4
NotImplemented
object,18
null
operation ,101
number,14
complex,19
floating-point ,19
numeric
object,18,29
numeric literal ,14
O
object,17,164
asynchronous-generator ,84
Boolean,19
built-in function ,24,88
built-in method ,24,88
callable ,21,86
class,27,88,125
class instance ,27,29,88
204 Index
The Python Language Reference, Release 3.13.0
code,29
complex,19
dictionary ,21,27,37,80,85,99
Ellipsis ,18
floating-point ,19
frame,32
frozenset ,21
function ,21,24,88,123
generator ,31,80,82
immutable ,20,78,80
immutable sequence ,20
instance ,27,29,88
integer,19
list,20,79,85,86,99
mapping,21,29,85,99
method,22,24,88
module,24,85
mutable,20,97,99
mutable sequence ,20
None,18,97
NotImplemented ,18
numeric,18,29
sequence ,19,29,85,86,93,99,110
set,21,80
set type ,20
slice,49
string,85,86
traceback ,33,102,112
tuple,20,85,86,95
user-defined function ,21,88,123
user-defined method ,22
object.__match_args__ (built-in variable ),53
object.__slots__ (built-in variable ),41
octal literal ,14
open
built-in function ,29
operation
binary arithmetic ,89
binary bitwise ,90
Boolean,93
null,101
power,88
shifting ,90
unary arithmetic ,89
unary bitwise ,89
operator
-(minus),89,90
%(percent),89
&(ampersand ),90
*(asterisk),89
**,88
+(plus),89,90
/(slash),89
//,89
<(less),91
<<,90
<=,91
!=,91==,91
>(greater),91
>=,91
>>,90
@(at),89
^(caret),90
|(vertical bar ),90
~(tilde),89
and,94
in,93
is,93
is not,93
not,94
not in,93
or,94
overloading ,34
precedence ,95
ternary,94
operators ,15
optimized scope ,164
or
bitwise,90
exclusive ,90
inclusive ,90
operator ,94
ord
built-in function ,20
order
evaluation ,95
output,97
standard ,97
overloading
operator ,34
P
package,65,164
namespace ,66
portion,66
regular,66
parameter ,164
call semantics ,87
function definition ,123
value,default,124
parenthesized form ,78
parser,5
pass
statement ,101
path
hooks,67
path based finder ,72,165
path entry ,164
path entry finder ,165
path entry hook ,165
path hooks ,67
path-like object ,165
pattern matching ,115
PEP,165
physical line ,5,6,10
Index 205
The Python Language Reference, Release 3.13.0
plus,89
popen()(in module os ),29
portion,165
package,66
positional argument ,165
pow
built-in function ,50,51
power
operation ,88
precedence
operator ,95
primary,85
print
built-in function ,36
print()(built-in function )
__str__() (object method ),36
private
names,77
procedure
call,97
program,133
provisional API ,165
provisional package ,165
Python 3000 ,165
Python Enhancement Proposals
PEP 1,165
PEP 8,92
PEP 236,107
PEP 238,158
PEP 252,40
PEP 255,82
PEP 278,168
PEP 302,65,75,162
PEP 308,94
PEP 318,125,126
PEP 328,75
PEP 338,75
PEP 342,82
PEP 343,52,115,156
PEP 362,154,164
PEP 366,25,75
PEP 380,82
PEP 411,165
PEP 414,10
PEP 420,65,66,71,75,163,165
PEP 443,159
PEP 448,80,88,95
PEP 451,75
PEP 483,159
PEP 484,46,100,125,153,159,168
PEP 492,55,82,128,154,156
PEP 498,14,158
PEP 519,165
PEP 525,82,154
PEP 526,100,125,153,168
PEP 530,79
PEP 560,44,48
PEP 562,40PEP 563,106,125
PEP 570,125
PEP 572,80,94,119
PEP 585,159
PEP 614,124,126
PEP 617,135
PEP 626,32
PEP 634,53,115,123
PEP 636,116,123
PEP 646,85,95,125
PEP 649,61
PEP 683,160
PEP 688,53
PEP 695,61,108
PEP 696,61,128
PEP 703,158,160
PEP 3104 ,107
PEP 3107 ,125
PEP 3115 ,45,126
PEP 3116 ,168
PEP 3119 ,46
PEP 3120 ,5
PEP 3129 ,125,126
PEP 3131 ,8
PEP 3132 ,99
PEP 3135 ,45
PEP 3147 ,26
PEP 3155 ,166
PYTHON_GIL ,160
PYTHONHASHSEED ,38
Pythonic ,165
PYTHONNODEBUGRANGES ,31
PYTHONPATH ,72
Q
qualified name ,166
R
r'
raw string literal ,10
r"
raw string literal ,10
raise
statement ,102
raise an exception ,62
raising
exception ,102
range
built-in function ,110
raw string ,10
rebinding
name,97
reference
attribute ,85
reference count ,166
reference counting ,17
regular
package,66
206 Index
The Python Language Reference, Release 3.13.0
regular package ,166
relative
import,105
REPL,166
replace() (codeobject method ),32
repr
built-in function ,97
repr()(built-in function )
__repr__() (object method ),36
representation
integer,19
reserved word ,8
restricted
execution ,62
return
statement ,102,113
round
built-in function ,52
S
scope,59,60
send()(coroutine method ),55
send()(generator method ),82
sequence ,166
item,85
object,19,29,85,86,93,99,110
set
comprehensions ,80
display,80
object,21,80
set comprehension ,167
set type
object,20
shifting
operation ,90
simple
statement ,97
single dispatch ,167
singleton
tuple,20
slice,86,167
built-in function ,34
object,49
slicing,19,20,86
assignment ,99
soft deprecated ,167
soft keyword ,9
source character set ,5
space,6
special
attribute ,18
attribute ,generic,18
method,167
special method ,167
stack
execution ,33
trace,33
standardoutput,97
Standard C ,10
standard input ,133
start(slice object attribute ),34,86
statement ,167
assert,101
assignment ,20,97
assignment, annotated ,100
assignment, augmented ,99
async def ,127
async for ,127
async with ,127
break,104,110,113
class,125
compound ,109
continue ,104,110,113
def,123
del,35,101
expression ,97
for,104,110
future,106
global,101,107
if,110
import,24,104
loop,104,110
match,115
nonlocal ,107
pass,101
raise,102
return,102,113
simple,97
try,33,111
type,108
while,104,110
with,52,114
yield,102
statement grouping ,6
static type checker ,167
stderr(in module sys ),29
stdin(in module sys ),29
stdio,29
stdout(in module sys ),29
step(slice object attribute ),34,86
stop(slice object attribute ),34,86
StopAsyncIteration
exception ,84
StopIteration
exception ,82,102
string
__format__() (object method ),36
__str__() (object method ),36
conversion ,36,97
formatted literal ,12
immutable sequences ,20
interpolated literal ,12
item,86
object,85,86
string literal ,9
Index 207
The Python Language Reference, Release 3.13.0
strong reference ,167
subclassing
immutable types ,35
subscription ,1921,85
assignment ,99
subtraction ,90
suite,109
syntax,4
sys
module,112,133
sys.exc_info ,33
sys.exception ,33
sys.last_traceback ,33
sys.meta_path ,67
sys.modules ,67
sys.path ,72
sys.path_hooks ,72
sys.path_importer_cache ,72
sys.stderr ,29
sys.stdin ,29
sys.stdout ,29
SystemExit (built-in exception ),62
T
tab,6
target,98
deletion ,101
list,98,110
list assignment ,98
list,deletion ,101
loop control ,104
tb_frame (traceback attribute ),33,34
tb_lasti (traceback attribute ),33,34
tb_lineno (traceback attribute ),33,34
tb_next(traceback attribute ),34
termination model ,62
ternary
operator ,94
test
identity ,93
membership ,93
text encoding ,167
text file ,167
throw()(coroutine method ),55
throw()(generator method ),82
token,5
trace
stack,33
traceback
object,33,102,112
trailing
comma,95
triple-quoted string ,167
triple-quoted string ,10
True,19
try
statement ,33,111
tupleempty,20,78
object,20,85,86,95
singleton ,20
type,18,168
built-in function ,17,43
data,18
hierarchy ,18
immutable data ,78
statement ,108
type alias ,168
type hint ,168
type of an object ,17
type parameters ,128
TypeError
exception ,89
types, internal ,29
U
u'
string literal ,9
u"
string literal ,9
unary
arithmetic operation ,89
bitwise operation ,89
unbinding
name,101
UnboundLocalError ,60
Unicode,20
Unicode Consortium ,10
universal newlines ,168
UNIX,133
unpacking
dictionary ,80
in function calls ,87
iterable ,95
unreachable object ,17
unrecognized escape sequence ,11
user-defined
function ,21
function call ,88
method,22
user-defined function
object,21,88,123
user-defined method
object,22
V
value,80
default parameter ,124
value of an object ,17
ValueError
exception ,90
values
writing,97
variable
free,59
variable annotation ,168
208 Index
The Python Language Reference, Release 3.13.0
virtual environment ,168
virtual machine ,169
W
walrus operator ,94
while
statement ,104,110
Windows,133
with
statement ,52,114
writing
values,97
X
xor
bitwise,90
Y
yield
examples ,83
expression ,81
keyword,81
statement ,102
Z
Zen of Python ,169
ZeroDivisionError
exception ,89
Index 209
