Python Setup and Usage
Release 3.13.0
Guido van Rossum and the Python development team
November 15, 2024
Python Software Foundation
Email: docs@python.org

CONTENTS
1 Commandlineandenvironment 3
1.1 Commandline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.1.1 Interfaceoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.1.2 Genericoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.1.3 Miscellaneousoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.1.4 Controllingcolor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.1.5 Optionsyoushouldn’tuse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.2 Environmentvariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.2.1 Debug-modevariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
2 UsingPythononUnixplatforms 19
2.1 GettingandinstallingthelatestversionofPython . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.1.1 OnLinux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.1.2 OnFreeBSDandOpenBSD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.2 BuildingPython . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.3 Python-relatedpathsandfiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.4 Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.5 CustomOpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3 ConfigurePython 23
3.1 BuildRequirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
3.2 Generatedfiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
3.2.1 configurescript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.3 ConfigureOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.3.1 GeneralOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.3.2 Ccompileroptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
3.3.3 Linkeroptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
3.3.4 Optionsforthird-partydependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
3.3.5 WebAssemblyOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.3.6 InstallOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.3.7 Performanceoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
3.3.8 PythonDebugBuild . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
3.3.9 Debugoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
3.3.10 Linkeroptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
3.3.11 Librariesoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
3.3.12 SecurityOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
3.3.13 macOSOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
3.3.14 iOSOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
3.3.15 CrossCompilingOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
3.4 PythonBuildSystem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
3.4.1 Mainfilesofthebuildsystem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
3.4.2 Mainbuildsteps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
3.4.3 MainMakefiletargets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
3.4.4 Cextensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
i
3.5 Compilerandlinkerflags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
3.5.1 Preprocessorflags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
3.5.2 Compilerflags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
3.5.3 Linkerflags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
4 UsingPythononWindows 43
4.1 Thefullinstaller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
4.1.1 Installationsteps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
4.1.2 RemovingtheMAX_PATHLimitation . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
4.1.3 InstallingWithoutUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
4.1.4 InstallingWithoutDownloading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
4.1.5 Modifyinganinstall . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
4.1.6 InstallingFree-threadedBinaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
4.2 TheMicrosoftStorepackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
4.2.1 Knownissues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
4.3 Thenuget.orgpackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
4.3.1 Free-threadedpackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
4.4 Theembeddablepackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
4.4.1 PythonApplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
4.4.2 EmbeddingPython . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
4.5 Alternativebundles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.6 ConfiguringPython . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.6.1 Excursus: Settingenvironmentvariables . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.6.2 FindingthePythonexecutable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.7 UTF-8mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.8 PythonLauncherforWindows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
4.8.1 Gettingstarted . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
4.8.2 ShebangLines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
4.8.3 Argumentsinshebanglines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
4.8.4 Customization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
4.8.5 Diagnostics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
4.8.6 DryRun . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
4.8.7 Installondemand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
4.8.8 Returncodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
4.9 Findingmodules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
4.10 Additionalmodules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
4.10.1 PyWin32 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
4.10.2 cx_Freeze . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
4.11 CompilingPythononWindows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
4.12 OtherPlatforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
5 UsingPythononmacOS 61
5.1 UsingPythonformacOSfrom python.org . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.1.1 Installationsteps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.1.2 HowtorunaPythonscript . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
5.2 AlternativeDistributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
5.3 InstallingAdditionalPythonPackages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
5.4 GUIProgramming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
5.5 AdvancedTopics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
5.5.1 InstallingFree-threadedBinaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
5.5.2 Installingusingthecommandline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
5.5.3 DistributingPythonApplications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.5.4 AppStoreCompliance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.6 OtherResources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
6 UsingPythononAndroid 75
6.1 AddingPythontoanAndroidapp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
7 UsingPythononiOS 77
ii
7.1 PythonatruntimeoniOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
7.1.1 iOSversioncompatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
7.1.2 Platformidentification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
7.1.3 Standardlibraryavailability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
7.1.4 Binaryextensionmodules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
7.1.5 Compilerstubbinaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
7.2 InstallingPythononiOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
7.2.1 ToolsforbuildingiOSapps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
7.2.2 AddingPythontoaniOSproject . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
7.3 AppStoreCompliance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
8 EditorsandIDEs 83
A Glossary 85
B Aboutthesedocuments 103
B.1 ContributorstothePythonDocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
C HistoryandLicense 105
C.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
C.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 106
C.2.1 PSFLICENSEAGREEMENTFORPYTHON3.13.0 . . . . . . . . . . . . . . . . . . . 106
C.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 107
C.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 107
C.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 108
C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCUMEN-
TATION. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
C.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 109
C.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
C.3.4 Cookiemanagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
C.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
C.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
C.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
C.3.11 strtodanddtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
C.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
C.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
D Copyright 125
Index 127
iii
iv
Python Setup and Usage, Release 3.13.0
ThispartofthedocumentationisdevotedtogeneralinformationonthesetupofthePythonenvironmentondifferent
platforms,theinvocationoftheinterpreterandthingsthatmakeworkingwithPythoneasier.
CONTENTS 1
Python Setup and Usage, Release 3.13.0
2 CONTENTS
CHAPTER
ONE
COMMAND LINE AND ENVIRONMENT
TheCPythoninterpreterscansthecommandlineandtheenvironmentforvarioussettings.
CPythonimplementationdetail: Otherimplementations’commandlineschemesmaydiffer. Seeimplementations
forfurtherresources.
1.1Command line
WheninvokingPython,youmayspecifyanyoftheseoptions:
python [-bBdEhiIOPqRsSuvVWx? ][-ccommand |-mmodule-name |script |-][args ]
Themostcommonusecaseis,ofcourse,asimpleinvocationofascript:
python myscript.py
1.1.1Interface options
TheinterpreterinterfaceresemblesthatoftheUNIXshell,butprovidessomeadditionalmethodsofinvocation:
•Whencalledwithstandardinputconnectedtoattydevice,itpromptsforcommandsandexecutesthemuntilan
EOF(anend-of-filecharacter,youcanproducethatwith Ctrl-DonUNIXor Ctrl-Z, Enter onWindows)
isread. Formoreoninteractivemode,seetut-interac.
•Whencalledwithafilenameargumentorwithafileasstandardinput,itreadsandexecutesascriptfromthat
file.
•When called with a directory name argument, it reads and executes an appropriately named script from that
directory.
•Whencalledwith -c command ,itexecutesthePythonstatement(s)givenas command. Here commandmay
containmultiplestatementsseparatedbynewlines. LeadingwhitespaceissignificantinPythonstatements!
•Whencalledwith -m module-name ,thegivenmoduleislocatedonthePythonmodulepathandexecutedas
ascript.
Innon-interactivemode,theentireinputisparsedbeforeitisexecuted.
Aninterfaceoptionterminatesthelistofoptionsconsumedbytheinterpreter,allconsecutiveargumentswillendup
insys.argv –notethatthefirstelement,subscriptzero( sys.argv[0] ),isastringreflectingtheprogram’ssource.
-c<command>
ExecutethePythoncodein command.commandcanbeoneormorestatementsseparatedbynewlines,with
significantleadingwhitespaceasinnormalmodulecode.
Ifthisoptionisgiven,thefirstelementof sys.argv willbe "-c"andthecurrentdirectorywillbeaddedto
thestartof sys.path (allowingmodulesinthatdirectorytobeimportedastoplevelmodules).
Raisesanauditingevent cpython.run_command withargument command.
3
Python Setup and Usage, Release 3.13.0
-m<module-name>
Search sys.path forthenamedmoduleandexecuteitscontentsasthe __main__ module.
Sincetheargumentisa modulename,youmustnotgiveafileextension( .py). Themodulenameshouldbe
avalidabsolutePythonmodulename,buttheimplementationmaynotalwaysenforcethis(e.g. itmayallow
youtouseanamethatincludesahyphen).
Packagenames(includingnamespacepackages)arealsopermitted. Whenapackagenameissuppliedinstead
of a normal module, the interpreter will execute <pkg>.__main__ as the main module. This behaviour is
deliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script
argument.
®Note
This option cannot be used with built-in modules and extension modules written in C, since they do not
havePythonmodulefiles. However,itcanstillbeusedforprecompiledmodules,eveniftheoriginalsource
fileisnotavailable.
Ifthisoptionisgiven,thefirstelementof sys.argv willbethefullpathtothemodulefile(whilethemodule
fileisbeinglocated,thefirstelementwillbesetto "-m"). Aswiththe -coption,thecurrentdirectorywillbe
addedtothestartof sys.path .
-Ioptioncanbeusedtorunthescriptinisolatedmodewhere sys.path containsneitherthecurrentdirectory
northeuser’ssite-packagesdirectory. All PYTHON*environmentvariablesareignored,too.
Manystandardlibrarymodulescontaincodethatisinvokedontheirexecutionasascript. Anexampleisthe
timeitmodule:
python -mtimeit -s"setup here" "benchmarked code here"
python -mtimeit -h# for details
Raisesanauditingevent cpython.run_module withargument module-name .
µSeealso
runpy.run_module()
EquivalentfunctionalitydirectlyavailabletoPythoncode
PEP338–Executingmodulesasscripts
Changedinversion3.1: Supplythepackagenametoruna __main__ submodule.
Changedinversion3.4: namespacepackagesarealsosupported
-
Readcommandsfromstandardinput( sys.stdin ). Ifstandardinputisaterminal, -iisimplied.
Ifthisoptionisgiven, thefirstelementof sys.argv willbe "-"andthecurrentdirectorywillbe addedto
thestartof sys.path .
Raisesanauditingevent cpython.run_stdin withnoarguments.
<script>
ExecutethePythoncodecontainedin script,whichmustbeafilesystempath(absoluteorrelative)referringto
eitheraPythonfile,adirectorycontaininga __main__.py file,orazipfilecontaininga __main__.py file.
Ifthisoptionisgiven,thefirstelementof sys.argv willbethescriptnameasgivenonthecommandline.
If the script name refers directly to a Python file, the directory containing that file is added to the start of
sys.path ,andthefileisexecutedasthe __main__ module.
4 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
If the script name refers to a directory or zipfile, the script name is added to the start of sys.path and the
__main__.py fileinthatlocationisexecutedasthe __main__ module.
-Ioptioncanbeusedtorunthescriptinisolatedmodewhere sys.path containsneitherthescript’sdirectory
northeuser’ssite-packagesdirectory. All PYTHON*environmentvariablesareignored,too.
Raisesanauditingevent cpython.run_file withargument filename .
µSeealso
runpy.run_path()
EquivalentfunctionalitydirectlyavailabletoPythoncode
Ifnointerfaceoptionisgiven, -iisimplied, sys.argv[0] isanemptystring( "")andthecurrentdirectorywill
be added to the start of sys.path . Also, tab-completion and history editing is automatically enabled, if available
onyourplatform(seerlcompleter-config).
µSeealso
tut-invoking
Changedinversion3.4: Automaticenablingoftab-completionandhistoryediting.
1.1.2Generic options
-?
-h
--help
Printashortdescriptionofallcommandlineoptionsandcorrespondingenvironmentvariablesandexit.
--help-env
PrintashortdescriptionofPython-specificenvironmentvariablesandexit.
Addedinversion3.11.
--help-xoptions
Printadescriptionofimplementation-specific -Xoptionsandexit.
Addedinversion3.11.
--help-all
Printcompleteusageinformationandexit.
Addedinversion3.11.
-V
--version
PrintthePythonversionnumberandexit. Exampleoutputcouldbe:
Python 3.8.0b2+
Whengiventwice,printmoreinformationaboutthebuild,like:
Python 3.8.0b2+ (3.8:0c076caaa8, Apr 20 2019, 21:55:00)
[GCC 6.2.0 20161005]
Addedinversion3.6: The -VVoption.
1.1. Command line 5
Python Setup and Usage, Release 3.13.0
1.1.3Miscellaneous options
-b
Issue a warning when converting bytesorbytearray tostrwithout specifying encoding or comparing
bytesorbytearray withstrorbyteswithint. Issueanerrorwhentheoptionisgiventwice( -bb).
Changedinversion3.5: Affectsalsocomparisonsof byteswithint.
-B
If given, Python won’t try to write .pycfiles on the import of source modules. See also
PYTHONDONTWRITEBYTECODE .
--check-hash-based-pycs default|always|never
Controlthevalidationbehaviorofhash-based .pycfiles. Seepyc-invalidation. Whensetto default,checked
anduncheckedhash-basedbytecodecachefilesarevalidatedaccordingtotheirdefaultsemantics. Whensetto
always,allhash-based .pycfiles,whethercheckedorunchecked,arevalidatedagainsttheircorresponding
source file. When set to never, hash-based .pycfiles are not validated against their corresponding source
files.
Thesemanticsoftimestamp-based .pycfilesareunaffectedbythisoption.
-d
Turnonparserdebuggingoutput(forexpertonly). Seealsothe PYTHONDEBUG environmentvariable.
Thisoptionrequiresa debug build of Python ,otherwiseit’signored.
-E
Ignoreall PYTHON*environmentvariables,e.g. PYTHONPATH andPYTHONHOME ,thatmightbeset.
Seealsothe -Pand-I(isolated)options.
-i
Whenascriptispassedasfirstargumentorthe -coptionisused,enterinteractivemodeafterexecutingthe
scriptorthecommand,evenwhen sys.stdin doesnotappeartobeaterminal. The PYTHONSTARTUP file
isnotread.
This can be useful to inspect global variables or a stack trace when a script raises an exception. See also
PYTHONINSPECT .
-I
RunPythoninisolatedmode. Thisalsoimplies -E,-Pand-soptions.
Inisolatedmode sys.path containsneitherthescript’sdirectorynortheuser’ssite-packagesdirectory. All
PYTHON*environment variables are ignored, too. Further restrictions may be imposed to prevent the user
frominjectingmaliciouscode.
Addedinversion3.4.
-O
Remove assert statements and any code conditional on the value of __debug__ . Augment the filename
for compiled ( bytecode) files by adding .opt-1before the .pycextension (see PEP 488). See also
PYTHONOPTIMIZE .
Changedinversion3.5: Modify .pycfilenamesaccordingto PEP 488.
-OO
Do-Oand also discard docstrings. Augment the filename for compiled ( bytecode) files by adding .opt-2
beforethe .pycextension(see PEP488).
Changedinversion3.5: Modify .pycfilenamesaccordingto PEP 488.
-P
Don’tprependapotentiallyunsafepathto sys.path :
•python -m module commandline: Don’tprependthecurrentworkingdirectory.
6 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
•python script.py commandline: Don’tprependthescript’sdirectory. Ifit’sasymboliclink,resolve
symboliclinks.
•python -c code andpython(REPL)commandlines: Don’tprependanemptystring,whichmeans
thecurrentworkingdirectory.
Seealsothe PYTHONSAFEPATH environmentvariable,and -Eand-I(isolated)options.
Addedinversion3.11.
-q
Don’tdisplaythecopyrightandversionmessagesevenininteractivemode.
Addedinversion3.2.
-R
Turnonhashrandomization. Thisoptiononlyhasaneffectifthe PYTHONHASHSEED environmentvariableis
setto 0,sincehashrandomizationisenabledbydefault.
OnpreviousversionsofPython,thisoptionturnsonhashrandomization,sothatthe __hash__() valuesof
strandbytesobjectsare“salted”withanunpredictablerandomvalue. Althoughtheyremainconstantwithin
anindividualPythonprocess,theyarenotpredictablebetweenrepeatedinvocationsofPython.
Hash randomization is intended to provide protection against a denial-of-service caused by carefully chosen
inputsthatexploittheworstcaseperformanceofadictconstruction, O(n2)complexity. See http://ocert.org/
advisories/ocert-2011-003.html fordetails.
PYTHONHASHSEED allowsyoutosetafixedvalueforthehashseedsecret.
Addedinversion3.2.3.
Changedinversion3.7: Theoptionisnolongerignored.
-s
Don’taddthe user site-packages directory tosys.path .
Seealso PYTHONNOUSERSITE .
µSeealso
PEP370–Perusersite-packagesdirectory
-S
Disable the import of the module siteand the site-dependent manipulations of sys.path that it entails.
Alsodisablethesemanipulationsif siteisexplicitlyimportedlater(call site.main() ifyouwantthemto
betriggered).
-u
Forcethestdoutandstderrstreamstobeunbuffered. Thisoptionhasnoeffectonthestdinstream.
Seealso PYTHONUNBUFFERED .
Changedinversion3.7: Thetextlayerofthestdoutandstderrstreamsnowisunbuffered.
-v
Printamessageeachtimeamoduleisinitialized,showingtheplace(filenameorbuilt-inmodule)fromwhich
it is loaded. When given twice ( -vv), print a message for each file that is checked for when searching for a
module. Alsoprovidesinformationonmodulecleanupatexit.
Changedinversion3.10: The sitemodulereportsthesite-specificpathsand .pthfilesbeingprocessed.
Seealso PYTHONVERBOSE .
1.1. Command line 7
Python Setup and Usage, Release 3.13.0
-Warg
Warningcontrol. Python’swarningmachinerybydefaultprintswarningmessagesto sys.stderr .
Thesimplestsettingsapplyaparticularactionunconditionallytoallwarningsemittedbyaprocess(eventhose
thatareotherwiseignoredbydefault):
-Wdefault # Warn once per call location
-Werror # Convert to exceptions
-Walways # Warn every time
-Wall # Same as -Walways
-Wmodule # Warn once per calling module
-Wonce # Warn once per Python process
-Wignore # Never warn
Theactionnamescanbeabbreviatedasdesiredandtheinterpreterwillresolvethemtotheappropriateaction
name. Forexample, -Wiisthesameas -Wignore .
Thefullformofargumentis:
action:message:category:module:lineno
Empty fields match all values; trailing empty fields may be omitted. For example -W
ignore::DeprecationWarning ignoresallDeprecationWarningwarnings.
Theactionfieldisasexplainedabovebutonlyappliestowarningsthatmatchtheremainingfields.
Themessagefieldmustmatchthewholewarningmessage;thismatchiscase-insensitive.
Thecategoryfieldmatchesthewarningcategory(ex: DeprecationWarning ). Thismustbeaclassname;the
matchtestwhethertheactualwarningcategoryofthemessageisasubclassofthespecifiedwarningcategory.
Themodulefieldmatchesthe(fullyqualified)modulename;thismatchiscase-sensitive.
Thelinenofield matches the line number, where zero matches all line numbers and is thus equivalent to an
omittedlinenumber.
Multiple -Woptions can be given; when a warning matches more than one option, the action for the last
matching option is performed. Invalid -Woptions are ignored (though, a warning message is printed about
invalidoptionswhenthefirstwarningisissued).
Warningscanalsobecontrolledusingthe PYTHONWARNINGS environmentvariableandfromwithinaPython
program using the warnings module. For example, the warnings.filterwarnings() function can be
usedtousearegularexpressiononthewarningmessage.
Seewarning-filteranddescribing-warning-filtersformoredetails.
-x
Skipthefirstlineofthesource,allowinguseofnon-Unixformsof #!cmd. ThisisintendedforaDOSspecific
hackonly.
-X
Reservedforvariousimplementation-specificoptions. CPythoncurrentlydefinesthefollowingpossiblevalues:
•-X faulthandler toenable faulthandler . Seealso PYTHONFAULTHANDLER .
Addedinversion3.3.
•-X showrefcount to output the total reference count and number of used memory blocks when the
programfinishesoraftereachstatementintheinteractiveinterpreter. Thisonlyworkson debug builds .
Addedinversion3.4.
•-X tracemalloc tostarttracingPythonmemoryallocationsusingthe tracemalloc module. Byde-
fault, only the most recent frame is stored in a traceback of a trace. Use -X tracemalloc=NFRAME
to start tracing with a traceback limit of NFRAME frames. See tracemalloc.start() and
PYTHONTRACEMALLOC formoreinformation.
8 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
Addedinversion3.4.
•-X int_max_str_digits configures the integer string conversion length limitation. See also
PYTHONINTMAXSTRDIGITS .
Addedinversion3.11.
•-X importtime toshowhowlongeachimporttakes. Itshowsmodulename,cumulativetime(including
nestedimports)andselftime(excludingnestedimports). Notethatitsoutputmaybebrokeninmulti-
threadedapplication. Typicalusageis python3 -X importtime -c 'import asyncio' . Seealso
PYTHONPROFILEIMPORTTIME .
Addedinversion3.7.
•-X dev: enablePythonDevelopmentMode,introducingadditionalruntimechecksthataretooexpen-
sivetobeenabledbydefault. Seealso PYTHONDEVMODE .
Addedinversion3.7.
•-X utf8enablesthePythonUTF-8Mode. -X utf8=0 explicitlydisablesPythonUTF-8Mode(even
whenitwouldotherwiseactivateautomatically). Seealso PYTHONUTF8 .
Addedinversion3.7.
•-X pycache_prefix=PATH enableswriting .pycfilestoaparalleltreerootedatthegivendirectory
insteadoftothecodetree. Seealso PYTHONPYCACHEPREFIX .
Addedinversion3.8.
•-X warn_default_encoding issuesa EncodingWarning whenthelocale-specificdefaultencoding
isusedforopeningfiles. Seealso PYTHONWARNDEFAULTENCODING .
Addedinversion3.10.
•-X no_debug_ranges disables the inclusion of the tables mapping extra location information (end
line,startcolumnoffsetandendcolumnoffset)toeveryinstructionincodeobjects. Thisisusefulwhen
smaller code objects and pyc files are desired as well as suppressing the extra visual location indicators
whentheinterpreterdisplaystracebacks. Seealso PYTHONNODEBUGRANGES .
Addedinversion3.11.
•-X frozen_modules determineswhetherornotfrozenmodulesareignoredbytheimportmachinery.
A value of onmeans they get imported and offmeans they are ignored. The default is onif this is
an installed Python (the normal case). If it’s under development (running from the source tree) then
the default is off. Note that the importlib_bootstrap andimportlib_bootstrap_external
frozenmodulesarealwaysused,evenifthisflagissetto off. Seealso PYTHON_FROZEN_MODULES .
Addedinversion3.11.
•-X perfenablessupportfortheLinux perfprofiler. Whenthisoptionisprovided,the perfprofiler
willbeabletoreportPythoncalls. Thisoptionisonlyavailableonsomeplatformsandwilldonothingif
isnotsupportedonthecurrentsystem. Thedefaultvalueis“off”. Seealso PYTHONPERFSUPPORT and
perf_profiling.
Addedinversion3.12.
•-X perf_jit enablessupportfortheLinux perfprofilerwithDWARFsupport. Whenthisoptionis
provided,the perfprofilerwillbeabletoreportPythoncallsusingDWARFinformation. Thisoption
is only available on some platforms and will do nothing if is not supported on the current system. The
defaultvalueis“off”. Seealso PYTHON_PERF_JIT_SUPPORT andperf_profiling.
Addedinversion3.13.
•-X cpu_count= noverrides os.cpu_count() , os.process_cpu_count() , and
multiprocessing.cpu_count() .nmust be greater than or equal to 1. This option may be
usefulforuserswhoneedtolimitCPUresourcesofacontainersystem. Seealso PYTHON_CPU_COUNT .
Ifnisdefault,nothingisoverridden.
Addedinversion3.13.
1.1. Command line 9
Python Setup and Usage, Release 3.13.0
•-X presite= package.module specifiesamodulethatshouldbeimportedbeforethe sitemodule
isexecutedandbeforethe __main__ moduleexists. Therefore, theimportedmoduleisn’t __main__ .
This can be used to execute code early during Python initialization. Python needs to be built in debug
modeforthisoptiontoexist. Seealso PYTHON_PRESITE .
Addedinversion3.13.
•-X gil= 0,1forcestheGILtobedisabledorenabled,respectively. Settingto 0isonlyavailableinbuilds
configuredwith --disable-gil . Seealso PYTHON_GIL andwhatsnew313-free-threaded-cpython.
Addedinversion3.13.
Italsoallowspassingarbitraryvaluesandretrievingthemthroughthe sys._xoptions dictionary.
Addedinversion3.2.
Changedinversion3.9: Removedthe -X showalloccount option.
Changedinversion3.10: Removedthe -X oldparser option.
1.1.4Controlling color
The Python interpreter is configured by default to use colors to highlight output in certain situations such as when
displayingtracebacks. Thisbehaviorcanbecontrolledbysettingdifferentenvironmentvariables.
Settingtheenvironmentvariable TERMtodumbwilldisablecolor.
Ifthe FORCE_COLOR environmentvariableisset,thencolorwillbeenabledregardlessofthevalueofTERM.This
isusefulonCIsystemswhicharen’tterminalsbutcanstilldisplayANSIescapesequences.
Ifthe NO_COLOR environmentvariableisset,Pythonwilldisableallcolorintheoutput. Thistakesprecedenceover
FORCE_COLOR .
Alltheseenvironmentvariablesareusedalsobyothertoolstocontrolcoloroutput. Tocontrolthecoloroutputonly
in the Python interpreter, the PYTHON_COLORS environment variable can be used. This variable takes precedence
overNO_COLOR ,whichinturntakesprecedenceover FORCE_COLOR .
1.1.5Options you shouldn’t use
-J
Reservedforuseby Jython.
1.2Environment variables
TheseenvironmentvariablesinfluencePython’sbehavior,theyareprocessedbeforethecommand-lineswitchesother
than-Eor-I.Itiscustomarythatcommand-lineswitchesoverrideenvironmentalvariableswherethereisaconflict.
PYTHONHOME
Change the location of the standard Python libraries. By default, the libraries are searched in prefix /
lib/python versionandexec_prefix /lib/python version, where prefixandexec_prefix are
installation-dependentdirectories,bothdefaultingto /usr/local .
When PYTHONHOME issettoasingledirectory,itsvaluereplacesboth prefixandexec_prefix . Tospecify
differentvaluesforthese,set PYTHONHOME toprefix :exec_prefix .
PYTHONPATH
Augment the default search path for module files. The format is the same as the shell’s PATH: one or more
directory pathnames separated by os.pathsep (e.g. colons on Unix or semicolons on Windows). Non-
existentdirectoriesaresilentlyignored.
Inadditiontonormaldirectories,individual PYTHONPATH entriesmayrefertozipfilescontainingpurePython
modules(ineithersourceorcompiledform). Extensionmodulescannotbeimportedfromzipfiles.
The default search path is installation dependent, but generally begins with prefix /lib/python version
(seePYTHONHOME above). Itis alwaysappendedto PYTHONPATH .
10 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
Anadditionaldirectorywillbeinsertedinthesearchpathinfrontof PYTHONPATH asdescribedaboveunder
Interface options . The search path can be manipulated from within a Python program as the variable sys.
path.
PYTHONSAFEPATH
Ifthisissettoanon-emptystring,don’tprependapotentiallyunsafepathto sys.path : seethe -Poptionfor
details.
Addedinversion3.11.
PYTHONPLATLIBDIR
Ifthisissettoanon-emptystring,itoverridesthe sys.platlibdir value.
Addedinversion3.9.
PYTHONSTARTUP
Ifthisisthenameofareadablefile,thePythoncommandsinthatfileareexecutedbeforethefirstpromptis
displayed in interactive mode. The file is executed in the same namespace where interactive commands are
executedsothatobjectsdefinedorimportedinitcanbeusedwithoutqualificationintheinteractivesession.
Youcanalsochangetheprompts sys.ps1andsys.ps2andthehook sys.__interactivehook__ inthis
file.
Raisesanauditingevent cpython.run_startup withthefilenameastheargumentwhencalledonstartup.
PYTHONOPTIMIZE
Ifthisissettoanon-emptystringitisequivalenttospecifyingthe -Ooption. Ifsettoaninteger,itisequivalent
tospecifying -Omultipletimes.
PYTHONBREAKPOINT
If this is set, it names a callable using dotted-path notation. The module containing the callable will be im-
ported and then the callable will be run by the default implementation of sys.breakpointhook() which
itself is called by built-in breakpoint() . If not set, or set to the empty string, it is equivalent to the value
“pdb.set_trace”. Settingthistothestring“0”causesthedefaultimplementationof sys.breakpointhook()
todonothingbutreturnimmediately.
Addedinversion3.7.
PYTHONDEBUG
Ifthisissettoanon-emptystringitisequivalenttospecifyingthe -doption. Ifsettoaninteger,itisequivalent
tospecifying -dmultipletimes.
Thisenvironmentvariablerequiresa debug build of Python ,otherwiseit’signored.
PYTHONINSPECT
Ifthisissettoanon-emptystringitisequivalenttospecifyingthe -ioption.
This variable can also be modified by Python code using os.environ to force inspect mode on program
termination.
Raisesanauditingevent cpython.run_stdin withnoarguments.
Changedinversion3.12.5: (also3.11.10,3.10.15,3.9.20,and3.8.20)Emitsauditevents.
Changedinversion3.13: UsesPyREPLifpossible,inwhichcase PYTHONSTARTUP isalsoexecuted. Emits
auditevents.
PYTHONUNBUFFERED
Ifthisissettoanon-emptystringitisequivalenttospecifyingthe -uoption.
PYTHONVERBOSE
Ifthisissettoanon-emptystringitisequivalenttospecifyingthe -voption. Ifsettoaninteger,itisequivalent
tospecifying -vmultipletimes.
1.2. Environment variables 11
Python Setup and Usage, Release 3.13.0
PYTHONCASEOK
Ifthisisset,Pythonignorescasein importstatements. ThisonlyworksonWindowsandmacOS.
PYTHONDONTWRITEBYTECODE
Ifthisissettoanon-emptystring,Pythonwon’ttrytowrite .pycfilesontheimportofsourcemodules. This
isequivalenttospecifyingthe -Boption.
PYTHONPYCACHEPREFIX
Ifthisisset,Pythonwillwrite .pycfilesinamirrordirectorytreeatthispath,insteadofin __pycache__
directorieswithinthesourcetree. Thisisequivalenttospecifyingthe -Xpycache_prefix=PATH option.
Addedinversion3.8.
PYTHONHASHSEED
Ifthisvariableisnotsetorsetto random,arandomvalueisusedtoseedthehashesofstrandbytesobjects.
IfPYTHONHASHSEED issettoanintegervalue,itisusedasafixedseedforgeneratingthehash()ofthetypes
coveredbythehashrandomization.
Itspurposeistoallowrepeatablehashing,suchasforselftestsfortheinterpreteritself,ortoallowaclusterof
pythonprocessestosharehashvalues.
Theintegermustbeadecimalnumberintherange[0,4294967295]. Specifyingthevalue0willdisablehash
randomization.
Addedinversion3.2.3.
PYTHONINTMAXSTRDIGITS
Ifthisvariableissettoaninteger,itisusedtoconfiguretheinterpreter’sglobalintegerstringconversionlength
limitation.
Addedinversion3.11.
PYTHONIOENCODING
Ifthisissetbeforerunningtheinterpreter,itoverridestheencodingusedforstdin/stdout/stderr,inthesyntax
encodingname:errorhandler . Boththe encodingname andthe :errorhandler partsareoptionaland
havethesamemeaningasin str.encode() .
Forstderr,the :errorhandler partisignored;thehandlerwillalwaysbe 'backslashreplace' .
Changedinversion3.4: The encodingname partisnowoptional.
Changed in version 3.6: On Windows, the encoding specified by this variable is ignored for interactive con-
sole buffers unless PYTHONLEGACYWINDOWSSTDIO is also specified. Files and pipes redirected through the
standardstreamsarenotaffected.
PYTHONNOUSERSITE
Ifthisisset,Pythonwon’taddthe user site-packages directory tosys.path .
µSeealso
PEP370–Perusersite-packagesdirectory
PYTHONUSERBASE
Defines the user base directory , which is used to compute the path of the user site-packages
directory andinstallationpathsfor python -m pip install --user .
µSeealso
PEP370–Perusersite-packagesdirectory
12 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
PYTHONEXECUTABLE
Ifthisenvironmentvariableisset, sys.argv[0] willbesettoitsvalueinsteadofthevaluegotthroughthe
Cruntime. OnlyworksonmacOS.
PYTHONWARNINGS
Thisisequivalenttothe -Woption. Ifsettoacommaseparatedstring,itisequivalenttospecifying -Wmultiple
times,withfilterslaterinthelisttakingprecedenceoverthoseearlierinthelist.
Thesimplestsettingsapplyaparticularactionunconditionallytoallwarningsemittedbyaprocess(eventhose
thatareotherwiseignoredbydefault):
PYTHONWARNINGS =default # Warn once per call location
PYTHONWARNINGS =error # Convert to exceptions
PYTHONWARNINGS =always # Warn every time
PYTHONWARNINGS =all # Same as PYTHONWARNINGS=always
PYTHONWARNINGS =module # Warn once per calling module
PYTHONWARNINGS =once # Warn once per Python process
PYTHONWARNINGS =ignore # Never warn
Seewarning-filteranddescribing-warning-filtersformoredetails.
PYTHONFAULTHANDLER
Ifthisenvironmentvariableissettoanon-emptystring, faulthandler.enable() iscalledatstartup: install
ahandlerfor SIGSEGV,SIGFPE,SIGABRT,SIGBUSandSIGILLsignalstodumpthePythontraceback. This
isequivalentto -Xfaulthandler option.
Addedinversion3.3.
PYTHONTRACEMALLOC
If this environment variable is set to a non-empty string, start tracing Python memory allocations using the
tracemalloc module. Thevalueofthevariableisthemaximumnumberofframesstoredinatracebackof
atrace. Forexample, PYTHONTRACEMALLOC=1 storesonlythemostrecentframe. Seethe tracemalloc.
start()functionformoreinformation. Thisisequivalenttosettingthe -Xtracemalloc option.
Addedinversion3.4.
PYTHONPROFILEIMPORTTIME
Ifthisenvironmentvariableissettoanon-emptystring,Pythonwillshowhowlongeachimporttakes. This
isequivalenttosettingthe -Ximporttime option.
Addedinversion3.7.
PYTHONASYNCIODEBUG
Ifthisenvironmentvariableissettoanon-emptystring,enablethedebugmodeofthe asynciomodule.
Addedinversion3.4.
PYTHONMALLOC
SetthePythonmemoryallocatorsand/orinstalldebughooks.
SetthefamilyofmemoryallocatorsusedbyPython:
•default: usethedefaultmemoryallocators.
•malloc: use the malloc() function of the C library for all domains ( PYMEM_DOMAIN_RAW ,
PYMEM_DOMAIN_MEM ,PYMEM_DOMAIN_OBJ ).
•pymalloc : usethepymallocallocatorfor PYMEM_DOMAIN_MEM andPYMEM_DOMAIN_OBJ domainsand
usethe malloc() functionforthe PYMEM_DOMAIN_RAW domain.
•mimalloc : use the mimalloc allocator for PYMEM_DOMAIN_MEM andPYMEM_DOMAIN_OBJ domains
andusethe malloc() functionforthe PYMEM_DOMAIN_RAW domain.
Installdebughooks:
•debug: installdebughooksontopofthedefaultmemoryallocators.
1.2. Environment variables 13
Python Setup and Usage, Release 3.13.0
•malloc_debug : sameas mallocbutalsoinstalldebughooks.
•pymalloc_debug : sameas pymalloc butalsoinstalldebughooks.
•mimalloc_debug : sameas mimalloc butalsoinstalldebughooks.
Addedinversion3.6.
Changedinversion3.7: Addedthe "default" allocator.
PYTHONMALLOCSTATS
If set to a non-empty string, Python will print statistics of the pymalloc memory allocator every time a new
pymallocobjectarenaiscreated,andonshutdown.
Thisvariableisignoredifthe PYTHONMALLOC environmentvariableisusedtoforcethe malloc() allocator
oftheClibrary,orifPythonisconfiguredwithout pymalloc support.
Changedinversion3.6: ThisvariablecannowalsobeusedonPythoncompiledinreleasemode. Itnowhas
noeffectifsettoanemptystring.
PYTHONLEGACYWINDOWSFSENCODING
Ifsettoanon-emptystring,thedefault filesystem encoding and error handler modewillreverttotheirpre-3.6
valuesof‘mbcs’and‘replace’,respectively. Otherwise,thenewdefaults‘utf-8’and‘surrogatepass’areused.
Thismayalsobeenabledatruntimewith sys._enablelegacywindowsfsencoding() .
Availability: Windows.
Addedinversion3.6: See PEP529formoredetails.
PYTHONLEGACYWINDOWSSTDIO
Ifsettoanon-emptystring,doesnotusethenewconsolereaderandwriter. ThismeansthatUnicodecharacters
willbeencodedaccordingtotheactiveconsolecodepage,ratherthanusingutf-8.
Thisvariableisignoredifthestandardstreamsareredirected(tofilesorpipes)ratherthanreferringtoconsole
buffers.
Availability: Windows.
Addedinversion3.6.
PYTHONCOERCECLOCALE
Ifsettothevalue 0,causesthemainPythoncommandlineapplicationtoskipcoercingthelegacyASCII-based
CandPOSIXlocalestoamorecapableUTF-8basedalternative.
Ifthisvariableis notset(orissettoavalueotherthan 0), the LC_ALLlocaleoverrideenvironmentvariable
isalsonotset,andthecurrentlocalereportedforthe LC_CTYPE categoryiseitherthedefault Clocale,orelse
theexplicitlyASCII-based POSIXlocale,thenthePythonCLIwillattempttoconfigurethefollowinglocales
forthe LC_CTYPE categoryintheorderlistedbeforeloadingtheinterpreterruntime:
•C.UTF-8
•C.utf8
•UTF-8
If setting one of these locale categories succeeds, then the LC_CTYPE environment variable will also be set
accordinglyinthecurrentprocessenvironmentbeforethePythonruntimeisinitialized. Thisensuresthatin
addition to being seen by both the interpreter itself and other locale-aware components running in the same
process (such as the GNU readline library), the updated setting is also seen in subprocesses (regardless
of whether or not those processes are running a Python interpreter), as well as in operations that query the
environmentratherthanthecurrentClocale(suchasPython’sown locale.getdefaultlocale() ).
Configuring one of these locales (either explicitly or via the above implicit locale coercion) automatically
enablesthe surrogateescape errorhandlerfor sys.stdin andsys.stdout (sys.stderr continuesto
usebackslashreplace as it does in any other locale). This stream handling behavior can be overridden
using PYTHONIOENCODING asusual.
14 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
Fordebuggingpurposes,setting PYTHONCOERCECLOCALE=warn willcausePythontoemitwarningmessages
onstderrifeitherthelocalecoercionactivates,orelseifalocalethat wouldhavetriggeredcoercionisstill
activewhenthePythonruntimeisinitialized.
Also note that even when locale coercion is disabled, or when it fails to find a suitable target locale,
PYTHONUTF8 will still activate by default in legacy ASCII-based locales. Both features must be disabled
inordertoforcetheinterpretertouse ASCIIinsteadof UTF-8forsysteminterfaces.
Availability: Unix.
Addedinversion3.7: See PEP538formoredetails.
PYTHONDEVMODE
Ifthisenvironmentvariableissettoanon-emptystring,enablePythonDevelopmentMode,introducingad-
ditional runtime checks that are too expensive to be enabled by default. This is equivalent to setting the -X
devoption.
Addedinversion3.7.
PYTHONUTF8
Ifsetto 1,enablethePythonUTF-8Mode.
Ifsetto 0,disablethePythonUTF-8Mode.
Settinganyothernon-emptystringcausesanerrorduringinterpreterinitialisation.
Addedinversion3.7.
PYTHONWARNDEFAULTENCODING
Ifthisenvironmentvariableissettoanon-emptystring,issuea EncodingWarning whenthelocale-specific
defaultencodingisused.
Seeio-encoding-warningfordetails.
Addedinversion3.10.
PYTHONNODEBUGRANGES
Ifthisvariableisset,itdisablestheinclusionofthetablesmappingextralocationinformation(endline,start
column offset and end column offset) to every instruction in code objects. This is useful when smaller code
objectsandpycfilesaredesiredaswellassuppressingtheextravisuallocationindicatorswhentheinterpreter
displaystracebacks.
Addedinversion3.11.
PYTHONPERFSUPPORT
Ifthisvariableissettoanonzerovalue,itenablessupportfortheLinux perfprofilersoPythoncallscanbe
detectedbyit.
Ifsetto 0,disableLinux perfprofilersupport.
Seealsothe -X perfcommand-lineoptionandperf_profiling.
Addedinversion3.12.
PYTHON_PERF_JIT_SUPPORT
Ifthisvariableissettoanonzerovalue,itenablessupportfortheLinux perfprofilersoPythoncallscanbe
detectedbyitusingDWARFinformation.
Ifsetto 0,disableLinux perfprofilersupport.
Seealsothe -X perf_jit command-lineoptionandperf_profiling.
Addedinversion3.13.
PYTHON_CPU_COUNT
If this variable is set to a positive integer, it overrides the return values of os.cpu_count() andos.
process_cpu_count() .
1.2. Environment variables 15
Python Setup and Usage, Release 3.13.0
Seealsothe -X cpu_count command-lineoption.
Addedinversion3.13.
PYTHON_FROZEN_MODULES
If this variable is set to onoroff, it determines whether or not frozen modules are ignored by the import
machinery. A value of onmeans they get imported and offmeans they are ignored. The default is onfor
non-debug builds (the normal case) and offfor debug builds. Note that the importlib_bootstrap and
importlib_bootstrap_external frozenmodulesarealwaysused,evenifthisflagissetto off.
Seealsothe -X frozen_modules command-lineoption.
Addedinversion3.13.
PYTHON_COLORS
Ifthisvariableissetto 1,theinterpreterwillcolorizevariouskindsofoutput. Settingitto 0deactivatesthis
behavior. Seealso Controlling color .
Addedinversion3.13.
PYTHON_BASIC_REPL
Ifthisvariableissetto 1,theinterpreterwillnotattempttoloadthePython-based REPLthatrequires curses
andreadline ,andwillinsteadusethetraditionalparser-based REPL.
Addedinversion3.13.
PYTHON_HISTORY
This environment variable can be used to set the location of a .python_history file (by default, it is .
python_history intheuser’shomedirectory).
Addedinversion3.13.
PYTHON_GIL
Ifthisvariableissetto 1,theglobalinterpreterlock(GIL)willbeforcedon. Settingitto 0forcestheGILoff
(needsPythonconfiguredwiththe --disable-gil buildoption).
Seealsothe -X gilcommand-lineoption,whichtakesprecedenceoverthisvariable,andwhatsnew313-free-
threaded-cpython.
Addedinversion3.13.
1.2.1Debug-mode variables
PYTHONDUMPREFS
Ifset,Pythonwilldumpobjectsandreferencecountsstillaliveaftershuttingdowntheinterpreter.
NeedsPythonconfiguredwiththe --with-trace-refs buildoption.
PYTHONDUMPREFSFILE
Ifset, Pythonwilldumpobjectsandreferencecountsstillaliveaftershuttingdowntheinterpreterintoafile
underthepathgivenasthevaluetothisenvironmentvariable.
NeedsPythonconfiguredwiththe --with-trace-refs buildoption.
Addedinversion3.11.
PYTHON_PRESITE
If this variable is set to a module, that module will be imported early in the interpreter lifecycle, before the
sitemodule is executed, and before the __main__ module is created. Therefore, the imported module is
nottreatedas __main__ .
ThiscanbeusedtoexecutecodeearlyduringPythoninitialization.
Toimportasubmodule,use package.module asthevalue,likeinanimportstatement.
Seealsothe -X presite command-lineoption,whichtakesprecedenceoverthisvariable.
16 Chapter 1. Command line and environment
Python Setup and Usage, Release 3.13.0
NeedsPythonconfiguredwiththe --with-pydebug buildoption.
Addedinversion3.13.
1.2. Environment variables 17
Python Setup and Usage, Release 3.13.0
18 Chapter 1. Command line and environment
CHAPTER
TWO
USING PYTHON ON UNIX PLATFORMS
2.1Getting and installing the latest version of Python
2.1.1On Linux
Python comes preinstalled on most Linux distributions, and is available as a package on all others. However there
arecertainfeaturesyoumightwanttousethatarenotavailableonyourdistro’spackage. Youcancompilethelatest
versionofPythonfromsource.
In theeventthatthe latestversionofPython doesn’tcomepreinstalledand isn’tintherepositories as well, youcan
makepackagesforyourowndistro. Havealookatthefollowinglinks:
µSeealso
https://www.debian.org/doc/manuals/maint-guide/first.en.html
forDebianusers
https://en.opensuse.org/Portal:Packaging
forOpenSuseusers
https://docs.fedoraproject.org/en-US/package-maintainers/Packaging_Tutorial_GNU_Hello/
forFedorausers
https://slackbook.org/html/package-management-making-packages.html
forSlackwareusers
2.1.2On FreeBSD and OpenBSD
•FreeBSDusers,toaddthepackageuse:
pkg install python3
•OpenBSDusers,toaddthepackageuse:
pkg_add -rpython
pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your ␣
,→architecture here>/python-<version>.tgz
Forexamplei386usersgetthe2.5.1versionofPythonusing:
pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz
19
Python Setup and Usage, Release 3.13.0
2.2Building Python
If you want to compile CPython yourself, first thing you should do is get the source. You can download either the
latestrelease’ssourceorjustgrabafresh clone. (Ifyouwanttocontributepatches,youwillneedaclone.)
Thebuildprocessconsistsoftheusualcommands:
./configure
make
make install
Configuration options andcaveatsforspecificUnixplatformsareextensivelydocumentedinthe README.rst filein
therootofthePythonsourcetree.
ÁWarning
make install can overwrite or masquerade the python3binary. make altinstall is therefore recom-
mendedinsteadof make install sinceitonlyinstalls exec_prefix /bin/python version.
2.3Python-related paths and files
These are subject to difference depending on local installation conventions; prefixandexec_prefix are
installation-dependentandshouldbeinterpretedasforGNUsoftware;theymaybethesame.
Forexample,onmostLinuxsystems,thedefaultforbothis /usr.
File/directory Meaning
exec_prefix /bin/python3 Recommendedlocationoftheinterpreter.
prefix /lib/python version,
exec_prefix /lib/python versionRecommended locations of the directories containing the standard
modules.
prefix /include/python version,
exec_prefix /include/
python versionRecommendedlocationsofthedirectoriescontainingtheincludefiles
needed for developing Python extensions and embedding the inter-
preter.
2.4Miscellaneous
ToeasilyusePythonscriptsonUnix,youneedtomakethemexecutable,e.g. with
$chmod +xscript
andputanappropriateShebanglineatthetopofthescript. Agoodchoiceisusually
#!/usr/bin/env python3
whichsearchesforthePythoninterpreterinthewhole PATH.However,someUnicesmaynothavethe envcommand,
soyoumayneedtohardcode /usr/bin/python3 astheinterpreterpath.
TouseshellcommandsinyourPythonscripts,lookatthe subprocess module.
2.5Custom OpenSSL
1.Touseyourvendor’sOpenSSLconfigurationandsystemtruststore,locatethedirectorywith openssl.cnf
fileorsymlinkin /etc. Onmostdistributionthefileiseitherin /etc/ssl or/etc/pki/tls . Thedirectory
shouldalsocontaina cert.pem fileand/ora certsdirectory.
20 Chapter 2. Using Python on Unix platforms
Python Setup and Usage, Release 3.13.0
$find /etc/ -name openssl.cnf -printf "%h\n"
/etc/ssl
2.Download,build,andinstallOpenSSL.Makesureyouuse install_sw andnot install. The install_sw
targetdoesnotoverride openssl.cnf .
$curl -Ohttps://www.openssl.org/source/openssl-VERSION.tar.gz
$tar xzf openssl-VERSION
$pushd openssl-VERSION
$./config \
--prefix =/usr/local/custom-openssl \
--libdir =lib \
--openssldir =/etc/ssl
$make -j1 depend
$make -j8
$make install_sw
$popd
3.Build Python with custom OpenSSL (see the configure --with-openssl and--with-openssl-rpath
options)
$pushd python-3.x.x
$./configure -C\
--with-openssl =/usr/local/custom-openssl \
--with-openssl-rpath =auto \
--prefix =/usr/local/python-3.x.x
$make -j8
$make altinstall
®Note
Patch releases of OpenSSL have a backwards compatible ABI. You don’t need to recompile Python to update
OpenSSL.It’ssufficienttoreplacethecustomOpenSSLinstallationwithanewerversion.
2.5. Custom OpenSSL 21
Python Setup and Usage, Release 3.13.0
22 Chapter 2. Using Python on Unix platforms
CHAPTER
THREE
CONFIGURE PYTHON
3.1Build Requirements
FeaturesandminimumversionsrequiredtobuildCPython:
•AC11compiler.OptionalC11features arenotrequired.
•OnWindows,MicrosoftVisualStudio2017orlaterisrequired.
•Supportfor IEEE754floating-pointnumbersand floating-pointNot-a-Number(NaN) .
•Supportforthreads.
•OpenSSL 1.1.1 is the minimum version and OpenSSL 3.0.9 is the recommended minimum version for the
sslandhashlibextensionmodules.
•SQLite3.15.2forthe sqlite3extensionmodule.
•Tcl/Tk8.5.12forthe tkintermodule.
•Autoconf2.71andaclocal1.16.5arerequiredtoregeneratethe configure script.
Changedinversion3.1: Tcl/Tkversion8.3.1isnowrequired.
Changedinversion3.5: OnWindows,VisualStudio2015orlaterisnowrequired. Tcl/Tkversion8.4isnowrequired.
Changedinversion3.6: SelectedC99featuresarenowrequired,like <stdint.h> andstatic inline functions.
Changedinversion3.7: ThreadsupportandOpenSSL1.0.2arenowrequired.
Changedinversion3.10: OpenSSL1.1.1isnowrequired. RequireSQLite3.7.15.
Changedinversion3.11: C11compiler,IEEE754andNaNsupportarenowrequired. OnWindows,VisualStudio
2017orlaterisrequired. Tcl/Tkversion8.5.12isnowrequiredforthe tkintermodule.
Changedinversion3.13: Autoconf2.71,aclocal1.16.5andSQLite3.15.2arenowrequired.
SeealsoPEP7“StyleGuideforCCode”and PEP 11“CPythonplatformsupport”.
3.2Generated files
To reduce build dependencies, Python source code contains multiple generated files. Commands to regenerate all
generatedfiles:
make regen-all
make regen-stdlib-module-names
make regen-limited-abi
make regen-configure
TheMakefile.pre.in filedocumentsgeneratedfiles,theirinputs,andtoolsusedtoregeneratethem. Searchfor
regen-*maketargets.
23
Python Setup and Usage, Release 3.13.0
3.2.1configure script
Themake regen-configure command regenerates the aclocal.m4 file and the configure script using the
Tools/build/regen-configure.sh shellscriptwhichusesanUbuntucontainertogetthesametoolsversions
andhaveareproducibleoutput.
Thecontainerisoptional,thefollowingcommandcanberunlocally:
autoreconf -ivf -Werror
Thegeneratedfilescanchangedependingontheexact autoconf-archive ,aclocalandpkg-config versions.
3.3Configure Options
Listall configure scriptoptionsusing:
./configure --help
Seealsothe Misc/SpecialBuilds.txt inthePythonsourcedistribution.
3.3.1General Options
--enable-loadable-sqlite-extensions
Supportloadableextensionsinthe _sqliteextensionmodule(defaultisno)ofthe sqlite3module.
Seethe sqlite3.Connection.enable_load_extension() methodofthe sqlite3module.
Addedinversion3.6.
--disable-ipv6
DisableIPv6support(enabledbydefaultifsupported),seethe socketmodule.
--enable-big-digits =[15|30]
DefinethesizeinbitsofPython intdigits: 15or30bits.
Bydefault,thedigitsizeis30.
Definethe PYLONG_BITS_IN_DIGIT to15or30.
Seesys.int_info.bits_per_digit .
--with-suffix =SUFFIX
SetthePythonexecutablesuffixto SUFFIX.
The default suffix is .exeon Windows and macOS ( python.exe executable), .json Emscripten node, .
htmlonEmscriptenbrowser, .wasmonWASI,andanemptystringonotherplatforms( pythonexecutable).
Changedinversion3.11: ThedefaultsuffixonWASMplatformisoneof .js,.htmlor.wasm.
--with-tzpath =<list of absolute paths separated by pathsep>
Selectthedefaulttimezonesearchpathfor zoneinfo.TZPATH .SeetheCompile-timeconfigurationofthe
zoneinfo module.
Default: /usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/etc/
zoneinfo .
Seeos.pathsep pathseparator.
Addedinversion3.9.
--without-decimal-contextvar
Buildthe _decimal extensionmoduleusingathread-localcontextratherthanacoroutine-localcontext(de-
fault),seethe decimalmodule.
Seedecimal.HAVE_CONTEXTVAR andthe contextvars module.
24 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
Addedinversion3.9.
--with-dbmliborder =<list of backend names>
Overrideordertocheckdbbackendsforthe dbmmodule
Avalidvalueisacolon( :) separatedstringwiththebackendnames:
•ndbm;
•gdbm;
•bdb.
--without-c-locale-coercion
DisableClocalecoerciontoaUTF-8basedlocale(enabledbydefault).
Don’tdefinethe PY_COERCE_C_LOCALE macro.
SeePYTHONCOERCECLOCALE andthePEP 538.
--without-freelists
Disableallfreelistsexcepttheemptytuplesingleton.
Addedinversion3.11.
--with-platlibdir =DIRNAME
Pythonlibrarydirectoryname(defaultis lib).
FedoraandSuSEuse lib64on64-bitplatforms.
Seesys.platlibdir .
Addedinversion3.9.
--with-wheel-pkg-dir =PATH
Directoryofwheelpackagesusedbythe ensurepip module(nonebydefault).
SomeLinuxdistributionpackagingpoliciesrecommendagainstbundlingdependencies. Forexample,Fedora
installswheelpackagesinthe /usr/share/python-wheels/ directoryanddon’tinstallthe ensurepip.
_bundled package.
Addedinversion3.10.
--with-pkg-config =[check|yes|no]
Whetherconfigureshoulduse pkg-config todetectbuilddependencies.
•check(default): pkg-config isoptional
•yes:pkg-config ismandatory
•no: configuredoesnotuse pkg-config evenwhenpresent
Addedinversion3.11.
--enable-pystats
TurnoninternalPythonperformancestatisticsgathering.
By default, statistics gathering is off. Use python3 -X pystats command or set PYTHONSTATS=1 envi-
ronmentvariabletoturnonstatisticsgatheringatPythonstartup.
AtPythonexit,dumpstatisticsifstatisticsgatheringwasonandnotcleared.
Effects:
•Add-X pystats commandlineoption.
•AddPYTHONSTATS environmentvariable.
•Definethe Py_STATS macro.
•Addfunctionstothe sysmodule:
3.3. Configure Options 25
Python Setup and Usage, Release 3.13.0
–sys._stats_on() : Turnsonstatisticsgathering.
–sys._stats_off() : Turnsoffstatisticsgathering.
–sys._stats_clear() : Clearsthestatistics.
–sys._stats_dump() : Dumpstatisticstofile,andclearsthestatistics.
Thestatisticswillbedumpedtoaarbitrary(probablyunique)filein /tmp/py_stats/ (Unix)or C:\temp\
py_stats\ (Windows). Ifthatdirectorydoesnotexist,resultswillbeprintedonstderr.
UseTools/scripts/summarize_stats.py toreadthestats.
Statistics:
•Opcode:
–Specialization: success,failure,hit,deferred,miss,deopt,failures;
–Executioncount;
–Paircount.
•Call:
–InlinedPythoncalls;
–PyEvalcalls;
–Framespushed;
–Frameobjectcreated;
–Evalcalls: vector,generator,legacy,functionVECTORCALL,buildclass,slot,function“ex”,API,
method.
•Object:
–increfanddecref;
–interpreterincrefanddecref;
–allocations: all,512bytes,4kiB,big;
–free;
–to/fromfreelists;
–dictionarymaterialized/dematerialized;
–typecache;
–optimizationattempts;
–optimizationtracescreated/executed;
–uopsexecuted.
•Garbagecollector:
–Garbagecollections;
–Objectsvisited;
–Objectscollected.
Addedinversion3.11.
--disable-gil
Enablesexperimental support for running Python without the global interpreter lock (GIL): free threading
build.
Definesthe Py_GIL_DISABLED macroandadds "t"tosys.abiflags .
Seewhatsnew313-free-threaded-cpythonformoredetail.
26 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
Addedinversion3.13.
--enable-experimental-jit =[no|yes|yes-off|interpreter]
IndicatehowtointegratetheJITcompiler.
•no-buildtheinterpreterwithouttheJIT.
•yes-buildtheinterpreterwiththeJIT.
•yes-off-buildtheinterpreterwiththeJITbutdisableitbydefault.
•interpreter -buildtheinterpreterwithouttheJIT,butwiththetier2enabledinterpreter.
Byconvention, --enable-experimental-jit isashorthandfor --enable-experimental-jit=yes .
Addedinversion3.13.
PKG_CONFIG
Pathto pkg-config utility.
PKG_CONFIG_LIBDIR
PKG_CONFIG_PATH
pkg-config options.
3.3.2C compiler options
CC
Ccompilercommand.
CFLAGS
Ccompilerflags.
CPP
Cpreprocessorcommand.
CPPFLAGS
Cpreprocessorflags,e.g. -Iinclude_dir .
3.3.3Linker options
LDFLAGS
Linkerflags,e.g. -Llibrary_directory .
LIBS
Librariestopasstothelinker,e.g. -llibrary.
MACHDEP
Nameformachine-dependentlibraryfiles.
3.3.4Options for third-party dependencies
Addedinversion3.11.
BZIP2_CFLAGS
BZIP2_LIBS
CcompilerandlinkerflagstolinkPythonto libbz2,usedby bz2module,overriding pkg-config .
CURSES_CFLAGS
CURSES_LIBS
C compiler and linker flags for libncurses orlibncursesw , used by cursesmodule, overriding
pkg-config .
3.3. Configure Options 27
Python Setup and Usage, Release 3.13.0
GDBM_CFLAGS
GDBM_LIBS
Ccompilerandlinkerflagsfor gdbm.
LIBB2_CFLAGS
LIBB2_LIBS
Ccompilerandlinkerflagsfor libb2(BLAKE2),usedby hashlibmodule,overriding pkg-config .
LIBEDIT_CFLAGS
LIBEDIT_LIBS
Ccompilerandlinkerflagsfor libedit,usedby readline module,overriding pkg-config .
LIBFFI_CFLAGS
LIBFFI_LIBS
Ccompilerandlinkerflagsfor libffi,usedby ctypesmodule,overriding pkg-config .
LIBMPDEC_CFLAGS
LIBMPDEC_LIBS
Ccompilerandlinkerflagsfor libmpdec ,usedby decimalmodule,overriding pkg-config .
®Note
Theseenvironmentvariableshavenoeffectunless --with-system-libmpdec isspecified.
LIBLZMA_CFLAGS
LIBLZMA_LIBS
Ccompilerandlinkerflagsfor liblzma,usedby lzmamodule,overriding pkg-config .
LIBREADLINE_CFLAGS
LIBREADLINE_LIBS
Ccompilerandlinkerflagsfor libreadline ,usedby readline module,overriding pkg-config .
LIBSQLITE3_CFLAGS
LIBSQLITE3_LIBS
Ccompilerandlinkerflagsfor libsqlite3 ,usedby sqlite3module,overriding pkg-config .
LIBUUID_CFLAGS
LIBUUID_LIBS
Ccompilerandlinkerflagsfor libuuid,usedby uuidmodule,overriding pkg-config .
PANEL_CFLAGS
PANEL_LIBS
CcompilerandlinkerflagsforPANEL,overriding pkg-config .
C compiler and linker flags for libpanel orlibpanelw , used by curses.panel module, overriding
pkg-config .
TCLTK_CFLAGS
TCLTK_LIBS
CcompilerandlinkerflagsforTCLTK,overriding pkg-config .
28 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
ZLIB_CFLAGS
ZLIB_LIBS
Ccompilerandlinkerflagsfor libzlib,usedby gzipmodule,overriding pkg-config .
3.3.5WebAssembly Options
--with-emscripten-target =[browser|node]
Setbuildflavorfor wasm32-emscripten .
•browser(default): preloadminimalstdlib,defaultMEMFS.
•node: NODERAWFSandpthreadsupport.
Addedinversion3.11.
--enable-wasm-dynamic-linking
TurnondynamiclinkingsupportforWASM.
Dynamiclinkingenables dlopen. Filesizeoftheexecutableincreasesduetolimiteddeadcodeelimination
andadditionalfeatures.
Addedinversion3.11.
--enable-wasm-pthreads
TurnonpthreadssupportforWASM.
Addedinversion3.11.
3.3.6Install Options
--prefix =PREFIX
Installarchitecture-independentfilesinPREFIX.OnUnix,itdefaultsto /usr/local .
Thisvaluecanberetrievedatruntimeusing sys.prefix .
Asanexample,onecanuse --prefix="$HOME/.local/" toinstallaPythoninitshomedirectory.
--exec-prefix =EPREFIX
Installarchitecture-dependentfilesinEPREFIX,defaultsto --prefix .
Thisvaluecanberetrievedatruntimeusing sys.exec_prefix .
--disable-test-modules
Don’t build nor install test modules, like the testpackage or the _testcapi extension module (built and
installedbydefault).
Addedinversion3.10.
--with-ensurepip =[upgrade|install|no]
Selectthe ensurepip commandrunonPythoninstallation:
•upgrade(default): run python -m ensurepip --altinstall --upgrade command.
•install: run python -m ensurepip --altinstall command;
•no: don’trunensurepip;
Addedinversion3.6.
3.3.7Performance options
ConfiguringPythonusing --enable-optimizations --with-lto (PGO+LTO)isrecommendedforbestper-
formance. Theexperimental --enable-bolt flagcanalsobeusedtoimproveperformance.
3.3. Configure Options 29
Python Setup and Usage, Release 3.13.0
--enable-optimizations
EnableProfileGuidedOptimization(PGO)using PROFILE_TASK (disabledbydefault).
TheCcompilerClangrequires llvm-profdata programforPGO.OnmacOS,GCCalsorequiresit: GCC
isjustanaliastoClangonmacOS.
Disable also semantic interposition in libpython if --enable-shared and GCC is used: add
-fno-semantic-interposition tothecompilerandlinkerflags.
®Note
During the build, you may encounter compiler warnings about profile data not being available for
some source files. These warnings are harmless, as only a subset of the code is exercised dur-
ing profile data acquisition. To disable these warnings on Clang, manually suppress them by adding
-Wno-profile-instr-unprofiled toCFLAGS.
Addedinversion3.6.
Changedinversion3.10: Use -fno-semantic-interposition onGCC.
PROFILE_TASK
EnvironmentvariableusedintheMakefile: PythoncommandlineargumentsforthePGOgenerationtask.
Default: -m test --pgo --timeout=$(TESTTIMEOUT) .
Addedinversion3.8.
Changedinversion3.13: Taskfailureisnolongerignoredsilently.
--with-lto =[full|thin|no|yes]
EnableLinkTimeOptimization(LTO)inanybuild(disabledbydefault).
TheCcompilerClangrequires llvm-arforLTO( aronmacOS),aswellasanLTO-awarelinker( ld.gold
orlld).
Addedinversion3.6.
Addedinversion3.11: TouseThinLTOfeature,use --with-lto=thin onClang.
Changed in version 3.12: Use ThinLTO as the default optimization policy on Clang if the compiler accepts
theflag.
--enable-bolt
Enableusageofthe BOLTpost-linkbinaryoptimizer (disabledbydefault).
BOLTispartoftheLLVMprojectbutisnotalwaysincludedintheirbinarydistributions. Thisflagrequires
thatllvm-bolt andmerge-fdata areavailable.
BOLT is still a fairly new project so this flag should be considered experimental for now. Because this tool
operates on machine code its success is dependent on a combination of the build environment + the other
optimizationconfigureargs+theCPUarchitecture, andnotallcombinationsaresupported. BOLTversions
before LLVM 16 are known to crash BOLT under some scenarios. Use of LLVM 16 or newer for BOLT
optimizationisstronglyencouraged.
TheBOLT_INSTRUMENT_FLAGS andBOLT_APPLY_FLAGS configure variablescanbedefinedtooverride
thedefaultsetofargumentsfor llvm-bolt toinstrumentandapplyBOLTdatatobinaries,respectively.
Addedinversion3.12.
BOLT_APPLY_FLAGS
Argumentsto llvm-bolt whencreatinga BOLToptimizedbinary .
Addedinversion3.12.
30 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
BOLT_INSTRUMENT_FLAGS
Argumentsto llvm-bolt wheninstrumentingbinaries.
Addedinversion3.12.
--with-computed-gotos
Enablecomputedgotosinevaluationloop(enabledbydefaultonsupportedcompilers).
--without-mimalloc
Disablethefastmimallocallocator(enabledbydefault).
Seealso PYTHONMALLOC environmentvariable.
--without-pymalloc
DisablethespecializedPythonmemoryallocatorpymalloc(enabledbydefault).
Seealso PYTHONMALLOC environmentvariable.
--without-doc-strings
Disable static documentation strings to reduce the memory footprint (enabled by default). Documentation
stringsdefinedinPythonarenotaffected.
Don’tdefinethe WITH_DOC_STRINGS macro.
Seethe PyDoc_STRVAR() macro.
--enable-profiling
EnableC-levelcodeprofilingwith gprof(disabledbydefault).
--with-strict-overflow
Add-fstrict-overflow totheCcompilerflags(bydefaultweadd -fno-strict-overflow instead).
3.3.8Python Debug Build
AdebugbuildisPythonbuiltwiththe --with-pydebug configureoption.
Effectsofadebugbuild:
•Displayallwarningsbydefault: thelistofdefaultwarningfiltersisemptyinthe warnings module.
•Adddtosys.abiflags .
•Addsys.gettotalrefcount() function.
•Add-X showrefcount commandlineoption.
•Add-dcommandlineoptionand PYTHONDEBUG environmentvariabletodebugtheparser.
•Add support for the __lltrace__ variable: enable low-level tracing in the bytecode evaluation loop if the
variableisdefined.
•Installdebughooksonmemoryallocatorstodetectbufferoverflowandothermemoryerrors.
•Define Py_DEBUG andPy_REF_DEBUG macros.
•Add runtime checks: code surrounded by #ifdef Py_DEBUG and#endif. Enable assert(...) and
_PyObject_ASSERT(...) assertions: don’t set the NDEBUGmacro (see also the --with-assertions
configureoption). Mainruntimechecks:
–Addsanitychecksonthefunctionarguments.
–Unicodeandintobjectsarecreatedwiththeirmemoryfilledwithapatterntodetectusageofuninitialized
objects.
–Ensurethatfunctions whichcanclear orreplacethe currentexception arenotcalled withan exception
raised.
–Checkthatdeallocatorfunctionsdon’tchangethecurrentexception.
–Thegarbagecollector( gc.collect() function)runssomebasicchecksonobjectsconsistency.
3.3. Configure Options 31
Python Setup and Usage, Release 3.13.0
–ThePy_SAFE_DOWNCAST() macrochecksforintegerunderflowandoverflowwhendowncastingfrom
widetypestonarrowtypes.
SeealsothePythonDevelopmentModeandthe --with-trace-refs configureoption.
Changedinversion3.8: ReleasebuildsanddebugbuildsarenowABIcompatible: definingthe Py_DEBUG macrono
longerimpliesthe Py_TRACE_REFS macro(seethe --with-trace-refs option).
3.3.9Debug options
--with-pydebug
Build Python in debug mode : definethe Py_DEBUG macro(disabledbydefault).
--with-trace-refs
Enabletracingreferencesfordebuggingpurpose(disabledbydefault).
Effects:
•Definethe Py_TRACE_REFS macro.
•Addsys.getobjects() function.
•AddPYTHONDUMPREFS environmentvariable.
ThePYTHONDUMPREFS environmentvariablecanbeusedtodumpobjectsandreferencecountsstillaliveat
Pythonexit.
Staticallyallocatedobjectsarenottraced.
Addedinversion3.8.
Changedinversion3.13: ThisbuildisnowABIcompatiblewithreleasebuildand debug build .
--with-assertions
BuildwithCassertionsenabled(defaultisno): assert(...); and_PyObject_ASSERT(...); .
Ifset,the NDEBUGmacroisnotdefinedinthe OPTcompilervariable.
Seealsothe --with-pydebug option( debug build )whichalsoenablesassertions.
Addedinversion3.6.
--with-valgrind
EnableValgrindsupport(defaultisno).
--with-dtrace
EnableDTracesupport(defaultisno).
SeeInstrumentingCPythonwithDTraceandSystemTap.
Addedinversion3.6.
--with-address-sanitizer
EnableAddressSanitizermemoryerrordetector, asan(defaultisno).
Addedinversion3.6.
--with-memory-sanitizer
EnableMemorySanitizerallocationerrordetector, msan(defaultisno).
Addedinversion3.6.
--with-undefined-behavior-sanitizer
EnableUndefinedBehaviorSanitizerundefinedbehaviourdetector, ubsan(defaultisno).
Addedinversion3.6.
32 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
--with-thread-sanitizer
EnableThreadSanitizerdataracedetector, tsan(defaultisno).
Addedinversion3.13.
3.3.10 Linker options
--enable-shared
EnablebuildingasharedPythonlibrary: libpython (defaultisno).
--without-static-libpython
Donotbuild libpythonMAJOR.MINOR.a anddonotinstall python.o (builtandenabledbydefault).
Addedinversion3.10.
3.3.11 Libraries options
--with-libs ='lib1 ...'
Linkagainstadditionallibraries(defaultisno).
--with-system-expat
Buildthe pyexpatmoduleusinganinstalled expatlibrary(defaultisno).
--with-system-libmpdec
Buildthe _decimal extensionmoduleusinganinstalled mpdecimal library,seethe decimalmodule(default
isyes).
Addedinversion3.3.
Changedinversion3.13: Defaulttousingtheinstalled mpdecimal library.
Deprecated since version 3.13, will be removed in version 3.15: A copy of the mpdecimal library sources
willnolongerbedistributedwithPython3.15.
µSeealso
LIBMPDEC_CFLAGS andLIBMPDEC_LIBS .
--with-readline =readline|editline
Designateabackendlibraryforthe readline module.
•readline: Usereadlineasthebackend.
•editline: Useeditlineasthebackend.
Addedinversion3.10.
--without-readline
Don’tbuildthe readline module(builtbydefault).
Don’tdefinethe HAVE_LIBREADLINE macro.
Addedinversion3.10.
--with-libm =STRING
Override libmmathlibraryto STRING(defaultissystem-dependent).
--with-libc =STRING
Override libcClibraryto STRING(defaultissystem-dependent).
3.3. Configure Options 33
Python Setup and Usage, Release 3.13.0
--with-openssl =DIR
RootoftheOpenSSLdirectory.
Addedinversion3.7.
--with-openssl-rpath =[no|auto|DIR]
Setruntimelibrarydirectory(rpath)forOpenSSLlibraries:
•no(default): don’tsetrpath;
•auto: auto-detectrpathfrom --with-openssl andpkg-config ;
•DIR:setanexplicitrpath.
Addedinversion3.10.
3.3.12 Security Options
--with-hash-algorithm =[fnv|siphash13|siphash24]
Selecthashalgorithmforusein Python/pyhash.c :
•siphash13 (default);
•siphash24 ;
•fnv.
Addedinversion3.4.
Addedinversion3.11: siphash13 isaddedanditisthenewdefault.
--with-builtin-hashlib-hashes =md5,sha1,sha256,sha512,sha3,blake2
Built-inhashmodules:
•md5;
•sha1;
•sha256;
•sha512;
•sha3(withshake);
•blake2.
Addedinversion3.9.
--with-ssl-default-suites =[python|openssl|STRING]
OverridetheOpenSSLdefaultciphersuitesstring:
•python(default): usePython’spreferredselection;
•openssl: leaveOpenSSL’sdefaultsuntouched;
•STRING:useacustomstring
Seethe sslmodule.
Addedinversion3.7.
Changedinversion3.10: Thesettings pythonandSTRINGalsosetTLS1.2asminimumprotocolversion.
3.3.13 macOS Options
SeeMac/README.rst .
--enable-universalsdk
34 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
--enable-universalsdk =SDKDIR
Create a universal binary build. SDKDIRspecifies which macOS SDK should be used to perform the build
(defaultisno).
--enable-framework
--enable-framework =INSTALLDIR
CreateaPython.frameworkratherthanatraditionalUnixinstall. Optional INSTALLDIR specifiestheinstal-
lationpath(defaultisno).
--with-universal-archs =ARCH
Specify the kind of universal binary that should be created. This option is only valid when
--enable-universalsdk isset.
Options:
•universal2 ;
•32-bit;
•64-bit;
•3-way;
•intel;
•intel-32 ;
•intel-64 ;
•all.
--with-framework-name =FRAMEWORK
SpecifythenameforthepythonframeworkonmacOSonlyvalidwhen --enable-framework isset(default:
Python).
--with-app-store-compliance
--with-app-store-compliance =PATCH-FILE
ThePythonstandardlibrarycontainsstringsthatareknowntotriggerautomatedinspectiontoolerrorswhen
submitted for distribution by the macOS and iOS App Stores. If enabled, this option will apply the list of
patchesthatareknowntocorrectappstorecompliance. Acustompatchfilecanalsobespecified. Thisoption
isdisabledbydefault.
Addedinversion3.13.
3.3.14 iOS Options
SeeiOS/README.rst .
--enable-framework =INSTALLDIR
Create a Python.framework. Unlike macOS, the INSTALLDIR argument specifying the installation path is
mandatory.
--with-framework-name =FRAMEWORK
Specifythenamefortheframework(default: Python).
3.3.15 Cross Compiling Options
Crosscompiling,alsoknownascrossbuilding,canbeusedtobuildPythonforanotherCPUarchitectureorplatform.
Cross compiling requires a Python interpreter for the build platform. The version of the build Python must match
theversionofthecrosscompiledhostPython.
--build =BUILD
configureforbuildingonBUILD,usuallyguessedby config.guess .
3.3. Configure Options 35
Python Setup and Usage, Release 3.13.0
--host =HOST
cross-compiletobuildprogramstorunonHOST(targetplatform)
--with-build-python =path/to/python
pathtobuild pythonbinaryforcrosscompiling
Addedinversion3.11.
CONFIG_SITE =file
Anenvironmentvariablethatpointstoafilewithconfigureoverrides.
Example config.sitefile:
# config.site-aarch64
ac_cv_buggy_getaddrinfo =no
ac_cv_file__dev_ptmx =yes
ac_cv_file__dev_ptc =no
HOSTRUNNER
ProgramtorunCPythonforthehostplatformforcross-compilation.
Addedinversion3.11.
Crosscompilingexample:
CONFIG_SITE =config.site-aarch64 ../configure \
--build =x86_64-pc-linux-gnu \
--host =aarch64-unknown-linux-gnu \
--with-build-python =../x86_64/python
3.4Python Build System
3.4.1Main files of the build system
•configure.ac =>configure ;
•Makefile.pre.in =>Makefile (createdby configure );
•pyconfig.h (createdby configure );
•Modules/Setup : CextensionsbuiltbytheMakefileusing Module/makesetup shellscript;
3.4.2Main build steps
•Cfiles( .c)arebuiltasobjectfiles( .o).
•Astatic libpython library( .a)iscreatedfromobjectsfiles.
•python.o andthestatic libpython libraryarelinkedintothefinal pythonprogram.
•CextensionsarebuiltbytheMakefile(see Modules/Setup ).
3.4.3Main Makefile targets
make
Forthemostpart,whenrebuildingaftereditingsomecodeorrefreshingyourcheckoutfromupstream,allyouneed
todoisexecute make, which(perMake’ssemantics)buildsthedefaulttarget, thefirstonedefinedintheMakefile.
By tradition (including in the CPython project) this is usually the alltarget. The configure script expands an
autoconf variable, @DEF_MAKE_ALL_RULE@ todescribepreciselywhichtargets make all willbuild. Thethree
choicesare:
•profile-opt (configuredwith --enable-optimizations )
36 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
•build_wasm (configuredwith --with-emscripten-target )
•build_all (configuredwithoutexplicitlyusingeitheroftheothers)
Dependingonthemostrecentsourcefilechanges,Makewillrebuildanytargets(objectfilesandexecutables)deemed
out-of-date,includingrunning configure againifnecessary. Source/targetdependenciesaremanyandmaintained
manuallyhowever,soMakesometimesdoesn’thavealltheinformationnecessarytocorrectlydetectalltargetswhich
need to be rebuilt. Depending on which targets aren’t rebuilt, you might experience a number of problems. If you
have build or test problems which you can’t otherwise explain, make clean && make should work around most
dependencyproblems,attheexpenseoflongerbuildtimes.
make platform
Build the pythonprogram, but don’t build the standard library extension modules. This generates a file named
platform whichcontainsasinglelinedescribingthedetailsofthebuildplatform,e.g., macosx-14.3-arm64-3.
12orlinux-x86_64-3.13 .
make profile-opt
Build Python using profile-guided optimization (PGO). You can use the configure --enable-optimizations
optiontomakethisthedefaulttargetofthe makecommand( make all orjust make).
make clean
Removebuiltfiles.
make distclean
Inadditiontotheworkdoneby make clean ,removefilescreatedbytheconfigurescript. configure willhaveto
berunbeforebuildingagain.1
make install
Buildthe alltargetandinstallPython.
make test
Buildthe alltargetandrunthePythontestsuitewiththe --fast-ci option. Variables:
•TESTOPTS :additionalregrtestcommand-lineoptions.
•TESTPYTHONOPTS :additionalPythoncommand-lineoptions.
•TESTTIMEOUT :timeoutinseconds(default: 10minutes).
make buildbottest
This is similar to make test , but uses the --slow-ci option and default timeout of 20 minutes, instead of
--fast-ci option.
make regen-all
Regenerate(almost)allgeneratedfiles. Theseinclude(butarenotlimitedto)bytecodecases, andparsergenerator
file.make regen-stdlib-module-names andautoconf must be run separately for the remaining generated
files.
1git clean -fdx isanevenmoreextremewayto“clean”yourcheckout. ItremovesallfilesnotknowntoGit. Whenbughuntingusing
git bisect ,thisisrecommendedbetweenprobes toguaranteeacompletelycleanbuild. Use with care ,asitwilldeleteallfilesnotchecked
intoGit,includingyournew,uncommittedwork.
3.4. Python Build System 37
Python Setup and Usage, Release 3.13.0
3.4.4C extensions
Some C extensions are built as built-in modules, like the sysmodule. They are built with the
Py_BUILD_CORE_BUILTIN macrodefined. Built-inmoduleshaveno __file__ attribute:
>>> import sys
>>> sys
<module 'sys' (built-in)>
>>> sys.__file__
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
AttributeError : module 'sys' has no attribute '__file__'
Other C extensions are built as dynamic libraries, like the _asyncio module. They are built with the
Py_BUILD_CORE_MODULE macrodefined. ExampleonLinuxx86-64:
>>> import _asyncio
>>> _asyncio
<module '_asyncio' from '/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_
,→64-linux-gnu.so'>
>>> _asyncio .__file__
'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'
Modules/Setup isusedtogenerateMakefiletargetstobuildCextensions. Atthebeginningofthefiles,Cextensions
arebuiltasbuilt-inmodules. Extensionsdefinedafterthe *shared* markerarebuiltasdynamiclibraries.
ThePyAPI_FUNC() ,PyAPI_DATA() andPyMODINIT_FUNC macros of Include/exports.h are defined dif-
ferentlydependingifthe Py_BUILD_CORE_MODULE macroisdefined:
•UsePy_EXPORTED_SYMBOL ifthe Py_BUILD_CORE_MODULE isdefined
•UsePy_IMPORTED_SYMBOL otherwise.
If the Py_BUILD_CORE_BUILTIN macro is used by mistake on a C extension built as a shared library, its
PyInit_ xxx()functionisnotexported,causingan ImportError onimport.
3.5Compiler and linker flags
Optionssetbythe ./configure scriptandenvironmentvariablesandusedby Makefile .
3.5.1Preprocessor flags
CONFIGURE_CPPFLAGS
Valueof CPPFLAGS variablepassedtothe ./configure script.
Addedinversion3.6.
CPPFLAGS
(Objective)C/C++preprocessorflags, e.g. -Iinclude_dir ifyouhaveheadersinanonstandarddirectory
include_dir .
Both CPPFLAGS andLDFLAGSneed to contain the shell’s value to be able to build extension modules using
thedirectoriesspecifiedintheenvironmentvariables.
BASECPPFLAGS
Addedinversion3.4.
PY_CPPFLAGS
Extrapreprocessorflagsaddedforbuildingtheinterpreterobjectfiles.
Default: $(BASECPPFLAGS) -I. -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS)
$(CPPFLAGS) .
38 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
Addedinversion3.2.
3.5.2Compiler flags
CC
Ccompilercommand.
Example: gcc -pthread .
CXX
C++compilercommand.
Example: g++ -pthread .
CFLAGS
Ccompilerflags.
CFLAGS_NODIST
CFLAGS_NODIST is used for building the interpreter and stdlib C extensions. Use it when a compiler flag
should notbepartof CFLAGSoncePythonisinstalled( gh-65320).
Inparticular, CFLAGSshouldnotcontain:
•thecompilerflag -I(forsettingthesearchpathforincludefiles). The -Iflagsareprocessedfromleft
toright,andanyflagsin CFLAGSwouldtakeprecedenceoveruser-andpackage-supplied -Iflags.
•hardening flags such as -Werrorbecause distributions cannot control whether packages installed by
usersconformtosuchheightenedstandards.
Addedinversion3.5.
COMPILEALL_OPTS
Optionspassedtothe compileall commandlinewhenbuildingPYCfilesin make install . Default: -j0.
Addedinversion3.12.
EXTRA_CFLAGS
ExtraCcompilerflags.
CONFIGURE_CFLAGS
Valueof CFLAGSvariablepassedtothe ./configure script.
Addedinversion3.2.
CONFIGURE_CFLAGS_NODIST
Valueof CFLAGS_NODIST variablepassedtothe ./configure script.
Addedinversion3.5.
BASECFLAGS
Basecompilerflags.
OPT
Optimizationflags.
CFLAGS_ALIASING
Strictornon-strictaliasingflagsusedtocompile Python/dtoa.c .
Addedinversion3.7.
CCSHARED
Compilerflagsusedtobuildasharedlibrary.
Forexample, -fPICisusedonLinuxandonBSD.
3.5. Compiler and linker flags 39
Python Setup and Usage, Release 3.13.0
CFLAGSFORSHARED
ExtraCflagsaddedforbuildingtheinterpreterobjectfiles.
Default: $(CCSHARED) when --enable-shared isused,oranemptystringotherwise.
PY_CFLAGS
Default: $(BASECFLAGS) $(OPT) $(CONFIGURE_CFLAGS) $(CFLAGS) $(EXTRA_CFLAGS) .
PY_CFLAGS_NODIST
Default: $(CONFIGURE_CFLAGS_NODIST) $(CFLAGS_NODIST) -I$(srcdir)/Include/internal .
Addedinversion3.5.
PY_STDMODULE_CFLAGS
Cflagsusedforbuildingtheinterpreterobjectfiles.
Default: $(PY_CFLAGS) $(PY_CFLAGS_NODIST) $(PY_CPPFLAGS) $(CFLAGSFORSHARED) .
Addedinversion3.7.
PY_CORE_CFLAGS
Default: $(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE .
Addedinversion3.2.
PY_BUILTIN_MODULE_CFLAGS
Compilerflagstobuildastandardlibraryextensionmoduleasabuilt-inmodule,likethe posixmodule.
Default: $(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE_BUILTIN .
Addedinversion3.8.
PURIFY
Purifycommand. Purifyisamemorydebuggerprogram.
Default: emptystring(notused).
3.5.3Linker flags
LINKCC
Linkercommandusedtobuildprogramslike pythonand_testembed .
Default: $(PURIFY) $(CC) .
CONFIGURE_LDFLAGS
Valueof LDFLAGSvariablepassedtothe ./configure script.
Avoidassigning CFLAGS,LDFLAGS,etc. souserscanusethemonthecommandlinetoappendtothesevalues
withoutstompingthepre-setvalues.
Addedinversion3.2.
LDFLAGS_NODIST
LDFLAGS_NODIST isusedinthesamemanneras CFLAGS_NODIST .Useitwhenalinkerflagshould notbe
partof LDFLAGSoncePythonisinstalled( gh-65320).
Inparticular, LDFLAGSshouldnotcontain:
•the compiler flag -L(for setting the search path for libraries). The -Lflags are processed from left to
right,andanyflagsin LDFLAGSwouldtakeprecedenceoveruser-andpackage-supplied -Lflags.
CONFIGURE_LDFLAGS_NODIST
Valueof LDFLAGS_NODIST variablepassedtothe ./configure script.
Addedinversion3.8.
40 Chapter 3. Configure Python
Python Setup and Usage, Release 3.13.0
LDFLAGS
Linkerflags,e.g. -Llib_dirifyouhavelibrariesinanonstandarddirectory lib_dir.
Both CPPFLAGS andLDFLAGSneed to contain the shell’s value to be able to build extension modules using
thedirectoriesspecifiedintheenvironmentvariables.
LIBS
LinkerflagstopasslibrariestothelinkerwhenlinkingthePythonexecutable.
Example: -lrt.
LDSHARED
Commandtobuildasharedlibrary.
Default: @LDSHARED@ $(PY_LDFLAGS) .
BLDSHARED
Commandtobuild libpython sharedlibrary.
Default: @BLDSHARED@ $(PY_CORE_LDFLAGS) .
PY_LDFLAGS
Default: $(CONFIGURE_LDFLAGS) $(LDFLAGS) .
PY_LDFLAGS_NODIST
Default: $(CONFIGURE_LDFLAGS_NODIST) $(LDFLAGS_NODIST) .
Addedinversion3.8.
PY_CORE_LDFLAGS
Linkerflagsusedforbuildingtheinterpreterobjectfiles.
Addedinversion3.8.
3.5. Compiler and linker flags 41
Python Setup and Usage, Release 3.13.0
42 Chapter 3. Configure Python
CHAPTER
FOUR
USING PYTHON ON WINDOWS
ThisdocumentaimstogiveanoverviewofWindows-specificbehaviouryoushouldknowaboutwhenusingPython
onMicrosoftWindows.
Unlike most Unix systems and services, Windows does not include a system supported installation of Python. To
makePythonavailable,theCPythonteamhascompiledWindowsinstallerswithevery releaseformanyyears. These
installersareprimarilyintendedtoaddaper-userinstallationofPython,withthecoreinterpreterandlibrarybeing
usedbyasingleuser. Theinstallerisalsoabletoinstallforallusersofasinglemachine, andaseparateZIPfileis
availableforapplication-localdistributions.
Asspecifiedin PEP11,aPythonreleaseonlysupportsaWindowsplatformwhileMicrosoftconsiderstheplatform
underextendedsupport. ThismeansthatPython3.13supportsWindows8.1andnewer. IfyourequireWindows7
support,pleaseinstallPython3.8.
ThereareanumberofdifferentinstallersavailableforWindows,eachwithcertainbenefitsanddownsides.
The full installer containsallcomponentsandisthebestoptionfordevelopersusingPythonforanykindofproject.
The Microsoft Store package isasimpleinstallationofPythonthatissuitableforrunningscriptsandpackages, and
using IDLE or other development environments. It requires Windows 10 and above, but can be safely installed
withoutcorruptingotherprograms. ItalsoprovidesmanyconvenientcommandsforlaunchingPythonanditstools.
The nuget.org packages are lightweight installations intended for continuous integration systems. It can be used to
buildPythonpackagesorrunscripts,butisnotupdateableandhasnouserinterfacetools.
The embeddable package isaminimalpackageofPythonsuitableforembeddingintoalargerapplication.
4.1The full installer
4.1.1Installation steps
FourPython3.13installersareavailablefordownload-twoeachforthe32-bitand64-bitversionsoftheinterpreter.
Theweb installer isasmallinitialdownload,anditwillautomaticallydownloadtherequiredcomponentsasneces-
sary. The offline installer includes the components necessary for a default installation and only requires an internet
connection for optional features. See Installing Without Downloading for other ways to avoid downloading during
installation.
Afterstartingtheinstaller,oneoftwooptionsmaybeselected:
43
Python Setup and Usage, Release 3.13.0
Ifyouselect“InstallNow”:
•Youwill notneedtobeanadministrator(unlessasystemupdatefortheCRuntimeLibraryisrequiredoryou
installthe Python Launcher for Windows forallusers)
•Pythonwillbeinstalledintoyouruserdirectory
•ThePython Launcher for Windows willbeinstalledaccordingtotheoptionatthebottomofthefirstpage
•Thestandardlibrary,testsuite,launcherandpipwillbeinstalled
•Ifselected,theinstalldirectorywillbeaddedtoyour PATH
•Shortcutswillonlybevisibleforthecurrentuser
Selecting “Customize installation” will allow you to select the features to install, the installation location and other
optionsorpost-installactions. Toinstalldebuggingsymbolsorbinaries,youwillneedtousethisoption.
Toperformanall-usersinstallation,youshouldselect“Customizeinstallation”. Inthiscase:
•Youmayberequiredtoprovideadministrativecredentialsorapproval
•PythonwillbeinstalledintotheProgramFilesdirectory
•ThePython Launcher for Windows willbeinstalledintotheWindowsdirectory
•Optionalfeaturesmaybeselectedduringinstallation
•Thestandardlibrarycanbepre-compiledtobytecode
•Ifselected,theinstalldirectorywillbeaddedtothesystem PATH
•Shortcutsareavailableforallusers
4.1.2Removing the MAX_PATH Limitation
Windows historically has limited path lengths to 260 characters. This meant that paths longer than this would not
resolveanderrorswouldresult.
44 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
InthelatestversionsofWindows,thislimitationcanbeexpandedtoapproximately32,000characters. Youradmin-
istrator will need to activate the “Enable Win32 long paths” group policy, or set LongPathsEnabled to1in the
registrykey HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem .
Thisallowsthe open()function,the osmoduleandmostotherpathfunctionalitytoacceptandreturnpathslonger
than260characters.
Afterchangingtheaboveoption,nofurtherconfigurationisrequired.
Changedinversion3.6: SupportforlongpathswasenabledinPython.
4.1.3Installing Without UI
All of the options available in the installer UI can also be specified from the command line, allowing scripted in-
stallerstoreplicateaninstallationonmanymachineswithoutuserinteraction. Theseoptionsmayalsobesetwithout
suppressingtheUIinordertochangesomeofthedefaults.
Thefollowingoptions(foundbyexecutingtheinstallerwith /?)canbepassedintotheinstaller:
Name Description
/passive todisplayprogresswithoutrequiringuserinteraction
/quiet toinstall/uninstallwithoutdisplayinganyUI
/simple topreventusercustomization
/uninstall toremovePython(withoutconfirmation)
/layout[directory] topre-downloadallcomponents
/log[filename] tospecifylogfileslocation
Allotheroptionsarepassedas name=value ,wherethevalueisusually 0todisableafeature, 1toenableafeature,
orapath. Thefulllistofavailableoptionsisshownbelow.
4.1. The full installer 45
Python Setup and Usage, Release 3.13.0
Name Description Default
InstallAl-
lUsersPerform a system-wide installa-
tion.0
TargetDir Theinstallationdirectory SelectedbasedonInstallAllUsers
Default-
AllUser-
sTarget-
DirThe default installation directory
forall-userinstalls%ProgramFiles%\Python X.Y or
%ProgramFiles(x86)%\Python X.Y
De-
faultJust-
ForMeTar-
getDirThe default install directory for
just-for-meinstalls%LocalAppData%\Programs\Python\PythonXY or
%LocalAppData%\Programs\Python\PythonXY-32 or
%LocalAppData%\Programs\Python\PythonXY-64
Default-
Custom-
Target-
DirThe default custom install direc-
torydisplayedintheUI(empty)
Associ-
ateFilesCreate file associations if the
launcherisalsoinstalled.1
Com-
pileAllCompileall .pyfilesto .pyc.0
Prepend-
PathPrepend install and Scripts direc-
tories to PATHand add .PYto
PATHEXT0
Append-
PathAppend install and Scripts direc-
tories to PATHand add .PYto
PATHEXT0
Shortcuts Create shortcuts for the inter-
preter,documentationandIDLEif
installed.1
In-
clude_docInstallPythonmanual 1
In-
clude_debugInstalldebugbinaries 0
In-
clude_devInstall developer headers and li-
braries. Omittingthismayleadto
anunusableinstallation.1
In-
clude_exeInstall python.exe and related
files. Omittingthismayleadtoan
unusableinstallation.1
In-
clude_launcherInstall Python Launcher for Win-
dows.1
Install-
Launcher-
AllUsersInstalls the launcher for
all users. Also requires
Include_launcher to be
setto11
In-
clude_libInstall standard library and exten-
sion modules. Omitting this may
leadtoanunusableinstallation.1
In-
clude_pipInstallbundledpipandsetuptools 1
In-
clude_symbolsInstall debugging symbols ( *.
pdb)0
In-
clude_tcltkInstallTcl/TksupportandIDLE 1
In-
clude_testInstallstandardlibrarytestsuite 1
In-
clude_toolsInstallutilityscripts 1
LauncherOnly Only installs the launcher. This
willoverridemostotheroptions.0
Simple-
InstallDisablemostinstallUI 0
Sim-
pleIn-
stallDe-
scriptionAcustommessagetodisplaywhen
thesimplifiedinstallUIisused.(empty)46 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
Forexample,tosilentlyinstalladefault,system-widePythoninstallation,youcouldusethefollowingcommand(from
anelevatedcommandprompt):
python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0
ToallowuserstoeasilyinstallapersonalcopyofPythonwithoutthetestsuite,youcouldprovideashortcutwiththe
followingcommand. Thiswilldisplayasimplifiedinitialpageanddisallowcustomization:
python-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0
SimpleInstall=1 SimpleInstallDescription="Just for me, no test suite."
(Notethatomittingthelauncheralsoomitsfileassociations,andisonlyrecommendedforper-userinstallswhenthere
isalsoasystem-wideinstallationthatincludedthelauncher.)
The options listed above can also be provided in a file named unattend.xml alongside the executable. This file
specifies a list of options and values. When a value is provided as an attribute, it will be converted to a number if
possible. Values provided as element text are always left as strings. This example file sets the same options as the
previousexample:
<Options >
<Option Name= "InstallAllUsers" Value= "no" />
<Option Name= "Include_launcher" Value= "0" />
<Option Name= "Include_test" Value= "no" />
<Option Name= "SimpleInstall" Value= "yes" />
<Option Name= "SimpleInstallDescription" >Just for me, notest suite </Option>
</Options>
4.1.4Installing Without Downloading
AssomefeaturesofPythonarenotincludedintheinitialinstallerdownload,selectingthosefeaturesmayrequirean
internetconnection. Toavoidthisneed,allpossiblecomponentsmaybedownloadedon-demandtocreateacomplete
layoutthatwillnolongerrequireaninternetconnectionregardlessoftheselectedfeatures. Notethatthisdownload
maybebiggerthanrequired,butwherealargenumberofinstallationsaregoingtobeperformeditisveryusefulto
havealocallycachedcopy.
Execute the following command from Command Prompt to download all possible required files. Remember to
substitute python-3.9.0.exe fortheactualnameofyourinstaller, andtocreatelayoutsintheirowndirectories
toavoidcollisionsbetweenfileswiththesamename.
python-3.9.0.exe /layout [optional target directory]
Youmayalsospecifythe /quietoptiontohidetheprogressdisplay.
4.1.5Modifying an install
OncePythonhasbeeninstalled,youcanaddorremovefeaturesthroughtheProgramsandFeaturestoolthatispart
ofWindows. SelectthePythonentryandchoose“Uninstall/Change”toopentheinstallerinmaintenancemode.
“Modify”allowsyoutoaddorremovefeaturesbymodifyingthecheckboxes-unchangedcheckboxeswillnotinstall
orremoveanything. Someoptionscannotbechangedinthismode,suchastheinstalldirectory;tomodifythese,you
willneedtoremoveandthenreinstallPythoncompletely.
“Repair” will verify all the files that should be installed using the current settings and replace any that have been
removedormodified.
“Uninstall”willremovePythonentirely,withtheexceptionofthe Python Launcher for Windows ,whichhasitsown
entryinProgramsandFeatures.
4.1. The full installer 47
Python Setup and Usage, Release 3.13.0
4.1.6Installing Free-threaded Binaries
Addedinversion3.13: (Experimental)
®Note
Everything described in this section is considered experimental, and should be expected to change in future
releases.
Toinstallpre-builtbinarieswithfree-threadingenabled(see PEP 703),youshouldselect“Customizeinstallation”.
Thesecondpageofoptionsincludesthe“Downloadfree-threadedbinaries”checkbox.
Selecting this option will download and install additional binaries to the same location as the main Python install.
Themainexecutableiscalled python3.13t.exe , andotherbinarieseitherreceivea tsuffixorafullABIsuffix.
Pythonsourcefilesandbundledthird-partydependenciesaresharedwiththemaininstall.
Thefree-threadedversionisregisteredasaregularPythoninstallwiththetag 3.13t(witha -32or-arm64suffixas
normalforthoseplatforms). Thisallowstoolstodiscoverit,andforthe Python Launcher for Windows tosupport py.
exe -3.13t . Notethatthelauncherwillinterpret py.exe -3 (ora python3shebang)as“thelatest3.xinstall”,
which will prefer the free-threaded binaries over the regular ones, while py.exe -3.13 will not. If you use the
shortstyleofoption,youmayprefertonotinstallthefree-threadedbinariesatthistime.
Tospecifytheinstalloptionatthecommandline,use Include_freethreaded=1 . See Installing Without Down-
loadingforinstructionsonpre-emptivelydownloadingtheadditionalbinariesforofflineinstall. Theoptionstoinclude
debugsymbolsandbinariesalsoapplytothefree-threadedbuilds.
Free-threadedbinariesarealsoavailable on nuget.org .
4.2The Microsoft Store package
Addedinversion3.7.2.
TheMicrosoftStorepackageisaneasilyinstallablePythoninterpreterthatisintendedmainlyforinteractiveuse,for
example,bystudents.
48 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
Toinstallthepackage,ensureyouhavethelatestWindows10updatesandsearchtheMicrosoftStoreappfor“Python
3.13”. EnsurethattheappyouselectispublishedbythePythonSoftwareFoundation,andinstallit.
ÁWarning
Python will always be available for free on the Microsoft Store. If you are asked to pay for it, you have not
selectedthecorrectpackage.
Afterinstallation,PythonmaybelaunchedbyfindingitinStart. Alternatively,itwillbeavailablefromanyCommand
PromptorPowerShellsessionbytyping python. Further,pipandIDLEmaybeusedbytyping piporidle. IDLE
canalsobefoundinStart.
Allthreecommandsarealsoavailablewithversionnumbersuffixes,forexample,as python3.exe andpython3.
x.exeaswellas python.exe (where 3.xisthespecificversionyouwanttolaunch,suchas3.13). Open“Manage
App Execution Aliases” through Start to select which version of Python is associated with each command. It is
recommendedtomakesurethat pipandidleareconsistentwithwhicheverversionof pythonisselected.
Virtualenvironmentscanbecreatedwith python -m venv andactivatedandusedasnormal.
IfyouhaveinstalledanotherversionofPythonandaddedittoyour PATHvariable,itwillbeavailableas python.exe
ratherthantheonefromtheMicrosoftStore. Toaccessthenewinstallation,use python3.exe orpython3.x.exe .
Thepy.exelauncherwilldetectthisPythoninstallation,butwillpreferinstallationsfromthetraditionalinstaller.
To remove Python, open Settings and use Apps and Features, or else find Python in Start and right-click to select
Uninstall. UninstallingwillremoveallpackagesyouinstalleddirectlyintothisPythoninstallation,butwillnotremove
anyvirtualenvironments
4.2.1Known issues
Redirection of local data, registry, and temporary paths
Because of restrictions on Microsoft Store apps, Python scripts may not have full write access to shared locations
suchas TEMPandtheregistry. Instead,itwillwritetoaprivatecopy. Ifyourscriptsmustmodifythesharedlocations,
youwillneedtoinstallthefullinstaller.
At runtime, Python will use a private copy of well-known Windows folders and the registry. For
example, if the environment variable %APPDATA% isc:\Users\<user>\AppData\ , then when writ-
ing to C:\Users\<user>\AppData\Local will write to C:\Users\<user>\AppData\Local\Packages\
PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\LocalCache\Local\ .
Whenreadingfiles,Windowswillreturnthefilefromtheprivatefolder,orifthatdoesnotexist,therealWindows
directory. Forexamplereading C:\Windows\System32 returnsthecontentsof C:\Windows\System32 plusthe
contentsof C:\Program Files\WindowsApps\package_name\VFS\SystemX86 .
Youcanfindtherealpathofanyexistingfileusing os.path.realpath() :
>>> import os
>>> test_file ='C:\\Users \\example \\AppData \\Local \\test.txt '
>>> os.path .realpath(test_file)
'C:\\Users\\example\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_
,→qbz5n2kfra8p0\\LocalCache\\Local\\test.txt'
WhenwritingtotheWindowsRegistry,thefollowingbehaviorsexist:
•Readingfrom HKLM\\Software isallowedandresultsaremergedwiththe registry.dat fileinthepack-
age.
•Writing to HKLM\\Software is not allowed if the corresponding key/value exists, i.e. modifying existing
keys.
•Writing to HKLM\\Software is allowed as long as a corresponding key/value does not exist in the package
andtheuserhasthecorrectaccesspermissions.
4.2. The Microsoft Store package 49
Python Setup and Usage, Release 3.13.0
For more detail on the technical basis for these limitations, please consult Microsoft’s documentation on packaged
full-trust apps, currently available at docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-
scenes
4.3The nuget.org packages
Addedinversion3.5.2.
The nuget.org package is a reduced size Python environment intended for use on continuous integration and build
systems that do not have a system-wide install of Python. While nuget is “the package manager for .NET”, it also
worksperfectlyfineforpackagescontainingbuild-timetools.
Visitnuget.orgforthemostup-to-dateinformationonusingnuget. Whatfollowsisasummarythatissufficientfor
Pythondevelopers.
Thenuget.exe command line tool may be downloaded directly from https://aka.ms/nugetclidl , for ex-
ample,usingcurlorPowerShell. Withthetool,thelatestversionofPythonfor64-bitor32-bitmachinesisinstalled
using:
nuget.exe install python -ExcludeVersion -OutputDirectory .
nuget.exe install pythonx86 -ExcludeVersion -OutputDirectory .
To select a particular version, add a -Version 3.x.y . The output directory may be changed from ., and the
package will be installed into a subdirectory. By default, the subdirectory is named the same as the package, and
withoutthe -ExcludeVersion optionthisnamewillincludethespecificversioninstalled. Insidethesubdirectory
isatoolsdirectorythatcontainsthePythoninstallation:
# Without -ExcludeVersion
>.\python.3.5.2\tools\python.exe -V
Python 3.5.2
# With -ExcludeVersion
>.\python\tools\python.exe -V
Python 3.5.2
In general, nuget packages are not upgradeable, and newer versions should be installed side-by-side and referenced
using the full path. Alternatively, delete the package directory manually and install it again. Many CI systems will
dothisautomaticallyiftheydonotpreservefilesbetweenbuilds.
Alongside the toolsdirectory is a build\native directory. This contains a MSBuild properties file python.
propsthatcanbeusedinaC++projecttoreferencethePythoninstall. Includingthesettingswillautomaticallyuse
theheadersandimportlibrariesinyourbuild.
The package information pages on nuget.org are www.nuget.org/packages/python for the 64-bit version,
www.nuget.org/packages/pythonx86 for the 32-bit version, and www.nuget.org/packages/pythonarm64 for the
ARM64version
4.3.1Free-threaded packages
Addedinversion3.13: (Experimental)
®Note
Everything described in this section is considered experimental, and should be expected to change in future
releases.
Packages containing free-threaded binaries are named python-freethreaded for the 64-bit version, pythonx86-
freethreaded forthe32-bitversion,and pythonarm64-freethreaded fortheARM64version. Thesepackagescontain
boththe python3.13t.exe andpython.exe entrypoints,bothofwhichrunfreethreaded.
50 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
4.4The embeddable package
Addedinversion3.5.
TheembeddeddistributionisaZIPfilecontainingaminimalPythonenvironment. Itisintendedforactingaspart
ofanotherapplication,ratherthanbeingdirectlyaccessedbyend-users.
Whenextracted,theembeddeddistributionis(almost)fullyisolatedfromtheuser’ssystem,includingenvironment
variables,systemregistrysettings,andinstalledpackages. Thestandardlibraryisincludedaspre-compiledandopti-
mized .pycfilesinaZIP,and python3.dll ,python37.dll ,python.exe andpythonw.exe areallprovided.
Tcl/tk(includingalldependents,suchasIdle),pipandthePythondocumentationarenotincluded.
®Note
The embedded distribution does not include the Microsoft C Runtime and it is the responsibility of the appli-
cation installer to provide this. The runtime may have already been installed on a user’s system previously or
automaticallyviaWindowsUpdate,andcanbedetectedbyfinding ucrtbase.dll inthesystemdirectory.
Third-partypackagesshouldbeinstalledbytheapplicationinstalleralongsidetheembeddeddistribution. Usingpip
tomanagedependenciesasforaregularPythoninstallationisnotsupportedwiththisdistribution,thoughwithsome
care it may be possible to include and use pip for automatic updates. In general, third-party packages should be
treated as part of the application (“vendoring”) so that the developer can ensure compatibility with newer versions
beforeprovidingupdatestousers.
Thetworecommendedusecasesforthisdistributionaredescribedbelow.
4.4.1Python Application
An application written in Python does not necessarily require users to be aware of that fact. The embedded dis-
tribution may be used in this case to include a private version of Python in an install package. Depending on how
transparentitshouldbe(orconversely,howprofessionalitshouldappear),therearetwooptions.
Usingaspecializedexecutableasalauncherrequiressomecoding,butprovidesthemosttransparentexperiencefor
users. With a customized launcher, there are no obvious indications that the program is running on Python: icons
canbecustomized,companyandversioninformationcanbespecified,andfileassociationsbehaveproperly. Inmost
cases,acustomlaunchershouldsimplybeabletocall Py_Mainwithahard-codedcommandline.
Thesimplerapproachistoprovideabatchfileorgeneratedshortcutthatdirectlycallsthe python.exe orpythonw.
exewith the required command-line arguments. In this case, the application will appear to be Python and not its
actualname,andusersmayhavetroubledistinguishingitfromotherrunningPythonprocessesorfileassociations.
Withthelatterapproach,packagesshouldbeinstalledasdirectoriesalongsidethePythonexecutabletoensurethey
are available on the path. With the specialized launcher, packages can be located in other locations as there is an
opportunitytospecifythesearchpathbeforelaunchingtheapplication.
4.4.2Embedding Python
Applicationswritteninnativecodeoftenrequiresomeformofscriptinglanguage,andtheembeddedPythondistri-
butioncanbeusedforthispurpose. Ingeneral,themajorityoftheapplicationisinnativecode,andsomepartwill
eitherinvoke python.exe ordirectlyuse python3.dll . Foreithercase,extractingtheembeddeddistributionto
asubdirectoryoftheapplicationinstallationissufficienttoprovidealoadablePythoninterpreter.
As with the application use, packages can be installed to any location as there is an opportunity to specify search
pathsbeforeinitializingtheinterpreter. Otherwise,thereisnofundamentaldifferencesbetweenusingtheembedded
distributionandaregularinstallation.
4.4. The embeddable package 51
Python Setup and Usage, Release 3.13.0
4.5Alternative bundles
BesidesthestandardCPythondistribution,therearemodifiedpackagesincludingadditionalfunctionality. Thefol-
lowingisalistofpopularversionsandtheirkeyfeatures:
ActivePython
Installerwithmulti-platformcompatibility,documentation,PyWin32
Anaconda
Popularscientificmodules(suchasnumpy,scipyandpandas)andthe condapackagemanager.
EnthoughtDeploymentManager
“TheNextGenerationPythonEnvironmentandPackageManager”.
PreviouslyEnthoughtprovidedCanopy,butit reachedendoflifein2016 .
WinPython
Windows-specificdistributionwithprebuiltscientificpackagesandtoolsforbuildingpackages.
NotethatthesepackagesmaynotincludethelatestversionsofPythonorotherlibraries,andarenotmaintainedor
supportedbythecorePythonteam.
4.6Configuring Python
TorunPythonconvenientlyfromacommandprompt,youmightconsiderchangingsomedefaultenvironmentvari-
ablesinWindows. WhiletheinstallerprovidesanoptiontoconfigurethePATHandPATHEXTvariablesforyou,
thisisonlyreliableforasingle,system-wideinstallation. IfyouregularlyusemultipleversionsofPython,consider
usingthe Python Launcher for Windows .
4.6.1Excursus: Setting environment variables
WindowsallowsenvironmentvariablestobeconfiguredpermanentlyatboththeUserlevelandtheSystemlevel,or
temporarilyinacommandprompt.
Totemporarilysetenvironmentvariables,openCommandPromptandusethe setcommand:
C:\> set PATH =C:\Program Files\Python 3.9; %PATH%
C:\> set PYTHONPATH =%PYTHONPATH% ;C:\My_python_lib
C:\> python
Thesechangeswillapplytoanyfurthercommandsexecutedinthatconsole,andwillbeinheritedbyanyapplications
startedfromtheconsole.
Including the variable name within percent signs will expand to the existing value, allowing you to add your new
valueateitherthestartortheend. Modifying PATHbyaddingthedirectorycontaining python.exe tothestartis
acommonwaytoensurethecorrectversionofPythonislaunched.
Topermanentlymodifythedefaultenvironmentvariables,clickStartandsearchfor‘editenvironmentvariables’,or
open System properties, Advanced system settings and click the Environment Variables button. In this dialog, you
canaddormodifyUserandSystemvariables. TochangeSystemvariables, youneednon-restrictedaccessto your
machine(i.e. Administratorrights).
®Note
WindowswillconcatenateUservariables afterSystemvariables,whichmaycauseunexpectedresultswhenmod-
ifying PATH.
ThePYTHONPATH variableisusedbyallversionsofPython, soyoushouldnotpermanentlyconfigureitunless
thelistedpathsonlyincludecodethatiscompatiblewithallofyourinstalledPythonversions.
52 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
µSeealso
https://learn.microsoft.com/windows/win32/procthread/environment-variables
OverviewofenvironmentvariablesonWindows
https://learn.microsoft.com/windows-server/administration/windows-commands/set_1
Thesetcommand,fortemporarilymodifyingenvironmentvariables
https://learn.microsoft.com/windows-server/administration/windows-commands/setx
Thesetxcommand,forpermanentlymodifyingenvironmentvariables
4.6.2Finding the Python executable
Changedinversion3.5.
BesidesusingtheautomaticallycreatedstartmenuentryforthePythoninterpreter,youmightwanttostartPython
inthecommandprompt. Theinstallerhasanoptiontosetthatupforyou.
Onthefirstpageoftheinstaller,anoptionlabelled“AddPythontoPATH”maybeselectedtohavetheinstalleradd
theinstalllocationintothe PATH.Thelocationofthe Scripts\ folderisalsoadded. Thisallowsyoutotype python
toruntheinterpreter,and pipforthepackageinstaller. Thus,youcanalsoexecuteyourscriptswithcommandline
options,see Command line documentation.
Ifyoudon’tenablethisoptionatinstalltime,youcanalwaysre-runtheinstaller,selectModify,andenableit. Alter-
natively,youcanmanuallymodifythe PATHusingthedirectionsin Excursus: Setting environment variables . Youneed
tosetyour PATHenvironmentvariabletoincludethedirectoryofyourPythoninstallation,delimitedbyasemicolon
fromotherentries. Anexamplevariablecouldlooklikethis(assumingthefirsttwoentriesalreadyexisted):
C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Python 3.9
4.7UTF-8 mode
Addedinversion3.7.
Windowsstilluseslegacyencodingsforthesystemencoding(theANSICodePage). Pythonusesitforthedefault
encodingoftextfiles(e.g. locale.getencoding() ).
ThismaycauseissuesbecauseUTF-8iswidelyusedontheinternetandmostUnixsystems,includingWSL(Windows
SubsystemforLinux).
YoucanusethePythonUTF-8ModetochangethedefaulttextencodingtoUTF-8. YoucanenablethePythonUTF-
8Modeviathe -X utf8commandlineoption,orthe PYTHONUTF8=1 environmentvariable. See PYTHONUTF8 for
enablingUTF-8mode,and Excursus: Setting environment variables forhowtomodifyenvironmentvariables.
When the Python UTF-8 Mode is enabled, you can still use the system encoding (the ANSI Code Page) via the
“mbcs”codec.
Note that adding PYTHONUTF8=1 to the default environment variables will affect all Python 3.7+ applications on
yoursystem. IfyouhaveanyPython3.7+applicationswhichrelyonthelegacysystemencoding,itisrecommended
tosettheenvironmentvariabletemporarilyorusethe -X utf8commandlineoption.
®Note
EvenwhenUTF-8modeisdisabled,PythonusesUTF-8bydefaultonWindowsfor:
•ConsoleI/OincludingstandardI/O(see PEP 528fordetails).
•Thefilesystem encoding (seePEP529fordetails).
4.7. UTF-8 mode 53
Python Setup and Usage, Release 3.13.0
4.8Python Launcher for Windows
Addedinversion3.3.
The Python launcher for Windows is a utility which aids in locating and executing of different Python versions. It
allowsscripts(orthecommand-line)toindicateapreferenceforaspecificPythonversion,andwilllocateandexecute
thatversion.
Unlikethe PATHvariable,thelauncherwillcorrectlyselectthemostappropriateversionofPython. Itwillpreferper-
userinstallationsoversystem-wideones,andordersbylanguageversionratherthanusingthemostrecentlyinstalled
version.
Thelauncherwasoriginallyspecifiedin PEP 397.
4.8.1Getting started
From the command-line
Changedinversion3.6.
System-wide installations of Python 3.3 and later will put the launcher on your PATH. The launcher is compatible
withallavailableversionsofPython, soitdoesnotmatterwhichversionisinstalled. Tocheckthatthelauncheris
available,executethefollowingcommandinCommandPrompt:
py
You should find that the latest version of Python you have installed is started - it can be exited as normal, and any
additionalcommand-lineargumentsspecifiedwillbesentdirectlytoPython.
If you have multiple versions of Python installed (e.g., 3.7 and 3.13) you will have noticed that Python 3.13 was
started-tolaunchPython3.7,trythecommand:
py -3.7
IfyouwantthelatestversionofPython2youhaveinstalled,trythecommand:
py -2
Ifyouseethefollowingerror,youdonothavethelauncherinstalled:
'py' is not recognized as an internal or external command,
operable program or batch file.
Thecommand:
py --list
displaysthecurrentlyinstalledversion(s)ofPython.
The-x.yargumentistheshortformofthe -V:Company/Tag argument,whichallowsselectingaspecificPython
runtime, including those that may have come from somewhere other than python.org. Any runtime registered by
following PEP514willbediscoverable. The --listcommandlistsallavailableruntimesusingthe -V:format.
When using the -V:argument, specifying the Company will limit selection to runtimes from that provider, while
specifyingonlytheTagwillselectfromallproviders. Notethatomittingtheslashimpliesatag:
# Select any '3.*' tagged runtime
py -V:3
# Select any 'PythonCore' released runtime
py -V:PythonCore/
(continuesonnextpage)
54 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
# Select PythonCore's latest Python 3 runtime
py -V:PythonCore/3
Theshortformoftheargument( -3)onlyeverselectsfromcorePythonreleases,andnototherdistributions. However,
thelongerform( -V:3)willselectfromany.
TheCompanyismatchedonthefullstring,case-insensitive. TheTagismatchedoneitherthefullstring,oraprefix,
provided the next character is a dot or a hyphen. This allows -V:3.1to match 3.1-32, but not 3.10. Tags are
sortedusingnumericalordering( 3.10isnewerthan 3.1), butarecomparedusingtext( -V:3.01doesnotmatch
3.1).
Virtual environments
Addedinversion3.5.
If the launcher is run with no explicit Python version specification, and a virtual environment (created with the
standardlibrary venvmoduleortheexternal virtualenv tool)active,thelauncherwillrunthevirtualenvironment’s
interpreter rather than the global one. To run the global interpreter, either deactivate the virtual environment, or
explicitlyspecifytheglobalPythonversion.
From a script
Let’screateatestPythonscript-createafilecalled hello.py withthefollowingcontents
#! python
import sys
sys.stdout .write( "hello from Python %s\n"%(sys .version,))
Fromthedirectoryinwhichhello.pylives,executethecommand:
py hello.py
YoushouldnoticetheversionnumberofyourlatestPython2.xinstallationisprinted. Nowtrychangingthefirstline
tobe:
#! python3
Re-executing the command should now print the latest Python 3.x information. As with the above command-line
examples, you can specify a more explicit version qualifier. Assuming you have Python 3.7 installed, try changing
thefirstlineto #! python3.7 andyoushouldfindthe3.7versioninformationprinted.
Note that unlike interactive use, a bare “python” will use the latest version of Python 2.x that you have installed.
ThisisforbackwardcompatibilityandforcompatibilitywithUnix,wherethecommand pythontypicallyrefersto
Python2.
From file associations
The launcher should have been associated with Python files (i.e. .py,.pyw,.pycfiles) when it was installed.
Thismeansthatwhenyoudouble-clickononeofthesefilesfromWindowsexplorerthelauncherwillbeused,and
thereforeyoucanusethesamefacilitiesdescribedabovetohavethescriptspecifytheversionwhichshouldbeused.
ThekeybenefitofthisisthatasinglelaunchercansupportmultiplePythonversionsatthesametimedependingon
thecontentsofthefirstline.
4.8.2Shebang Lines
If the first line of a script file starts with #!, it is known as a “shebang” line. Linux and other Unix like operating
systems have native support for such lines and they are commonly used on such systems to indicate how a script
should be executed. This launcher allows the same facilities to be used with Python scripts on Windows and the
examplesabovedemonstratetheiruse.
4.8. Python Launcher for Windows 55
Python Setup and Usage, Release 3.13.0
ToallowshebanglinesinPythonscriptstobeportablebetweenUnixandWindows,thislaunchersupportsanumber
of‘virtual’commandstospecifywhichinterpretertouse. Thesupportedvirtualcommandsare:
•/usr/bin/env
•/usr/bin/python
•/usr/local/bin/python
•python
Forexample,ifthefirstlineofyourscriptstartswith
#! /usr/bin/python
ThedefaultPythonoranactivevirtualenvironmentwillbelocatedandused. AsmanyPythonscriptswrittentowork
onUnixwillalreadyhavethisline,youshouldfindthesescriptscanbeusedbythelauncherwithoutmodification. If
youarewritinganewscriptonWindowswhichyouhopewillbeusefulonUnix,youshoulduseoneoftheshebang
linesstartingwith /usr.
Any of the above virtual commands can be suffixed with an explicit version (either just the major version, or the
majorandminorversion). Furthermorethe32-bitversioncanberequestedbyadding“-32”aftertheminorversion.
I.e./usr/bin/python3.7-32 willrequestusageofthe32-bitPython3.7. Ifavirtualenvironmentisactive,the
versionwillbeignoredandtheenvironmentwillbeused.
Addedinversion3.7: Beginningwithpythonlauncher3.7itispossibletorequest64-bitversionbythe“-64”suffix.
Furthermoreitispossibletospecifyamajorandarchitecturewithoutminor(i.e. /usr/bin/python3-64 ).
Changed in version 3.11: The “-64” suffix is deprecated, and now implies “any architecture that is not provably
i386/32-bit”. Torequestaspecificenvironment,usethenew -V:TAGargumentwiththecompletetag.
Changed in version 3.13: Virtual commands referencing pythonnow prefer an active virtual environment rather
thansearching PATH.Thishandlescaseswheretheshebangspecifies /usr/bin/env python3 butpython3.exe
isnotpresentintheactiveenvironment.
The/usr/bin/env formofshebanglinehasonefurtherspecialproperty. BeforelookingforinstalledPythoninter-
preters,thisformwillsearchtheexecutable PATHforaPythonexecutablematchingthenameprovidedasthefirstar-
gument. ThiscorrespondstothebehaviouroftheUnix envprogram,whichperformsa PATHsearch. Ifanexecutable
matchingthefirstargumentafterthe envcommandcannotbefound,buttheargumentstartswith python,itwillbe
handledasdescribedfortheothervirtualcommands. Theenvironmentvariable PYLAUNCHER_NO_SEARCH_PATH
maybeset(toanyvalue)toskipthissearchof PATH.
Shebang lines that do not match any of these patterns are looked up in the [commands] section of the launcher’s
.INI file. Thismaybeusedtohandlecertaincommandsinawaythatmakessenseforyoursystem. Thenameofthe
commandmustbeasingleargument(nospacesintheshebangexecutable),andthevaluesubstitutedisthefullpath
totheexecutable(additionalargumentsspecifiedinthe.INIwillbequotedaspartofthefilename).
[commands]
/bin/xpython =C:\Program Files\XPython\python.exe
Anycommandsnotfoundinthe.INIfilearetreatedas Windowsexecutablepathsthatareabsoluteorrelativetothe
directory containing the script file. This is a convenience for Windows-only scripts, such as those generated by an
installer, since the behavior is not compatible with Unix-style shells. These paths may be quoted, and may include
multiplearguments,afterwhichthepathtothescriptandanyadditionalargumentswillbeappended.
4.8.3Arguments in shebang lines
TheshebanglinescanalsospecifyadditionaloptionstobepassedtothePythoninterpreter. Forexample,ifyouhave
ashebangline:
#! /usr/bin/python -v
ThenPythonwillbestartedwiththe -voption
56 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
4.8.4Customization
Customization via INI files
Two .ini files will be searched by the launcher - py.iniin the current user’s application data directory
(%LOCALAPPDATA% or$env:LocalAppData ) and py.iniin the same directory as the launcher. The same .ini
filesareusedforboththe‘console’versionofthelauncher(i.e. py.exe)andforthe‘windows’version(i.e. pyw.exe).
Customizationspecifiedinthe“applicationdirectory”willhaveprecedenceovertheonenexttotheexecutable,soa
user, who may not have write access to the .ini file next to the launcher, can override commands in that global .ini
file.
Customizing default Python versions
Insomecases,aversionqualifiercanbeincludedinacommandtodictatewhichversionofPythonwillbeusedby
thecommand. Aversionqualifierstartswithamajorversionnumberandcanoptionallybefollowedbyaperiod(‘.’)
andaminorversionspecifier. Furthermoreitispossibletospecifyifa32or64bitimplementationshallberequested
byadding“-32”or“-64”.
Forexample,ashebanglineof #!python hasnoversionqualifier,while #!python3 hasaversionqualifierwhich
specifiesonlyamajorversion.
If no version qualifiers are found in a command, the environment variable PY_PYTHON can be set to specify the
defaultversionqualifier. Ifitisnotset,thedefaultis“3”. Thevariablecanspecifyanyvaluethatmaybepassedon
the command line, such as “3”, “3.7”, “3.7-32” or “3.7-64”. (Note that the “-64” option is only available with the
launcherincludedwithPython3.7ornewer.)
If no minor version qualifiers are found, the environment variable PY_PYTHON{major} (where {major}is the
currentmajorversionqualifierasdeterminedabove)canbesettospecifythefullversion. Ifnosuchoptionisfound,
thelauncherwillenumeratetheinstalledPythonversionsandusethelatestminorreleasefoundforthemajorversion,
whichislikely,althoughnotguaranteed,tobethemostrecentlyinstalledversioninthatfamily.
On64-bitWindowswithboth32-bitand64-bitimplementationsofthesame(major.minor)Pythonversioninstalled,
the 64-bit version will always be preferred. This will be true for both 32-bit and 64-bit implementations of the
launcher - a 32-bit launcher will prefer to execute a 64-bit Python installation of the specified version if available.
This is so the behavior of the launcher can be predicted knowing only what versions are installed on the PC and
without regard to the order in which they were installed (i.e., without knowing whether a 32 or 64-bit version of
Pythonandcorrespondinglauncherwasinstalledlast). Asnotedabove,anoptional“-32”or“-64”suffixcanbeused
onaversionspecifiertochangethisbehaviour.
Examples:
•If no relevant options are set, the commands pythonandpython2will use the latest Python 2.x version
installedandthecommand python3willusethelatestPython3.xinstalled.
•Thecommand python3.7 willnotconsultanyoptionsatallastheversionsarefullyspecified.
•IfPY_PYTHON=3 ,thecommands pythonandpython3willbothusethelatestinstalledPython3version.
•IfPY_PYTHON=3.7-32 ,thecommand pythonwillusethe32-bitimplementationof3.7whereasthecom-
mand python3willusethelatestinstalledPython(PY_PYTHONwasnotconsideredatallasamajorversion
wasspecified.)
•IfPY_PYTHON=3 andPY_PYTHON3=3.7 ,thecommands pythonandpython3willbothusespecifically3.7
Inadditiontoenvironmentvariables,thesamesettingscanbeconfiguredinthe.INIfileusedbythelauncher. The
sectionintheINIfileiscalled [defaults] andthekeynamewillbethesameastheenvironmentvariableswithout
theleading PY_prefix(andnotethatthekeynamesintheINIfilearecaseinsensitive.) Thecontentsofanenvironment
variablewilloverridethingsspecifiedintheINIfile.
Forexample:
•Setting PY_PYTHON=3.7 isequivalenttotheINIfilecontaining:
[defaults]
python =3.7
4.8. Python Launcher for Windows 57
Python Setup and Usage, Release 3.13.0
•Setting PY_PYTHON=3 andPY_PYTHON3=3.7 isequivalenttotheINIfilecontaining:
[defaults]
python =3
python3 =3.7
4.8.5Diagnostics
Ifanenvironmentvariable PYLAUNCHER_DEBUG isset(toanyvalue),thelauncherwillprintdiagnosticinformation
tostderr(i.e. totheconsole). Whilethisinformationmanagestobesimultaneouslyverbose andterse,itshouldallow
youtoseewhatversionsofPythonwerelocated, whyaparticularversionwaschosenandtheexactcommand-line
usedtoexecutethetargetPython. Itisprimarilyintendedfortestinganddebugging.
4.8.6Dry Run
If an environment variable PYLAUNCHER_DRYRUN is set (to any value), the launcher will output the command it
would have run, but will not actually launch Python. This may be useful for tools that want to use the launcher to
detectandthenlaunchPythondirectly. Notethatthecommandwrittentostandardoutputisalwaysencodedusing
UTF-8,andmaynotrendercorrectlyintheconsole.
4.8.7Install on demand
Ifanenvironmentvariable PYLAUNCHER_ALLOW_INSTALL isset(toanyvalue),andtherequestedPythonversion
isnotinstalledbutisavailableontheMicrosoftStore,thelauncherwillattempttoinstallit. Thismayrequireuser
interactiontocomplete,andyoumayneedtorunthecommandagain.
Anadditional PYLAUNCHER_ALWAYS_INSTALL variablecausesthelaunchertoalwaystrytoinstallPython,evenif
itisdetected. Thisismainlyintendedfortesting(andshouldbeusedwith PYLAUNCHER_DRYRUN ).
4.8.8Return codes
ThefollowingexitcodesmaybereturnedbythePythonlauncher. Unfortunately,thereisnowaytodistinguishthese
fromtheexitcodeofPythonitself.
Thenamesofcodesareasusedinthesources,andareonlyforreference. Thereisnowaytoaccessorresolvethem
apartfromreadingthispage. Entriesarelistedinalphabeticalorderofnames.
Name ValueDescription
RC_BAD_VENV_CFG 107Apyvenv.cfg wasfoundbutiscorrupt.
RC_CREATE_PROCESS 101FailedtolaunchPython.
RC_INSTALLING 111Aninstallwasstarted,butthecommandwillneedtobere-runafteritcom-
pletes.
RC_INTERNAL_ERROR 109Unexpectederror. Pleasereportabug.
RC_NO_COMMANDLINE 108Unabletoobtaincommandlinefromtheoperatingsystem.
RC_NO_PYTHON 103Unabletolocatetherequestedversion.
RC_NO_VENV_CFG 106Apyvenv.cfg wasrequiredbutnotfound.
4.9Finding modules
Thesenotessupplementthedescriptionatsys-path-initwithdetailedWindowsnotes.
Whenno ._pthfileisfound,thisishow sys.path ispopulatedonWindows:
•Anemptyentryisaddedatthestart,whichcorrespondstothecurrentdirectory.
•Iftheenvironmentvariable PYTHONPATH exists,asdescribedin Environment variables ,itsentriesareadded
next. NotethatonWindows,pathsinthisvariablemustbeseparatedbysemicolons,todistinguishthemfrom
thecolonusedindriveidentifiers( C:\etc.).
58 Chapter 4. Using Python on Windows
Python Setup and Usage, Release 3.13.0
•Additional “application paths” can be added in the registry as subkeys of \SOFTWARE\Python\
PythonCore{version}\PythonPath underboththe HKEY_CURRENT_USER andHKEY_LOCAL_MACHINE
hives. Subkeyswhichhavesemicolon-delimitedpathstringsastheirdefaultvaluewillcauseeachpathtobe
addedto sys.path . (NotethatallknowninstallersonlyuseHKLM,soHKCUistypicallyempty.)
•If the environment variable PYTHONHOME is set, it is assumed as “Python Home”. Otherwise, the path of
the main Python executable is used to locate a “landmark file” (either Lib\os.py orpythonXY.zip ) to
deducethe“PythonHome”. IfaPythonhomeisfound,therelevantsub-directoriesaddedto sys.path (Lib,
plat-win ,etc)arebasedonthatfolder. Otherwise,thecorePythonpathisconstructedfromthePythonPath
storedintheregistry.
•IfthePythonHomecannotbelocated,no PYTHONPATH isspecifiedintheenvironment,andnoregistryentries
canbefound,adefaultpathwithrelativeentriesisused(e.g. .\Lib;.\plat-win ,etc).
Ifapyvenv.cfg fileisfoundalongsidethemainexecutableorinthedirectoryonelevelabovetheexecutable,the
followingvariationsapply:
•Ifhomeis an absolute path and PYTHONHOME is not set, this path is used instead of the path to the main
executablewhendeducingthehomelocation.
Theendresultofallthisis:
•When running python.exe , or any other .exe in the main Python directory (either an installed version, or
directlyfromthePCbuilddirectory),thecorepathisdeduced,andthecorepathsintheregistryareignored.
Other“applicationpaths”intheregistryarealwaysread.
•WhenPythonishostedinanother.exe(differentdirectory,embeddedviaCOM,etc),the“PythonHome”will
notbededuced,sothecorepathfromtheregistryisused. Other“applicationpaths”intheregistryarealways
read.
•IfPythoncan’tfinditshomeandtherearenoregistryvalue(frozen.exe,someverystrangeinstallationsetup)
yougetapathwithsomedefault,butrelative,paths.
ForthosewhowanttobundlePythonintotheirapplicationordistribution,thefollowingadvicewillpreventconflicts
withotherinstallations:
•Include a ._pthfile alongside your executable containing the directories to include. This will ignore paths
listedintheregistryandenvironmentvariables,andalsoignore siteunless import site islisted.
•If you are loading python3.dll orpython37.dll in your own executable, explicitly set PyConfig.
module_search_paths before Py_InitializeFromConfig() .
•Clearand/oroverwrite PYTHONPATH andset PYTHONHOME beforelaunching python.exe fromyourappli-
cation.
•If you cannot use the previous suggestions (for example, you are a distribution that allows people to run
python.exe directly), ensure that the landmark file ( Lib\os.py ) exists in your install directory. (Note
thatitwillnotbedetectedinsideaZIPfile,butacorrectlynamedZIPfilewillbedetectedinstead.)
Thesewillensurethatthefilesinasystem-wideinstallationwillnottakeprecedenceoverthecopyofthestandard
librarybundledwithyourapplication. Otherwise,yourusersmayexperienceproblemsusingyourapplication. Note
thatthefirstsuggestionisthebest,astheothersmaystillbesusceptibletonon-standardpathsintheregistryanduser
site-packages.
Changedinversion3.6: Add ._pthfilesupportandremoves applocal optionfrom pyvenv.cfg .
Changedinversion3.6: Add python XX.zipasapotentiallandmarkwhendirectlyadjacenttotheexecutable.
Deprecatedsinceversion3.6: Modulesspecifiedintheregistryunder Modules(notPythonPath )maybeimported
byimportlib.machinery.WindowsRegistryFinder . ThisfinderisenabledonWindowsin3.6.0andearlier,
butmayneedtobeexplicitlyaddedto sys.meta_path inthefuture.
4.9. Finding modules 59
Python Setup and Usage, Release 3.13.0
4.10Additional modules
EventhoughPythonaimstobeportableamongallplatforms,therearefeaturesthatareuniquetoWindows. Acouple
ofmodules,bothinthestandardlibraryandexternal,andsnippetsexisttousethesefeatures.
TheWindows-specificstandardmodulesaredocumentedinmswin-specific-services.
4.10.1 PyWin32
ThePyWin32modulebyMarkHammondisacollectionofmodulesforadvancedWindows-specificsupport. This
includesutilitiesfor:
•ComponentObjectModel (COM)
•Win32APIcalls
•Registry
•Eventlog
•MicrosoftFoundationClasses (MFC)userinterfaces
PythonWin isasampleMFCapplicationshippedwithPyWin32. ItisanembeddableIDEwithabuilt-indebugger.
µSeealso
Win32HowDo I…?
byTimGolden
PythonandCOM
byDavidandPaulBoddie
4.10.2 cx_Freeze
cx_Freeze wraps Python scripts into executable Windows programs ( *.exefiles). When you have done this, you
candistributeyourapplicationwithoutrequiringyouruserstoinstallPython.
4.11Compiling Python on Windows
If you want to compile CPython yourself, first thing you should do is get the source. You can download either the
latestrelease’ssourceorjustgrabafresh checkout.
ThesourcetreecontainsabuildsolutionandprojectfilesforMicrosoftVisualStudio,whichisthecompilerusedto
buildtheofficialPythonreleases. Thesefilesareinthe PCbuilddirectory.
Check PCbuild/readme.txt forgeneralinformationonthebuildprocess.
Forextensionmodules,consultbuilding-on-windows.
4.12Other Platforms
WithongoingdevelopmentofPython,someplatformsthatusedtobesupportedearlierarenolongersupported(due
tothelackofusersordevelopers). Check PEP11fordetailsonallunsupportedplatforms.
•WindowsCE isnolongersupported sincePython3(ifiteverwas).
•TheCygwininstallerofferstoinstallthe Pythoninterpreter aswell
SeePythonforWindows fordetailedinformationaboutplatformswithpre-compiledinstallers.
60 Chapter 4. Using Python on Windows
CHAPTER
FIVE
USING PYTHON ON MACOS
ThisdocumentaimstogiveanoverviewofmacOS-specificbehavioryoushouldknowabouttogetstartedwithPython
onMaccomputers. PythononaMacrunningmacOSisverysimilartoPythononotherUnix-derivedplatforms,but
therearesomedifferencesininstallationandsomefeatures.
There are various ways to obtain and install Python for macOS. Pre-built versions of the most recent versions of
Pythonareavailablefromanumberofdistributors. MuchofthisdocumentdescribesuseofthePythonsprovided
bytheCPythonreleaseteamfordownloadfromthe python.orgwebsite . SeeAlternative Distributions forsomeother
options.
5.1Using Python for macOS from python.org
5.1.1Installation steps
ForcurrentPythonversions (otherthanthosein security status),thereleaseteamproducesa PythonformacOS
installerpackageforeachnewrelease. Alistofavailableinstallersisavailable here. Werecommendusingthemost
recentsupportedPythonversionwherepossible. Currentinstallersprovidea universal2binary buildofPythonwhich
runsnativelyonallMacs(AppleSiliconandIntel)thataresupportedbyawiderangeofmacOSversions,currently
typicallyfromatleast macOS10.13 HighSierra on.
ThedownloadedfileisastandardmacOSinstallerpackagefile( .pkg). Fileintegrityinformation(checksum,size,
sigstore signature, etc) for each file is included on the release download page. Installer packages and their contents
are signed and notarized with Python Software Foundation Apple Developer ID certificates to meet macOS
Gatekeeperrequirements .
For a default installation, double-click on the downloaded installer package file. This should launch the standard
macOSInstallerappanddisplaythefirstofseveralinstallerwindowssteps.
61
Python Setup and Usage, Release 3.13.0
Clickingonthe Continuebuttonbringsupthe ReadMeforthisinstaller. Besidesotherimportantinformation,the
ReadMedocumentswhichPythonversionisgoingtobeinstalledandonwhatversionsofmacOSitissupported. You
mayneedtoscrollthroughtoreadthewholefile. Bydefault,this ReadMewillalsobeinstalledin /Applications/
Python 3.13/ andavailabletoreadanytime.
62 Chapter 5. Using Python on macOS
Python Setup and Usage, Release 3.13.0
Clickingon ContinueproceedstodisplaythelicenseforPythonandforotherincludedsoftware. Youwillthenneed
toAgreetothelicensetermsbeforeproceedingtothenextstep. Thislicensefilewillalsobeinstalledandavailable
tobereadlater.
5.1. Using Python for macOS from python.org 63
Python Setup and Usage, Release 3.13.0
Afterthelicensetermsareaccepted,thenextstepisthe Installation Type display. Formostuses,thestandardset
ofinstallationoperationsisappropriate.
64 Chapter 5. Using Python on macOS
Python Setup and Usage, Release 3.13.0
Bypressingthe Customize button,youcanchoosetoomitorselectcertainpackagecomponentsoftheinstaller. Click
on each package name to see a description of what it installs. To also install support for the optional experimental
free-threadedfeature,see Installing Free-threaded Binaries .
5.1. Using Python for macOS from python.org 65
Python Setup and Usage, Release 3.13.0
Ineithercase,clicking Installwillbegintheinstallprocessbyaskingpermissiontoinstallnewsoftware. AmacOS
usernamewith Administrator privilegeisneededastheinstalledPythonwillbeavailabletoallusersoftheMac.
Whentheinstallationiscomplete,the Summary windowwillappear.
66 Chapter 5. Using Python on macOS
Python Setup and Usage, Release 3.13.0
Double-click on the Install Certificates.command icon or file in the /Applications/Python 3.13/
windowtocompletetheinstallation.
Thiswillopenatemporary Terminal shellwindowthatwillusethenewPythontodownloadandinstallSSLroot
certificatesforitsuse.
5.1. Using Python for macOS from python.org 67
Python Setup and Usage, Release 3.13.0
IfSuccessfully installed certifi andupdate complete appearsintheterminalwindow,theinstallation
iscomplete. Closethisterminalwindowandtheinstallerwindow.
Adefaultinstallwillinclude:
•APython 3.13 folderinyour Applications folder. Inhereyoufind IDLE,thedevelopmentenvironment
thatisastandardpartofofficialPythondistributions;and Python Launcher ,whichhandlesdouble-clicking
PythonscriptsfromthemacOS Finder.
•A framework /Library/Frameworks/Python.framework , which includes the Python executable and
libraries. Theinstalleraddsthislocationtoyourshellpath. TouninstallPython,youcanremovethesethree
things. SymlinkstothePythonexecutableareplacedin /usr/local/bin/ .
®Note
Recent versions of macOS include a python3command in /usr/bin/python3 that links to a usually older
and incomplete version of Python provided by and for use by the Apple development tools, Xcodeor the
Command Line Tools for Xcode . You should never modify or attempt to delete this installation, as it is
Apple-controlledandisusedbyApple-providedorthird-partysoftware. IfyouchoosetoinstallanewerPython
versionfrom python.org ,youwillhavetwodifferentbutfunctionalPythoninstallationsonyourcomputerthat
can co-exist. The default installer options should ensure that its python3will be used instead of the system
python3.
68 Chapter 5. Using Python on macOS
Python Setup and Usage, Release 3.13.0
5.1.2How to run a Python script
TherearetwowaystoinvokethePythoninterpreter. IfyouarefamiliarwithusingaUnixshellinaterminalwindow,
youcaninvoke python3.13 orpython3optionallyfollowedbyoneormorecommandlineoptions(describedin
Command line and environment ). ThePythontutorialalsohasausefulsectiononusingPythoninteractivelyfroma
shell.
Youcanalsoinvoketheinterpreterthroughanintegrateddevelopmentenvironment. idleisabasiceditorandinter-
preterenvironmentwhichisincludedwiththestandarddistributionofPython. IDLEincludesaHelpmenuthatallows
youtoaccessPythondocumentation. IfyouarecompletelynewtoPython,youcanreadthetutorialintroductionin
thatdocument.
TherearemanyothereditorsandIDEsavailable,see Editors and IDEs formoreinformation.
TorunaPythonscriptfilefromtheterminalwindow,youcaninvoketheinterpreterwiththenameofthescriptfile:
python3.13 myscript.py
TorunyourscriptfromtheFinder,youcaneither:
•Dragitto Python Launcher .
•Select Python Launcher asthedefaultapplicationtoopenyourscript(orany .pyscript)throughtheFinder
Info window and double-click it. Python Launcher has various preferences to control how your script is
launched. Option-draggingallowsyoutochangetheseforoneinvocation, oruseits Preferences menuto
changethingsglobally.
BeawarethatrunningthescriptdirectlyfromthemacOSFindermightproducedifferentresultsthanwhenrunning
from a terminal window as the script will not be run in the usual shell environment including any setting of envi-
ronment variables in shell profiles. And, as with any other script or program, be certain of what you are about to
run.
5.2Alternative Distributions
Besidesthestandard python.org formacOSinstaller,therearethird-partydistributionsformacOSthatmayinclude
additionalfunctionality. Somepopulardistributionsandtheirkeyfeatures:
ActivePython
Installerwithmulti-platformcompatibility,documentation
Anaconda
Popularscientificmodules(suchasnumpy,scipy,andpandas)andthe condapackagemanager.
Homebrew
PackagemanagerformacOSincludingmultipleversionsofPythonandmanythird-partyPython-basedpack-
ages(includingnumpy,scipy,andpandas).
MacPorts
Another package manager for macOS including multiple versions of Python and many third-party Python-
basedpackages. Mayincludepre-builtversionsofPythonandmanypackagesforolderversionsofmacOS.
Note that distributions might not include the latest versions of Python or other libraries, and are not maintained or
supportedbythecorePythonteam.
5.3Installing Additional Python Packages
Refertothe PythonPackagingUserGuide formoreinformation.
5.4GUI Programming
ThereareseveraloptionsforbuildingGUIapplicationsontheMacwithPython.
5.2. Alternative Distributions 69
Python Setup and Usage, Release 3.13.0
ThestandardPythonGUItoolkitis tkinter,basedonthecross-platformTktoolkit( https://www.tcl.tk ). AmacOS-
nativeversionofTkisincludedwiththeinstaller.
PyObjCis a Python binding to Apple’s Objective-C/Cocoa framework. Information on PyObjC is available from
pyobjc.
AnumberofalternativemacOSGUItoolkitsareavailableincluding:
•PySide: OfficialPythonbindingstothe QtGUItoolkit .
•PyQt: AlternativePythonbindingstoQt.
•Kivy: Across-platformGUItoolkitthatsupportsdesktopandmobileplatforms.
•Toga: Partofthe BeeWareProject ;supportsdesktop,mobile,webandconsoleapps.
•wxPython: Across-platformtoolkitthatsupportsdesktopoperatingsystems.
5.5Advanced Topics
5.5.1Installing Free-threaded Binaries
Addedinversion3.13: (Experimental)
®Note
Everything described in this section is considered experimental, and should be expected to change in future
releases.
Thepython.org Python for macOS installerpackagecanoptionallyinstallanadditionalbuildofPython3.13that
supportsPEP703,theexperimentalfree-threadingfeature(runningwiththe global interpreter lock disabled). Check
thereleasepageon python.org forpossibleupdatedinformation.
Becausethisfeatureisstillconsideredexperimental,thesupportforitisnotinstalledbydefault. Itispackagedasa
separateinstalloption,availablebyclickingthe Customize buttononthe Installation Type stepoftheinstalleras
describedabove.
70 Chapter 5. Using Python on macOS
Python Setup and Usage, Release 3.13.0
Iftheboxnexttothe Free-threadedPython packagenameischecked,aseparate PythonT.framework willalso
be installed alongside the normal Python.framework in/Library/Frameworks . This configuration allows a
free-threaded Python 3.13 build to co-exist on your system with a traditional (GIL only) Python 3.13 build with
minimal risk while installing or testing. This installation layout is itself experimental and is subject to change in
futurereleases.
Knowncautionsandlimitations:
•TheUNIXcommand-linetools package,whichisselectedbydefault,willinstalllinksin /usr/local/bin
forpython3.13t , the free-threaded interpreter, and python3.13t-config , a configuration utility which
maybeusefulforpackagebuilders. Since /usr/local/bin istypicallyincludedinyourshell PATH,inmost
casesnochangestoyour PATHenvironmentvariablesshouldbeneededtouse python3.13t .
•For this release, the Shell profile updater package and the Update Shell Profile.command in/
Applications/Python 3.13/ donotsupportthefree-threadedpackage.
•The free-threaded build and the traditional build have separate search paths and separate site-packages
directories so, by default, if you need a package available in both builds, it may need to be installed in both.
Thefree-threadedpackagewillinstallaseparateinstanceof pipforusewith python3.13t .
–Toinstallapackageusing pipwithouta venv:
python3.13t -m pip install <package_name>
•When working with multiple Python environments, it is usually safest and easiest to create and use virtual
environments. ThiscanavoidpossiblecommandnameconflictsandconfusionaboutwhichPythonisinuse:
python3.13t -m venv <venv_name>
thenactivate .
•Torunafree-threadedversionofIDLE:
python3.13t -m idlelib
5.5. Advanced Topics 71
Python Setup and Usage, Release 3.13.0
•Theinterpretersinbothbuildsrespondtothesame PYTHON environment variables whichmayhaveunexpected
results,forexample,ifyouhave PYTHONPATH setinashellprofile. Ifnecessary,thereare command line options
like-Etoignoretheseenvironmentvariables.
•The free-threaded build links to the third-party shared libraries, such as OpenSSLandTk, installed in the
traditional framework. This means that both builds also share one set of trust certificates as installed by the
Install Certificates.command script,thusitonlyneedstoberunonce.
•Ifyoucannotdependonthelinkin /usr/local/bin pointingtothe python.org free-threaded python3.
13t(for example, if you want to install your own version there or some other distribution does), you can
explicitlysetyourshell PATHenvironmentvariabletoincludethe PythonTframework bindirectory:
export PATH ="/Library/Frameworks/PythonT.framework/Versions/3.13/bin" :"$PATH "
The traditional framework installation by default does something similar, except for Python.framework .
Be aware that having both framework bindirectories in PATHcan lead to confusion if there are duplicate
nameslike python3.13 inboth; whichoneisactuallyuseddependsontheordertheyappearin PATH.The
which python3.x orwhich python3.xt commands can show which path is being used. Using virtual
environmentscanhelpavoidsuchambiguities. Anotheroptionmightbetocreateashell aliastothedesired
interpreter,like:
alias py3.13 ="/Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13
,→"
alias py3.13t ="/Library/Frameworks/PythonT.framework/Versions/3.13/bin/python3.
,→13t"
5.5.2Installing using the command line
Ifyouwanttouseautomationtoinstallthe python.org installerpackage(ratherthanbyusingthefamiliarmacOS
Installer GUI app), the macOS command line installer utility lets you select non-default options, too. If
you are not familiar with installer , it can be somewhat cryptic (see man installer for more information).
As an example, the following shell snippet shows one way to do it, using the 3.13.0b2 release and selecting the
free-threadedinterpreteroption:
RELEASE ="python-3.13.0b2-macos11.pkg"
# download installer pkg
curl -Ohttps://www.python.org/ftp/python/3.13.0/ ${RELEASE }
# create installer choicechanges to customize the install:
# enable the PythonTFramework-3.13 package
# while accepting the other defaults (install all other packages)
cat >./choicechanges.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/
,→PropertyList-1.0.dtd">
<plist version="1.0">
<array>
<dict>
<key>attributeSetting</key>
<integer>1</integer>
<key>choiceAttribute</key>
<string>selected</string>
<key>choiceIdentifier</key>
<string>org.python.Python.PythonTFramework-3.13</string>
</dict>
</array>
</plist>
EOF
(continuesonnextpage)
72 Chapter 5. Using Python on macOS
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
sudo installer -pkg ./${RELEASE }-applyChoiceChangesXML ./choicechanges.plist -
,→target /
Youcanthentestthatbothinstallerbuildsarenowavailablewithsomethinglike:
$# test that the free-threaded interpreter was installed if the Unix Command ␣
,→Tools package was enabled
$/usr/local/bin/python3.13t -VV
Python 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun 5 ␣
,→2024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)]
$# and the traditional interpreter
$/usr/local/bin/python3.13 -VV
Python 3.13.0b2 (v3.13.0b2:3a83b172af, Jun 5 2024, 12:50:24) [Clang 15.0.0 (clang-
,→1500.3.9.4)]
$# test that they are also available without the prefix if /usr/local/bin is on
,→$PATH
$python3.13t -VV
Python 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun 5 ␣
,→2024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)]
$python3.13 -VV
Python 3.13.0b2 (v3.13.0b2:3a83b172af, Jun 5 2024, 12:50:24) [Clang 15.0.0 (clang-
,→1500.3.9.4)]
®Note
Current python.org installersonlyinstalltofixedlocationslike /Library/Frameworks/ ,/Applications ,
and/usr/local/bin . Youcannotusethe installer -domainoptiontoinstalltootherlocations.
5.5.3Distributing Python Applications
ArangeoftoolsexistforconvertingyourPythoncodeintoastandalonedistributableapplication:
•py2app: SupportscreatingmacOS .appbundlesfromaPythonproject.
•Briefcase: Partofthe BeeWareProject ;across-platformpackagingtoolthatsupportscreationof .appbundles
onmacOS,aswellasmanagingsigningandnotarization.
•PyInstaller: Across-platformpackagingtoolthatcreatesasinglefileorfolderasadistributableartifact.
5.5.4App Store Compliance
AppssubmittedfordistributionthroughthemacOSAppStoremustpassApple’sappreviewprocess. Thisprocess
includesasetofautomatedvalidationrulesthatinspectthesubmittedapplicationbundleforproblematiccode.
ThePythonstandardlibrarycontainssomecodethatisknowntoviolatetheseautomatedrules. Whiletheseviolations
appeartobefalsepositives,Apple’sreviewrulescannotbechallenged. Therefore,itisnecessarytomodifythePython
standardlibraryforanapptopassAppStorereview.
The Python source tree contains a patch file that will remove all code that is known to cause issues with
the App Store review process. This patch is applied automatically when CPython is configured with the
--with-app-store-compliance option.
ThispatchisnotnormallyrequiredtouseCPythononaMac;norisitrequiredifyouaredistributinganapp outside
themacOSAppStore. Itis onlyrequiredifyouareusingthemacOSAppStoreasadistributionchannel.
5.5. Advanced Topics 73
Python Setup and Usage, Release 3.13.0
5.6Other Resources
Thepython.org Help page has links to many useful resources. The Pythonmac-SIG mailing list is another support
resourcespecificallyforPythonusersanddevelopersontheMac.
74 Chapter 5. Using Python on macOS
CHAPTER
SIX
USING PYTHON ON ANDROID
PythononAndroidisunlikePythonondesktopplatforms. Onadesktopplatform,Pythonisgenerallyinstalledasa
systemresourcethatcanbeusedbyanyuserofthatcomputer. UserstheninteractwithPythonbyrunninga python
executableandenteringcommandsataninteractiveprompt,orbyrunningaPythonscript.
OnAndroid,thereisnoconceptofinstallingasasystemresource. Theonlyunitofsoftwaredistributionisan“app”.
Thereisalsonoconsolewhereyoucouldruna pythonexecutable,orinteractwithaPythonREPL.
Asaresult,theonlywayyoucanusePythononAndroidisinembeddedmode–thatis,bywritinganativeAndroid
application,embeddingaPythoninterpreterusing libpython ,andinvokingPythoncodeusingthePythonembed-
dingAPI.ThefullPythoninterpreter,thestandardlibrary,andallyourPythoncodeisthenpackagedintoyourapp
foritsownprivateuse.
ThePythonstandardlibraryhassomenotableomissionsandrestrictionsonAndroid. SeetheAPIavailabilityguide
fordetails.
6.1Adding Python to an Android app
Theseinstructionsareonlyneededifyou’replanningtocompilePythonforAndroidyourself. Mostusersshould not
needtodothis. Instead,useoneofthefollowingtools,whichwillprovideamucheasierexperience:
•Briefcase,fromtheBeeWareproject
•Buildozer,fromtheKivyproject
•Chaquopy
•pyqtdeploy
•Termux
Ifyou’resureyouwanttodoallofthismanually,readon. Youcanusethe testbedapp asaguide;eachstepbelow
containsalinktotherelevantfile.
•BuildPythonbyfollowingtheinstructionsin Android/README.md .
•Addcodetoyour build.gradle filetocopythefollowingitemsintoyourproject. AllexceptyourownPython
codecanbecopiedfrom cross-build/HOST/prefix/lib :
–InyourJNIlibraries:
∗libpython*.*.so
∗lib*_python.so (externallibrariessuchasOpenSSL)
–Inyourassets:
∗python*.* (thePythonstandardlibrary)
∗python*.*/site-packages (yourownPythoncode)
•Addcodetoyourappto extracttheassetstothefilesystem .
•Addcodetoyourappto startPythoninembeddedmode . ThiswillneedtobeCcodecalledviaJNI.
75
Python Setup and Usage, Release 3.13.0
76 Chapter 6. Using Python on Android
CHAPTER
SEVEN
USING PYTHON ON IOS
Authors
RussellKeith-Magee(2024-03)
Python on iOS is unlike Python on desktop platforms. On a desktop platform, Python is generally installed as a
systemresourcethatcanbeusedbyanyuserofthatcomputer. UserstheninteractwithPythonbyrunninga python
executableandenteringcommandsataninteractiveprompt,orbyrunningaPythonscript.
On iOS, there is no concept of installing as a system resource. The only unit of software distribution is an “app”.
Thereisalsonoconsolewhereyoucouldruna pythonexecutable,orinteractwithaPythonREPL.
Asaresult,theonlywayyoucanusePythononiOSisinembeddedmode-thatis,bywritinganativeiOSapplication,
andembeddingaPythoninterpreterusing libPython ,andinvokingPythoncodeusingthePythonembeddingAPI.
ThefullPythoninterpreter, thestandardlibrary, andallyourPythoncodeisthenpackagedasastandalonebundle
thatcanbedistributedviatheiOSAppStore.
Ifyou’relookingtoexperimentforthefirsttimewithwritinganiOSappinPython,projectssuchas BeeWareand
Kivywill provide a much more approachable user experience. These projects manage the complexities associated
withgettinganiOSprojectrunning,soyouonlyneedtodealwiththePythoncodeitself.
7.1Python at runtime on iOS
7.1.1iOS version compatibility
The minimum supported iOS version is specified at compile time, using the --hostoption to configure . By
default, when compiled for iOS, Python will be compiled with a minimum supported iOS version of 13.0. To
use a different minimum iOS version, provide the version number as part of the --hostargument - for exam-
ple,--host=arm64-apple-ios15.4-simulator wouldcompileanARM64simulatorbuildwithadeployment
targetof15.4.
7.1.2Platform identification
When executing on iOS, sys.platform will report as ios. This value will be returned on an iPhone or iPad,
regardlessofwhethertheappisrunningonthesimulatororaphysicaldevice.
Informationaboutthespecificruntimeenvironment,includingtheiOSversion,devicemodel,andwhetherthedevice
isasimulator,canbeobtainedusing platform.ios_ver() .platform.system() willreport iOSoriPadOS,
dependingonthedevice.
os.uname() reportskernel-leveldetails;itwillreportanameof Darwin.
7.1.3Standard library availability
ThePythonstandardlibraryhassomenotableomissionsandrestrictionsoniOS.SeetheAPIavailabilityguidefor
iOSfordetails.
77
Python Setup and Usage, Release 3.13.0
7.1.4Binary extension modules
One notable difference about iOS as a platform is that App Store distribution imposes hard requirements on the
packagingofanapplication. Oneoftheserequirementsgovernshowbinaryextensionmodulesaredistributed.
TheiOSAppStorerequiresthat allbinarymodulesinaniOSappmustbedynamiclibraries,containedinaframework
withappropriatemetadata,storedinthe Frameworks folderofthepackagedapp. Therecanbeonlyasinglebinary
perframework,andtherecanbenoexecutablebinarymaterialoutsidethe Frameworks folder.
ThisconflictswiththeusualPythonapproachfordistributingbinaries,whichallowsabinaryextensionmoduletobe
loadedfromanylocationon sys.path . ToensurecompliancewithAppStorepolicies,aniOSprojectmustpost-
processanyPythonpackages,converting .sobinarymodulesintoindividualstandaloneframeworkswithappropriate
metadata and signing. For details on how to perform this post-processing, see the guide for adding Python to your
project.
TohelpPythondiscoverbinariesintheirnewlocation,theoriginal .sofileon sys.path isreplacedwitha .fwork
file. Thisfileisatextfilecontainingthelocationoftheframeworkbinary, relativetotheappbundle. Toallowthe
framework to resolve back to the original location, the framework must contain a .originfile that contains the
locationofthe .fworkfile,relativetotheappbundle.
Forexample,considerthecaseofanimport from foo.bar import _whiz ,where _whizisimplementedwith
the binary module sources/foo/bar/_whiz.abi3.so , with sourcesbeing the location registered on sys.
path, relative to the application bundle. This module mustbe distributed as Frameworks/foo.bar._whiz.
framework/foo.bar._whiz (creating the framework name from the full import path of the module), with an
Info.plist file in the .framework directory identifying the binary as a framework. The foo.bar._whiz
module would be represented in the original location with a sources/foo/bar/_whiz.abi3.fwork marker
file, containing the path Frameworks/foo.bar._whiz/foo.bar._whiz . The framework would also contain
Frameworks/foo.bar._whiz.framework/foo.bar._whiz.origin ,containingthepathtothe .fworkfile.
WhenrunningoniOS,thePythoninterpreterwillinstallan AppleFrameworkLoader thatisabletoreadandimport
.fworkfiles. Onceimported,the __file__ attributeofthebinarymodulewillreportasthelocationofthe .fwork
file. However, the ModuleSpec for the loaded module will report the originas the location of the binary in the
frameworkfolder.
7.1.5Compiler stub binaries
Xcodedoesn’texposeexplicitcompilersforiOS;instead,itusesan xcrunscriptthatresolvestoafullcompilerpath
(e.g., xcrun --sdk iphoneos clang togetthe clangforaniPhonedevice). However,usingthisscriptposes
twoproblems:
•Theoutputof xcrunincludespathsthataremachinespecific,resultinginasysconfigmodulethatcannotbe
sharedbetweenusers;and
•Itresultsin CC/CPP/LD/ARdefinitionsthatincludespaces. ThereisalotofCecosystemtoolingthatassumes
thatyoucansplitacommandlineatthefirstspacetogetthepathtothecompilerexecutable;thisisn’tthecase
whenusing xcrun.
Toavoidtheseproblems,Pythonprovidedstubsforthesetools. Thesestubsareshellscriptwrappersaroundtheun-
deringly xcruntools,distributedina binfolderdistributedalongsidethecompilediOSframework. Thesescripts
are relocatable, and will always resolve to the appropriate local system paths. By including these scripts in the bin
folderthataccompaniesaframework,thecontentsofthe sysconfig modulebecomesusefulforend-userstocom-
piletheirownmodules. Whencompilingthird-partyPythonmodulesforiOS,youshouldensurethesestubbinaries
areonyourpath.
7.2Installing Python on iOS
7.2.1Tools for building iOS apps
BuildingforiOSrequirestheuseofApple’sXcodetooling. Itisstronglyrecommendedthatyouusethemostrecent
stablereleaseofXcode. Thiswillrequiretheuseofthemost(orsecond-most)recentlyreleasedmacOSversion,as
Apple does not maintain Xcode for older macOS versions. The Xcode Command Line Tools are not sufficient for
iOSdevelopment;youneeda fullXcodeinstall.
78 Chapter 7. Using Python on iOS
Python Setup and Usage, Release 3.13.0
IfyouwanttorunyourcodeontheiOSsimulator,you’llalsoneedtoinstallaniOSSimulatorPlatform. Youshouldbe
promptedtoselectaniOSSimulatorPlatformwhenyoufirstrunXcode. Alternatively,youcanaddaniOSSimulator
PlatformbyselectingfromthePlatformstaboftheXcodeSettingspanel.
7.2.2Adding Python to an iOS project
PythoncanbeaddedtoanyiOSproject,usingeitherSwiftorObjectiveC.ThefollowingexampleswilluseObjective
C;ifyouareusingSwift,youmayfindalibrarylike PythonKit tobehelpful.
ToaddPythontoaniOSXcodeproject:
1.Build or obtain a Python XCFramework . See the instructions in iOS/README.rst (in the CPython
source distribution) for details on how to build a Python XCFramework . At a minimum, you will
need a build that supports arm64-apple-ios , plus one of either arm64-apple-ios-simulator or
x86_64-apple-ios-simulator .
2.Dragthe XCframework intoyouriOSproject. Inthefollowinginstructions,we’llassumeyou’vedroppedthe
XCframework intotherootofyourproject;however,youcanuseanyotherlocationthatyouwantbyadjusting
pathsasneeded.
3.Dragthe iOS/Resources/dylib-Info-template.plist fileintoyourproject,andensureitisassociated
withtheapptarget.
4.Add your application code as a folder in your Xcode project. In the following instructions, we’ll assume that
yourusercodeisinafoldernamed appintherootofyourproject;youcanuseanyotherlocationbyadjusting
pathsasneeded. Ensurethatthisfolderisassociatedwithyourapptarget.
5.SelecttheapptargetbyselectingtherootnodeofyourXcodeproject,thenthetargetnameinthesidebarthat
appears.
6.In the “General” settings, under “Frameworks, Libraries and Embedded Content”, add Python.
xcframework ,with“Embed&Sign”selected.
7.Inthe“BuildSettings”tab,modifythefollowing:
•BuildOptions
–UserScriptSandboxing: No
–EnableTestability: Yes
•SearchPaths
–FrameworkSearchPaths: $(PROJECT_DIR)
–HeaderSearchPaths: "$(BUILT_PRODUCTS_DIR)/Python.framework/Headers"
•AppleClang-Warnings-Alllanguages
–QuotedIncludeInFrameworkHeader: No
8.AddabuildstepthatcopiesthePythonstandardlibraryintoyourapp. Inthe“BuildPhases”tab, addanew
“Run Script” build step beforethe “Embed Frameworks” step, but afterthe “Copy Bundle Resources” step.
Namethestep“InstallTargetSpecificPythonStandardLibrary”,disablethe“Basedondependencyanalysis”
checkbox,andsetthescriptcontentto:
set -e
mkdir -p"$CODESIGNING_FOLDER_PATH /python/lib "
if["$EFFECTIVE_PLATFORM_NAME "="-iphonesimulator" ];then
echo "Installing Python modules for iOS Simulator"
rsync -au --delete "$PROJECT_DIR /Python.xcframework/ios-arm64_x86_64-
,→simulator/lib/ ""$CODESIGNING_FOLDER_PATH /python/lib/ "
else
echo "Installing Python modules for iOS Device"
rsync -au --delete "$PROJECT_DIR /Python.xcframework/ios-arm64/lib/ ""
(continuesonnextpage)
7.2. Installing Python on iOS 79
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
,→$CODESIGNING_FOLDER_PATH /python/lib/ "
fi
Notethatthenameofthesimulator“slice”intheXCframeworkmaybedifferent,dependingtheCPUarchi-
tecturesyour XCFramework supports.
9.Addasecondbuildstepthatprocessesthebinaryextensionmodulesinthestandardlibraryinto“Framework”
format. Adda“RunScript”buildstep directly after theoneyouaddedinstep8,named“PreparePythonBinary
Modules”. Itshouldalsohave“Basedondependencyanalysis”unchecked,withthefollowingscriptcontent:
set -e
install_dylib (){
INSTALL_BASE =$1
FULL_EXT =$2
# The name of the extension file
EXT=$(basename "$FULL_EXT ")
# The location of the extension file, relative to the bundle
RELATIVE_EXT =${FULL_EXT #$CODESIGNING_FOLDER_PATH /}
# The path to the extension file, relative to the install base
PYTHON_EXT =${RELATIVE_EXT /$INSTALL_BASE /}
# The full dotted name of the extension module, constructed from the file ␣
,→path.
FULL_MODULE_NAME =$(echo $PYTHON_EXT |cut -d"." -f1|tr"/" ".");
# A bundle identifier; not actually used, but required by Xcode framework ␣
,→packaging
FRAMEWORK_BUNDLE_ID =$(echo $PRODUCT_BUNDLE_IDENTIFIER .$FULL_MODULE_NAME |␣
,→tr"_" "-")
# The name of the framework folder.
FRAMEWORK_FOLDER ="Frameworks/ $FULL_MODULE_NAME .framework "
# If the framework folder doesn't exist, create it.
if[!-d"$CODESIGNING_FOLDER_PATH /$FRAMEWORK_FOLDER "];then
echo "Creating framework for $RELATIVE_EXT "
mkdir -p"$CODESIGNING_FOLDER_PATH /$FRAMEWORK_FOLDER "
cp"$CODESIGNING_FOLDER_PATH /dylib-Info-template.plist ""$CODESIGNING_
,→FOLDER_PATH /$FRAMEWORK_FOLDER /Info.plist "
plutil -replace CFBundleExecutable -string "$FULL_MODULE_NAME ""
,→$CODESIGNING_FOLDER_PATH /$FRAMEWORK_FOLDER /Info.plist "
plutil -replace CFBundleIdentifier -string "$FRAMEWORK_BUNDLE_ID ""
,→$CODESIGNING_FOLDER_PATH /$FRAMEWORK_FOLDER /Info.plist "
fi
echo "Installing binary for $FRAMEWORK_FOLDER /$FULL_MODULE_NAME "
mv"$FULL_EXT ""$CODESIGNING_FOLDER_PATH /$FRAMEWORK_FOLDER /$FULL_MODULE_
,→NAME "
# Create a placeholder .fwork file where the .so was
echo "$FRAMEWORK_FOLDER /$FULL_MODULE_NAME ">${FULL_EXT %.so }.fwork
# Create a back reference to the .so file location in the framework
echo "${RELATIVE_EXT %.so }.fwork ">"$CODESIGNING_FOLDER_PATH /$FRAMEWORK_
,→FOLDER /$FULL_MODULE_NAME .origin "
}
PYTHON_VER =$(ls-1"$CODESIGNING_FOLDER_PATH /python/lib ")
echo "Install Python $PYTHON_VER standard library extension modules... "
find "$CODESIGNING_FOLDER_PATH /python/lib/ $PYTHON_VER /lib-dynload "-name "*.so
(continuesonnextpage)
80 Chapter 7. Using Python on iOS
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
,→"|while read FULL_EXT; do
install_dylib python/lib/ $PYTHON_VER /lib-dynload/ "$FULL_EXT "
done
# Clean up dylib template
rm-f"$CODESIGNING_FOLDER_PATH /dylib-Info-template.plist "
echo "Signing frameworks as $EXPANDED_CODE_SIGN_IDENTITY_NAME ($EXPANDED_CODE_
,→SIGN_IDENTITY )... "
find "$CODESIGNING_FOLDER_PATH /Frameworks "-name "*.framework" -exec /usr/bin/
,→codesign --force --sign "$EXPANDED_CODE_SIGN_IDENTITY "${OTHER_CODE_SIGN_
,→FLAGS :-}-oruntime --timestamp =none --preserve-metadata =identifier,
,→entitlements,flags --generate-entitlement-der "{}" \;
10.AddObjectiveCcodetoinitializeanduseaPythoninterpreterinembeddedmode. Youshouldensurethat:
•UTF-8 mode isenabled;
•Buffered stdio isdisabled;
•Writing bytecode isdisabled;
•Signal handlers areenabled;
•PYTHONHOME fortheinterpreterisconfiguredtopointatthe pythonsubfolderofyourapp’sbun-
dle;and
•ThePYTHONPATH fortheinterpreterincludes:
–thepython/lib/python3.X subfolderofyourapp’sbundle,
–thepython/lib/python3.X/lib-dynload subfolderofyourapp’sbundle,and
–theappsubfolderofyourapp’sbundle
Yourapp’sbundlelocationcanbedeterminedusing [[NSBundle mainBundle] resourcePath] .
Steps8,9and10oftheseinstructionsassumethatyouhaveasinglefolderofpurePythonapplicationcode,named
app. Ifyouhavethird-partybinarymodulesinyourapp,someadditionalstepswillberequired:
•You need to ensure that any folders containing third-party binaries are either associated with the app target,
orcopiedinaspartofstep8. Step8shouldalsopurgeanybinariesthatarenotappropriatefortheplatforma
specificbuildistargeting(i.e.,deleteanydevicebinariesifyou’rebuildinganapptargetingthesimulator).
•Anyfoldersthatcontainthird-partybinariesmustbeprocessedintoframeworkformbystep9. Theinvocation
ofinstall_dylib thatprocessesthe lib-dynload foldercanbecopiedandadaptedforthispurpose.
•If you’re using a separate folder for third-party packages, ensure that folder is included as part of the
PYTHONPATH configurationinstep10.
7.3App Store Compliance
Theonlymechanismfordistributingappstothird-partyiOSdevicesistosubmittheapptotheiOSAppStore;apps
submittedfordistributionmustpassApple’sappreviewprocess. Thisprocessincludesasetofautomatedvalidation
rulesthatinspectthesubmittedapplicationbundleforproblematiccode.
ThePythonstandardlibrarycontainssomecodethatisknowntoviolatetheseautomatedrules. Whiletheseviolations
appear to be false positives, Apple’s review rules cannot be challenged; so, it is necessary to modify the Python
standardlibraryforanapptopassAppStorereview.
The Python source tree contains a patch file that will remove all code that is known to cause issues with the App
Storereviewprocess. ThispatchisappliedautomaticallywhenbuildingforiOS.
7.3. App Store Compliance 81
Python Setup and Usage, Release 3.13.0
82 Chapter 7. Using Python on iOS
CHAPTER
EIGHT
EDITORS AND IDES
There are a number of IDEs that support Python programming language. Many editors and IDEs provide syntax
highlighting,debuggingtools,and PEP8checks.
Pleasegoto PythonEditors andIntegratedDevelopmentEnvironments foracomprehensivelist.
83
Python Setup and Usage, Release 3.13.0
84 Chapter 8. Editors and IDEs
APPENDIX
A
GLOSSARY
>>>
The default Python prompt of the interactive shell. Often seen for code examples which can be executed
interactivelyintheinterpreter.
...
Canreferto:
•The default Python prompt of the interactive shell when entering the code for an indented code block,
when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or
triplequotes),orafterspecifyingadecorator.
•TheEllipsis built-inconstant.
abstractbase class
Abstractbaseclassescomplement duck-typing byprovidingawaytodefineinterfaceswhenothertechniques
likehasattr() wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual
subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and
issubclass() ;seethe abcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-
tures (in the collections.abc module), numbers (in the numbersmodule), streams (in the iomodule),
import finders and loaders (in the importlib.abc module). You can create your own ABCs with the abc
module.
annotation
Alabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention
asatype hint.
Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-
tributes, and functions are stored in the __annotations__ special attribute of modules, classes, and func-
tions,respectively.
Seevariable annotation ,function annotation ,PEP484andPEP526,whichdescribethisfunctionality. Also
seeannotations-howtoforbestpracticesonworkingwithannotations.
argument
Avaluepassedtoa function(ormethod)whencallingthefunction. Therearetwokindsofargument:
•keyword argument : anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa
valueinadictionaryprecededby **. Forexample, 3and5arebothkeywordargumentsinthefollowing
callsto complex() :
complex (real =3, imag =5)
complex (**{'real ':3,'imag ':5})
•positional argument : anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe
beginningofanargumentlistand/orbepassedaselementsofan iterableprecededby *. Forexample, 3
and5arebothpositionalargumentsinthefollowingcalls:
complex (3,5)
complex (*(3,5))
85
Python Setup and Usage, Release 3.13.0
Arguments are assigned to the named local variables in a function body. See the calls section for the rules
governingthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument; theevaluated
valueisassignedtothelocalvariable.
Seealsothe parameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
andPEP 362.
asynchronouscontextmanager
Anobjectwhichcontrolstheenvironmentseeninan async with statementbydefining __aenter__() and
__aexit__() methods. Introducedby PEP492.
asynchronousgenerator
A function which returns an asynchronous generator iterator . It looks like a coroutine function defined with
async def except that it contains yieldexpressions for producing a series of values usable in an async
forloop.
Usually refers to an asynchronous generator function, but may refer to an asynchronous generator iterator in
somecontexts. Incaseswheretheintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
Anasynchronousgeneratorfunctionmaycontain awaitexpressionsaswellas async for ,and async with
statements.
asynchronousgeneratoriterator
Anobjectcreatedbya asynchronous generator function.
Thisisan asynchronous iterator whichwhencalledusingthe __anext__() methodreturnsanawaitableobject
whichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe asynchronous generator iterator effectivelyresumeswithanother
awaitablereturnedby __anext__() ,itpicksupwhereitleftoff. See PEP492andPEP 525.
asynchronousiterable
An object, that can be used in an async for statement. Must return an asynchronous iterator from its
__aiter__() method. Introducedby PEP 492.
asynchronousiterator
An object that implements the __aiter__() and__anext__() methods. __anext__() must return an
awaitableobject. async for resolves the awaitables returned by an asynchronous iterator’s __anext__()
methoduntilitraisesa StopAsyncIteration exception. Introducedby PEP492.
attribute
Avalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,
ifanobject ohasanattribute aitwouldbereferencedas o.a.
Itispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample
using setattr() , if the object allowsit. Such an attributewill not be accessibleusing a dotted expression,
andwouldinsteadneedtoberetrievedwith getattr() .
awaitable
An object that can be used in an awaitexpression. Can be a coroutineor an object with an __await__()
method. Seealso PEP 492.
BDFL
BenevolentDictatorForLife,a.k.a. GuidovanRossum ,Python’screator.
binary file
Afile objectabletoreadandwrite bytes-like objects . Examplesofbinaryfilesarefilesopenedinbinarymode
('rb','wb'or'rb+'),sys.stdin.buffer ,sys.stdout.buffer , andinstancesof io.BytesIO and
gzip.GzipFile .
Seealso text fileforafileobjectabletoreadandwrite strobjects.
borrowedreference
InPython’sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot
ownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection
canremovethelast strong reference totheobjectandsodestroyit.
86 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
Calling Py_INCREF() onthe borrowed reference isrecommendedtoconvertittoa strong reference in-place,
exceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. The Py_NewRef()
functioncanbeusedtocreateanew strong reference .
bytes-likeobject
An object that supports the bufferobjects and can export a C- contiguous buffer. This includes all bytes,
bytearray ,and array.array objects,aswellasmanycommon memoryview objects. Bytes-likeobjects
can be used for variousoperations that work withbinary data; these include compression, saving to a binary
file,andsendingoverasocket.
Someoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas“read-write
bytes-likeobjects”. Examplemutablebufferobjectsinclude bytearray anda memoryview ofabytearray .
Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”);
examplesoftheseinclude bytesanda memoryview ofabytesobject.
bytecode
Pythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython
interpreter. Thebytecodeisalsocachedin .pycfilessothatexecutingthesamefileisfasterthesecondtime
(recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a
virtual machine thatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare
notexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.
Alistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.
callable
Acallableisanobjectthatcanbecalled,possiblywithasetofarguments(see argument),withthefollowing
syntax:
callable (argument1, argument2, argumentN)
Afunction,andbyextensiona method,isacallable. Aninstanceofaclassthatimplementsthe __call__()
methodisalsoacallable.
callback
Asubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.
class
A template for creating user-defined objects. Class definitions normally contain method definitions which
operateoninstancesoftheclass.
classvariable
Avariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).
closurevariable
Afree variable referencedfroma nested scope thatisdefinedinanouterscoperatherthanbeingresolvedat
runtime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to
allowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.
Forexample,inthe innerfunctioninthefollowingcode,both xandprintarefree variables ,butonly xis
aclosure variable :
def outer ():
x=0
def inner ():
nonlocal x
x+=1
print (x)
return inner
Duetothe codeobject.co_freevars attribute(which,despiteitsname,onlyincludesthenamesofclosure
variablesratherthanlistingallreferencedfreevariables),themoregeneral free variable termissometimesused
evenwhentheintendedmeaningistoreferspecificallytoclosurevariables.
87
Python Setup and Usage, Release 3.13.0
complexnumber
Anextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand
animaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof -1),often
written iin mathematics or jin engineering. Python has built-in support for complex numbers, which are
writtenwiththislatternotation;theimaginarypartiswrittenwitha jsuffix,e.g., 3+1j. Togetaccesstocom-
plexequivalentsofthe mathmodule,use cmath. Useofcomplexnumbersisafairlyadvancedmathematical
feature. Ifyou’renotawareofaneedforthem,it’salmostcertainyoucansafelyignorethem.
context
Thistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:
•Thetemporarystateorenvironmentestablishedbya context manager viaa withstatement.
•The collection of keyvalue bindings associated with a particular contextvars.Context object and
accessedvia ContextVar objects. Alsosee context variable .
•Acontextvars.Context object. Alsosee current context .
contextmanagementprotocol
The__enter__() and__exit__() methodscalledbythe withstatement. See PEP343.
contextmanager
An object which implements the context management protocol and controls the environment seen in a with
statement. See PEP 343.
contextvariable
A variable whose value depends on which context is the current context . Values are accessed via
contextvars.ContextVar objects. Context variables are primarily used to isolate state between concur-
rentasynchronoustasks.
contiguous
Abufferisconsideredcontiguousexactlyifitiseither C-contiguous orFortran contiguous . Zero-dimensional
buffersareCandFortrancontiguous. Inone-dimensionalarrays, theitemsmustbelaidoutinmemorynext
toeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the
lastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous
arrays,thefirstindexvariesthefastest.
coroutine
Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at
anotherpoint. Coroutinescanbeentered, exited, andresumedatmanydifferentpoints. Theycanbeimple-
mentedwiththe async def statement. Seealso PEP492.
coroutinefunction
Afunctionwhichreturnsa coroutineobject. Acoroutinefunctionmaybedefinedwiththe async def state-
ment, and may contain await,async for , and async with keywords. These were introduced by PEP
492.
CPython
ThecanonicalimplementationofthePythonprogramminglanguage,asdistributedon python.org. Theterm
“CPython”isusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.
currentcontext
Thecontext(contextvars.Context object) that is currently used by ContextVar objects to access (get
or set) the values of context variables . Each thread has its own current context. Frameworks for executing
asynchronous tasks (see asyncio) associate each task with a context which becomes the current context
wheneverthetaskstartsorresumesexecution.
decorator
Afunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe @wrapper syntax.
Commonexamplesfordecoratorsare classmethod() andstaticmethod() .
Thedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-
alent:
88 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
def f(arg):
...
f=staticmethod (f)
@staticmethod
def f(arg):
...
The same concept exists for classes, but is less commonly used there. See the documentation for function
definitionsandclassdefinitionsformoreaboutdecorators.
descriptor
Anyobjectwhichdefinesthemethods __get__() ,__set__() ,or__delete__() . Whenaclassattribute
is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.bto get,
set or delete an attribute looks up the object named bin the class dictionary for a, but if bis a descriptor,
the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of
Pythonbecausetheyarethebasisformanyfeaturesincludingfunctions, methods, properties, classmethods,
staticmethods,andreferencetosuperclasses.
Formoreinformationaboutdescriptors’methods,seedescriptorsortheDescriptorHowToGuide.
dictionary
Anassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith __hash__()
and__eq__() methods. CalledahashinPerl.
dictionarycomprehension
A compact way to process all or part of the elements in an iterable and return a dictionary with the re-
sults. results = {n: n ** 2 for n in range(10)} generatesadictionarycontainingkey nmapped
tovalue n ** 2. Seecomprehensions.
dictionaryview
Theobjectsreturnedfrom dict.keys() ,dict.values() ,and dict.items() arecalleddictionaryviews.
They providea dynamicview onthe dictionary’sentries, whichmeans thatwhen thedictionary changes, the
view reflects these changes. To force the dictionary view to become a full list use list(dictview) . See
dict-views.
docstring
A string literal which appears as the first expression in a class, function or module. While ignored when the
suite is executed, it is recognized by the compiler and put into the __doc__attribute of the enclosing class,
function or module. Since it is available via introspection, it is the canonical place for documentation of the
object.
duck-typing
Aprogrammingstylewhichdoesnotlookatanobject’stypetodetermineifithastherightinterface;instead,
the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be
a duck.”) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility
by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (Note,
however, that duck-typing can be complemented with abstract base classes .) Instead, it typically employs
hasattr() testsor EAFPprogramming.
EAFP
Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of
valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is
characterizedbythepresenceofmany tryandexceptstatements. Thetechniquecontrastswiththe LBYL
stylecommontomanyotherlanguagessuchasC.
expression
Apieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof
expressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In
contrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealso statementswhich
cannotbeusedasexpressions,suchas while. Assignmentsarealsostatements,notexpressions.
89
Python Setup and Usage, Release 3.13.0
extensionmodule
AmodulewritteninCorC++,usingPython’sCAPItointeractwiththecoreandwithusercode.
f-string
String literals prefixed with 'f'or'F'are commonly called “f-strings” which is short for formatted string
literals. Seealso PEP 498.
fileobject
Anobjectexposingafile-orientedAPI(withmethodssuchas read()orwrite())toanunderlyingresource.
Dependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof
storageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).
Fileobjectsarealsocalled file-like objects orstreams.
There are actually three categories of file objects: raw binary files , buffered binary files andtext files. Their
interfaces are defined in the iomodule. The canonical way to create a file object is by using the open()
function.
file-likeobject
Asynonymfor file object.
filesystemencodinganderrorhandler
EncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto
theoperatingsystem.
Thefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding
failstoprovidethisguarantee,APIfunctionscanraise UnicodeError .
Thesys.getfilesystemencoding() andsys.getfilesystemencodeerrors() functions can be
usedtogetthefilesystemencodinganderrorhandler.
Thefilesystem encoding and error handler areconfiguredatPythonstartupbythe PyConfig_Read() func-
tion: see filesystem_encoding andfilesystem_errors membersof PyConfig .
Seealsothe locale encoding .
finder
Anobjectthattriestofindthe loaderforamodulethatisbeingimported.
Therearetwotypesoffinder: meta path finders forusewith sys.meta_path ,andpath entry finders foruse
withsys.path_hooks .
Seefinders-and-loadersand importlib formuchmoredetail.
floordivision
Mathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris //. Forexample,the
expression 11 // 4evaluates to 2in contrast to the 2.75returned by float true division. Note that (-11)
// 4is-3becausethatis -2.75rounded downward. SeePEP238.
free threading
AthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.
Thisisincontrasttothe global interpreter lock whichallowsonlyonethreadtoexecutePythonbytecodeata
time. See PEP703.
free variable
Formally, as defined in the language execution model, a free variable is any variable used in a namespace
whichisnotalocalvariableinthatnamespace. See closure variable foranexample. Pragmatically,duetothe
nameofthe codeobject.co_freevars attribute,thetermisalsosometimesusedasasynonymfor closure
variable.
function
Aseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormore argumentswhich
maybeusedintheexecutionofthebody. Seealso parameter,method,andthefunctionsection.
function annotation
Anannotation ofafunctionparameterorreturnvalue.
90 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
Function annotations are usually used for type hints: for example, this function is expected to take two int
argumentsandisalsoexpectedtohavean intreturnvalue:
def sum_two_numbers (a: int, b: int)->int:
return a+b
Functionannotationsyntaxisexplainedinsectionfunction.
Seevariable annotation andPEP 484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest
practicesonworkingwithannotations.
__future__
A future statement, from __future__ import <feature> , directs the compiler to compile the current
moduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The __future__
moduledocumentsthepossiblevaluesof feature. Byimportingthismoduleandevaluatingitsvariables,you
canseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:
>>> import __future__
>>> __future__ .division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
garbagecollection
Theprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference
countingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector
canbecontrolledusingthe gcmodule.
generator
A function which returns a generator iterator . It looks like a normal function except that it contains yield
expressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe
next()function.
Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where
theintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
generatoriterator
Anobjectcreatedbya generatorfunction.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe generator iterator resumes,itpicksupwhereitleftoff(incontrast
tofunctionswhichstartfreshoneveryinvocation).
generatorexpression
Anexpression that returns an iterator. It looks like a normal expression followed by a forclause defining a
loop variable, range, and an optional ifclause. The combined expression generates values for an enclosing
function:
>>> sum(i*ifor iinrange (10)) # sum of squares 0, 1, 4, ... 81
285
genericfunction
Afunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-
plementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.
Seealsothe single dispatch glossaryentry,the functools.singledispatch() decorator,and PEP 443.
generictype
Atypethat can be parameterized; typically a container class such as listordict. Used for type hintsand
annotations .
Formoredetails,seegenericaliastypes, PEP483,PEP484,PEP 585,andthe typingmodule.
GIL
Seeglobal interpreter lock .
91
Python Setup and Usage, Release 3.13.0
globalinterpreterlock
The mechanism used by the CPythoninterpreter to assure that only one thread executes Python bytecodeat
a time. This simplifies the CPython implementation by making the object model (including critical built-in
types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier
fortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor
machines.
However,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen
doingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen
doingI/O.
As of Python 3.13, the GIL can be disabled using the --disable-gil build configuration. After building
Pythonwiththisoption,codemustberunwith -X gil=0 oraftersettingthe PYTHON_GIL=0 environment
variable. This feature enables improved performance for multi-threaded applications and makes it easier to
usemulti-coreCPUsefficiently. Formoredetails,see PEP 703.
hash-basedpyc
Abytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto
determineitsvalidity. Seepyc-invalidation.
hashable
Anobjectis hashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa __hash__()
method), and can be compared to other objects (it needs an __eq__() method). Hashable objects which
compareequalmusthavethesamehashvalue.
Hashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe
hashvalueinternally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)
arenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.
Objectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except
withthemselves),andtheirhashvalueisderivedfromtheir id().
IDLE
AnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-
ronmentwhichshipswiththestandarddistributionofPython.
immortal
Immortal objects areaCPythonimplementationdetailintroducedin PEP 683.
If an object is immortal, its reference count is never modified, and therefore it is never deallocated while the
interpreterisrunning. Forexample, TrueandNoneareimmortalinCPython.
immutable
An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot
bealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein
placeswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.
importpath
Alistoflocations(or path entries )thataresearchedbythe path based finder formodulestoimport. During
import, this list of locations usually comes from sys.path , but for subpackages it may also come from the
parentpackage’s __path__ attribute.
importing
TheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.
importer
Anobjectthatbothfindsandloadsamodule;botha finderandloaderobject.
interactive
Pythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter
prompt, immediately execute them and see their results. Just launch pythonwith no arguments (possibly
by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect
modulesandpackages(remember help(x)). Formoreoninteractivemode,seetut-interac.
92 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
interpreted
Pythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause
ofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly
creating an executable which is then run. Interpreted languages typically have a shorter development/debug
cyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealso interactive.
interpretershutdown
Whenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated
resources, such as modules and various critical internal structures. It also makes several calls to the garbage
collector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-
cutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction
anymore(commonexamplesarelibrarymodulesorthewarningsmachinery).
The main reason for interpreter shutdown is that the __main__ module or the script being run has finished
executing.
iterable
An object capable of returning its members one at a time. Examples of iterables include all sequence types
(such as list,str, and tuple) and some non-sequence types like dict,file objects, and objects of any
classesyoudefinewithan __iter__() methodorwitha __getitem__() methodthatimplements sequence
semantics.
Iterables can be used in a forloop and in many other places where a sequence is needed ( zip(),map(),
…). Whenaniterableobjectispassed as anargumentto thebuilt-infunction iter(), itreturnsan iterator
fortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot
necessarytocall iter()ordealwithiteratorobjectsyourself. The forstatementdoesthatautomaticallyfor
you,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealso iterator,
sequence,andgenerator.
iterator
An object representing a stream of data. Repeated calls to the iterator’s __next__() method (or passing
ittothebuilt-infunction next())returnsuccessiveitemsinthestream. Whennomoredataareavailablea
StopIteration exceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls
toits __next__() methodjustraise StopIteration again. Iteratorsarerequiredtohavean __iter__()
methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces
whereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A
containerobject(suchasa list)producesafreshnewiteratoreachtimeyoupassittothe iter()function
oruseitina forloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused
inthepreviousiterationpass,makingitappearlikeanemptycontainer.
Moreinformationcanbefoundintypeiter.
CPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine
__iter__() . Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof
iteratoroperations.
keyfunction
Akeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,
locale.strxfrm() isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.
A number of tools in Python accept key functions to control how elements are ordered or grouped. They
include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq.
nlargest() ,and itertools.groupby() .
There are several ways to create a key function. For example. the str.lower() method can serve as a
key function for case insensitive sorts. Alternatively, a key function can be built from a lambdaexpression
suchas lambda r: (r[0], r[2]) . Also, operator.attrgetter() ,operator.itemgetter() ,and
operator.methodcaller() are three key function constructors. See the Sorting HOW TO for examples
ofhowtocreateandusekeyfunctions.
keywordargument
Seeargument.
93
Python Setup and Usage, Release 3.13.0
lambda
Ananonymousinlinefunctionconsistingofasingle expressionwhichisevaluatedwhenthefunctioniscalled.
Thesyntaxtocreatealambdafunctionis lambda [parameters]: expression
LBYL
Lookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This
stylecontrastswiththe EAFPapproachandischaracterizedbythepresenceofmany ifstatements.
In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the
looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can
failifanotherthreadremoves keyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved
withlocksorbyusingtheEAFPapproach.
list
Abuilt-inPython sequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist
sinceaccesstoelementsis O(1).
listcomprehension
Acompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result
= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generatesalistofstringscon-
tainingevenhexnumbers(0x..) intherangefrom0to255. The ifclauseisoptional. Ifomitted,allelements
inrange(256) areprocessed.
loader
Anobjectthatloadsamodule. Itmustdefineamethodnamed load_module() . Aloaderistypicallyreturned
byafinder. Seealso:
•finders-and-loaders
•importlib.abc.Loader
•PEP 302
localeencoding
On Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.
LC_CTYPE, new_locale) .
OnWindows,itistheANSIcodepage(ex: "cp1252" ).
OnAndroidandVxWorks,Pythonuses "utf-8"asthelocaleencoding.
locale.getencoding() canbeusedtogetthelocaleencoding.
Seealsothe filesystem encoding and error handler .
magicmethod
Aninformalsynonymfor special method .
mapping
A container object that supports arbitrary key lookups and implements the methods specified in the
collections.abc.Mapping orcollections.abc.MutableMapping abstract base classes. Exam-
ples include dict,collections.defaultdict ,collections.OrderedDict andcollections.
Counter.
metapathfinder
Afinderreturnedbyasearchof sys.meta_path . Metapathfindersarerelatedto, butdifferentfrom path
entry finders .
Seeimportlib.abc.MetaPathFinder forthemethodsthatmetapathfindersimplement.
metaclass
The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The
metaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-
gramming languages provide a default implementation. What makes Python special is that it is possible to
createcustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide
powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking
objectcreation,implementingsingletons,andmanyothertasks.
94 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
Moreinformationcanbefoundinmetaclasses.
method
Afunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod
willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self). See functionandnested scope .
methodresolutionorder
Method Resolution Order is the order in which base classes are searched for a member during lookup. See
python_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.
module
AnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary
Pythonobjects. ModulesareloadedintoPythonbytheprocessof importing.
Seealso package.
modulespec
Anamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceof importlib.
machinery.ModuleSpec .
Seealsomodule-specs.
MRO
Seemethod resolution order .
mutable
Mutableobjectscanchangetheirvaluebutkeeptheir id(). Seealso immutable.
namedtuple
Theterm“namedtuple”appliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare
alsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.
Several built-in types are named tuples, including the values returned by time.localtime() andos.
stat(). Anotherexampleis sys.float_info :
>>> sys.float_info[ 1] # indexed access
1024
>>> sys.float_info .max_exp # named field access
1024
>>> isinstance (sys .float_info, tuple ) # kind of tuple
True
Some named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be
created from a regular class definition that inherits from tupleand that defines named fields. Such a class
canbewrittenbyhand,oritcanbecreatedbyinheriting typing.NamedTuple ,orwiththefactoryfunction
collections.namedtuple() . The latter techniques also add some extra methods that may not be found
inhand-writtenorbuilt-innamedtuples.
namespace
The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,
global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support
modularitybypreventingnamingconflicts. Forinstance,thefunctions builtins.open andos.open() are
distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear
which module implements a function. For instance, writing random.seed() oritertools.islice()
makesitclearthatthosefunctionsareimplementedbythe randomanditertools modules,respectively.
namespace package
APEP 420 packagewhich serves only as a container for subpackages. Namespace packages may have no
physical representation, and specifically are not like a regular package because they have no __init__.py
file.
Seealso module.
nestedscope
The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another
95
Python Setup and Usage, Release 3.13.0
functioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference
andnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables
readandwritetotheglobalnamespace. The nonlocal allowswritingtoouterscopes.
new-styleclass
Old name for the flavor of classes now used for all class objects. In earlier Python versions, only
new-style classes could use Python’s newer, versatile features like __slots__ , descriptors, properties,
__getattribute__() ,classmethods,andstaticmethods.
object
Anydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany
new-style class .
optimizedscope
A scope where target local variable names are reliably known to the compiler when the code is compiled,
allowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,
coroutines, comprehensions, and generator expressions are optimized in this fashion. Note: most interpreter
optimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames
arerestrictedtooptimizedscopes.
package
A Python modulewhich can contain submodules or recursively, subpackages. Technically, a package is a
Pythonmodulewitha __path__ attribute.
Seealso regular package andnamespace package .
parameter
Anamedentityina function(ormethod)definitionthatspecifiesan argument(orinsomecases,arguments)
thatthefunctioncanaccept. Therearefivekindsofparameter:
•positional-or-keyword : specifiesanargumentthatcanbepassedeither positionally orasa keyword argu-
ment. Thisisthedefaultkindofparameter,forexample fooandbarinthefollowing:
def func (foo, bar =None ):...
•positional-only : specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters
canbedefinedbyincludinga /characterintheparameterlistofthefunctiondefinitionafterthem,for
example posonly1andposonly2inthefollowing:
def func (posonly1, posonly2, /, positional_or_keyword): ...
•keyword-only : specifies an argument that can be supplied only by keyword. Keyword-only parameters
canbedefinedbyincludingasinglevar-positionalparameterorbare *intheparameterlistofthefunction
definitionbeforethem,forexample kw_only1andkw_only2inthefollowing:
def func (arg, *, kw_only1, kw_only2): ...
•var-positional : specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition
toanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby
prependingtheparameternamewith *,forexample argsinthefollowing:
def func (*args, **kwargs): ...
•var-keyword : specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-
wordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending
theparameternamewith **,forexample kwargsintheexampleabove.
Parameters can specify both optional and required arguments, as well as default values for some optional
arguments.
Seealsothe argumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
theinspect.Parameter class,thefunctionsection,and PEP362.
96 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
pathentry
Asinglelocationonthe import path whichthe path based finder consultstofindmodulesforimporting.
pathentryfinder
Afinderreturned by a callable on sys.path_hooks (i.e. a path entry hook ) which knows how to locate
modulesgivena path entry.
Seeimportlib.abc.PathEntryFinder forthemethodsthatpathentryfindersimplement.
pathentryhook
Acallableonthe sys.path_hooks listwhichreturnsa path entry finder ifitknowshowtofindmoduleson
aspecific path entry.
pathbased finder
Oneofthedefault meta path finders whichsearchesan import path formodules.
path-likeobject
An object representing a file system path. A path-like object is either a strorbytesobject representing
a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike
protocol can be converted to a strorbytesfile system path by calling the os.fspath() function; os.
fsdecode() andos.fsencode() can be used to guarantee a strorbytesresult instead, respectively.
Introducedby PEP 519.
PEP
PythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,
ordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical
specificationandarationaleforproposedfeatures.
PEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity
input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is
responsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.
SeePEP 1.
portion
A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as
definedin PEP 420.
positionalargument
Seeargument.
provisionalAPI
A provisional API is one which has been deliberately excluded from the standard library’s backwards com-
patibility guarantees. While major changes to such interfaces are not expected, as long as they are marked
provisional, backwards incompatible changes (up to and including removal of the interface) may occur if
deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if
seriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.
Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every
attemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.
Thisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign
errorsforextendedperiodsoftime. See PEP411formoredetails.
provisionalpackage
Seeprovisional API .
Python3000
NicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe
distantfuture.) Thisisalsoabbreviated“Py3k”.
Pythonic
AnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan
implementing code using concepts common to other languages. For example, a common idiom in Python is
to loop over all elementsof an iterable using a forstatement. Many other languages don’thave this type of
construct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:
97
Python Setup and Usage, Release 3.13.0
for iinrange (len(food)):
print (food[i])
Asopposedtothecleaner,Pythonicmethod:
for piece infood:
print (piece)
qualified name
Adottednameshowingthe“path”fromamodule’sglobalscopetoaclass,functionormethoddefinedinthat
module, as defined in PEP 3155 . For top-level functions and classes, the qualified name is the same as the
object’sname:
>>> class C:
... class D:
... def meth (self ):
... pass
...
>>> C.__qualname__
'C'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth .__qualname__
'C.D.meth'
Whenusedtorefertomodules,the fully qualified name meanstheentiredottedpathtothemodule,including
anyparentpackages,e.g. email.mime.text :
>>> import email .mime .text
>>> email .mime .text .__name__
'email.mime.text'
referencecount
Thenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.
Some objects are immortaland have reference counts that are never modified, and therefore the objects are
never deallocated. Reference counting is generally not visible to Python code, but it is a key element of the
CPythonimplementation. Programmers can call the sys.getrefcount() function to return the reference
countforaparticularobject.
regularpackage
Atraditional package,suchasadirectorycontainingan __init__.py file.
Seealso namespace package .
REPL
Anacronymforthe“read–eval–printloop”,anothernameforthe interactiveinterpretershell.
__slots__
Adeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating
instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for
rarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.
sequence
Aniterablewhich supports efficient element access using integer indices via the __getitem__() special
method and defines a __len__() method that returns the length of the sequence. Some built-in sequence
typesare list,str,tuple,and bytes. Notethat dictalsosupports __getitem__() and__len__() ,
but is considered a mapping rather than a sequence because the lookups use arbitrary hashablekeys rather
thanintegers.
Thecollections.abc.Sequence abstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust
__getitem__() and__len__() ,adding count(),index(),__contains__() ,and __reversed__() .
98 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
Types that implement this expanded interface can be registered explicitly using register() . For more
documentationonsequencemethodsgenerally,seeCommonSequenceOperations.
setcomprehension
Acompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results
= {c for c in 'abracadabra' if c not in 'abc'} generatesthesetofstrings {'r', 'd'} . See
comprehensions.
singledispatch
Aformof generic function dispatchwheretheimplementationischosenbasedonthetypeofasingleargument.
slice
Anobjectusuallycontainingaportionofa sequence. Asliceiscreatedusingthesubscriptnotation, []with
colons between numbers when several are given, such as in variable_name[1:3:5] . The bracket (sub-
script)notationuses sliceobjectsinternally.
softdeprecated
A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The
APIremainsdocumentedandtested,butwillnotbeenhancedfurther.
Softdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.
SeePEP387: SoftDeprecation .
specialmethod
AmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such
methods have names starting and ending with double underscores. Special methods are documented in spe-
cialnames.
statement
Astatementispartofasuite(a“block”ofcode). Astatementiseitheran expressionoroneofseveralconstructs
withakeyword,suchas if,whileorfor.
statictype checker
An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See also
type hintsandthe typingmodule.
strongreference
In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the
reference. Thestrongreferenceistakenbycalling Py_INCREF() whenthereferenceiscreatedandreleased
withPy_DECREF() whenthereferenceisdeleted.
ThePy_NewRef() functioncanbeusedtocreateastrongreferencetoanobject. Usually,the Py_DECREF()
functionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking
onereference.
Seealso borrowed reference .
textencoding
AstringinPythonisasequenceofUnicodecodepoints(inrange U+0000–U+10FFFF ).Tostoreortransfer
astring,itneedstobeserializedasasequenceofbytes.
Serializingastringintoasequenceofbytesisknownas“encoding”,andrecreatingthestringfromthesequence
ofbytesisknownas“decoding”.
Thereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas“textencodings”.
textfile
Afile objectabletoreadandwrite strobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream
andhandlesthe text encoding automatically. Examplesoftextfilesarefilesopenedintextmode( 'r'or'w'),
sys.stdin ,sys.stdout ,andinstancesof io.StringIO .
Seealso binary file forafileobjectabletoreadandwrite bytes-like objects .
triple-quotedstring
Astringwhichisboundbythreeinstancesofeitheraquotationmark(”)oranapostrophe(‘). Whiletheydon’t
provide any functionality not available with single-quoted strings, they are useful for a number of reasons.
99
Python Setup and Usage, Release 3.13.0
Theyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines
withouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.
type
ThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject’stypeis
accessibleasits __class__ attributeorcanberetrievedwith type(obj) .
type alias
Asynonymforatype,createdbyassigningthetypetoanidentifier.
Typealiasesareusefulforsimplifying type hints. Forexample:
def remove_gray_shades (
colors: list [tuple [int,int,int]]) ->list [tuple [int,int,int]]:
pass
couldbemademorereadablelikethis:
Color =tuple [int,int,int]
def remove_gray_shades (colors: list [Color]) ->list [Color]:
pass
SeetypingandPEP484,whichdescribethisfunctionality.
type hint
Anannotation thatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn
value.
Type hints are optional and are not enforced by Python but they are useful to static type checkers . They can
alsoaidIDEswithcodecompletionandrefactoring.
Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using
typing.get_type_hints() .
SeetypingandPEP484,whichdescribethisfunctionality.
universalnewlines
Amannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix
end-of-lineconvention '\n',theWindowsconvention '\r\n',andtheoldMacintoshconvention '\r'. See
PEP278andPEP 3116,aswellas bytes.splitlines() foranadditionaluse.
variable annotation
Anannotation ofavariableoraclassattribute.
Whenannotatingavariableoraclassattribute,assignmentisoptional:
class C:
field: 'annotation '
Variableannotationsareusuallyusedfor type hints: forexamplethisvariableisexpectedtotake intvalues:
count: int =0
Variableannotationsyntaxisexplainedinsectionannassign.
Seefunction annotation ,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto
forbestpracticesonworkingwithannotations.
virtualenvironment
AcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade
PythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon
thesamesystem.
Seealso venv.
100 Appendix A. Glossary
Python Setup and Usage, Release 3.13.0
virtualmachine
Acomputerdefinedentirelyinsoftware. Python’svirtualmachineexecutesthe bytecodeemittedbythebyte-
codecompiler.
ZenofPython
ListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.
Thelistingcanbefoundbytyping“ import this ”attheinteractiveprompt.
101
Python Setup and Usage, Release 3.13.0
102 Appendix A. Glossary
APPENDIX
B
ABOUT THESE DOCUMENTS
Thesedocumentsaregeneratedfrom reStructuredText sourcesby Sphinx,adocumentprocessorspecificallywritten
forthePythondocumentation.
Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you
want to contribute, please take a look at the reporting-bugs page for information on how to do so. New volunteers
arealwayswelcome!
Manythanksgoto:
•FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandwriterofmuchofthecontent;
•theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;
•FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.
B.1Contributors to the Python Documentation
ManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.
SeeMisc/ACKS inthePythonsourcedistributionforapartiallistofcontributors.
ItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation
–ThankYou!
103
Python Setup and Usage, Release 3.13.0
104 Appendix B. About these documents
APPENDIX
C
HISTORY AND LICENSE
C.1History of the software
Pythonwascreatedintheearly1990s byGuidovanRossumatStichtingMathematischCentrum(CWI, see https:
//www.cwi.nl/ )intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython’sprincipalauthor,
althoughitincludesmanycontributionsfromothers.
In1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,see https:
//www.cnri.reston.va.us/ )inReston,Virginiawherehereleasedseveralversionsofthesoftware.
In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen Python-
Labsteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations(nowZopeCorporation;
seehttps://www.zope.org/ ). In2001, thePythonSoftwareFoundation(PSF,see https://www.python.org/psf/ )was
formed,anon-profitorganizationcreatedspecificallytoownPython-relatedIntellectualProperty. ZopeCorporation
isasponsoringmemberofthePSF.
AllPythonreleasesareOpenSource(see https://opensource.org/ fortheOpenSourceDefinition). Historically,most,
butnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.
Release Derivedfrom Year Owner GPLcompatible?
0.9.0thru1.2 n/a 1991-1995 CWI yes
1.3thru1.5.2 1.2 1995-1999 CNRI yes
1.6 1.5.2 2000 CNRI no
2.0 1.6 2000 BeOpen.com no
1.6.1 1.6 2001 CNRI no
2.1 2.0+1.6.1 2001 PSF no
2.0.1 2.0+1.6.1 2001 PSF yes
2.1.1 2.1+2.0.1 2001 PSF yes
2.1.2 2.1.1 2002 PSF yes
2.1.3 2.1.2 2002 PSF yes
2.2andabove 2.1.1 2001-now PSF yes
®Note
GPL-compatibledoesn’tmeanthatwe’redistributingPythonundertheGPL.AllPythonlicenses,unliketheGPL,
let you distribute a modified version without making your changes open source. The GPL-compatible licenses
makeitpossibletocombinePythonwithothersoftwarethatisreleasedundertheGPL;theothersdon’t.
ThankstothemanyoutsidevolunteerswhohaveworkedunderGuido’sdirectiontomakethesereleasespossible.
105
Python Setup and Usage, Release 3.13.0
C.2Terms and conditions for accessing or otherwise using Python
Pythonsoftwareanddocumentationarelicensedunderthe PSF License Agreement .
StartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF
LicenseAgreementandthe Zero-Clause BSD license .
Some software incorporated into Python is under different licenses. The licenses are listed with code falling under
thatlicense. See Licenses and Acknowledgements for Incorporated Software foranincompletelistoftheselicenses.
C.2.1PSF LICENSE AGREEMENT FOR PYTHON 3.13.0
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
the Individual or Organization ("Licensee") accessing and otherwise using Python
3.13.0 software in source or binary form and its associated documentation.
2. Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 3.13.0 alone or in any derivative
version, provided, however, that PSF's License Agreement and PSF's notice of
copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
Reserved" are retained in Python 3.13.0 alone or in any derivative version
prepared by Licensee.
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 3.13.0 or any part thereof, and wants to make the
derivative work available to others as provided herein, then Licensee hereby
agrees to include in any such work a brief summary of the changes made to Python
3.13.0.
4. PSF is making Python 3.13.0 available to Licensee on an "AS IS" basis.
PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF PYTHON 3.13.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.13.0
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.13.0, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. Nothing in this License Agreement shall be deemed to create any relationship
of agency, partnership, or joint venture between PSF and Licensee. This License
Agreement does not grant permission to use PSF trademarks or trade name in a
trademark sense to endorse or promote products or services of Licensee, or any
third party.
8. By copying, installing or otherwise using Python 3.13.0, Licensee agrees
to be bound by the terms and conditions of this License Agreement.
106 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
C.2.2BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
BEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
("Licensee") accessing and otherwise using this software in source or binary
form and its associated documentation ("the Software").
2. Subject to the terms and conditions of this BeOpen Python License Agreement,
BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
to reproduce, analyze, test, perform and/or display publicly, prepare derivative
works, distribute, and otherwise use the Software alone or in any derivative
version, provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee.
3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
ADVISED OF THE POSSIBILITY THEREOF.
5. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
6. This License Agreement shall be governed by and interpreted in all respects
by the law of the State of California, excluding conflict of law provisions.
Nothing in this License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between BeOpen and Licensee. This License
Agreement does not grant permission to use BeOpen trademarks or trade names in a
trademark sense to endorse or promote products or services of Licensee, or any
third party. As an exception, the "BeOpen Python" logos available at
http://www.pythonlabs.com/logos.html may be used according to the permissions
granted on that web page.
7. By copying, installing or otherwise using the software, Licensee agrees to be
bound by the terms and conditions of this License Agreement.
C.2.3CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
1. This LICENSE AGREEMENT is between the Corporation for National Research
Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
("CNRI"), and the Individual or Organization ("Licensee") accessing and
otherwise using Python 1.6.1 software in source or binary form and its
associated documentation.
2. Subject to the terms and conditions of this License Agreement, CNRI hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
(continuesonnextpage)
C.2. Terms and conditions for accessing or otherwise using Python 107
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
prepared by Licensee. Alternately, in lieu of CNRI's License Agreement,
Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
is made available subject to the terms and conditions in CNRI's License
Agreement. This Agreement together with Python 1.6.1 may be located on the
internet using the following unique, persistent identifier (known as a handle):
1895.22/1013. This Agreement may also be obtained from a proxy server on the
internet using the following URL: http://hdl.handle.net/1895.22/1013."
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
work available to others as provided herein, then Licensee hereby agrees to
include in any such work a brief summary of the changes made to Python 1.6.1.
4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis. CNRI
MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. This License Agreement shall be governed by the federal intellectual property
law of the United States, including without limitation the federal copyright
law, and, to the extent such U.S. federal law does not apply, by the law of the
Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
Notwithstanding the foregoing, with regard to derivative works based on Python
1.6.1 that incorporate non-separable material that was previously distributed
under the GNU General Public License (GPL), the law of the Commonwealth of
Virginia shall govern this License Agreement only as to issues arising under or
with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in
this License Agreement shall be deemed to create any relationship of agency,
partnership, or joint venture between CNRI and Licensee. This License Agreement
does not grant permission to use CNRI trademarks or trade name in a trademark
sense to endorse or promote products or services of Licensee, or any third
party.
8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
conditions of this License Agreement.
C.2.4CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands. All rights reserved.
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
(continuesonnextpage)
108 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.
STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
C.2.5ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCU-
MENTATION
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3Licenses and Acknowledgements for Incorporated Software
Thissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated
inthePythondistribution.
C.3.1Mersenne Twister
The_randomCextensionunderlyingthe randommoduleincludescodebasedonadownloadfrom http://www.math.
sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html . Thefollowingaretheverbatimcommentsfromthe
originalcode:
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.
Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 109
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
C.3.2Sockets
Thesocketmoduleusesthefunctions, getaddrinfo() ,andgetnameinfo() ,whicharecodedinseparatesource
filesfromtheWIDEProject, https://www.wide.ad.jp/ .
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
110 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
C.3.3Asynchronous socket services
Thetest.support.asynchat andtest.support.asyncore modulescontainthefollowingnotice:
Copyright 1996 by Sam Rushing
All Rights Reserved
Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.
SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
C.3.4Cookie management
Thehttp.cookies modulecontainsthefollowingnotice:
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
All Rights Reserved
Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3.5Execution tracing
Thetracemodulecontainsthefollowingnotice:
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err... reserved and offered to the public under the terms of the
Python 2.2 license.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 111
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com
Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke
Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.
Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
C.3.6UUencode and UUdecode functions
Theuucodeccontainsthefollowingnotice:
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
between ascii and binary. This results in a 1000-fold speedup. The C
version is still 5 times faster, though.
- Arguments more compliant with Python standard
112 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
C.3.7XML Remote Procedure Calls
Thexmlrpc.client modulecontainsthefollowingnotice:
The XML-RPC client interface is
Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh
By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:
Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
C.3.8test_epoll
Thetest.test_epoll modulecontainsthefollowingnotice:
Copyright (c) 2001-2006 Twisted Matrix Laboratories.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3. Licenses and Acknowledgements for Incorporated Software 113
Python Setup and Usage, Release 3.13.0
C.3.9Select kqueue
Theselectmodulecontainsthefollowingnoticeforthekqueueinterface:
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.10 SipHash24
Thefile Python/pyhash.c containsMarekMajkowski’implementationofDanBernstein’sSipHash24algorithm.
Itcontainsthefollowingnote:
<MIT License>
Copyright (c) 2013 Marek Majkowski <marek@popcount.org>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>
Original location:
https://github.com/majek/csiphash/
Solution inspired by code from:
Samuel Neves (supercop/crypto_auth/siphash24/little)
djb (supercop/crypto_auth/siphash24/little2)
Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
114 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
C.3.11 strtod and dtoa
Thefile Python/dtoa.c ,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,
is derived from the file of the same name by David M. Gay, currently available from https://web.archive.org/web/
20220517033456/http://www.netlib.org/fp/dtoa.c . The original file, as retrieved on March 16, 2009, contains the
followingcopyrightandlicensingnotice:
/****************************************************************
*
* The author of this software is David M. Gay.
*
* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
*
* Permission to use, copy, modify, and distribute this software for any
* purpose without fee is hereby granted, provided that this entire notice
* is included in all copies of any software which is or includes a copy
* or modification of this software and in all copies of the supporting
* documentation for such software.
*
* THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
*
***************************************************************/
C.3.12 OpenSSL
The modules hashlib,posixandssluse the OpenSSL library for added performance if made available by the
operatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL
libraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived
fromthat,theApacheLicensev2applies:
Apache License
Version 2.0, January 2004
https://www.apache.org/licenses/
TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
1. Definitions.
"License" shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.
"Licensor" shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.
"Legal Entity" shall mean the union of the acting entity and all
other entities that control, are controlled by, or are under common
control with that entity. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.
"You" (or "Your") shall mean an individual or Legal Entity
exercising permissions granted by this License.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 115
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
"Source" form shall mean the preferred form for making modifications,
including but not limited to software source code, documentation
source, and configuration files.
"Object" form shall mean any form resulting from mechanical
transformation or translation of a Source form, including but
not limited to compiled object code, generated documentation,
and conversions to other media types.
"Work" shall mean the work of authorship, whether in Source or
Object form, made available under the License, as indicated by a
copyright notice that is included in or attached to the work
(an example is provided in the Appendix below).
"Derivative Works" shall mean any work, whether in Source or Object
form, that is based on (or derived from) the Work and for which the
editorial revisions, annotations, elaborations, or other modifications
represent, as a whole, an original work of authorship. For the purposes
of this License, Derivative Works shall not include works that remain
separable from, or merely link (or bind by name) to the interfaces of,
the Work and Derivative Works thereof.
"Contribution" shall mean any work of authorship, including
the original version of the Work and any modifications or additions
to that Work or Derivative Works thereof, that is intentionally
submitted to Licensor for inclusion in the Work by the copyright owner
or by an individual or Legal Entity authorized to submit on behalf of
the copyright owner. For the purposes of this definition, "submitted"
means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems,
and issue tracking systems that are managed by, or on behalf of, the
Licensor for the purpose of discussing and improving the Work, but
excluding communication that is conspicuously marked or otherwise
designated in writing by the copyright owner as "Not a Contribution."
"Contributor" shall mean Licensor and any individual or Legal Entity
on behalf of whom a Contribution has been received by Licensor and
subsequently incorporated within the Work.
2. Grant of Copyright License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the
Work and such Derivative Works in Source or Object form.
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
(except as stated in this section) patent license to make, have made,
use, offer to sell, sell, import, and otherwise transfer the Work,
where such license applies only to those patent claims licensable
by such Contributor that are necessarily infringed by their
Contribution(s) alone or by combination of their Contribution(s)
with the Work to which such Contribution(s) was submitted. If You
(continuesonnextpage)
116 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work
or a Contribution incorporated within the Work constitutes direct
or contributory patent infringement, then any patent licenses
granted to You under this License for that Work shall terminate
as of the date such litigation is filed.
4. Redistribution. You may reproduce and distribute copies of the
Work or Derivative Works thereof in any medium, with or without
modifications, and in Source or Object form, provided that You
meet the following conditions:
(a) You must give any other recipients of the Work or
Derivative Works a copy of this License; and
(b) You must cause any modified files to carry prominent notices
stating that You changed the files; and
(c) You must retain, in the Source form of any Derivative Works
that You distribute, all copyright, patent, trademark, and
attribution notices from the Source form of the Work,
excluding those notices that do not pertain to any part of
the Derivative Works; and
(d) If the Work includes a "NOTICE" text file as part of its
distribution, then any Derivative Works that You distribute must
include a readable copy of the attribution notices contained
within such NOTICE file, excluding those notices that do not
pertain to any part of the Derivative Works, in at least one
of the following places: within a NOTICE text file distributed
as part of the Derivative Works; within the Source form or
documentation, if provided along with the Derivative Works; or,
within a display generated by the Derivative Works, if and
wherever such third-party notices normally appear. The contents
of the NOTICE file are for informational purposes only and
do not modify the License. You may add Your own attribution
notices within Derivative Works that You distribute, alongside
or as an addendum to the NOTICE text from the Work, provided
that such additional attribution notices cannot be construed
as modifying the License.
You may add Your own copyright statement to Your modifications and
may provide additional or different license terms and conditions
for use, reproduction, or distribution of Your modifications, or
for any such Derivative Works as a whole, provided Your use,
reproduction, and distribution of the Work otherwise complies with
the conditions stated in this License.
5. Submission of Contributions. Unless You explicitly state otherwise,
any Contribution intentionally submitted for inclusion in the Work
by You to the Licensor shall be under the terms and conditions of
this License, without any additional terms or conditions.
Notwithstanding the above, nothing herein shall supersede or modify
the terms of any separate license agreement you may have executed
with Licensor regarding such Contributions.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 117
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
6. Trademarks. This License does not grant permission to use the trade
names, trademarks, service marks, or product names of the Licensor,
except as required for reasonable and customary use in describing the
origin of the Work and reproducing the content of the NOTICE file.
7. Disclaimer of Warranty. Unless required by applicable law or
agreed to in writing, Licensor provides the Work (and each
Contributor provides its Contributions) on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied, including, without limitation, any warranties or conditions
of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
PARTICULAR PURPOSE. You are solely responsible for determining the
appropriateness of using or redistributing the Work and assume any
risks associated with Your exercise of permissions under this License.
8. Limitation of Liability. In no event and under no legal theory,
whether in tort (including negligence), contract, or otherwise,
unless required by applicable law (such as deliberate and grossly
negligent acts) or agreed to in writing, shall any Contributor be
liable to You for damages, including any direct, indirect, special,
incidental, or consequential damages of any character arising as a
result of this License or out of the use or inability to use the
Work (including but not limited to damages for loss of goodwill,
work stoppage, computer failure or malfunction, or any and all
other commercial damages or losses), even if such Contributor
has been advised of the possibility of such damages.
9. Accepting Warranty or Additional Liability. While redistributing
the Work or Derivative Works thereof, You may choose to offer,
and charge a fee for, acceptance of support, warranty, indemnity,
or other liability obligations and/or rights consistent with this
License. However, in accepting such obligations, You may act only
on Your own behalf and on Your sole responsibility, not on behalf
of any other Contributor, and only if You agree to indemnify,
defend, and hold each Contributor harmless for any liability
incurred by, or claims asserted against, such Contributor by reason
of your accepting any such warranty or additional liability.
END OF TERMS AND CONDITIONS
C.3.13 expat
Thepyexpat extension is built using an included copy of the expat sources unless the build is configured
--with-system-expat :
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
and Clark Cooper
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
(continuesonnextpage)
118 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.14 libffi
The_ctypesCextensionunderlyingthe ctypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless
thebuildisconfigured --with-system-libffi :
Copyright (c) 1996-2008 Red Hat, Inc and others.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
C.3.15 zlib
Thezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo
oldtobeusedforthebuild:
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler
This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 119
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
Jean-loup Gailly Mark Adler
jloup@gzip.org madler@alumni.caltech.edu
C.3.16 cfuhash
Theimplementationofthehashtableusedbythe tracemalloc isbasedonthecfuhashproject:
Copyright (c) 2005 Don Owens
All rights reserved.
This code is released under the BSD license:
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.
* Neither the name of the author nor the names of its
contributors may be used to endorse or promote products derived
from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
C.3.17 libmpdec
The_decimal Cextensionunderlyingthe decimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary
unlessthebuildisconfigured --with-system-libmpdec :
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.
Redistribution and use in source and binary forms, with or without
(continuesonnextpage)
120 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.18 W3C C14N test suite
TheC14N2.0testsuiteinthe testpackage( Lib/test/xmltestdata/c14n-20/ )wasretrievedfromtheW3C
websiteathttps://www.w3.org/TR/xml-c14n2-testcases/ andisdistributedunderthe3-clauseBSDlicense:
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of works must retain the original copyright notice,
this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
used to endorse or promote products derived from this work without
specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. Licenses and Acknowledgements for Incorporated Software 121
Python Setup and Usage, Release 3.13.0
C.3.19 mimalloc
MITLicense:
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
C.3.20 asyncio
Partsofthe asynciomoduleareincorporatedfrom uvloop0.16 ,whichisdistributedundertheMITlicense:
Copyright (c) 2015-2021 MagicStack Inc. http://magic.io
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.21 Global Unbounded Sequences (GUS)
The file Python/qsbr.c is adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation
schemeinsubr_smr.c . Thefileisdistributedunderthe2-ClauseBSDLicense:
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
(continuesonnextpage)
122 Appendix C. History and License
Python Setup and Usage, Release 3.13.0
(continuedfrompreviouspage)
are met:
1. Redistributions of source code must retain the above copyright
notice unmodified, this list of conditions, and the following
disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. Licenses and Acknowledgements for Incorporated Software 123
Python Setup and Usage, Release 3.13.0
124 Appendix C. History and License
APPENDIX
D
COPYRIGHT
Pythonandthisdocumentationis:
Copyright©2001-2024PythonSoftwareFoundation. Allrightsreserved.
Copyright©2000BeOpen.com. Allrightsreserved.
Copyright©1995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.
Copyright©1991-1995StichtingMathematischCentrum. Allrightsreserved.
SeeHistory and License forcompletelicenseandpermissionsinformation.
125
Python Setup and Usage, Release 3.13.0
126 Appendix D. Copyright
INDEX
Non-alphabetical
...,85
-?
command line option ,5
%APPDATA% ,49
>>>,85
__future__ ,91
__slots__ ,98
A
abstract base class ,85
annotation ,85
argument ,85
asynchronous context manager ,86
asynchronous generator ,86
asynchronous generator iterator ,86
asynchronous iterable ,86
asynchronous iterator ,86
attribute ,86
awaitable ,86
B
-B
command line option ,6
-b
command line option ,6
BDFL,86
binary file ,86
BOLT_APPLY_FLAGS
command line option ,30
BOLT_INSTRUMENT_FLAGS
command line option ,30
borrowed reference ,86
--build
command line option ,35
bytecode ,87
bytes-like object ,87
BZIP2_CFLAGS
command line option ,27
BZIP2_LIBS
command line option ,27
C
-c
command line option ,3
callable ,87callback ,87
CC
command line option ,27
C-contiguous ,88
CFLAGS,30,39,40
command line option ,27
CFLAGS_NODIST ,39,40
--check-hash-based-pycs
command line option ,6
class,87
class variable ,87
closure variable ,87
command line option
-?,5
-B,6
-b,6
BOLT_APPLY_FLAGS ,30
BOLT_INSTRUMENT_FLAGS ,30
--build,35
BZIP2_CFLAGS ,27
BZIP2_LIBS ,27
-c,3
CC,27
CFLAGS,27
--check-hash-based-pycs ,6
CONFIG_SITE ,36
CPP,27
CPPFLAGS ,27
CURSES_CFLAGS ,27
CURSES_LIBS ,27
-d,6
--disable-gil ,26
--disable-ipv6 ,24
--disable-test-modules ,29
-E,6
--enable-big-digits ,24
--enable-bolt ,30
--enable-experimental-jit ,27
--enable-framework ,35
--enable-loadable-sqlite-extensions ,
24
--enable-optimizations ,29
--enable-profiling ,31
--enable-pystats ,25
--enable-shared ,33
--enable-universalsdk ,34
127
Python Setup and Usage, Release 3.13.0
--enable-wasm-dynamic-linking ,29
--enable-wasm-pthreads ,29
--exec-prefix ,29
GDBM_CFLAGS ,27
GDBM_LIBS ,28
-h,5
--help,5
--help-all ,5
--help-env ,5
--help-xoptions ,5
--host,35
HOSTRUNNER ,36
-I,6
-i,6
-J,10
LDFLAGS,27
LIBB2_CFLAGS ,28
LIBB2_LIBS ,28
LIBEDIT_CFLAGS ,28
LIBEDIT_LIBS ,28
LIBFFI_CFLAGS ,28
LIBFFI_LIBS ,28
LIBLZMA_CFLAGS ,28
LIBLZMA_LIBS ,28
LIBMPDEC_CFLAGS ,28
LIBMPDEC_LIBS ,28
LIBREADLINE_CFLAGS ,28
LIBREADLINE_LIBS ,28
LIBS,27
LIBSQLITE3_CFLAGS ,28
LIBSQLITE3_LIBS ,28
LIBUUID_CFLAGS ,28
LIBUUID_LIBS ,28
-m,3
MACHDEP,27
-O,6
-OO,6
-P,6
PANEL_CFLAGS ,28
PANEL_LIBS ,28
PKG_CONFIG ,27
PKG_CONFIG_LIBDIR ,27
PKG_CONFIG_PATH ,27
--prefix ,29
-q,7
-R,7
-S,7
-s,7
TCLTK_CFLAGS ,28
TCLTK_LIBS ,28
-u,7
-V,5
-v,7
--version ,5
-W,7
--with-address-sanitizer ,32
--with-app-store-compliance ,35
--with-assertions ,32--with-build-python ,36
--with-builtin-hashlib-hashes ,34
--with-computed-gotos ,31
--with-dbmliborder ,25
--with-dtrace ,32
--with-emscripten-target ,29
--with-ensurepip ,29
--with-framework-name ,35
--with-hash-algorithm ,34
--with-libc ,33
--with-libm ,33
--with-libs ,33
--with-lto ,30
--with-memory-sanitizer ,32
--with-openssl ,33
--with-openssl-rpath ,34
--without-c-locale-coercion ,25
--without-decimal-contextvar ,24
--without-doc-strings ,31
--without-freelists ,25
--without-mimalloc ,31
--without-pymalloc ,31
--without-readline ,33
--without-static-libpython ,33
--with-pkg-config ,25
--with-platlibdir ,25
--with-pydebug ,32
--with-readline ,33
--with-ssl-default-suites ,34
--with-strict-overflow ,31
--with-suffix ,24
--with-system-expat ,33
--with-system-libmpdec ,33
--with-thread-sanitizer ,32
--with-trace-refs ,32
--with-tzpath ,24
--with-undefined-behavior-sanitizer ,
32
--with-universal-archs ,35
--with-valgrind ,32
--with-wheel-pkg-dir ,25
-X,8
-x,8
ZLIB_CFLAGS ,28
ZLIB_LIBS ,29
complex number ,88
CONFIG_SITE
command line option ,36
context,88
context management protocol ,88
context manager ,88
context variable ,88
contiguous ,88
coroutine ,88
coroutine function ,88
CPP
command line option ,27
CPPFLAGS ,38,41
128 Index
Python Setup and Usage, Release 3.13.0
command line option ,27
CPython,88
current context ,88
CURSES_CFLAGS
command line option ,27
CURSES_LIBS
command line option ,27
D
-d
command line option ,6
decorator ,88
descriptor ,89
dictionary ,89
dictionary comprehension ,89
dictionary view ,89
--disable-gil
command line option ,26
--disable-ipv6
command line option ,24
--disable-test-modules
command line option ,29
docstring ,89
duck-typing ,89
E
-E
command line option ,6
EAFP,89
--enable-big-digits
command line option ,24
--enable-bolt
command line option ,30
--enable-experimental-jit
command line option ,27
--enable-framework
command line option ,35
--enable-loadable-sqlite-extensions
command line option ,24
--enable-optimizations
command line option ,29
--enable-profiling
command line option ,31
--enable-pystats
command line option ,25
--enable-shared
command line option ,33
--enable-universalsdk
command line option ,34
--enable-wasm-dynamic-linking
command line option ,29
--enable-wasm-pthreads
command line option ,29
environment variable
%APPDATA% ,49
BASECFLAGS ,39
BASECPPFLAGS ,38
BLDSHARED ,41CC,39
CCSHARED ,39
CFLAGS,30,39,40
CFLAGS_ALIASING ,39
CFLAGS_NODIST ,39,40
CFLAGSFORSHARED ,39
COMPILEALL_OPTS ,39
CONFIGURE_CFLAGS ,39
CONFIGURE_CFLAGS_NODIST ,39
CONFIGURE_CPPFLAGS ,38
CONFIGURE_LDFLAGS ,40
CONFIGURE_LDFLAGS_NODIST ,40
CPPFLAGS ,38,41
CXX,39
EXTRA_CFLAGS ,39
LDFLAGS,38,40,41
LDFLAGS_NODIST ,40
LDSHARED ,41
LIBS,41
LINKCC,40
OPT,32,39
PATH,10,20,44,46,5254,56
PATHEXT,46
PROFILE_TASK ,30
PURIFY,40
PY_BUILTIN_MODULE_CFLAGS ,40
PY_CFLAGS ,40
PY_CFLAGS_NODIST ,40
PY_CORE_CFLAGS ,40
PY_CORE_LDFLAGS ,41
PY_CPPFLAGS ,38
PY_LDFLAGS ,41
PY_LDFLAGS_NODIST ,41
PY_PYTHON ,57
PY_STDMODULE_CFLAGS ,40
PYLAUNCHER_ALLOW_INSTALL ,58
PYLAUNCHER_ALWAYS_INSTALL ,58
PYLAUNCHER_DEBUG ,58
PYLAUNCHER_DRYRUN ,58
PYLAUNCHER_NO_SEARCH_PATH ,56
PYTHON_BASIC_REPL ,16
PYTHON_COLORS ,10,16
PYTHON_CPU_COUNT ,9,15
PYTHON_FROZEN_MODULES ,9,16
PYTHON_GIL ,10,16,92
PYTHON_HISTORY ,16
PYTHON_PERF_JIT_SUPPORT ,9,15
PYTHON_PRESITE ,10,16
PYTHONASYNCIODEBUG ,13
PYTHONBREAKPOINT ,11
PYTHONCASEOK ,11
PYTHONCOERCECLOCALE ,14,25
PYTHONDEBUG ,6,11,31
PYTHONDEVMODE ,9,15
PYTHONDONTWRITEBYTECODE ,6,12
PYTHONDUMPREFS ,16,32
PYTHONDUMPREFSFILE ,16
PYTHONEXECUTABLE ,12
Index 129
Python Setup and Usage, Release 3.13.0
PYTHONFAULTHANDLER ,8,13
PYTHONHASHSEED ,7,12
PYTHONHOME ,6,10,59
PYTHONINSPECT ,6,11
PYTHONINTMAXSTRDIGITS ,9,12
PYTHONIOENCODING ,12,14
PYTHONLEGACYWINDOWSFSENCODING ,14
PYTHONLEGACYWINDOWSSTDIO ,12,14
PYTHONMALLOC ,13,14,31
PYTHONMALLOCSTATS ,14
PYTHONNODEBUGRANGES ,9,15
PYTHONNOUSERSITE ,7,12
PYTHONOPTIMIZE ,6,11
PYTHONPATH ,6,10,11,52,58,59
PYTHONPERFSUPPORT ,9,15
PYTHONPLATLIBDIR ,11
PYTHONPROFILEIMPORTTIME ,9,13
PYTHONPYCACHEPREFIX ,9,12
PYTHONSAFEPATH ,7,11
PYTHONSTARTUP ,6,11
PYTHONTRACEMALLOC ,8,13
PYTHONUNBUFFERED ,7,11
PYTHONUSERBASE ,12
PYTHONUTF8 ,9,15,53
PYTHONVERBOSE ,7,11
PYTHONWARNDEFAULTENCODING ,9,15
PYTHONWARNINGS ,8,13
TEMP,49
--exec-prefix
command line option ,29
expression ,89
extension module ,90
F
f-string ,90
file object ,90
file-like object ,90
filesystem encoding and error handler ,90
finder,90
floor division ,90
Fortran contiguous ,88
free threading ,90
free variable ,90
function ,90
function annotation ,90
G
garbage collection ,91
GDBM_CFLAGS
command line option ,27
GDBM_LIBS
command line option ,28
generator ,91
generator expression ,91
generator iterator ,91
generic function ,91
generic type ,91
GIL,91global interpreter lock ,92
H
-h
command line option ,5
hash-based pyc ,92
hashable ,92
--help
command line option ,5
--help-all
command line option ,5
--help-env
command line option ,5
--help-xoptions
command line option ,5
--host
command line option ,35
HOSTRUNNER
command line option ,36
I
-I
command line option ,6
-i
command line option ,6
IDLE,92
immortal ,92
immutable ,92
import path ,92
importer ,92
importing ,92
interactive ,92
interpreted ,93
interpreter shutdown ,93
iterable ,93
iterator ,93
J
-J
command line option ,10
K
key function ,93
keyword argument ,93
L
lambda,94
LBYL,94
LDFLAGS,38,40,41
command line option ,27
LDFLAGS_NODIST ,40
LIBB2_CFLAGS
command line option ,28
LIBB2_LIBS
command line option ,28
LIBEDIT_CFLAGS
command line option ,28
LIBEDIT_LIBS
130 Index
Python Setup and Usage, Release 3.13.0
command line option ,28
LIBFFI_CFLAGS
command line option ,28
LIBFFI_LIBS
command line option ,28
LIBLZMA_CFLAGS
command line option ,28
LIBLZMA_LIBS
command line option ,28
LIBMPDEC_CFLAGS
command line option ,28
LIBMPDEC_LIBS
command line option ,28
LIBREADLINE_CFLAGS
command line option ,28
LIBREADLINE_LIBS
command line option ,28
LIBS
command line option ,27
LIBSQLITE3_CFLAGS
command line option ,28
LIBSQLITE3_LIBS
command line option ,28
LIBUUID_CFLAGS
command line option ,28
LIBUUID_LIBS
command line option ,28
list,94
list comprehension ,94
loader,94
locale encoding ,94
M
-m
command line option ,3
MACHDEP
command line option ,27
magic
method,94
magic method ,94
mapping,94
meta path finder ,94
metaclass ,94
method,95
magic,94
special,99
method resolution order ,95
module,95
module spec ,95
MRO,95
mutable,95
N
named tuple ,95
namespace ,95
namespace package ,95
nested scope ,95
new-style class ,96O
-O
command line option ,6
object,96
-OO
command line option ,6
OPT,32
optimized scope ,96
P
-P
command line option ,6
package,96
PANEL_CFLAGS
command line option ,28
PANEL_LIBS
command line option ,28
parameter ,96
PATH,10,20,44,46,5254,56
path based finder ,97
path entry ,97
path entry finder ,97
path entry hook ,97
path-like object ,97
PATHEXT,46
PEP,97
PKG_CONFIG
command line option ,27
PKG_CONFIG_LIBDIR
command line option ,27
PKG_CONFIG_PATH
command line option ,27
portion,97
positional argument ,97
--prefix
command line option ,29
PROFILE_TASK ,30
provisional API ,97
provisional package ,97
PY_PYTHON ,57
PYLAUNCHER_ALLOW_INSTALL ,58
PYLAUNCHER_ALWAYS_INSTALL ,58
PYLAUNCHER_DEBUG ,58
PYLAUNCHER_DRYRUN ,58
PYLAUNCHER_NO_SEARCH_PATH ,56
Python 3000 ,97
Python Enhancement Proposals
PEP 1,97
PEP 7,23
PEP 8,83
PEP 11,23,43,60
PEP 238,90
PEP 278,100
PEP 302,94
PEP 338,4
PEP 343,88
PEP 362,86,96
PEP 370,7,12
Index 131
Python Setup and Usage, Release 3.13.0
PEP 397,54
PEP 411,97
PEP 420,95,97
PEP 443,91
PEP 483,91
PEP 484,85,91,100
PEP 488,6
PEP 492,86,88
PEP 498,90
PEP 514,54
PEP 519,97
PEP 525,86
PEP 526,85,100
PEP 528,53
PEP 529,14,53
PEP 538,15,25
PEP 585,91
PEP 683,92
PEP 703,48,70,90,92
PEP 3116 ,100
PEP 3155 ,98
PYTHON_COLORS ,10
PYTHON_CPU_COUNT ,9
PYTHON_FROZEN_MODULES ,9
PYTHON_GIL ,10,92
PYTHON_PERF_JIT_SUPPORT ,9
PYTHON_PRESITE ,10
PYTHONCOERCECLOCALE ,25
PYTHONDEBUG ,6,31
PYTHONDEVMODE ,9
PYTHONDONTWRITEBYTECODE ,6
PYTHONDUMPREFS ,32
PYTHONFAULTHANDLER ,8
PYTHONHASHSEED ,7,12
PYTHONHOME ,6,10,59
Pythonic ,97
PYTHONINSPECT ,6
PYTHONINTMAXSTRDIGITS ,9
PYTHONIOENCODING ,14
PYTHONLEGACYWINDOWSSTDIO ,12
PYTHONMALLOC ,14,31
PYTHONNODEBUGRANGES ,9
PYTHONNOUSERSITE ,7
PYTHONOPTIMIZE ,6
PYTHONPATH ,6,10,11,52,58,59
PYTHONPERFSUPPORT ,9
PYTHONPROFILEIMPORTTIME ,9
PYTHONPYCACHEPREFIX ,9
PYTHONSAFEPATH ,7
PYTHONSTARTUP ,6,11
PYTHONTRACEMALLOC ,8
PYTHONUNBUFFERED ,7
PYTHONUTF8 ,9,15,53
PYTHONVERBOSE ,7
PYTHONWARNDEFAULTENCODING ,9
PYTHONWARNINGS ,8Q
-q
command line option ,7
qualified name ,98
R
-R
command line option ,7
reference count ,98
regular package ,98
REPL,98
S
-S
command line option ,7
-s
command line option ,7
sequence ,98
set comprehension ,99
single dispatch ,99
slice,99
soft deprecated ,99
special
method,99
special method ,99
statement ,99
static type checker ,99
strong reference ,99
T
TCLTK_CFLAGS
command line option ,28
TCLTK_LIBS
command line option ,28
TEMP,49
text encoding ,99
text file ,99
triple-quoted string ,99
type,100
type alias ,100
type hint ,100
U
-u
command line option ,7
universal newlines ,100
V
-V
command line option ,5
-v
command line option ,7
variable annotation ,100
--version
command line option ,5
virtual environment ,100
virtual machine ,101
132 Index
Python Setup and Usage, Release 3.13.0
W
-W
command line option ,7
--with-address-sanitizer
command line option ,32
--with-app-store-compliance
command line option ,35
--with-assertions
command line option ,32
--with-build-python
command line option ,36
--with-builtin-hashlib-hashes
command line option ,34
--with-computed-gotos
command line option ,31
--with-dbmliborder
command line option ,25
--with-dtrace
command line option ,32
--with-emscripten-target
command line option ,29
--with-ensurepip
command line option ,29
--with-framework-name
command line option ,35
--with-hash-algorithm
command line option ,34
--with-libc
command line option ,33
--with-libm
command line option ,33
--with-libs
command line option ,33
--with-lto
command line option ,30
--with-memory-sanitizer
command line option ,32
--with-openssl
command line option ,33
--with-openssl-rpath
command line option ,34
--without-c-locale-coercion
command line option ,25
--without-decimal-contextvar
command line option ,24
--without-doc-strings
command line option ,31
--without-freelists
command line option ,25
--without-mimalloc
command line option ,31
--without-pymalloc
command line option ,31
--without-readline
command line option ,33
--without-static-libpython
command line option ,33
--with-pkg-configcommand line option ,25
--with-platlibdir
command line option ,25
--with-pydebug
command line option ,32
--with-readline
command line option ,33
--with-ssl-default-suites
command line option ,34
--with-strict-overflow
command line option ,31
--with-suffix
command line option ,24
--with-system-expat
command line option ,33
--with-system-libmpdec
command line option ,33
--with-thread-sanitizer
command line option ,32
--with-trace-refs
command line option ,32
--with-tzpath
command line option ,24
--with-undefined-behavior-sanitizer
command line option ,32
--with-universal-archs
command line option ,35
--with-valgrind
command line option ,32
--with-wheel-pkg-dir
command line option ,25
X
-X
command line option ,8
-x
command line option ,8
Z
Zen of Python ,101
ZLIB_CFLAGS
command line option ,28
ZLIB_LIBS
command line option ,29
Index 133
