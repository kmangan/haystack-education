Logging HOWTO
Release 3.13.0
Guido van Rossum and the Python development team
November 15, 2024
Python Software Foundation
Email: docs@python.org
Contents
1 Basic Logging Tutorial 2
1.1 Whentouselogging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.2 Asimpleexample . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.3 Loggingtoafile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.4 Loggingvariabledata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.5 Changingtheformatofdisplayedmessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.6 Displayingthedate/timeinmessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.7 NextSteps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2 Advanced Logging Tutorial 5
2.1 LoggingFlow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.2 Loggers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.3 Handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.4 Formatters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.5 ConfiguringLogging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
2.6 Whathappensifnoconfigurationisprovided . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.7 ConfiguringLoggingforaLibrary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3 Logging Levels 13
3.1 CustomLevels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
4 Useful Handlers 14
5 Exceptions raised during logging 15
6 Using arbitrary objects as messages 15
7 Optimization 15
8 Other resources 16
Index 17
Author
VinaySajip<vinay_sajipatred-dovedotcom>
1
Thispagecontainstutorialinformation. Forlinkstoreferenceinformationandaloggingcookbook,pleasesee Other
resources.
1Basic Logging Tutorial
Loggingisameansoftrackingeventsthathappenwhensomesoftwareruns. Thesoftware’sdeveloperaddslogging
callstotheircodetoindicatethatcertaineventshaveoccurred. Aneventisdescribedbyadescriptivemessagewhich
canoptionallycontainvariabledata(i.e. datathatispotentiallydifferentforeachoccurrenceoftheevent). Events
also have an importance which the developer ascribes to the event; the importance can also be called the levelor
severity.
1.1When to use logging
Youcanaccessloggingfunctionalitybycreatingaloggervia logger = getLogger(__name__) ,andthencalling
the logger’s debug(),info(),warning() ,error()andcritical() methods. To determine when to use
logging, and to see which logger methods to use when, see the table below. It states, for each of a set of common
tasks,thebesttooltouseforthattask.
Task you want to perform The best tool for the task
Display console output for ordi-
nary usage of a command line
scriptorprogramprint()
Report events that occur during
normal operation of a program
(e.g. for status monitoring or
faultinvestigation)Alogger’s info()(ordebug()methodforverydetailedoutputfordiagnos-
ticpurposes)
Issue a warning regarding a par-
ticularruntimeeventwarnings.warn() in library code if the issue is avoidable and the client
applicationshouldbemodifiedtoeliminatethewarning
A logger’s warning() method if there is nothing the client application can
doaboutthesituation,buttheeventshouldstillbenoted
Report an error regarding a par-
ticularruntimeeventRaiseanexception
Report suppression of an error
withoutraisinganexception(e.g.
error handler in a long-running
serverprocess)Alogger’s error(),exception() orcritical() methodasappropriate
forthespecificerrorandapplicationdomain
Theloggermethodsarenamedafterthelevelorseverityoftheeventstheyareusedtotrack. Thestandardlevelsand
theirapplicabilityaredescribedbelow(inincreasingorderofseverity):
Level When it’s used
DEBUG Detailedinformation,typicallyofinterestonlywhendiagnosingproblems.
INFO Confirmationthatthingsareworkingasexpected.
WARNING Anindicationthatsomethingunexpectedhappened,orindicativeofsomeprobleminthenear
future(e.g. ‘diskspacelow’). Thesoftwareisstillworkingasexpected.
ERROR Duetoamoreseriousproblem,thesoftwarehasnotbeenabletoperformsomefunction.
CRITICAL Aseriouserror,indicatingthattheprogramitselfmaybeunabletocontinuerunning.
The default level is WARNING, which means that only events of this severity and higher will be tracked, unless the
loggingpackageisconfiguredtodootherwise.
Eventsthataretrackedcanbehandledindifferentways. Thesimplestwayofhandlingtrackedeventsistoprintthem
totheconsole. Anothercommonwayistowritethemtoadiskfile.
2
1.2A simple example
Averysimpleexampleis:
import logging
logging .warning( 'Watch out! ')# will print a message to the console
logging .info( 'I told you so ')# will not print anything
Ifyoutypetheselinesintoascriptandrunit,you’llsee:
WARNING:root:Watch out!
printed out on the console. The INFOmessage doesn’t appear because the default level is WARNING. The printed
messageincludestheindicationofthelevelandthedescriptionoftheeventprovidedintheloggingcall,i.e. ‘Watch
out!’. The actual output can be formatted quite flexibly if you need that; formatting options will also be explained
later.
Notice that in this example, we use functions directly on the loggingmodule, like logging.debug , rather than
creatingaloggerandcallingfunctionsonit. Thesefunctionsoperationontherootlogger,butcanbeusefulasthey
willcall basicConfig() foryouifithasnotbeencalledyet,likeinthisexample. Inlargerprogramsyou’llusually
wanttocontroltheloggingconfigurationexplicitlyhowever-soforthatreasonaswellasothers,it’sbettertocreate
loggersandcalltheirmethods.
1.3Logging to a file
A very common situation is that of recording logging events in a file, so let’s look at that next. Be sure to try the
followinginanewlystartedPythoninterpreter,anddon’tjustcontinuefromthesessiondescribedabove:
import logging
logger =logging .getLogger( __name__ )
logging .basicConfig(filename ='example.log ', encoding ='utf-8 ', level =logging .DEBUG)
logger .debug( 'This message should go to the log file ')
logger .info( 'So should this ')
logger .warning( 'And this, too ')
logger .error( 'And non-ASCII stuff, too, like Øresund and Malmö ')
Changed in version 3.9: The encodingargument was added. In earlier Python versions, or if not specified, the
encodingusedisthedefaultvalueusedby open(). Whilenotshownintheaboveexample,an errorsargumentcan
alsonowbepassed,whichdetermineshowencodingerrorsarehandled. Foravailablevaluesandthedefault,seethe
documentationfor open().
Andnowifweopenthefileandlookatwhatwehave,weshouldfindthelogmessages:
DEBUG:__main__:This message should go to the log file
INFO:__main__:So should this
WARNING:__main__:And this, too
ERROR:__main__:And non-ASCII stuff, too, like Øresund and Malmö
This example also shows how you can set the logging level which acts as the threshold for tracking. In this case,
becausewesetthethresholdto DEBUG,allofthemessageswereprinted.
Ifyouwanttosetthelogginglevelfromacommand-lineoptionsuchas:
--log=INFO
andyouhavethevalueoftheparameterpassedfor --loginsomevariable loglevel,youcanuse:
getattr (logging, loglevel .upper())
togetthevaluewhichyou’llpassto basicConfig() viathe levelargument. Youmaywanttoerrorcheckanyuser
inputvalue,perhapsasinthefollowingexample:
3
# assuming loglevel is bound to the string value obtained from the
# command line argument. Convert to upper case to allow the user to
# specify --log=DEBUG or --log=debug
numeric_level =getattr (logging, loglevel .upper(), None )
ifnot isinstance (numeric_level, int):
raise ValueError ('Invalid log level: %s'%loglevel)
logging .basicConfig(level =numeric_level, ...)
The call to basicConfig() should come beforeany calls to a logger’s methods such as debug(),info(), etc.
Otherwise,thatloggingeventmaynotbehandledinthedesiredmanner.
If you run the above script several times, the messages from successive runs are appended to the file example.log .
Ifyouwanteachruntostartafresh,notrememberingthemessagesfromearlierruns, youcanspecifythe filemode
argument,bychangingthecallintheaboveexampleto:
logging .basicConfig(filename ='example.log ', filemode ='w', level =logging .DEBUG)
Theoutputwillbethesameasbefore,butthelogfileisnolongerappendedto,sothemessagesfromearlierrunsare
lost.
1.4Logging variable data
Tologvariabledata,useaformatstringfortheeventdescriptionmessageandappendthevariabledataasarguments.
Forexample:
import logging
logging .warning( '%sbefore you %s','Look ','leap! ')
willdisplay:
WARNING:root:Look before you leap!
Asyoucansee,mergingofvariabledataintotheeventdescriptionmessageusestheold,%-styleofstringformatting.
Thisisforbackwardscompatibility: theloggingpackagepre-datesnewerformattingoptionssuchas str.format()
andstring.Template . Thesenewerformattingoptions aresupported,butexploringthemisoutsidethescopeof
thistutorial: seeformatting-stylesformoreinformation.
1.5Changing the format of displayed messages
Tochangetheformatwhichisusedtodisplaymessages,youneedtospecifytheformatyouwanttouse:
import logging
logging .basicConfig( format ='%(levelname)s :%(message)s ', level =logging .DEBUG)
logging .debug( 'This message should appear on the console ')
logging .info( 'So should this ')
logging .warning( 'And this, too ')
whichwouldprint:
DEBUG:This message should appear on the console
INFO:So should this
WARNING:And this, too
Notice that the ‘root’ which appeared in earlier examples has disappeared. For a full set of things that can appear
in format strings, you can refer to the documentation for logrecord-attributes, but for simple usage, you just need
thelevelname(severity), message(eventdescription,includingvariabledata)andperhapstodisplaywhentheevent
occurred. Thisisdescribedinthenextsection.
4
1.6Displaying the date/time in messages
Todisplaythedateandtimeofanevent,youwouldplace‘%(asctime)s’inyourformatstring:
import logging
logging .basicConfig( format ='%(asctime)s %(message)s ')
logging .warning( 'is when this event was logged. ')
whichshouldprintsomethinglikethis:
2010-12-12 11:41:42,612 is when this event was logged.
Thedefaultformatfordate/timedisplay(shownabove)islikeISO8601or RFC 3339 . Ifyouneedmorecontrolover
theformattingofthedate/time,providea datefmtargumentto basicConfig ,asinthisexample:
import logging
logging .basicConfig( format ='%(asctime)s %(message)s ', datefmt ='%m/%d/%Y%I:%M:%S%p
,→')
logging .warning( 'is when this event was logged. ')
whichwoulddisplaysomethinglikethis:
12/12/2010 11:46:36 AM is when this event was logged.
Theformatofthe datefmtargumentisthesameassupportedby time.strftime() .
1.7Next Steps
Thatconcludesthebasictutorial. Itshouldbeenoughtogetyouupandrunningwithlogging. There’salotmorethat
theloggingpackageoffers,buttogetthebestoutofit,you’llneedtoinvestalittlemoreofyourtimeinreadingthe
followingsections. Ifyou’rereadyforthat,grabsomeofyourfavouritebeverageandcarryon.
If your logging needs are simple, then use the above examples to incorporate logging into your own scripts, and if
yourunintoproblemsordon’tunderstandsomething,pleasepostaquestiononthecomp.lang.pythonUsenetgroup
(availableat https://groups.google.com/g/comp.lang.python )andyoushouldreceivehelpbeforetoolong.
Stillhere? Youcancarryonreadingthenextfewsections,whichprovideaslightlymoreadvanced/in-depthtutorial
thanthebasiconeabove. Afterthat,youcantakealookatthelogging-cookbook.
2Advanced Logging Tutorial
Thelogginglibrarytakesamodularapproachandoffersseveralcategoriesofcomponents: loggers,handlers,filters,
andformatters.
•Loggersexposetheinterfacethatapplicationcodedirectlyuses.
•Handlerssendthelogrecords(createdbyloggers)totheappropriatedestination.
•Filtersprovideafinergrainedfacilityfordeterminingwhichlogrecordstooutput.
•Formattersspecifythelayoutoflogrecordsinthefinaloutput.
Logeventinformationispassedbetweenloggers,handlers,filtersandformattersina LogRecord instance.
Loggingisperformedbycallingmethodsoninstancesofthe Loggerclass(hereaftercalled loggers). Eachinstance
has a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For
example, a loggernamed ‘scan’ isthe parentof loggers ‘scan.text’, ‘scan.html’ and‘scan.pdf’. Loggernames canbe
anythingyouwant,andindicatetheareaofanapplicationinwhichaloggedmessageoriginates.
Agoodconventiontousewhennamingloggersistouseamodule-levellogger,ineachmodulewhichuseslogging,
namedasfollows:
5
logger =logging .getLogger( __name__ )
Thismeansthatloggernamestrackthepackage/modulehierarchy,andit’sintuitivelyobviouswhereeventsarelogged
justfromtheloggername.
The root of the hierarchy of loggers is called the root logger. That’s the logger used by the functions debug(),
info(),warning() ,error()andcritical() ,whichjustcallthesame-namedmethodoftherootlogger. The
functionsandthemethodshavethesamesignatures. Therootlogger’snameisprintedas‘root’intheloggedoutput.
It is, of course, possible to log messages to different destinations. Support is included in the package for writing
logmessagestofiles,HTTPGET/POSTlocations,emailviaSMTP,genericsockets,queues,orOS-specificlogging
mechanismssuchassyslogortheWindowsNTeventlog. Destinationsareservedby handlerclasses. Youcancreate
yourownlogdestinationclassifyouhavespecialrequirementsnotmetbyanyofthebuilt-inhandlerclasses.
By default, no destination is set for any logging messages. You can specify a destination (such as console or file)
by using basicConfig() as in the tutorial examples. If you call the functions debug(),info(),warning() ,
error()andcritical() , they will check to see if no destination is set; and if one is not set, they will set a
destination of the console ( sys.stderr ) and a default format for the displayed message before delegating to the
rootloggertodotheactualmessageoutput.
Thedefaultformatsetby basicConfig() formessagesis:
severity:logger name:message
You can change this by passing a format string to basicConfig() with the formatkeyword argument. For all
optionsregardinghowaformatstringisconstructed,seeformatter-objects.
2.1Logging Flow
Theflowoflogeventinformationinloggersandhandlersisillustratedinthefollowingdiagram.
6
2.2Loggers
Loggerobjectshaveathreefoldjob. First,theyexposeseveralmethodstoapplicationcodesothatapplicationscan
logmessagesatruntime. Second,loggerobjectsdeterminewhichlogmessagestoactuponbaseduponseverity(the
defaultfilteringfacility)orfilterobjects. Third,loggerobjectspassalongrelevantlogmessagestoallinterestedlog
handlers.
Themostwidelyusedmethodsonloggerobjectsfallintotwocategories: configurationandmessagesending.
Thesearethemostcommonconfigurationmethods:
•Logger.setLevel() specifiesthelowest-severitylogmessagealoggerwillhandle,wheredebugisthelowest
built-in severity level and critical is the highest built-in severity. For example, if the severity level is INFO,
theloggerwillhandleonlyINFO,WARNING,ERROR,andCRITICALmessagesandwillignoreDEBUG
messages.
•Logger.addHandler() andLogger.removeHandler() addandremovehandlerobjectsfromthelogger
object. Handlersarecoveredinmoredetailin Handlers.
•Logger.addFilter() andLogger.removeFilter() addandremovefilterobjectsfromtheloggerob-
7
ject. Filtersarecoveredinmoredetailinfilter.
Youdon’tneedtoalwayscallthesemethodsoneveryloggeryoucreate. Seethelasttwoparagraphsinthissection.
Withtheloggerobjectconfigured,thefollowingmethodscreatelogmessages:
•Logger.debug() ,Logger.info() ,Logger.warning() ,Logger.error() , and Logger.
critical() all create log records with a message and a level that corresponds to their respective
method names. The message is actually a format string, which may contain the standard string substitution
syntax of %s,%d,%f, and so on. The rest of their arguments is a list of objects that correspond with the
substitutionfieldsinthemessage. Withregardto **kwargs ,theloggingmethodscareonlyaboutakeyword
ofexc_info anduseittodeterminewhethertologexceptioninformation.
•Logger.exception() createsalogmessagesimilarto Logger.error() . Thedifferenceisthat Logger.
exception() dumpsastacktracealongwithit. Callthismethodonlyfromanexceptionhandler.
•Logger.log() takes a log level as an explicit argument. This is a little more verbose for logging messages
thanusingtheloglevelconveniencemethodslistedabove,butthisishowtologatcustomloglevels.
getLogger() returns a reference to a logger instance with the specified name if it is provided, or rootif not.
The names are period-separated hierarchical structures. Multiple calls to getLogger() with the same name will
return a reference to the same logger object. Loggers that are further down in the hierarchical list are children of
loggers higher up in the list. For example, given a logger with a name of foo, loggers with names of foo.bar,
foo.bar.baz ,and foo.bamarealldescendantsof foo.
Loggers have a concept of effective level . If a level is not explicitly set on a logger, the level of its parent is used
insteadasitseffectivelevel. Iftheparenthasnoexplicitlevelset, itsparentisexamined,andsoon-allancestorsare
searcheduntilanexplicitlysetlevelisfound. Therootloggeralwayshasanexplicitlevelset( WARNINGbydefault).
Whendecidingwhethertoprocessanevent,theeffectiveleveloftheloggerisusedtodeterminewhethertheevent
ispassedtothelogger’shandlers.
Child loggers propagate messages up to the handlers associated with their ancestor loggers. Because of this, it is
unnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure
handlersforatop-levelloggerandcreatechildloggersasneeded. (Youcan,however,turnoffpropagationbysetting
thepropagateattributeofaloggerto False.)
2.3Handlers
Handlerobjectsareresponsiblefordispatchingtheappropriatelogmessages(basedonthelogmessages’severity)
to the handler’s specified destination. Loggerobjects can add zero or more handler objects to themselves with an
addHandler() method. As an example scenario, an application may want to send all log messages to a log file,
alllogmessagesoferrororhighertostdout,andallmessagesofcriticaltoanemailaddress. Thisscenariorequires
threeindividualhandlerswhereeachhandlerisresponsibleforsendingmessagesofaspecificseveritytoaspecific
location.
The standard library includes quite a few handler types (see Useful Handlers ); the tutorials use mainly
StreamHandler andFileHandler initsexamples.
There are very few methods in a handler for application developers to concern themselves with. The only handler
methodsthatseemrelevantforapplicationdeveloperswhoareusingthebuilt-inhandlerobjects(thatis,notcreating
customhandlers)arethefollowingconfigurationmethods:
•ThesetLevel() method, just as in logger objects, specifies the lowest severity that will be dispatched to
theappropriatedestination. Whyaretheretwo setLevel() methods? Thelevelsetintheloggerdetermines
whichseverityofmessagesitwillpasstoitshandlers. Thelevelsetineachhandlerdetermineswhichmessages
thathandlerwillsendon.
•setFormatter() selectsaFormatterobjectforthishandlertouse.
•addFilter() andremoveFilter() respectivelyconfigureanddeconfigurefilterobjectsonhandlers.
Applicationcodeshouldnotdirectlyinstantiateanduseinstancesof Handler. Instead,the Handlerclassisabase
classthatdefinestheinterfacethatallhandlersshouldhaveandestablishessomedefaultbehaviorthatchildclasses
canuse(oroverride).
8
2.4Formatters
Formatterobjectsconfigurethefinalorder, structure, andcontentsofthelogmessage. Unlikethebase logging.
Handlerclass,applicationcodemayinstantiateformatterclasses,althoughyoucouldlikelysubclasstheformatter
ifyourapplicationneedsspecialbehavior. Theconstructortakesthreeoptionalarguments–amessageformatstring,
adateformatstringandastyleindicator.
logging.Formatter. __init__ (fmt=None,datefmt=None ,style=’%’ )
Ifthereisnomessageformatstring,thedefaultistousetherawmessage. Ifthereisnodateformatstring,thedefault
dateformatis:
%Y-%m-%d %H:%M:%S
withthemillisecondstackedonattheend. The styleisoneof '%','{',or'$'. Ifoneoftheseisnotspecified,
then'%'willbeused.
Ifthe styleis'%',themessageformatstringuses %(<dictionary key>)s styledstringsubstitution;thepossible
keysaredocumentedinlogrecord-attributes. Ifthestyleis '{',themessageformatstringisassumedtobecompatible
with str.format() (using keyword arguments), while if the style is '$'then the message format string should
conformtowhatisexpectedby string.Template.substitute() .
Changedinversion3.2: Addedthe styleparameter.
Thefollowingmessageformatstringwilllogthetimeinahuman-readableformat,theseverityofthemessage,and
thecontentsofthemessage,inthatorder:
'%(asctime)s -%(levelname)s -%(message)s '
Formatters use a user-configurable function to convert the creation time of a record to a tuple. By default, time.
localtime() isused;tochangethisforaparticularformatterinstance,setthe converter attributeoftheinstance
toafunctionwiththesamesignatureas time.localtime() ortime.gmtime() . Tochangeitforallformatters,
forexampleifyouwantallloggingtimestobeshowninGMT,setthe converter attributeintheFormatterclass
(totime.gmtime forGMTdisplay).
2.5Configuring Logging
Programmerscanconfigurelogginginthreeways:
1.Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods
listedabove.
2.Creatingaloggingconfigfileandreadingitusingthe fileConfig() function.
3.Creatingadictionaryofconfigurationinformationandpassingittothe dictConfig() function.
Forthereferencedocumentationonthelasttwooptions,seelogging-config-api. Thefollowingexampleconfiguresa
verysimplelogger,aconsolehandler,andasimpleformatterusingPythoncode:
import logging
# create logger
logger =logging .getLogger( 'simple_example ')
logger .setLevel(logging .DEBUG)
# create console handler and set level to debug
ch=logging .StreamHandler()
ch.setLevel(logging .DEBUG)
# create formatter
formatter =logging .Formatter( '%(asctime)s -%(name)s -%(levelname)s -%(message)s
,→')
(continuesonnextpage)
9
(continuedfrompreviouspage)
# add formatter to ch
ch.setFormatter(formatter)
# add ch to logger
logger .addHandler(ch)
# 'application' code
logger .debug( 'debug message ')
logger .info( 'info message ')
logger .warning( 'warn message ')
logger .error( 'error message ')
logger .critical( 'critical message ')
Runningthismodulefromthecommandlineproducesthefollowingoutput:
$python simple_logging_module.py
2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message
2005-03-19 15:10:26,620 - simple_example - INFO - info message
2005-03-19 15:10:26,695 - simple_example - WARNING - warn message
2005-03-19 15:10:26,697 - simple_example - ERROR - error message
2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message
ThefollowingPythonmodulecreatesalogger,handler,andformatternearlyidenticaltothoseintheexamplelisted
above,withtheonlydifferencebeingthenamesoftheobjects:
import logging
import logging .config
logging .config .fileConfig( 'logging.conf ')
# create logger
logger =logging .getLogger( 'simpleExample ')
# 'application' code
logger .debug( 'debug message ')
logger .info( 'info message ')
logger .warning( 'warn message ')
logger .error( 'error message ')
logger .critical( 'critical message ')
Hereisthelogging.conffile:
[loggers]
keys =root,simpleExample
[handlers]
keys =consoleHandler
[formatters]
keys =simpleFormatter
[logger_root]
level =DEBUG
handlers =consoleHandler
[logger_simpleExample]
level =DEBUG
(continuesonnextpage)
10
(continuedfrompreviouspage)
handlers =consoleHandler
qualname =simpleExample
propagate =0
[handler_consoleHandler]
class =StreamHandler
level =DEBUG
formatter =simpleFormatter
args =(sys.stdout,)
[formatter_simpleFormatter]
format =%(asctime)s - %(name)s - %(levelname)s - %(message)s
Theoutputisnearlyidenticaltothatofthenon-config-file-basedexample:
$python simple_logging_config.py
2005-03-19 15:38:55,977 - simpleExample - DEBUG - debug message
2005-03-19 15:38:55,979 - simpleExample - INFO - info message
2005-03-19 15:38:56,054 - simpleExample - WARNING - warn message
2005-03-19 15:38:56,055 - simpleExample - ERROR - error message
2005-03-19 15:38:56,130 - simpleExample - CRITICAL - critical message
YoucanseethattheconfigfileapproachhasafewadvantagesoverthePythoncodeapproach,mainlyseparationof
configurationandcodeandtheabilityofnoncoderstoeasilymodifytheloggingproperties.
ÁWarning
ThefileConfig() function takes a default parameter, disable_existing_loggers , which defaults to
Truefor reasons of backward compatibility. This may or may not be what you want, since it will cause any
non-rootloggersexistingbeforethe fileConfig() calltobedisabledunlessthey(oranancestor)areexplic-
itly named in the configuration. Please refer to the reference documentation for more information, and specify
Falseforthisparameterifyouwish.
The dictionary passed to dictConfig() can also specify a Boolean value with key
disable_existing_loggers , which if not specified explicitly in the dictionary also defaults to being
interpretedas True. Thisleadstothelogger-disablingbehaviourdescribedabove,whichmaynotbewhatyou
want-inwhichcase,providethekeyexplicitlywithavalueof False.
Note that the class names referenced in config files need to be either relative to the logging module, or absolute
valueswhichcanberesolvedusingnormalimportmechanisms. Thus,youcoulduseeither WatchedFileHandler
(relativetotheloggingmodule)or mypackage.mymodule.MyHandler (foraclassdefinedinpackage mypackage
andmodule mymodule ,where mypackage isavailableonthePythonimportpath).
In Python 3.2, a new means of configuring logging has been introduced, using dictionaries to hold configuration
information. This provides a superset of the functionality of the config-file-based approach outlined above, and is
therecommendedconfigurationmethodfornewapplicationsanddeployments. BecauseaPythondictionaryisused
toholdconfigurationinformation, andsinceyoucanpopulatethatdictionaryusingdifferentmeans, youhavemore
options for configuration. For example, you can use a configuration file in JSON format, or, if you have access to
YAMLprocessingfunctionality,afileinYAMLformat,topopulatetheconfigurationdictionary. Or,ofcourse,you
canconstructthedictionaryinPythoncode,receiveitinpickledformoverasocket,orusewhateverapproachmakes
senseforyourapplication.
Here’sanexampleofthesameconfigurationasabove,inYAMLformatforthenewdictionary-basedapproach:
version :1
formatters :
simple :
(continuesonnextpage)
11
(continuedfrompreviouspage)
format :'%(asctime)s -%(name)s -%(levelname)s -%(message)s '
handlers :
console :
class :logging.StreamHandler
level :DEBUG
formatter :simple
stream :ext://sys.stdout
loggers :
simpleExample :
level :DEBUG
handlers :[console ]
propagate :no
root :
level :DEBUG
handlers :[console ]
Formoreinformationaboutloggingusingadictionary,seelogging-config-api.
2.6What happens if no configuration is provided
Ifnologgingconfigurationisprovided,itispossibletohaveasituationwherealoggingeventneedstobeoutput,but
nohandlerscanbefoundtooutputtheevent.
The event is output using a ‘handler of last resort’, stored in lastResort . This internal handler is not associated
withanylogger,andactslikea StreamHandler whichwritestheeventdescriptionmessagetothecurrentvalueof
sys.stderr (thereforerespectinganyredirectionswhichmaybeineffect). Noformattingisdoneonthemessage
-justthebareeventdescriptionmessageisprinted. Thehandler’slevelissetto WARNING,soalleventsatthisand
greaterseveritieswillbeoutput.
Changedinversion3.2: ForversionsofPythonpriorto3.2,thebehaviourisasfollows:
•IfraiseExceptions isFalse(productionmode),theeventissilentlydropped.
•IfraiseExceptions isTrue(developmentmode),amessage‘NohandlerscouldbefoundforloggerX.Y.Z’
isprintedonce.
Toobtainthepre-3.2behaviour, lastResort canbesetto None.
2.7Configuring Logging for a Library
When developing a library which uses logging, you should take care to document how the library uses logging -
for example, the names of loggers used. Some consideration also needs to be given to its logging configuration. If
theusingapplicationdoesnotuselogging, andlibrarycodemakesloggingcalls, then(asdescribedintheprevious
section)eventsofseverity WARNINGandgreaterwillbeprintedto sys.stderr . Thisisregardedasthebestdefault
behaviour.
Ifforsomereasonyou don’twantthesemessagesprintedintheabsenceofanyloggingconfiguration,youcanattach
ado-nothinghandlertothetop-levelloggerforyourlibrary. Thisavoidsthemessagebeingprinted,sinceahandler
willalwaysbefoundforthelibrary’sevents: itjustdoesn’tproduceanyoutput. Ifthelibraryuserconfigureslogging
forapplicationuse,presumablythatconfigurationwilladdsomehandlers,andiflevelsaresuitablyconfiguredthen
loggingcallsmadeinlibrarycodewillsendoutputtothosehandlers,asnormal.
A do-nothing handler is included in the logging package: NullHandler (since Python 3.1). An instance of this
handlercouldbeaddedtothetop-levelloggeroftheloggingnamespaceusedbythelibrary( ifyouwanttoprevent
yourlibrary’sloggedeventsbeingoutputto sys.stderr intheabsenceofloggingconfiguration). Ifallloggingby
alibrary fooisdoneusingloggerswithnamesmatching‘foo.x’,‘foo.x.y’,etc. thenthecode:
import logging
logging .getLogger( 'foo').addHandler(logging .NullHandler())
12
shouldhavethedesiredeffect. Ifanorganisationproducesanumberoflibraries,thentheloggernamespecifiedcan
be‘orgname.foo’ratherthanjust‘foo’.
®Note
Itisstronglyadvisedthatyou do not log to the root logger inyourlibrary. Instead,usealoggerwithauniqueand
easily identifiable name, such as the __name__ for your library’s top-level package or module. Logging to the
rootloggerwillmakeitdifficultorimpossiblefortheapplicationdevelopertoconfiguretheloggingverbosityor
handlersofyourlibraryastheywish.
®Note
Itisstronglyadvisedthatyou do not add any handlers other than NullHandler to your library’s loggers . Thisis
becausetheconfigurationofhandlersistheprerogativeoftheapplicationdeveloperwhousesyourlibrary. The
application developer knows their target audience and what handlers are most appropriate for their application:
ifyouaddhandlers‘underthehood’,youmightwellinterferewiththeirabilitytocarryoutunittestsanddeliver
logswhichsuittheirrequirements.
3Logging Levels
Thenumericvaluesoflogginglevelsaregiveninthefollowingtable. Theseareprimarilyofinterestifyouwantto
defineyourownlevels, andneedthemtohavespecificvaluesrelativetothepredefinedlevels. Ifyoudefinealevel
withthesamenumericvalue,itoverwritesthepredefinedvalue;thepredefinednameislost.
Level Numeric value
CRITICAL 50
ERROR 40
WARNING 30
INFO 20
DEBUG 10
NOTSET 0
Levels can also be associated with loggers, being set either by the developer or through loading a saved logging
configuration. Whenaloggingmethodiscalledonalogger,theloggercomparesitsownlevelwiththelevelassociated
withthemethodcall. Ifthelogger’slevelishigherthanthemethodcall’s,nologgingmessageisactuallygenerated.
Thisisthebasicmechanismcontrollingtheverbosityofloggingoutput.
Loggingmessagesareencodedasinstancesofthe LogRecord class. Whenaloggerdecidestoactuallyloganevent,
aLogRecord instanceiscreatedfromtheloggingmessage.
Logging messages are subjected to a dispatch mechanism through the use of handlers, which are instances of
subclasses of the Handlerclass. Handlers are responsible for ensuring that a logged message (in the form of a
LogRecord ) ends up in a particular location (or set of locations) which is useful for the target audience for that
message(suchasendusers,supportdeskstaff,systemadministrators,developers). Handlersarepassed LogRecord
instancesintendedforparticulardestinations. Eachloggercanhavezero,oneormorehandlersassociatedwithit(via
theaddHandler() methodof Logger). Inadditiontoanyhandlersdirectlyassociatedwithalogger, all handlers
associated with all ancestors of the logger arecalledtodispatchthemessage(unlessthe propagateflagforaloggeris
settoafalsevalue,atwhichpointthepassingtoancestorhandlersstops).
Just as for loggers, handlerscan havelevels associatedwith them. A handler’slevel actsas a filter inthe sameway
as a logger’s level does. If a handler decides to actually dispatch an event, the emit()method is used to send the
messagetoitsdestination. Mostuser-definedsubclassesof Handlerwillneedtooverridethis emit().
13
3.1Custom Levels
Definingyourownlevelsispossible,butshouldnotbenecessary,astheexistinglevelshavebeenchosenonthebasis
ofpracticalexperience. However,ifyouareconvincedthatyouneedcustomlevels,greatcareshouldbeexercised
when doing this, and it is possibly a very bad idea to define custom levels if you are developing a library . That’s
becauseifmultiplelibraryauthorsalldefinetheirowncustomlevels,thereisachancethattheloggingoutputfrom
such multiple libraries used together will be difficult for the using developer to control and/or interpret, because a
givennumericvaluemightmeandifferentthingsfordifferentlibraries.
4Useful Handlers
Inadditiontothebase Handlerclass,manyusefulsubclassesareprovided:
1.StreamHandler instancessendmessagestostreams(file-likeobjects).
2.FileHandler instancessendmessagestodiskfiles.
3.BaseRotatingHandler isthebaseclassforhandlersthatrotatelogfilesatacertainpoint. Itisnotmeant
tobeinstantiateddirectly. Instead,use RotatingFileHandler orTimedRotatingFileHandler .
4.RotatingFileHandler instancessendmessagestodiskfiles, withsupportformaximumlogfilesizesand
logfilerotation.
5.TimedRotatingFileHandler instances send messages to disk files, rotating the log file at certain timed
intervals.
6.SocketHandler instancessendmessagesto TCP/IPsockets. Since3.4, Unixdomainsocketsarealsosup-
ported.
7.DatagramHandler instancessendmessagestoUDPsockets. Since3.4, Unixdomainsocketsarealsosup-
ported.
8.SMTPHandler instancessendmessagestoadesignatedemailaddress.
9.SysLogHandler instancessendmessagestoaUnixsyslogdaemon,possiblyonaremotemachine.
10.NTEventLogHandler instancessendmessagestoaWindowsNT/2000/XPeventlog.
11.MemoryHandler instancessendmessagestoabufferinmemory,whichisflushedwheneverspecificcriteria
aremet.
12.HTTPHandler instancessendmessagestoanHTTPserverusingeither GETorPOSTsemantics.
13.WatchedFileHandler instances watch the file they are logging to. If the file changes, it is closed and re-
openedusingthefilename. ThishandlerisonlyusefulonUnix-likesystems; Windowsdoesnotsupportthe
underlyingmechanismused.
14.QueueHandler instances send messages to a queue, such as those implemented in the queueor
multiprocessing modules.
15.NullHandler instancesdonothingwitherrormessages. Theyareusedbylibrarydeveloperswhowanttouse
logging,butwanttoavoidthe‘Nohandlerscouldbefoundforlogger XXX’messagewhichcanbedisplayedif
thelibraryuserhasnotconfiguredlogging. See Configuring Logging for a Library formoreinformation.
Addedinversion3.1: The NullHandler class.
Addedinversion3.2: The QueueHandler class.
TheNullHandler ,StreamHandler andFileHandler classesaredefinedinthecoreloggingpackage. Theother
handlersaredefinedinasub-module, logging.handlers . (Thereisalsoanothersub-module, logging.config ,
forconfigurationfunctionality.)
Loggedmessagesareformattedforpresentationthroughinstancesofthe Formatter class. Theyareinitializedwith
aformatstringsuitableforusewiththe%operatorandadictionary.
For formatting multiple messages in a batch, instances of BufferingFormatter can be used. In addition to the
formatstring(whichisappliedtoeachmessageinthebatch),thereisprovisionforheaderandtrailerformatstrings.
14
Whenfilteringbasedonloggerleveland/orhandlerlevelisnotenough, instancesof Filtercanbeaddedtoboth
LoggerandHandlerinstances(throughtheir addFilter() method). Beforedecidingtoprocessamessagefur-
ther,bothloggersandhandlersconsultalltheirfiltersforpermission. Ifanyfilterreturnsafalsevalue,themessage
isnotprocessedfurther.
Thebasic Filterfunctionalityallowsfilteringbyspecificloggername. Ifthisfeatureisused,messagessenttothe
namedloggeranditschildrenareallowedthroughthefilter,andallothersdropped.
5Exceptions raised during logging
Theloggingpackageisdesignedtoswallowexceptionswhichoccurwhilelogginginproduction. Thisissothaterrors
which occur while handling logging events - such as logging misconfiguration, network or other similar errors - do
notcausetheapplicationusingloggingtoterminateprematurely.
SystemExit andKeyboardInterrupt exceptionsareneverswallowed. Otherexceptionswhichoccurduringthe
emit()methodofa Handlersubclassarepassedtoits handleError() method.
The default implementation of handleError() inHandler checks to see if a module-level variable,
raiseExceptions ,isset. Ifset,atracebackisprintedto sys.stderr . Ifnotset,theexceptionisswallowed.
®Note
The default value of raiseExceptions isTrue. This is because during development, you typically want to
benotifiedofanyexceptionsthatoccur. It’sadvisedthatyouset raiseExceptions toFalseforproduction
usage.
6Using arbitrary objects as messages
In the preceding sections and examples, it has been assumed that the message passed when logging the event is a
string. However,thisisnottheonlypossibility. Youcanpassanarbitraryobjectasamessage,andits __str__()
methodwillbecalledwhentheloggingsystemneedstoconvertittoastringrepresentation. Infact,ifyouwantto,
you can avoid computing a string representation altogether - for example, the SocketHandler emits an event by
picklingitandsendingitoverthewire.
7Optimization
Formattingofmessageargumentsisdeferreduntilitcannotbeavoided. However,computingtheargumentspassed
totheloggingmethodcanalsobeexpensive,andyoumaywanttoavoiddoingitiftheloggerwilljustthrowaway
your event. To decide what to do, you can call the isEnabledFor() method which takes a level argument and
returnstrueiftheeventwouldbecreatedbytheLoggerforthatlevelofcall. Youcanwritecodelikethis:
iflogger .isEnabledFor(logging .DEBUG):
logger .debug( 'Message with %s,%s', expensive_func1(),
expensive_func2())
so that if the logger’s threshold is set above DEBUG, the calls to expensive_func1 andexpensive_func2 are
nevermade.
®Note
In some cases, isEnabledFor() can itself be more expensive than you’d like (e.g. for deeply nested loggers
whereanexplicitlevelisonlysethighupintheloggerhierarchy). Insuchcases(orifyouwanttoavoidcallinga
methodintightloops),youcancachetheresultofacallto isEnabledFor() inalocalorinstancevariable,and
usethatinsteadofcallingthemethodeachtime. Suchacachedvaluewouldonlyneedtoberecomputedwhen
theloggingconfigurationchangesdynamicallywhiletheapplicationisrunning(whichisnotallthatcommon).
15
Thereareotheroptimizationswhichcanbemadeforspecificapplicationswhichneedmoreprecisecontroloverwhat
logginginformationiscollected. Here’salistofthingsyoucandotoavoidprocessingduringloggingwhichyoudon’t
need:
What you don’t want to collect How to avoid collecting it
Information about where calls
weremadefrom.Setlogging._srcfile toNone. Thisavoidscalling sys._getframe() ,
whichmayhelptospeedupyourcodeinenvironmentslikePyPy(whichcan’t
speedupcodethatuses sys._getframe() ).
Threadinginformation. Setlogging.logThreads toFalse.
Current process ID ( os.
getpid() )Setlogging.logProcesses toFalse.
Current process name when us-
ingmultiprocessing toman-
agemultipleprocesses.Setlogging.logMultiprocessing toFalse.
Current asyncio.Task name
whenusing asyncio.Setlogging.logAsyncioTasks toFalse.
Alsonotethatthecoreloggingmoduleonlyincludesthebasichandlers. Ifyoudon’timport logging.handlers
andlogging.config ,theywon’ttakeupanymemory.
8Other resources
µSee also
Module logging
APIreferencefortheloggingmodule.
Module logging.config
ConfigurationAPIfortheloggingmodule.
Module logging.handlers
Usefulhandlersincludedwiththeloggingmodule.
Aloggingcookbook
16
Index
Non-alphabetical
__init__() (logging.logging.Formatter method ),9
R
RFC
RFC 3339 ,5
17
