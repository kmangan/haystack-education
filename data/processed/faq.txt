PythonFrequentlyAskedQuestions
Release 3.13.0
GuidovanRossumandthePythondevelopmentteam
November15,2024
PythonSoftwareFoundation
Email: docs@python.org

CONTENTS
1 GeneralPythonFAQ 1
1.1 GeneralInformation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.1 WhatisPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.2 WhatisthePythonSoftwareFoundation? . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.3 AretherecopyrightrestrictionsontheuseofPython? . . . . . . . . . . . . . . . . . . . 1
1.1.4 WhywasPythoncreatedinthefirstplace? . . . . . . . . . . . . . . . . . . . . . . . . . 1
1.1.5 WhatisPythongoodfor? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.1.6 HowdoesthePythonversionnumberingschemework? . . . . . . . . . . . . . . . . . . 2
1.1.7 HowdoIobtainacopyofthePythonsource? . . . . . . . . . . . . . . . . . . . . . . . 3
1.1.8 HowdoIgetdocumentationonPython? . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.1.9 I’veneverprogrammedbefore. IsthereaPythontutorial? . . . . . . . . . . . . . . . . . 3
1.1.10 IsthereanewsgroupormailinglistdevotedtoPython? . . . . . . . . . . . . . . . . . . . 3
1.1.11 HowdoIgetabetatestversionofPython? . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.1.12 HowdoIsubmitbugreportsandpatchesforPython? . . . . . . . . . . . . . . . . . . . 3
1.1.13 ArethereanypublishedarticlesaboutPythonthatIcanreference? . . . . . . . . . . . . 3
1.1.14 ArethereanybooksonPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.1.15 Whereintheworldiswww.python.orglocated? . . . . . . . . . . . . . . . . . . . . . . 4
1.1.16 WhyisitcalledPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.1.17 DoIhavetolike“MontyPython’sFlyingCircus”? . . . . . . . . . . . . . . . . . . . . . 4
1.2 Pythonintherealworld . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.2.1 HowstableisPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.2.2 HowmanypeopleareusingPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.2.3 HaveanysignificantprojectsbeendoneinPython? . . . . . . . . . . . . . . . . . . . . . 4
1.2.4 WhatnewdevelopmentsareexpectedforPythoninthefuture? . . . . . . . . . . . . . . 4
1.2.5 IsitreasonabletoproposeincompatiblechangestoPython? . . . . . . . . . . . . . . . . 5
1.2.6 IsPythonagoodlanguageforbeginningprogrammers? . . . . . . . . . . . . . . . . . . 5
2 ProgrammingFAQ 7
2.1 GeneralQuestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
2.1.1 Isthereasourcecodeleveldebuggerwithbreakpoints,single-stepping,etc.? . . . . . . . 7
2.1.2 Aretheretoolstohelpfindbugsorperformstaticanalysis? . . . . . . . . . . . . . . . . 7
2.1.3 HowcanIcreateastand-alonebinaryfromaPythonscript? . . . . . . . . . . . . . . . . 7
2.1.4 AretherecodingstandardsorastyleguideforPythonprograms? . . . . . . . . . . . . . 8
2.2 CoreLanguage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
2.2.1 WhyamIgettinganUnboundLocalErrorwhenthevariablehasavalue? . . . . . . . . . 8
2.2.2 WhataretherulesforlocalandglobalvariablesinPython? . . . . . . . . . . . . . . . . 9
2.2.3 Whydolambdasdefinedinaloopwithdifferentvaluesallreturnthesameresult? . . . . . 9
2.2.4 HowdoIshareglobalvariablesacrossmodules? . . . . . . . . . . . . . . . . . . . . . . 10
2.2.5 Whatarethe“bestpractices”forusingimportinamodule? . . . . . . . . . . . . . . . . 10
2.2.6 Whyaredefaultvaluessharedbetweenobjects? . . . . . . . . . . . . . . . . . . . . . . 11
2.2.7 HowcanIpassoptionalorkeywordparametersfromonefunctiontoanother? . . . . . . 12
2.2.8 Whatisthedifferencebetweenargumentsandparameters? . . . . . . . . . . . . . . . . 12
2.2.9 Whydidchanginglist‘y’alsochangelist‘x’? . . . . . . . . . . . . . . . . . . . . . . . . 12
2.2.10 HowdoIwriteafunctionwithoutputparameters(callbyreference)? . . . . . . . . . . . 13
i
2.2.11 HowdoyoumakeahigherorderfunctioninPython? . . . . . . . . . . . . . . . . . . . 14
2.2.12 HowdoIcopyanobjectinPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.2.13 HowcanIfindthemethodsorattributesofanobject? . . . . . . . . . . . . . . . . . . . 15
2.2.14 Howcanmycodediscoverthenameofanobject? . . . . . . . . . . . . . . . . . . . . . 16
2.2.15 What’supwiththecommaoperator’sprecedence? . . . . . . . . . . . . . . . . . . . . . 16
2.2.16 IsthereanequivalentofC’s“?:” ternaryoperator? . . . . . . . . . . . . . . . . . . . . . 16
2.2.17 Isitpossibletowriteobfuscatedone-linersinPython? . . . . . . . . . . . . . . . . . . . 17
2.2.18 Whatdoestheslash(/)intheparameterlistofafunctionmean? . . . . . . . . . . . . . . 17
2.3 Numbersandstrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.3.1 HowdoIspecifyhexadecimalandoctalintegers? . . . . . . . . . . . . . . . . . . . . . 18
2.3.2 Whydoes-22//10return-3? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.3.3 HowdoIgetintliteralattributeinsteadofSyntaxError? . . . . . . . . . . . . . . . . . . 18
2.3.4 HowdoIconvertastringtoanumber? . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.3.5 HowdoIconvertanumbertoastring? . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.3.6 HowdoImodifyastringinplace? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
2.3.7 HowdoIusestringstocallfunctions/methods? . . . . . . . . . . . . . . . . . . . . . . . 19
2.3.8 IsthereanequivalenttoPerl’schomp()forremovingtrailingnewlinesfromstrings? . . . .20
2.3.9 Isthereascanf()orsscanf()equivalent? . . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.3.10 Whatdoes‘UnicodeDecodeError’or‘UnicodeEncodeError’errormean? . . . . . . . . . . 21
2.3.11 CanIendarawstringwithanoddnumberofbackslashes? . . . . . . . . . . . . . . . . 21
2.4 Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
2.4.1 Myprogramistooslow. HowdoIspeeditup? . . . . . . . . . . . . . . . . . . . . . . . 21
2.4.2 Whatisthemostefficientwaytoconcatenatemanystringstogether? . . . . . . . . . . . . 22
2.5 Sequences(Tuples/Lists) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
2.5.1 HowdoIconvertbetweentuplesandlists? . . . . . . . . . . . . . . . . . . . . . . . . . 22
2.5.2 What’sanegativeindex? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.5.3 HowdoIiterateoverasequenceinreverseorder? . . . . . . . . . . . . . . . . . . . . . 23
2.5.4 Howdoyouremoveduplicatesfromalist? . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.5.5 Howdoyouremovemultipleitemsfromalist . . . . . . . . . . . . . . . . . . . . . . . 23
2.5.6 HowdoyoumakeanarrayinPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
2.5.7 HowdoIcreateamultidimensionallist? . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.5.8 HowdoIapplyamethodorfunctiontoasequenceofobjects? . . . . . . . . . . . . . . . 24
2.5.9 Whydoesa_tuple[i]+=[‘item’]raiseanexceptionwhentheadditionworks? . . . . . . . 25
2.5.10 Iwanttodoacomplicatedsort: canyoudoaSchwartzianTransforminPython? . . . . . 26
2.5.11 HowcanIsortonelistbyvaluesfromanotherlist? . . . . . . . . . . . . . . . . . . . . . 26
2.6 Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
2.6.1 Whatisaclass? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
2.6.2 Whatisamethod? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
2.6.3 Whatisself? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
2.6.4 HowdoIcheckifanobjectisaninstanceofagivenclassorofasubclassofit? . . . . . . 27
2.6.5 Whatisdelegation? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
2.6.6 HowdoIcallamethoddefinedinabaseclassfromaderivedclassthatextendsit? . . . .29
2.6.7 HowcanIorganizemycodetomakeiteasiertochangethebaseclass? . . . . . . . . . . 29
2.6.8 HowdoIcreatestaticclassdataandstaticclassmethods? . . . . . . . . . . . . . . . . . 29
2.6.9 HowcanIoverloadconstructors(ormethods)inPython? . . . . . . . . . . . . . . . . . 30
2.6.10 Itrytouse__spamandIgetanerrorabout_SomeClassName__spam. . . . . . . . . . . 30
2.6.11 Myclassdefines__del__butitisnotcalledwhenIdeletetheobject. . . . . . . . . . . . 31
2.6.12 HowdoIgetalistofallinstancesofagivenclass? . . . . . . . . . . . . . . . . . . . . . 31
2.6.13 Whydoestheresultof id()appeartobenotunique? . . . . . . . . . . . . . . . . . . . 31
2.6.14 WhencanIrelyonidentitytestswiththe isoperator? . . . . . . . . . . . . . . . . . . . 32
2.6.15 Howcanasubclasscontrolwhatdataisstoredinanimmutableinstance? . . . . . . . . . 33
2.6.16 HowdoIcachemethodcalls? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
2.7 Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.7.1 HowdoIcreatea.pycfile? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.7.2 HowdoIfindthecurrentmodulename? . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.7.3 HowcanIhavemodulesthatmutuallyimporteachother? . . . . . . . . . . . . . . . . . 36
2.7.4 __import__(‘x.y.z’)returns<module‘x’>;howdoIgetz? . . . . . . . . . . . . . . . . . 36
ii
2.7.5 When I edit an imported module and reimport it, the changes don’t show up. Why does
thishappen? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
3 DesignandHistoryFAQ 39
3.1 WhydoesPythonuseindentationforgroupingofstatements? . . . . . . . . . . . . . . . . . . . . 39
3.2 WhyamIgettingstrangeresultswithsimplearithmeticoperations? . . . . . . . . . . . . . . . . . 39
3.3 Whyarefloating-pointcalculationssoinaccurate? . . . . . . . . . . . . . . . . . . . . . . . . . . 39
3.4 WhyarePythonstringsimmutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
3.5 Whymust‘self’beusedexplicitlyinmethoddefinitionsandcalls? . . . . . . . . . . . . . . . . . . 40
3.6 Whycan’tIuseanassignmentinanexpression? . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
3.7 WhydoesPythonusemethodsforsomefunctionality(e.g. list.index())butfunctionsforother(e.g.
len(list))? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
3.8 Whyisjoin()astringmethodinsteadofalistortuplemethod? . . . . . . . . . . . . . . . . . . . 41
3.9 Howfastareexceptions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
3.10 Whyisn’tthereaswitchorcasestatementinPython? . . . . . . . . . . . . . . . . . . . . . . . . 42
3.11 Can’tyouemulatethreadsintheinterpreterinsteadofrelyingonanOS-specificthreadimplemen-
tation?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
3.12 Whycan’tlambdaexpressionscontainstatements? . . . . . . . . . . . . . . . . . . . . . . . . . . 43
3.13 CanPythonbecompiledtomachinecode,Corsomeotherlanguage? . . . . . . . . . . . . . . . 43
3.14 HowdoesPythonmanagememory? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
3.15 Whydoesn’tCPythonuseamoretraditionalgarbagecollectionscheme? . . . . . . . . . . . . . . 44
3.16 Whyisn’tallmemoryfreedwhenCPythonexits? . . . . . . . . . . . . . . . . . . . . . . . . . . 44
3.17 Whyarethereseparatetupleandlistdatatypes? . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
3.18 HowarelistsimplementedinCPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
3.19 HowaredictionariesimplementedinCPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
3.20 Whymustdictionarykeysbeimmutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
3.21 Whydoesn’tlist.sort()returnthesortedlist? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
3.22 HowdoyouspecifyandenforceaninterfacespecinPython? . . . . . . . . . . . . . . . . . . . . 46
3.23 Whyistherenogoto? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
3.24 Whycan’trawstrings(r-strings)endwithabackslash? . . . . . . . . . . . . . . . . . . . . . . . 47
3.25 Whydoesn’tPythonhavea“with”statementforattributeassignments? . . . . . . . . . . . . . . . 47
3.26 Whydon’tgeneratorssupportthewithstatement? . . . . . . . . . . . . . . . . . . . . . . . . . . 48
3.27 Whyarecolonsrequiredfortheif/while/def/classstatements? . . . . . . . . . . . . . . . . . . . . 48
3.28 WhydoesPythonallowcommasattheendoflistsandtuples? . . . . . . . . . . . . . . . . . . . 49
4 LibraryandExtensionFAQ 51
4.1 GeneralLibraryQuestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
4.1.1 HowdoIfindamoduleorapplicationtoperformtaskX? . . . . . . . . . . . . . . . . . 51
4.1.2 Whereisthemath.py(socket.py,regex.py,etc.) sourcefile? . . . . . . . . . . . . . . . . 51
4.1.3 HowdoImakeaPythonscriptexecutableonUnix? . . . . . . . . . . . . . . . . . . . . 51
4.1.4 Isthereacurses/termcappackageforPython? . . . . . . . . . . . . . . . . . . . . . . . 52
4.1.5 IsthereanequivalenttoC’sonexit()inPython? . . . . . . . . . . . . . . . . . . . . . . 52
4.1.6 Whydon’tmysignalhandlerswork? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.2 Commontasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
4.2.1 HowdoItestaPythonprogramorcomponent? . . . . . . . . . . . . . . . . . . . . . . 52
4.2.2 HowdoIcreatedocumentationfromdocstrings? . . . . . . . . . . . . . . . . . . . . . 53
4.2.3 HowdoIgetasinglekeypressatatime? . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.3 Threads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.3.1 HowdoIprogramusingthreads? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.3.2 Noneofmythreadsseemtorun: why? . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.3.3 HowdoIparceloutworkamongabunchofworkerthreads? . . . . . . . . . . . . . . . 54
4.3.4 Whatkindsofglobalvaluemutationarethread-safe? . . . . . . . . . . . . . . . . . . . . 55
4.3.5 Can’twegetridoftheGlobalInterpreterLock? . . . . . . . . . . . . . . . . . . . . . . 55
4.4 InputandOutput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
4.4.1 HowdoIdeleteafile? (Andotherfilequestions…) . . . . . . . . . . . . . . . . . . . . 56
4.4.2 HowdoIcopyafile? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
4.4.3 HowdoIread(orwrite)binarydata? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
4.4.4 Ican’tseemtouseos.read()onapipecreatedwithos.popen();why? . . . . . . . . . . . . 57
iii
4.4.5 HowdoIaccesstheserial(RS232)port? . . . . . . . . . . . . . . . . . . . . . . . . . . 57
4.4.6 Whydoesn’tclosingsys.stdout(stdin,stderr)reallycloseit? . . . . . . . . . . . . . . . . 57
4.5 Network/InternetProgramming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
4.5.1 WhatWWWtoolsarethereforPython? . . . . . . . . . . . . . . . . . . . . . . . . . . 57
4.5.2 WhatmoduleshouldIusetohelpwithgeneratingHTML? . . . . . . . . . . . . . . . . . 58
4.5.3 HowdoIsendmailfromaPythonscript? . . . . . . . . . . . . . . . . . . . . . . . . . 58
4.5.4 HowdoIavoidblockingintheconnect()methodofasocket? . . . . . . . . . . . . . . . 58
4.6 Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
4.6.1 ArethereanyinterfacestodatabasepackagesinPython? . . . . . . . . . . . . . . . . . . 59
4.6.2 HowdoyouimplementpersistentobjectsinPython? . . . . . . . . . . . . . . . . . . . . 59
4.7 MathematicsandNumerics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
4.7.1 HowdoIgeneraterandomnumbersinPython? . . . . . . . . . . . . . . . . . . . . . . . 59
5 Extending/EmbeddingFAQ 61
5.1 CanIcreatemyownfunctionsinC? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.2 CanIcreatemyownfunctionsinC++? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.3 WritingCishard;arethereanyalternatives? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.4 HowcanIexecutearbitraryPythonstatementsfromC? . . . . . . . . . . . . . . . . . . . . . . . 61
5.5 HowcanIevaluateanarbitraryPythonexpressionfromC? . . . . . . . . . . . . . . . . . . . . . 61
5.6 HowdoIextractCvaluesfromaPythonobject? . . . . . . . . . . . . . . . . . . . . . . . . . . 61
5.7 HowdoIusePy_BuildValue()tocreateatupleofarbitrarylength? . . . . . . . . . . . . . . . . . 62
5.8 HowdoIcallanobject’smethodfromC? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
5.9 HowdoIcatchtheoutputfromPyErr_Print()(oranythingthatprintstostdout/stderr)? . . . . . . 62
5.10 HowdoIaccessamodulewritteninPythonfromC? . . . . . . . . . . . . . . . . . . . . . . . . 63
5.11 HowdoIinterfacetoC++objectsfromPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
5.12 IaddedamoduleusingtheSetupfileandthemakefails;why? . . . . . . . . . . . . . . . . . . . 63
5.13 HowdoIdebuganextension? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
5.14 IwanttocompileaPythonmoduleonmyLinuxsystem,butsomefilesaremissing. Why? . . . . . 64
5.15 HowdoItell“incompleteinput”from“invalidinput”? . . . . . . . . . . . . . . . . . . . . . . . 64
5.16 HowdoIfindundefinedg++symbols__builtin_newor__pure_virtual? . . . . . . . . . . . . . . 64
5.17 CanIcreateanobjectclasswithsomemethodsimplementedinCandothersinPython(e.g. through
inheritance)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
6 PythononWindowsFAQ 65
6.1 HowdoIrunaPythonprogramunderWindows? . . . . . . . . . . . . . . . . . . . . . . . . . . 65
6.2 HowdoImakePythonscriptsexecutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
6.3 WhydoesPythonsometimestakesolongtostart? . . . . . . . . . . . . . . . . . . . . . . . . . . 66
6.4 HowdoImakeanexecutablefromaPythonscript? . . . . . . . . . . . . . . . . . . . . . . . . . 66
6.5 Isa *.pydfilethesameasaDLL? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
6.6 HowcanIembedPythonintoaWindowsapplication? . . . . . . . . . . . . . . . . . . . . . . . 67
6.7 HowdoIkeepeditorsfrominsertingtabsintomyPythonsource? . . . . . . . . . . . . . . . . . 68
6.8 HowdoIcheckforakeypresswithoutblocking? . . . . . . . . . . . . . . . . . . . . . . . . . . 68
6.9 HowdoIsolvethemissingapi-ms-win-crt-runtime-l1-1-0.dllerror? . . . . . . . . . . . . . . . . 68
7 GraphicUserInterfaceFAQ 69
7.1 GeneralGUIQuestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
7.2 WhatGUItoolkitsexistforPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
7.3 Tkinterquestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
7.3.1 HowdoIfreezeTkinterapplications? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
7.3.2 CanIhaveTkeventshandledwhilewaitingforI/O? . . . . . . . . . . . . . . . . . . . . 69
7.3.3 Ican’tgetkeybindingstoworkinTkinter: why? . . . . . . . . . . . . . . . . . . . . . . 69
8 “WhyisPythonInstalledonmyComputer?” FAQ 71
8.1 WhatisPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
8.2 WhyisPythoninstalledonmymachine? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
8.3 CanIdeletePython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
A Glossary 73
iv
B Aboutthesedocuments 91
B.1 ContributorstothePythonDocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
C HistoryandLicense 93
C.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
C.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 94
C.2.1 PSFLICENSEAGREEMENTFORPYTHON3.13.0 . . . . . . . . . . . . . . . . . . . 94
C.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 95
C.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 95
C.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 96
C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCUMEN-
TATION. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
C.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 97
C.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
C.3.4 Cookiemanagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
C.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
C.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
C.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
C.3.11 strtodanddtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
C.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
C.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
D Copyright 113
Index 115
v
vi
CHAPTER
ONE
GENERALPYTHONFAQ
1.1GeneralInformation
1.1.1WhatisPython?
Python is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions,
dynamictyping,veryhighleveldynamicdatatypes,andclasses. Itsupportsmultipleprogrammingparadigmsbeyond
object-orientedprogramming,suchasproceduralandfunctionalprogramming. Pythoncombinesremarkablepower
with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems,
andisextensibleinCorC++. Itisalsousableasanextensionlanguageforapplicationsthatneedaprogrammable
interface. Finally,Pythonisportable: itrunsonmanyUnixvariantsincludingLinuxandmacOS,andonWindows.
Tofindoutmore,startwithtutorial-index. The Beginner’sGuidetoPython linkstootherintroductorytutorialsand
resourcesforlearningPython.
1.1.2WhatisthePythonSoftwareFoundation?
ThePythonSoftwareFoundationisanindependentnon-profitorganizationthatholdsthecopyrightonPythonver-
sions 2.1 and newer. The PSF’s mission is to advance open source technology related to the Python programming
languageandtopublicizetheuseofPython. ThePSF’shomepageisat https://www.python.org/psf/ .
DonationstothePSFaretax-exemptintheUS.IfyouusePythonandfindithelpful,pleasecontributevia thePSF
donationpage .
1.1.3AretherecopyrightrestrictionsontheuseofPython?
You can do anything you want with the source, as long as you leave the copyrights in and display those copyrights
in any documentation about Python that you produce. If you honor the copyright rules, it’s OK to use Python for
commercialuse,tosellcopiesofPythoninsourceorbinaryform(modifiedorunmodified),ortosellproductsthat
incorporatePythoninsomeform. WewouldstillliketoknowaboutallcommercialuseofPython,ofcourse.
Seethelicensepage tofindfurtherexplanationsandthefulltextofthePSFLicense.
ThePythonlogoistrademarked,andincertaincasespermissionisrequiredtouseit. Consult theTrademarkUsage
Policyformoreinformation.
1.1.4WhywasPythoncreatedinthefirstplace?
Here’sa verybriefsummaryofwhatstarteditall,writtenbyGuidovanRossum:
I had extensive experience with implementing an interpreted language in the ABC group at CWI, and
fromworkingwiththisgroupIhadlearnedalotaboutlanguagedesign. ThisistheoriginofmanyPython
features,includingtheuseofindentationforstatementgroupingandtheinclusionofvery-high-leveldata
types(althoughthedetailsarealldifferentinPython).
IhadanumberofgripesabouttheABClanguage,butalsolikedmanyofitsfeatures. Itwasimpossible
to extend the ABC language (or its implementation) to remedy my complaints – in fact its lack of
extensibilitywasoneofitsbiggestproblems. IhadsomeexperiencewithusingModula-2+andtalked
1
PythonFrequentlyAskedQuestions,Release3.13.0
withthedesignersofModula-3andreadtheModula-3report. Modula-3istheoriginofthesyntaxand
semanticsusedforexceptions,andsomeotherPythonfeatures.
I was working in the Amoeba distributed operating system group at CWI. We needed a better way to
dosystemadministrationthanbywritingeitherCprogramsorBourneshellscripts,sinceAmoebahad
itsownsystemcallinterfacewhichwasn’teasilyaccessiblefromtheBourneshell. Myexperiencewith
error handling in Amoeba made me acutely aware of the importance of exceptions as a programming
languagefeature.
ItoccurredtomethatascriptinglanguagewithasyntaxlikeABCbutwithaccesstotheAmoebasystem
callswouldfilltheneed. IrealizedthatitwouldbefoolishtowriteanAmoeba-specificlanguage, soI
decidedthatIneededalanguagethatwasgenerallyextensible.
Duringthe1989Christmasholidays,Ihadalotoftimeonmyhand,soIdecidedtogiveitatry. During
thenextyear,whilestillmostlyworkingonitinmyowntime,PythonwasusedintheAmoebaproject
withincreasingsuccess,andthefeedbackfromcolleaguesmademeaddmanyearlyimprovements.
In February 1991, after just over a year of development, I decided to post to USENET. The rest is in
theMisc/HISTORY file.
1.1.5WhatisPythongoodfor?
Pythonisahigh-levelgeneral-purposeprogramminglanguagethatcanbeappliedtomanydifferentclassesofprob-
lems.
The language comes with a large standard library that covers areas such as string processing (regular expressions,
Unicode, calculating differences between files), internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP),
softwareengineering(unittesting,logging,profiling,parsingPythoncode),andoperatingsysteminterfaces(system
calls,filesystems,TCP/IPsockets). Lookatthetableofcontentsforlibrary-indextogetanideaofwhat’savailable.
A wide variety of third-party extensions are also available. Consult the Python Package Index to find packages of
interesttoyou.
1.1.6HowdoesthePythonversionnumberingschemework?
Pythonversionsarenumbered“A.B.C”or“A.B”:
•Aisthemajorversionnumber–itisonlyincrementedforreallymajorchangesinthelanguage.
•Bistheminorversionnumber–itisincrementedforlessearth-shatteringchanges.
•Cisthemicroversionnumber–itisincrementedforeachbugfixrelease.
Notallreleasesarebugfixreleases. Intherun-uptoanewfeaturerelease,aseriesofdevelopmentreleasesaremade,
denoted as alpha, beta, or release candidate. Alphas are early releases in which interfaces aren’t yet finalized; it’s
not unexpected to see an interface change between two alpha releases. Betas are more stable, preserving existing
interfacesbutpossiblyaddingnewmodules,andreleasecandidatesarefrozen,makingnochangesexceptasneeded
tofixcriticalbugs.
Alpha,betaandreleasecandidateversionshaveanadditionalsuffix:
•Thesuffixforanalphaversionis“aN”forsomesmallnumber N.
•Thesuffixforabetaversionis“bN”forsomesmallnumber N.
•Thesuffixforareleasecandidateversionis“rcN”forsomesmallnumber N.
Inotherwords,allversionslabeled 2.0aNprecedetheversionslabeled 2.0bN,whichprecedeversionslabeled 2.0rcN,
andthoseprecede2.0.
Youmayalsofindversionnumberswitha“+”suffix,e.g. “2.2+”. Theseareunreleasedversions,builtdirectlyfrom
theCPythondevelopmentrepository. Inpractice, afterafinalminorreleaseismade, theversionisincrementedto
thenextminorversion,whichbecomesthe“a0”version,e.g. “2.4a0”.
See theDeveloper’s Guide for more information about the development cycle, and PEP 387to learn more about
Python’s backward compatibility policy. See also the documentation for sys.version ,sys.hexversion , and
sys.version_info .
2 Chapter1. GeneralPythonFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
1.1.7HowdoIobtainacopyofthePythonsource?
The latest Python source distribution is always available from python.org, at https://www.python.org/downloads/ .
Thelatestdevelopmentsourcescanbeobtainedat https://github.com/python/cpython/ .
The source distribution is a gzipped tar file containing the complete C source, Sphinx-formatted documentation,
Python library modules, example programs, and several useful pieces of freely distributable software. The source
willcompileandrunoutoftheboxonmostUNIXplatforms.
Consultthe GettingStartedsectionofthePythonDeveloper’sGuide formoreinformationongettingthesourcecode
andcompilingit.
1.1.8HowdoIgetdocumentationonPython?
ThestandarddocumentationforthecurrentstableversionofPythonisavailableat https://docs.python.org/3/ . PDF,
plaintext,anddownloadableHTMLversionsarealsoavailableat https://docs.python.org/3/download.html .
The documentation is written in reStructuredText and processed by the Sphinx documentation tool . The reStruc-
turedTextsourceforthedocumentationispartofthePythonsourcedistribution.
1.1.9I’veneverprogrammedbefore. IsthereaPythontutorial?
Therearenumeroustutorialsandbooksavailable. Thestandarddocumentationincludestutorial-index.
ConsulttheBeginner’sGuide tofindinformationforbeginningPythonprogrammers,includinglistsoftutorials.
1.1.10IsthereanewsgroupormailinglistdevotedtoPython?
There is a newsgroup, comp.lang.python , and a mailing list, python-list. The newsgroup and mailing list are
gatewayed into each other – if you can read news it’s unnecessary to subscribe to the mailing list. comp.lang.
pythonis high-traffic, receiving hundreds of postings every day, and Usenet readers are often more able to cope
withthisvolume.
Announcementsofnewsoftwarereleasesandeventscanbefoundincomp.lang.python.announce,alow-trafficmod-
eratedlistthatreceivesaboutfivepostingsperday. It’savailableas thepython-announcemailinglist .
Moreinfoaboutothermailinglistsandnewsgroupscanbefoundat https://www.python.org/community/lists/ .
1.1.11HowdoIgetabetatestversionofPython?
Alpha and beta releases are available from https://www.python.org/downloads/ . All releases are announced on the
comp.lang.pythonandcomp.lang.python.announcenewsgroupsandonthePythonhomepageat https://www.python.
org/;anRSSfeedofnewsisavailable.
YoucanalsoaccessthedevelopmentversionofPythonthroughGit. See ThePythonDeveloper’sGuide fordetails.
1.1.12HowdoIsubmitbugreportsandpatchesforPython?
Toreportabugorsubmitapatch,usetheissuetrackerat https://github.com/python/cpython/issues .
FormoreinformationonhowPythonisdeveloped,consult thePythonDeveloper’sGuide .
1.1.13ArethereanypublishedarticlesaboutPythonthatIcanreference?
It’sprobablybesttociteyourfavoritebookaboutPython.
Theveryfirstarticle aboutPythonwaswrittenin1991andisnowquiteoutdated.
Guido van Rossum and Jelke de Boer, “Interactively Testing Remote Servers Using the Python Pro-
grammingLanguage”,CWIQuarterly,Volume4,Issue4(December1991),Amsterdam,pp283–303.
1.1. GeneralInformation 3
PythonFrequentlyAskedQuestions,Release3.13.0
1.1.14ArethereanybooksonPython?
Yes, there are many, and more are being published. See the python.org wiki at https://wiki.python.org/moin/
PythonBooks foralist.
Youcanalsosearchonlinebookstoresfor“Python”andfilterouttheMontyPythonreferences;orperhapssearchfor
“Python”and“language”.
1.1.15Whereintheworldiswww.python.orglocated?
ThePythonproject’sinfrastructureislocatedallovertheworldandismanagedbythePythonInfrastructureTeam.
Detailshere.
1.1.16WhyisitcalledPython?
When he began implementing Python, Guido van Rossum was also reading the published scripts from “Monty
Python’s Flying Circus” , a BBC comedy series from the 1970s. Van Rossum thought he needed a name that was
short,unique,andslightlymysterious,sohedecidedtocallthelanguagePython.
1.1.17DoIhavetolike“MontyPython’sFlyingCircus”?
No,butithelps. :)
1.2Pythonintherealworld
1.2.1HowstableisPython?
Very stable. New, stable releases have been coming out roughly every 6 to 18 months since 1991, and this seems
likelytocontinue. Asofversion3.9,Pythonwillhaveanewfeaturereleaseevery12months( PEP 602).
Thedevelopersissuebugfixreleasesofolderversions,sothestabilityofexistingreleasesgraduallyimproves. Bugfix
releases, indicated by a third component of the version number (e.g. 3.5.3, 3.6.2), are managed for stability; only
fixes for known problems are included in a bugfix release, and it’s guaranteed that interfaces will remain the same
throughoutaseriesofbugfixreleases.
Thelateststablereleasescanalwaysbefoundonthe Pythondownloadpage . Python3.xistherecommendedversion
andsupportedbymostwidelyusedlibraries. Python2.x isnotmaintainedanymore .
1.2.2HowmanypeopleareusingPython?
Thereareprobablymillionsofusers,thoughit’sdifficulttoobtainanexactcount.
Python is available for free download, so there are no sales figures, and it’s available from many different sites and
packagedwithmanyLinuxdistributions,sodownloadstatisticsdon’ttellthewholestoryeither.
Thecomp.lang.pythonnewsgroupisveryactive,butnotallPythonusersposttothegrouporevenreadit.
1.2.3HaveanysignificantprojectsbeendoneinPython?
Seehttps://www.python.org/about/success foralistofprojectsthatusePython. Consultingtheproceedingsfor past
Pythonconferences willrevealcontributionsfrommanydifferentcompaniesandorganizations.
High-profilePythonprojectsinclude theMailmanmailinglistmanager andtheZopeapplicationserver . SeveralLinux
distributions,mostnotably RedHat,havewrittenpartoralloftheirinstallerandsystemadministrationsoftwarein
Python. CompaniesthatusePythoninternallyincludeGoogle,Yahoo,andLucasfilmLtd.
1.2.4WhatnewdevelopmentsareexpectedforPythoninthefuture?
Seehttps://peps.python.org/ forthePythonEnhancementProposals(PEPs). PEPsaredesigndocumentsdescribing
asuggestednewfeatureforPython,providingaconcisetechnicalspecificationandarationale. LookforaPEPtitled
“PythonX.YReleaseSchedule”,whereX.Yisaversionthathasn’tbeenpubliclyreleasedyet.
4 Chapter1. GeneralPythonFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
Newdevelopmentisdiscussedon thepython-devmailinglist .
1.2.5IsitreasonabletoproposeincompatiblechangestoPython?
Ingeneral,no. TherearealreadymillionsoflinesofPythoncodearoundtheworld,soanychangeinthelanguage
thatinvalidatesmorethanaverysmallfractionofexistingprogramshastobefrownedupon. Evenifyoucanprovide
aconversionprogram,there’sstilltheproblemofupdatingalldocumentation;manybookshavebeenwrittenabout
Python,andwedon’twanttoinvalidatethemallatasinglestroke.
Providingagradualupgradepathisnecessaryifafeaturehastobechanged. PEP5describestheprocedurefollowed
forintroducingbackward-incompatiblechangeswhileminimizingdisruptionforusers.
1.2.6IsPythonagoodlanguageforbeginningprogrammers?
Yes.
ItisstillcommontostartstudentswithaproceduralandstaticallytypedlanguagesuchasPascal, C,orasubsetof
C++orJava. StudentsmaybebetterservedbylearningPythonastheirfirstlanguage. Pythonhasaverysimpleand
consistentsyntaxandalargestandardlibraryand,mostimportantly,usingPythoninabeginningprogrammingcourse
letsstudentsconcentrateonimportantprogrammingskillssuchasproblemdecompositionanddatatypedesign. With
Python,studentscanbequicklyintroducedtobasicconceptssuchasloopsandprocedures. Theycanprobablyeven
workwithuser-definedobjectsintheirveryfirstcourse.
For a student who has never programmed before, using a statically typed language seems unnatural. It presents
additionalcomplexitythatthestudentmustmasterandslowsthepaceofthecourse. Thestudentsaretryingtolearn
to think like a computer, decompose problems, design consistent interfaces, and encapsulate data. While learning
to use a statically typed language is important in the long term, it is not necessarily the best topic to address in the
students’firstprogrammingcourse.
Many other aspects of Python make it a good first language. Like Java, Python has a large standard library so
thatstudentscanbeassignedprogrammingprojectsveryearlyinthecoursethat dosomething. Assignmentsaren’t
restricted to the standard four-function calculator and check balancing programs. By using the standard library,
studentscangainthesatisfactionofworkingonrealisticapplicationsastheylearnthefundamentalsofprogramming.
Using the standard library also teaches students about code reuse. Third-party modules such as PyGame are also
helpfulinextendingthestudents’reach.
Python’sinteractiveinterpreterenablesstudentstotestlanguagefeatureswhilethey’reprogramming. Theycankeep
a window with the interpreter running while they enter their program’s source in another window. If they can’t
rememberthemethodsforalist,theycandosomethinglikethis:
>>> L=[]
>>> dir(L)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',
'__dir__', '__doc__', '__eq__', '__format__', '__ge__',
'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',
'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',
'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',
'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',
'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',
'reverse', 'sort']
>>> [dfor dindir(L) if'__'not ind]
['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',
,→'reverse', 'sort']
>>> help(L .append)
Help on built-in function append:
append(...)
L.append(object) -> None -- append object to end
(continuesonnextpage)
1.2. Pythonintherealworld 5
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
>>> L.append( 1)
>>> L
[1]
Withtheinterpreter,documentationisneverfarfromthestudentastheyareprogramming.
TherearealsogoodIDEsforPython. IDLEisacross-platformIDEforPythonthatiswritteninPythonusingTkinter.
Emacs users will be happy to know that there is a very good Python mode for Emacs. All of these programming
environments provide syntax highlighting, auto-indenting, and access to the interactive interpreter while coding.
ConsultthePythonwiki forafulllistofPythoneditingenvironments.
IfyouwanttodiscussPython’suseineducation,youmaybeinterestedinjoining theedu-sigmailinglist .
6 Chapter1. GeneralPythonFAQ
CHAPTER
TWO
PROGRAMMINGFAQ
2.1GeneralQuestions
2.1.1Is there a source code level debugger with breakpoints, single-stepping,
etc.?
Yes.
SeveraldebuggersforPythonaredescribedbelow,andthebuilt-infunction breakpoint() allowsyoutodropinto
anyofthem.
Thepdbmoduleisasimplebutadequateconsole-modedebuggerforPython. ItispartofthestandardPythonlibrary,
andis documented in the Library Reference Manual . Youcanalsowriteyourowndebuggerbyusingthe
codeforpdbasanexample.
TheIDLEinteractivedevelopmentenvironment,whichispartofthestandardPythondistribution(normallyavailable
asTools/scripts/idle3 ),includesagraphicaldebugger.
PythonWinisaPythonIDEthatincludesaGUIdebuggerbasedonpdb. ThePythonWindebuggercolorsbreakpoints
and has quite a few cool features such as debugging non-PythonWin programs. PythonWin is available as part of
pywin32projectandasapartofthe ActivePython distribution.
EricisanIDEbuiltonPyQtandtheScintillaeditingcomponent.
trepan3kisagdb-likedebugger.
VisualStudioCode isanIDEwithdebuggingtoolsthatintegrateswithversion-controlsoftware.
ThereareanumberofcommercialPythonIDEsthatincludegraphicaldebuggers. Theyinclude:
•WingIDE
•KomodoIDE
•PyCharm
2.1.2Aretheretoolstohelpfindbugsorperformstaticanalysis?
Yes.
PylintandPyflakesdobasiccheckingthatwillhelpyoucatchbugssooner.
Statictypecheckerssuchas Mypy,Pyre,andPytypecanchecktypehintsinPythonsourcecode.
2.1.3HowcanIcreateastand-alonebinaryfromaPythonscript?
You don’t need the ability to compile Python to C code if all you want is a stand-alone program that users can
downloadandrunwithouthavingtoinstallthePythondistributionfirst. Thereareanumberoftoolsthatdetermine
thesetofmodulesrequiredbyaprogramandbindthesemodulestogetherwithaPythonbinarytoproduceasingle
executable.
7
PythonFrequentlyAskedQuestions,Release3.13.0
One is to use the freeze tool, which is included in the Python source tree as Tools/freeze . It converts Python byte
codetoCarrays;withaCcompileryoucanembedallyourmodulesintoanewprogram,whichisthenlinkedwith
thestandardPythonmodules.
Itworksbyscanningyoursourcerecursivelyforimportstatements(inbothforms)andlookingforthemodulesinthe
standardPythonpathaswellasinthesourcedirectory(forbuilt-inmodules). Itthenturnsthebytecodeformodules
writteninPythonintoCcode(arrayinitializersthatcanbeturnedintocodeobjectsusingthemarshalmodule)and
createsacustom-madeconfigfilethatonlycontainsthosebuilt-inmoduleswhichareactuallyusedintheprogram.
It then compiles the generated C code and links it with the rest of the Python interpreter to form a self-contained
binarywhichactsexactlylikeyourscript.
ThefollowingpackagescanhelpwiththecreationofconsoleandGUIexecutables:
•Nuitka(Cross-platform)
•PyInstaller (Cross-platform)
•PyOxidizer (Cross-platform)
•cx_Freeze (Cross-platform)
•py2app(macOSonly)
•py2exe(Windowsonly)
2.1.4AretherecodingstandardsorastyleguideforPythonprograms?
Yes. Thecodingstylerequiredforstandardlibrarymodulesisdocumentedas PEP8.
2.2CoreLanguage
2.2.1WhyamIgettinganUnboundLocalErrorwhenthevariablehasavalue?
Itcanbe a surpriseto getthe UnboundLocalError inpreviouslyworking codewhenit ismodifiedby addingan
assignmentstatementsomewhereinthebodyofafunction.
Thiscode:
>>> x=10
>>> def bar():
... print (x)
...
>>> bar()
10
works,butthiscode:
>>> x=10
>>> def foo():
... print (x)
... x+=1
resultsinan UnboundLocalError :
>>> foo()
Traceback (most recent call last):
...
UnboundLocalError : local variable 'x' referenced before assignment
This is because when you make an assignment to a variable in a scope, that variable becomes local to that scope
and shadows any similarly named variable in the outer scope. Since the last statement in foo assigns a new value
tox, thecompilerrecognizesitasalocalvariable. Consequentlywhentheearlier print(x) attemptstoprintthe
uninitializedlocalvariableandanerrorresults.
8 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
Intheexampleaboveyoucanaccesstheouterscopevariablebydeclaringitglobal:
>>> x=10
>>> def foobar ():
... global x
... print (x)
... x+=1
...
>>> foobar()
10
Thisexplicitdeclarationisrequiredinordertoremindyouthat(unlikethesuperficiallyanalogoussituationwithclass
andinstancevariables)youareactuallymodifyingthevalueofthevariableintheouterscope:
>>> print (x)
11
Youcandoasimilarthinginanestedscopeusingthe nonlocal keyword:
>>> def foo():
... x=10
... def bar():
... nonlocal x
... print (x)
... x+=1
... bar()
... print (x)
...
>>> foo()
10
11
2.2.2WhataretherulesforlocalandglobalvariablesinPython?
InPython,variablesthatareonlyreferencedinsideafunctionareimplicitlyglobal. Ifavariableisassignedavalue
anywherewithinthefunction’sbody,it’sassumedtobealocalunlessexplicitlydeclaredasglobal.
Thoughabitsurprisingatfirst,amoment’sconsiderationexplainsthis. Ononehand,requiring globalforassigned
variables provides a bar against unintended side-effects. On the other hand, if globalwas required for all global
references,you’dbeusing globalallthetime. You’dhavetodeclareasglobaleveryreferencetoabuilt-infunction
or to a component of an imported module. This clutter would defeat the usefulness of the globaldeclaration for
identifyingside-effects.
2.2.3Whydolambdasdefinedinaloopwithdifferentvaluesallreturnthesame
result?
Assumeyouuseaforlooptodefineafewdifferentlambdas(orevenplainfunctions),e.g.:
>>> squares =[]
>>> for xinrange (5):
... squares .append( lambda : x**2)
This gives you a list that contains 5 lambdas that calculate x**2. You might expect that, when called, they would
return,respectively, 0,1,4,9,and 16. However,whenyouactuallytryyouwillseethattheyallreturn 16:
>>> squares[ 2]()
16
>>> squares[ 4]()
16
2.2. CoreLanguage 9
PythonFrequentlyAskedQuestions,Release3.13.0
This happens because xis not local to the lambdas, but is defined in the outer scope, and it is accessed when the
lambdaiscalled—notwhenitisdefined. Attheendoftheloop,thevalueof xis4,soallthefunctionsnowreturn
4**2,i.e. 16. Youcanalsoverifythisbychangingthevalueof xandseehowtheresultsofthelambdaschange:
>>> x=8
>>> squares[ 2]()
64
Inordertoavoidthis,youneedtosavethevaluesinvariableslocaltothelambdas,sothattheydon’trelyonthevalue
oftheglobal x:
>>> squares =[]
>>> for xinrange (5):
... squares .append( lambda n=x: n **2)
Here, n=xcreatesanewvariable nlocaltothelambdaandcomputedwhenthelambdaisdefinedsothatithasthe
samevaluethat xhadatthatpointintheloop. Thismeansthatthevalueof nwillbe 0inthefirstlambda, 1inthe
second, 2inthethird,andsoon. Thereforeeachlambdawillnowreturnthecorrectresult:
>>> squares[ 2]()
4
>>> squares[ 4]()
16
Notethatthisbehaviourisnotpeculiartolambdas,butappliestoregularfunctionstoo.
2.2.4HowdoIshareglobalvariablesacrossmodules?
Thecanonicalwaytoshareinformationacrossmoduleswithinasingleprogramistocreateaspecialmodule(often
called config or cfg). Just import the config module in all modules of your application; the module then becomes
available as a global name. Because there is only one instance of each module, any changes made to the module
objectgetreflectedeverywhere. Forexample:
config.py:
x=0 # Default value of the 'x' configuration setting
mod.py:
import config
config .x=1
main.py:
import config
import mod
print (config .x)
Notethatusingamoduleisalsothebasisforimplementingthesingletondesignpattern,forthesamereason.
2.2.5Whatarethe“bestpractices”forusingimportinamodule?
In general, don’t use from modulename import * . Doing so clutters the importer’s namespace, and makes it
muchharderforlinterstodetectundefinednames.
Import modules at the top of a file. Doing so makes it clear what other modules your code requires and avoids
questionsofwhetherthemodulenameisinscope. Usingoneimportperlinemakesiteasytoaddanddeletemodule
imports,butusingmultipleimportsperlineuseslessscreenspace.
It’sgoodpracticeifyouimportmodulesinthefollowingorder:
1.standardlibrarymodules–e.g. sys,os,argparse ,re
10 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
2.third-party library modules (anything installed in Python’s site-packages directory) – e.g. dateutil ,
requests ,PIL.Image
3.locallydevelopedmodules
It is sometimes necessary to move imports to a function or class to avoid problems with circular imports. Gordon
McMillansays:
Circular imports are fine where both modules use the “import <module>” form of import. They fail
whenthe2ndmodulewantstograbanameoutofthefirst(“frommoduleimportname”)andtheimport
isatthetoplevel. That’sbecausenamesinthe1starenotyetavailable,becausethefirstmoduleisbusy
importingthe2nd.
Inthiscase,ifthesecondmoduleisonlyusedinonefunction,thentheimportcaneasilybemovedintothatfunction.
By the time the import is called, the first module will have finished initializing, and the second module can do its
import.
Itmayalsobenecessarytomoveimportsoutofthetoplevelofcodeifsomeofthemodulesareplatform-specific.
Inthatcase,itmaynotevenbepossibletoimportallofthemodulesatthetopofthefile. Inthiscase,importingthe
correctmodulesinthecorrespondingplatform-specificcodeisagoodoption.
Onlymoveimportsintoa local scope, suchas insidea functiondefinition, ifit’snecessary to solvea problemsuch
asavoidingacircularimportoraretryingtoreducetheinitializationtimeofamodule. Thistechniqueisespecially
helpfulifmanyoftheimportsareunnecessarydependingonhowtheprogramexecutes. Youmayalsowanttomove
importsintoafunctionifthemodulesareonlyeverusedinthatfunction. Notethatloadingamodulethefirsttime
maybeexpensivebecauseoftheonetimeinitializationofthemodule,butloadingamodulemultipletimesisvirtually
free, costing only a couple of dictionary lookups. Even if the module name has gone out of scope, the module is
probablyavailablein sys.modules .
2.2.6Whyaredefaultvaluessharedbetweenobjects?
Thistypeofbugcommonlybitesneophyteprogrammers. Considerthisfunction:
def foo(mydict ={}): # Danger: shared reference to one dict for all calls
...compute something ...
mydict[key] =value
return mydict
The first time you call this function, mydictcontains a single item. The second time, mydictcontains two items
becausewhen foo()beginsexecuting, mydictstartsoutwithanitemalreadyinit.
Itisoftenexpectedthatafunctioncallcreatesnewobjectsfordefaultvalues. Thisisnotwhathappens. Defaultvalues
arecreatedexactlyonce,whenthefunctionisdefined. Ifthatobjectischanged,likethedictionaryinthisexample,
subsequentcallstothefunctionwillrefertothischangedobject.
By definition, immutable objects such as numbers, strings, tuples, and None, are safe from change. Changes to
mutableobjectssuchasdictionaries,lists,andclassinstancescanleadtoconfusion.
Becauseofthisfeature,itisgoodprogrammingpracticetonotusemutableobjectsasdefaultvalues. Instead,use None
asthedefaultvalueandinsidethefunction,checkiftheparameteris Noneandcreateanewlist/dictionary/whatever
ifitis. Forexample,don’twrite:
def foo(mydict ={}):
...
but:
def foo(mydict =None ):
ifmydict isNone :
mydict ={} # create a new dict for local namespace
2.2. CoreLanguage 11
PythonFrequentlyAskedQuestions,Release3.13.0
Thisfeaturecanbeuseful. Whenyouhaveafunctionthat’stime-consumingtocompute,acommontechniqueisto
cache the parameters and the resulting value of each call to the function, and return the cached value if the same
valueisrequestedagain. Thisiscalled“memoizing”,andcanbeimplementedlikethis:
# Callers can only provide two parameters and optionally pass _cache by keyword
def expensive (arg1, arg2, *, _cache ={}):
if(arg1, arg2) in_cache:
return _cache[(arg1, arg2)]
# Calculate the value
result =...expensive computation ...
_cache[(arg1, arg2)] =result # Store result in the cache
return result
Youcoulduseaglobalvariablecontainingadictionaryinsteadofthedefaultvalue;it’samatteroftaste.
2.2.7How can I pass optional or keyword parameters from one function to an-
other?
Collect the arguments using the *and**specifiers in the function’s parameter list; this gives you the positional
arguments as a tuple and the keyword arguments as a dictionary. You can then pass these arguments when calling
anotherfunctionbyusing *and**:
def f(x, *args, **kwargs):
...
kwargs[ 'width ']='14.3c '
...
g(x, *args, **kwargs)
2.2.8Whatisthedifferencebetweenargumentsandparameters?
Parameters aredefinedbythenamesthatappearinafunctiondefinition,whereas arguments arethevaluesactually
passedtoafunctionwhencallingit. Parametersdefinewhat kind of arguments afunctioncanaccept. Forexample,
giventhefunctiondefinition:
def func (foo, bar =None ,**kwargs):
pass
foo,barandkwargsareparametersof func. However,whencalling func,forexample:
func( 42, bar =314, extra =somevar)
thevalues 42,314,and somevararearguments.
2.2.9Whydidchanginglist‘y’alsochangelist‘x’?
Ifyouwrotecodelike:
>>> x=[]
>>> y=x
>>> y.append( 10)
>>> y
[10]
>>> x
[10]
youmightbewonderingwhyappendinganelementto ychanged xtoo.
Therearetwofactorsthatproducethisresult:
12 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
1)Variablesaresimplynamesthatrefertoobjects. Doing y = xdoesn’tcreateacopyofthelist–itcreatesa
newvariable ythatreferstothesameobject xrefersto. Thismeansthatthereisonlyoneobject(thelist),and
bothxandyrefertoit.
2)Listsare mutable,whichmeansthatyoucanchangetheircontent.
Afterthecallto append() ,thecontentofthemutableobjecthaschangedfrom []to[10]. Sinceboththevariables
refertothesameobject,usingeithernameaccessesthemodifiedvalue [10].
Ifweinsteadassignanimmutableobjectto x:
>>> x=5# ints are immutable
>>> y=x
>>> x=x+1# 5 can't be mutated, we are creating a new object here
>>> x
6
>>> y
5
wecanseethatinthiscase xandyarenotequalanymore. Thisisbecauseintegersare immutable,andwhenwedo
x = x + 1 wearenotmutatingtheint 5byincrementingitsvalue;instead,wearecreatinganewobject(theint 6)
andassigningitto x(thatis,changingwhichobject xrefersto). Afterthisassignmentwehavetwoobjects(theints
6and5)andtwovariablesthatrefertothem( xnowrefersto 6butystillrefersto 5).
Some operations (for example y.append(10) andy.sort() ) mutate the object, whereas superficially similar
operations (for example y = y + [10] andsorted(y) ) create a new object. In general in Python (and in all
casesinthestandardlibrary)amethodthatmutatesanobjectwillreturn Nonetohelpavoidgettingthetwotypesof
operationsconfused. Soifyoumistakenlywrite y.sort() thinkingitwillgiveyouasortedcopyof y,you’llinstead
endupwith None,whichwilllikelycauseyourprogramtogenerateaneasilydiagnosederror.
However,thereisoneclassofoperationswherethesameoperationsometimeshasdifferentbehaviorswithdifferent
types: theaugmentedassignmentoperators. Forexample, +=mutateslistsbutnottuplesorints( a_list += [1,
2, 3]isequivalentto a_list.extend([1, 2, 3]) andmutates a_list,whereas some_tuple += (1, 2,
3)andsome_int += 1 createnewobjects).
Inotherwords:
•Ifwehaveamutableobject( list,dict,set,etc.),wecanusesomespecificoperationstomutateitandall
thevariablesthatrefertoitwillseethechange.
•If we have an immutable object ( str,int,tuple, etc.), all the variables that refer to it will always see the
samevalue,butoperationsthattransformthatvalueintoanewvaluealwaysreturnanewobject.
If you want to know if two variables refer to the same object or not, you can use the isoperator, or the built-in
function id().
2.2.10HowdoIwriteafunctionwithoutputparameters(callbyreference)?
RememberthatargumentsarepassedbyassignmentinPython. Sinceassignmentjustcreatesreferencestoobjects,
there’snoaliasbetweenanargumentnameinthecallerandcallee,andsonocall-by-referenceperse. Youcanachieve
thedesiredeffectinanumberofways.
1)Byreturningatupleoftheresults:
>>> def func1 (a, b):
... a='new-value ' # a and b are local names
... b=b+1 # assigned to new objects
... return a, b # return new values
...
>>> x, y ='old-value ',99
>>> func1(x, y)
('new-value', 100)
Thisisalmostalwaystheclearestsolution.
2.2. CoreLanguage 13
PythonFrequentlyAskedQuestions,Release3.13.0
2)Byusingglobalvariables. Thisisn’tthread-safe,andisnotrecommended.
3)Bypassingamutable(changeablein-place)object:
>>> def func2 (a):
... a[0]='new-value ' # 'a' references a mutable list
... a[1]=a[1]+1 # changes a shared object
...
>>> args =['old-value ',99]
>>> func2(args)
>>> args
['new-value', 100]
4)Bypassinginadictionarythatgetsmutated:
>>> def func3 (args):
... args[ 'a']='new-value ' # args is a mutable dictionary
... args[ 'b']=args[ 'b']+1 # change it in-place
...
>>> args ={'a':'old-value ','b':99}
>>> func3(args)
>>> args
{'a': 'new-value', 'b': 100}
5)Orbundleupvaluesinaclassinstance:
>>> class Namespace :
... def __init__ (self ,/,**args):
... for key, value inargs .items():
... setattr (self , key, value)
...
>>> def func4 (args):
... args .a='new-value ' # args is a mutable Namespace
... args .b=args .b+1 # change object in-place
...
>>> args =Namespace(a ='old-value ', b=99)
>>> func4(args)
>>> vars (args)
{'a': 'new-value', 'b': 100}
There’salmostneveragoodreasontogetthiscomplicated.
Yourbestchoiceistoreturnatuplecontainingthemultipleresults.
2.2.11HowdoyoumakeahigherorderfunctioninPython?
Youhavetwochoices: youcanusenestedscopesoryoucanusecallableobjects. Forexample,supposeyouwanted
todefine linear(a,b) whichreturnsafunction f(x)thatcomputesthevalue a*x+b. Usingnestedscopes:
def linear (a, b):
def result (x):
return a*x+b
return result
Orusingacallableobject:
class linear :
def __init__ (self , a, b):
(continuesonnextpage)
14 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
self .a,self .b=a, b
def __call__ (self , x):
return self .a*x+self .b
Inbothcases,
taxes =linear( 0.3,2)
givesacallableobjectwhere taxes(10e6) == 0.3 * 10e6 + 2 .
Thecallableobjectapproachhasthedisadvantagethatitisabitslowerandresultsinslightlylongercode. However,
notethatacollectionofcallablescansharetheirsignatureviainheritance:
class exponential (linear):
# __init__ inherited
def __call__ (self , x):
return self .a*(x**self .b)
Objectcanencapsulatestateforseveralmethods:
class counter :
value =0
def set(self , x):
self .value =x
def up(self ):
self .value =self .value +1
def down (self ):
self .value =self .value -1
count =counter()
inc, dec, reset =count .up, count .down, count .set
Here inc(),dec()andreset()actlikefunctionswhichsharethesamecountingvariable.
2.2.12HowdoIcopyanobjectinPython?
Ingeneral,try copy.copy() orcopy.deepcopy() forthegeneralcase. Notallobjectscanbecopied,butmost
can.
Someobjectscanbecopiedmoreeasily. Dictionarieshavea copy()method:
newdict =olddict .copy()
Sequencescanbecopiedbyslicing:
new_l =l[:]
2.2.13HowcanIfindthemethodsorattributesofanobject?
Foraninstance xofauser-definedclass, dir(x)returnsanalphabetizedlistofthenamescontainingtheinstance
attributesandmethodsandattributesdefinedbyitsclass.
2.2. CoreLanguage 15
PythonFrequentlyAskedQuestions,Release3.13.0
2.2.14Howcanmycodediscoverthenameofanobject?
Generallyspeaking,itcan’t,becauseobjectsdon’treallyhavenames. Essentially,assignmentalwaysbindsanameto
avalue;thesameistrueof defandclassstatements,butinthatcasethevalueisacallable. Considerthefollowing
code:
>>> class A:
... pass
...
>>> B=A
>>> a=B()
>>> b=a
>>> print (b)
<__main__.A object at 0x16D07CC>
>>> print (a)
<__main__.A object at 0x16D07CC>
Arguably the class has a name: even though it is bound to two names and invoked through the name Bthe created
instanceisstillreportedasaninstanceofclass A.However,itisimpossibletosaywhethertheinstance’snameis a
orb,sincebothnamesareboundtothesamevalue.
Generallyspeakingitshouldnotbenecessaryforyourcodeto“knowthenames”ofparticularvalues. Unlessyouare
deliberatelywritingintrospectiveprograms,thisisusuallyanindicationthatachangeofapproachmightbebeneficial.
Incomp.lang.python,FredrikLundhoncegaveanexcellentanalogyinanswertothisquestion:
The same way as you get the name of that cat you found on your porch: the cat (object) itself cannot
tellyouitsname,anditdoesn’treallycare–sotheonlywaytofindoutwhatit’scalledistoaskallyour
neighbours(namespaces)ifit’stheircat(object)…
….anddon’tbesurprisedifyou’llfindthatit’sknownbymanynames,ornonameatall!
2.2.15What’supwiththecommaoperator’sprecedence?
CommaisnotanoperatorinPython. Considerthissession:
>>> "a"in"b","a"
(False, 'a')
Sincethecommaisnotanoperator,butaseparatorbetweenexpressionstheaboveisevaluatedasifyouhadentered:
("a"in"b"),"a"
not:
"a"in("b","a")
Thesameistrueofthevariousassignmentoperators( =,+=etc). Theyarenottrulyoperatorsbutsyntacticdelimiters
inassignmentstatements.
2.2.16IsthereanequivalentofC’s“?:” ternaryoperator?
Yes,thereis. Thesyntaxisasfollows:
[on_true] if[expression] else [on_false]
x, y =50,25
small =xifx<yelse y
BeforethissyntaxwasintroducedinPython2.5,acommonidiomwastouselogicaloperators:
16 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
[expression] and [on_true] or[on_false]
However, this idiom is unsafe, as it can give wrong results when on_truehas a false boolean value. Therefore, it is
alwaysbettertousethe ... if ... else ... form.
2.2.17Isitpossibletowriteobfuscatedone-linersinPython?
Yes. Usuallythisisdonebynesting lambdawithin lambda. Seethefollowingthreeexamples,slightlyadaptedfrom
UlfBartelt:
from functools import reduce
# Primes < 1000
print (list (filter (None ,map(lambda y:y*reduce( lambda x,y:x *y!=0,
map(lambda x,y=y:y%x,range (2,int(pow(y,0.5)+1))), 1),range (2,1000 )))))
# First 10 Fibonacci numbers
print (list (map(lambda x,f=lambda x,f:(f(x -1,f)+f(x-2,f)) ifx>1else 1:
f(x,f), range (10))))
# Mandelbrot set
print ((lambda Ru,Ro,Iu,Io,IM,Sx,Sy:reduce( lambda x,y:x +'\n'+y,map(lambda y,
Iu=Iu,Io =Io,Ru =Ru,Ro =Ro,Sy =Sy,L =lambda yc,Iu =Iu,Io =Io,Ru =Ru,Ro =Ro,i =IM,
Sx=Sx,Sy =Sy:reduce( lambda x,y:x +y,map(lambda x,xc =Ru,yc =yc,Ru =Ru,Ro =Ro,
i=i,Sx =Sx,F =lambda xc,yc,x,y,k,f =lambda xc,yc,x,y,k,f:(k <=0)or(x*x+y*y
>=4.0)or1+f(xc,yc,x *x-y*y+xc,2.0*x*y+yc,k -1,f):f(xc,yc,x,y,k,f): chr(
64+F(Ru +x*(Ro-Ru)/Sx,yc, 0,0,i)), range (Sx))):L(Iu +y*(Io-Iu)/Sy), range (Sy
))))( -2.1,0.7,-1.2,1.2,30,80,24))
# \___ ___/ \___ ___/ | | |__ lines on screen
# V V | |______ columns on screen
# | | |__________ maximum of "iterations"
# | |_________________ range on y axis
# |____________________________ range on x axis
Don’ttrythisathome,kids!
2.2.18Whatdoestheslash(/)intheparameterlistofafunctionmean?
A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-
onlyparametersaretheoneswithoutanexternallyusablename. Uponcallingafunctionthatacceptspositional-only
parameters,argumentsaremappedtoparametersbasedsolelyontheirposition. Forexample, divmod() isafunction
thatacceptspositional-onlyparameters. Itsdocumentationlookslikethis:
>>> help( divmod )
Help on built-in function divmod in module builtins:
divmod(x, y, /)
Return the tuple (x//y, x%y). Invariant: div*y + mod == x.
Theslashattheendoftheparameterlistmeansthatbothparametersarepositional-only. Thus,calling divmod()
withkeywordargumentswouldleadtoanerror:
>>> divmod (x=3, y=4)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : divmod() takes no keyword arguments
2.2. CoreLanguage 17
PythonFrequentlyAskedQuestions,Release3.13.0
2.3Numbersandstrings
2.3.1HowdoIspecifyhexadecimalandoctalintegers?
Tospecifyanoctaldigit,precedetheoctalvaluewithazero,andthenaloweroruppercase“o”. Forexample,toset
thevariable“a”totheoctalvalue“10”(8indecimal),type:
>>> a=0o10
>>> a
8
Hexadecimalisjustaseasy. Simplyprecedethehexadecimalnumberwithazero,andthenaloweroruppercase“x”.
Hexadecimaldigitscanbespecifiedinloweroruppercase. Forexample,inthePythoninterpreter:
>>> a=0xa5
>>> a
165
>>> b=0XB2
>>> b
178
2.3.2Whydoes-22//10return-3?
It’sprimarilydrivenbythedesirethat i % jhavethesamesignas j. Ifyouwantthat,andalsowant:
i==(i//j)*j+(i%j)
thenintegerdivisionhastoreturnthefloor. Calsorequiresthatidentitytohold,andthencompilersthattruncate i
// jneedtomake i % jhavethesamesignas i.
Therearefewrealusecasesfor i % jwhen jisnegative. When jispositive,therearemany,andinvirtuallyallof
themit’smoreusefulfor i % jtobe >= 0. Iftheclocksays10now,whatdiditsay200hoursago? -190 % 12
== 2isuseful; -190 % 12 == -10 isabugwaitingtobite.
2.3.3HowdoIgetintliteralattributeinsteadofSyntaxError?
Tryingtolookupan intliteralattributeinthenormalmannergivesa SyntaxError becausetheperiodisseenas
adecimalpoint:
>>> 1.__class__
File "<stdin>" , line 1
1.__class__
^
SyntaxError : invalid decimal literal
Thesolutionistoseparatetheliteralfromtheperiodwitheitheraspaceorparentheses.
>>> 1.__class__
<class 'int'>
>>> (1).__class__
<class 'int'>
2.3.4HowdoIconvertastringtoanumber?
Forintegers,usethebuilt-in int()typeconstructor,e.g. int('144') == 144 . Similarly, float()convertsto
afloating-pointnumber,e.g. float('144') == 144.0 .
Bydefault,theseinterpretthenumberasdecimal,sothat int('0144') == 144 holdstrue,and int('0x144')
raises ValueError .int(string, base) takesthebasetoconvertfromasasecondoptionalargument,so int(
18 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
'0x144', 16) == 324 . Ifthebaseisspecifiedas0,thenumberisinterpretedusingPython’srules: aleading‘0o’
indicatesoctal,and‘0x’indicatesahexnumber.
Donotusethebuilt-infunction eval()ifallyouneedistoconvertstringstonumbers. eval()willbesignificantly
slower and it presents a security risk: someone could pass you a Python expression that might have unwanted side
effects. Forexample,someonecouldpass __import__('os').system("rm -rf $HOME") whichwoulderase
yourhomedirectory.
eval()alsohastheeffectofinterpretingnumbersasPythonexpressions,sothate.g. eval('09') givesasyntax
errorbecausePythondoesnotallowleading‘0’inadecimalnumber(except‘0’).
2.3.5HowdoIconvertanumbertoastring?
To convert, e.g., the number 144to the string '144', use the built-in type constructor str(). If you want a
hexadecimal or octal representation, use the built-in functions hex()oroct(). For fancy formatting, see the f-
strings and formatstrings sections, e.g. "{:04d}".format(144) yields '0144'and"{:.3f}".format(1.0/
3.0)yields '0.333'.
2.3.6HowdoImodifyastringinplace?
You can’t, because strings are immutable. In most situations, you should simply construct a new string from the
various parts you want to assemble it from. However, if you need an object with the ability to modify in-place
unicodedata,tryusingan io.StringIO objectorthe arraymodule:
>>> import io
>>> s="Hello, world "
>>> sio =io.StringIO(s)
>>> sio.getvalue()
'Hello, world'
>>> sio.seek( 7)
7
>>> sio.write( "there! ")
6
>>> sio.getvalue()
'Hello, there!'
>>> import array
>>> a=array .array( 'w', s)
>>> print (a)
array('w', 'Hello, world')
>>> a[0]='y'
>>> print (a)
array('w', 'yello, world')
>>> a.tounicode()
'yello, world'
2.3.7HowdoIusestringstocallfunctions/methods?
Therearevarioustechniques.
•Thebestistouseadictionarythatmapsstringstofunctions. Theprimaryadvantageofthistechniqueisthat
thestringsdonotneedtomatchthenamesofthefunctions. Thisisalsotheprimarytechniqueusedtoemulate
acaseconstruct:
def a():
pass
def b():
pass
(continuesonnextpage)
2.3. Numbersandstrings 19
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
dispatch ={'go': a, 'stop ': b} # Note lack of parens for funcs
dispatch[get_input()]() # Note trailing parens to call function
•Usethebuilt-infunction getattr() :
import foo
getattr (foo, 'bar')()
Notethat getattr() worksonanyobject,includingclasses,classinstances,modules,andsoon.
Thisisusedinseveralplacesinthestandardlibrary,likethis:
class Foo:
def do_foo (self ):
...
def do_bar (self ):
...
f=getattr (foo_instance, 'do_'+opname)
f()
•Uselocals() toresolvethefunctionname:
def myFunc ():
print ("hello ")
fname ="myFunc "
f=locals ()[fname]
f()
2.3.8IsthereanequivalenttoPerl’schomp()forremovingtrailingnewlinesfrom
strings?
You can use S.rstrip("\r\n") to remove all occurrences of any line terminator from the end of the string S
withoutremovingothertrailingwhitespace. Ifthestring Srepresentsmorethanoneline,withseveralemptylinesat
theend,thelineterminatorsforalltheblanklineswillberemoved:
>>> lines =("line 1 \r\n"
... "\r\n"
... "\r\n")
>>> lines .rstrip( "\n\r")
'line 1 '
Sincethisistypicallyonlydesiredwhenreadingtextonelineatatime,using S.rstrip() thiswayworkswell.
2.3.9Isthereascanf()orsscanf()equivalent?
Notassuch.
For simple input parsing, the easiest approach is usually to split the line into whitespace-delimited words using the
split()method of string objects and then convert decimal strings to numeric values using int()orfloat().
split()supportsanoptional“sep”parameterwhichisusefulifthelineusessomethingotherthanwhitespaceasa
separator.
20 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
For more complicated input parsing, regular expressions are more powerful than C’s sscanfand better suited for
thetask.
2.3.10Whatdoes‘UnicodeDecodeError’or‘UnicodeEncodeError’errormean?
Seetheunicode-howto.
2.3.11CanIendarawstringwithanoddnumberofbackslashes?
Arawstringendingwithanoddnumberofbackslasheswillescapethestring’squote:
>>> r'C:\this \will \not\work \'
File "<stdin>" , line 1
r'C:\this \will \not\work \'
^
SyntaxError : unterminated string literal (detected at line 1)
Thereareseveralworkaroundsforthis. Oneistouseregularstringsanddoublethebackslashes:
>>> 'C:\\this \\will \\work \\'
'C:\\this\\will\\work\\'
Anotheristoconcatenatearegularstringcontaininganescapedbackslashtotherawstring:
>>> r'C:\this \will \work ''\\'
'C:\\this\\will\\work\\'
Itisalsopossibletouse os.path.join() toappendabackslashonWindows:
>>> os.path .join( r'C:\this \will \work ','')
'C:\\this\\will\\work\\'
Note that while a backslash will “escape” a quote for the purposes of determining where the raw string ends, no
escapingoccurswheninterpretingthevalueoftherawstring. Thatis,thebackslashremainspresentinthevalueof
therawstring:
>>> r'backslash \'preserved '
"backslash\\'preserved"
Alsoseethespecificationinthelanguagereference.
2.4Performance
2.4.1Myprogramistooslow. HowdoIspeeditup?
That’satoughone,ingeneral. First,herearealistofthingstorememberbeforedivingfurther:
•PerformancecharacteristicsvaryacrossPythonimplementations. ThisFAQfocuseson CPython.
•Behaviourcanvaryacrossoperatingsystems,especiallywhentalkingaboutI/Oormulti-threading.
•Youshouldalwaysfindthehotspotsinyourprogram beforeattemptingtooptimizeanycode(seethe profile
module).
•Writingbenchmarkscriptswillallowyoutoiteratequicklywhensearchingforimprovements(seethe timeit
module).
•It is highly recommended to have good code coverage (through unit testing or any other technique) before
potentiallyintroducingregressionshiddeninsophisticatedoptimizations.
Thatbeingsaid, therearemanytrickstospeedupPythoncode. Herearesomegeneralprincipleswhichgoalong
waytowardsreachingacceptableperformancelevels:
2.4. Performance 21
PythonFrequentlyAskedQuestions,Release3.13.0
•Makingyouralgorithmsfaster(orchangingtofasterones)canyieldmuchlargerbenefitsthantryingtosprinkle
micro-optimizationtricksalloveryourcode.
•Usetherightdatastructures. Studydocumentationforthebltin-typesandthe collections module.
•When the standard library provides a primitive for doing something, it is likely (although not guaranteed) to
befasterthananyalternativeyoumaycomeupwith. ThisisdoublytrueforprimitiveswritteninC,suchas
builtins and some extension types. For example, be sure to use either the list.sort() built-in method or
therelated sorted() functiontodosorting(andseethesortinghowtoforexamplesofmoderatelyadvanced
usage).
•Abstractions tend to create indirections and force the interpreter to work more. If the levels of indirection
outweightheamountofusefulworkdone,yourprogramwillbeslower. Youshouldavoidexcessiveabstraction,
especiallyundertheformoftinyfunctionsormethods(whicharealsooftendetrimentaltoreadability).
IfyouhavereachedthelimitofwhatpurePythoncanallow,therearetoolstotakeyoufurtheraway. Forexample,
CythoncancompileaslightlymodifiedversionofPythoncodeintoaCextension,andcanbeusedonmanydifferent
platforms. Cythoncantakeadvantageofcompilation(andoptionaltypeannotations)tomakeyourcodesignificantly
faster than when interpreted. If you are confident in your C programming skills, you can also write a C extension
moduleyourself.
µSeealso
Thewikipagedevotedto performancetips .
2.4.2Whatisthemostefficientwaytoconcatenatemanystringstogether?
strandbytesobjectsareimmutable,thereforeconcatenatingmanystringstogetherisinefficientaseachconcate-
nationcreatesanewobject. Inthegeneralcase,thetotalruntimecostisquadraticinthetotalstringlength.
Toaccumulatemany strobjects,therecommendedidiomistoplacethemintoalistandcall str.join() atthe
end:
chunks =[]
for sinmy_strings:
chunks .append(s)
result =''.join(chunks)
(anotherreasonablyefficientidiomistouse io.StringIO )
Toaccumulatemany bytesobjects,therecommendedidiomistoextenda bytearray objectusingin-placecon-
catenation(the +=operator):
result =bytearray ()
for binmy_bytes_objects:
result +=b
2.5Sequences(Tuples/Lists)
2.5.1HowdoIconvertbetweentuplesandlists?
Thetypeconstructor tuple(seq) convertsanysequence(actually,anyiterable)intoatuplewiththesameitemsin
thesameorder.
Forexample, tuple([1, 2, 3]) yields (1, 2, 3) andtuple('abc') yields ('a', 'b', 'c') . Ifthear-
gumentisatuple,itdoesnotmakeacopybutreturnsthesameobject,soitischeaptocall tuple()whenyouaren’t
surethatanobjectisalreadyatuple.
The type constructor list(seq) converts any sequence or iterable into a list with the same items in the same
order. Forexample, list((1, 2, 3)) yields [1, 2, 3] andlist('abc') yields ['a', 'b', 'c'] . Ifthe
argumentisalist,itmakesacopyjustlike seq[:]would.
22 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
2.5.2What’sanegativeindex?
Pythonsequencesareindexedwithpositivenumbersandnegativenumbers. Forpositivenumbers0isthefirstindex
1 is the second index and so forth. For negative indices -1 is the last index and -2 is the penultimate (next to last)
indexandsoforth. Thinkof seq[-n]asthesameas seq[len(seq)-n] .
Usingnegativeindicescanbeveryconvenient. Forexample S[:-1]isallofthestringexceptforitslastcharacter,
whichisusefulforremovingthetrailingnewlinefromastring.
2.5.3HowdoIiterateoverasequenceinreverseorder?
Usethe reversed() built-infunction:
for xinreversed (sequence):
...# do something with x ...
Thiswon’ttouchyouroriginalsequence,butbuildanewcopywithreversedordertoiterateover.
2.5.4Howdoyouremoveduplicatesfromalist?
SeethePythonCookbookforalongdiscussionofmanywaystodothis:
https://code.activestate.com/recipes/52560/
Ifyoudon’tmindreorderingthelist,sortitandthenscanfromtheendofthelist,deletingduplicatesasyougo:
ifmylist:
mylist .sort()
last =mylist[ -1]
for iinrange (len(mylist) -2,-1,-1):
iflast ==mylist[i]:
del mylist[i]
else :
last =mylist[i]
Ifallelementsofthelistmaybeusedassetkeys(i.e. theyareall hashable)thisisoftenfaster
mylist =list (set(mylist))
Thisconvertsthelistintoaset,therebyremovingduplicates,andthenbackintoalist.
2.5.5Howdoyouremovemultipleitemsfromalist
Aswithremovingduplicates,explicitlyiteratinginreversewithadeleteconditionisonepossibility. However,itis
easierandfastertouseslicereplacementwithanimplicitorexplicitforwarditeration. Herearethreevariations.:
mylist[:] =filter (keep_function, mylist)
mylist[:] =(xfor xinmylist ifkeep_condition)
mylist[:] =[xfor xinmylist ifkeep_condition]
Thelistcomprehensionmaybefastest.
2.5.6HowdoyoumakeanarrayinPython?
Usealist:
["this ",1,"is","an","array "]
Lists are equivalent to C or Pascal arrays in their time complexity; the primary difference is that a Python list can
containobjectsofmanydifferenttypes.
2.5. Sequences(Tuples/Lists) 23
PythonFrequentlyAskedQuestions,Release3.13.0
Thearraymodulealsoprovidesmethodsforcreatingarraysoffixedtypeswithcompactrepresentations,butthey
areslowertoindexthanlists. Alsonotethat NumPyandotherthirdpartypackagesdefinearray-likestructureswith
variouscharacteristicsaswell.
TogetLisp-stylelinkedlists,youcanemulate cons cellsusingtuples:
lisp_list =("like ", ( "this ", ( "example ",None ) ) )
Ifmutabilityisdesired,youcoulduselistsinsteadoftuples. HeretheanalogueofaLisp carislisp_list[0] and
theanalogueof cdrislisp_list[1] . Onlydothisifyou’resureyoureallyneedto,becauseit’susuallyalotslower
thanusingPythonlists.
2.5.7HowdoIcreateamultidimensionallist?
Youprobablytriedtomakeamultidimensionalarraylikethis:
>>> A=[[None ]*2]*3
Thislookscorrectifyouprintit:
>>> A
[[None, None], [None, None], [None, None]]
Butwhenyouassignavalue,itshowsupinmultipleplaces:
>>> A[0][0]=5
>>> A
[[5, None], [5, None], [5, None]]
Thereasonisthatreplicatingalistwith *doesn’tcreatecopies,itonlycreatesreferencestotheexistingobjects. The
*3creates a list containing 3 references to the same list of length two. Changes to one row will show in all rows,
whichisalmostcertainlynotwhatyouwant.
Thesuggestedapproachistocreatealistofthedesiredlengthfirstandthenfillineachelementwithanewlycreated
list:
A=[None ]*3
for iinrange (3):
A[i] =[None ]*2
Thisgeneratesalistcontaining3differentlistsoflengthtwo. Youcanalsousealistcomprehension:
w, h =2,3
A=[[None ]*wfor iinrange (h)]
Or,youcanuseanextensionthatprovidesamatrixdatatype; NumPyisthebestknown.
2.5.8HowdoIapplyamethodorfunctiontoasequenceofobjects?
Tocallamethodorfunctionandaccumulatethereturnvaluesisalist,a list comprehension isanelegantsolution:
result =[obj .method() for obj inmylist]
result =[function(obj) for obj inmylist]
Tojustrunthemethodorfunctionwithoutsavingthereturnvalues,aplain forloopwillsuffice:
for obj inmylist:
obj.method()
(continuesonnextpage)
24 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
for obj inmylist:
function(obj)
2.5.9Whydoesa_tuple[i]+=[‘item’]raiseanexceptionwhentheadditionworks?
Thisisbecauseofacombinationofthefactthataugmentedassignmentoperatorsare assignment operators,andthe
differencebetweenmutableandimmutableobjectsinPython.
Thisdiscussionappliesingeneralwhenaugmentedassignmentoperatorsareappliedtoelementsofatuplethatpoint
tomutableobjects,butwe’llusea listand+=asourexemplar.
Ifyouwrote:
>>> a_tuple =(1,2)
>>> a_tuple[ 0]+=1
Traceback (most recent call last):
...
TypeError : 'tuple' object does not support item assignment
The reason for the exception should be immediately clear: 1is added to the object a_tuple[0] points to ( 1),
producing the result object, 2, but when we attempt to assign the result of the computation, 2, to element 0of the
tuple,wegetanerrorbecausewecan’tchangewhatanelementofatuplepointsto.
Underthecovers,whatthisaugmentedassignmentstatementisdoingisapproximatelythis:
>>> result =a_tuple[ 0]+1
>>> a_tuple[ 0]=result
Traceback (most recent call last):
...
TypeError : 'tuple' object does not support item assignment
Itistheassignmentpartoftheoperationthatproducestheerror,sinceatupleisimmutable.
Whenyouwritesomethinglike:
>>> a_tuple =(['foo'],'bar')
>>> a_tuple[ 0]+=['item ']
Traceback (most recent call last):
...
TypeError : 'tuple' object does not support item assignment
Theexceptionisabitmoresurprising,andevenmoresurprisingisthefactthateventhoughtherewasanerror,the
appendworked:
>>> a_tuple[ 0]
['foo', 'item']
To see why this happens, you need to know that (a) if an object implements an __iadd__() magic method, it
getscalledwhenthe +=augmentedassignmentisexecuted,anditsreturnvalueiswhatgetsusedintheassignment
statement;and(b)forlists, __iadd__() isequivalenttocalling extend() onthelistandreturningthelist. That’s
whywesaythatforlists, +=isa“shorthand”for list.extend() :
>>> a_list =[]
>>> a_list +=[1]
>>> a_list
[1]
Thisisequivalentto:
2.5. Sequences(Tuples/Lists) 25
PythonFrequentlyAskedQuestions,Release3.13.0
>>> result =a_list .__iadd__ ([1])
>>> a_list =result
Theobjectpointedtobya_listhasbeenmutated,andthepointertothemutatedobjectisassignedbackto a_list.
The end result of the assignment is a no-op, since it is a pointer to the same object that a_listwas previously
pointingto,buttheassignmentstillhappens.
Thus,inourtupleexamplewhatishappeningisequivalentto:
>>> result =a_tuple[ 0].__iadd__ (['item '])
>>> a_tuple[ 0]=result
Traceback (most recent call last):
...
TypeError : 'tuple' object does not support item assignment
The__iadd__() succeeds, and thus the list is extended, but even though resultpoints to the same object that
a_tuple[0] alreadypointsto,thatfinalassignmentstillresultsinanerror,becausetuplesareimmutable.
2.5.10I want to do a complicated sort: can you do a Schwartzian Transform in
Python?
Thetechnique,attributedtoRandalSchwartzofthePerlcommunity,sortstheelementsofalistbyametricwhich
mapseachelementtoits“sortvalue”. InPython,usethe keyargumentforthe list.sort() method:
Isorted =L[:]
Isorted .sort(key =lambda s:int(s[10:15]))
2.5.11HowcanIsortonelistbyvaluesfromanotherlist?
Mergethemintoaniteratoroftuples,sorttheresultinglist,andthenpickouttheelementyouwant.
>>> list1 =["what ","I'm","sorting ","by"]
>>> list2 =["something ","else ","to","sort "]
>>> pairs =zip(list1, list2)
>>> pairs =sorted (pairs)
>>> pairs
[("I'm", 'else'), ('by', 'sort'), ('sorting', 'to'), ('what', 'something')]
>>> result =[x[1]for xinpairs]
>>> result
['else', 'sort', 'to', 'something']
2.6Objects
2.6.1Whatisaclass?
A class is the particular object type created by executing a class statement. Class objects are used as templates to
createinstanceobjects,whichembodyboththedata(attributes)andcode(methods)specifictoadatatype.
Aclasscanbebasedononeormoreotherclasses,calleditsbaseclass(es). Ittheninheritstheattributesandmeth-
ods of its base classes. This allows an object model to be successively refined by inheritance. You might have a
generic Mailboxclassthatprovidesbasicaccessormethodsforamailbox, andsubclassessuchas MboxMailbox ,
MaildirMailbox ,OutlookMailbox thathandlevariousspecificmailboxformats.
26 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
2.6.2Whatisamethod?
Amethodisafunctiononsomeobject xthatyounormallycallas x.name(arguments...) . Methodsaredefined
asfunctionsinsidetheclassdefinition:
class C:
def meth (self , arg):
return arg *2+self .attribute
2.6.3Whatisself?
Selfismerelyaconventionalnameforthefirstargumentofamethod. Amethoddefinedas meth(self, a, b,
c)shouldbecalledas x.meth(a, b, c) forsomeinstance xoftheclassinwhichthedefinitionoccurs;thecalled
methodwillthinkitiscalledas meth(x, a, b, c) .
Seealso Why must ‘self’ be used explicitly in method definitions and calls? .
2.6.4HowdoIcheckifanobjectisaninstanceofagivenclassorofasubclass
ofit?
Use the built-in function isinstance(obj, cls) . You can check if an object is an instance of any of a num-
ber of classes by providing a tuple instead of a single class, e.g. isinstance(obj, (class1, class2, ..
.)), and can also check whether an object is one of Python’s built-in types, e.g. isinstance(obj, str) or
isinstance(obj, (int, float, complex)) .
Note that isinstance() also checks for virtual inheritance from an abstract base class . So, the test will return
Trueforaregisteredclassevenifhasn’tdirectlyorindirectlyinheritedfromit. Totestfor“trueinheritance”,scan
theMROoftheclass:
from collections .abc import Mapping
class P:
pass
class C(P):
pass
Mapping .register(P)
>>> c=C()
>>> isinstance (c, C) # direct
True
>>> isinstance (c, P) # indirect
True
>>> isinstance (c, Mapping) # virtual
True
# Actual inheritance chain
>>> type (c).__mro__
(<class 'C'>, <class 'P'>, <class 'object'>)
# Test for "true inheritance"
>>> Mapping intype (c).__mro__
False
Note that most programs do not use isinstance() on user-defined classes very often. If you are developing the
classesyourself,amoreproperobject-orientedstyleistodefinemethodsontheclassesthatencapsulateaparticular
behaviour,insteadofcheckingtheobject’sclassanddoingadifferentthingbasedonwhatclassitis. Forexample,if
youhaveafunctionthatdoessomething:
2.6. Objects 27
PythonFrequentlyAskedQuestions,Release3.13.0
def search (obj):
ifisinstance (obj, Mailbox):
...# code to search a mailbox
elif isinstance (obj, Document):
...# code to search a document
elif ...
Abetterapproachistodefinea search() methodonalltheclassesandjustcallit:
class Mailbox :
def search (self ):
...# code to search a mailbox
class Document :
def search (self ):
...# code to search a document
obj.search()
2.6.5Whatisdelegation?
Delegationisanobjectorientedtechnique(alsocalledadesignpattern). Let’ssayyouhaveanobject xandwantto
changethebehaviourofjustoneofitsmethods. Youcancreateanewclassthatprovidesanewimplementationof
themethodyou’reinterestedinchanginganddelegatesallothermethodstothecorrespondingmethodof x.
Python programmers can easily implement delegation. For example, the following class implements a class that
behaveslikeafilebutconvertsallwrittendatatouppercase:
class UpperOut :
def __init__ (self , outfile):
self ._outfile =outfile
def write (self , s):
self ._outfile .write(s .upper())
def __getattr__ (self , name):
return getattr (self ._outfile, name)
Here the UpperOut class redefines the write()method to convert the argument string to uppercase before call-
ingtheunderlying self._outfile.write() method. Allothermethodsaredelegatedtotheunderlying self.
_outfile object. Thedelegationisaccomplishedviathe __getattr__() method;consultthelanguagereference
formoreinformationaboutcontrollingattributeaccess.
Note that for more general cases delegation can get trickier. When attributes must be set as well as retrieved,
the class must define a __setattr__() method too, and it must do so carefully. The basic implementation of
__setattr__() isroughlyequivalenttothefollowing:
class X:
...
def __setattr__ (self , name, value):
self .__dict__ [name] =value
...
Many __setattr__() implementationscall object.__setattr__() tosetanattributeonselfwithoutcausing
infiniterecursion:
28 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
class X:
def __setattr__ (self , name, value):
# Custom logic here...
object .__setattr__ (self , name, value)
Alternatively,itispossibletosetattributesbyinsertingentriesinto self.__dict__ directly.
2.6.6How do I call a method defined in a base class from a derived class that
extendsit?
Usethebuilt-in super()function:
class Derived (Base):
def meth (self ):
super ().meth() # calls Base.meth
Intheexample, super()willautomaticallydeterminetheinstancefromwhichitwascalled(the selfvalue),look
up themethod resolution order (MRO) with type(self).__mro__ , and return the next in line after Derivedin
theMRO: Base.
2.6.7HowcanIorganizemycodetomakeiteasiertochangethebaseclass?
Youcouldassignthebaseclasstoanaliasandderivefromthealias. Thenallyouhavetochangeisthevalueassigned
tothealias. Incidentally,thistrickisalsohandyifyouwanttodecidedynamically(e.g. dependingonavailabilityof
resources)whichbaseclasstouse. Example:
class Base :
...
BaseAlias =Base
class Derived (BaseAlias):
...
2.6.8HowdoIcreatestaticclassdataandstaticclassmethods?
Bothstaticdataandstaticmethods(inthesenseofC++orJava)aresupportedinPython.
Forstaticdata, simplydefineaclassattribute. Toassignanewvaluetotheattribute, youhavetoexplicitlyusethe
classnameintheassignment:
class C:
count =0 # number of times C.__init__ called
def __init__ (self ):
C.count =C.count +1
def getcount (self ):
return C.count # or return self.count
c.countalsorefersto C.countforany csuchthat isinstance(c, C) holds,unlessoverriddenby citselforby
someclassonthebase-classsearchpathfrom c.__class__ backto C.
Caution: withinamethodofC,anassignmentlike self.count = 42 createsanewandunrelatedinstancenamed
“count” in self’s own dict. Rebinding of a class-static data name must always specify the class whether inside a
methodornot:
C.count =314
2.6. Objects 29
PythonFrequentlyAskedQuestions,Release3.13.0
Staticmethodsarepossible:
class C:
@staticmethod
def static (arg1, arg2, arg3):
# No 'self' parameter!
...
However,afarmorestraightforwardwaytogettheeffectofastaticmethodisviaasimplemodule-levelfunction:
def getcount ():
return C.count
If your code is structured so as to define one class (or tightly related class hierarchy) per module, this supplies the
desiredencapsulation.
2.6.9HowcanIoverloadconstructors(ormethods)inPython?
Thisansweractuallyappliestoallmethods,butthequestionusuallycomesupfirstinthecontextofconstructors.
InC++you’dwrite
class C{
C() {cout <<"No arguments \n";}
C(int i){cout <<"Argument is "<<i<<"\n";}
}
InPythonyouhavetowriteasingleconstructorthatcatchesallcasesusingdefaultarguments. Forexample:
class C:
def __init__ (self , i=None ):
ifiisNone :
print ("No arguments ")
else :
print ("Argument is ", i)
Thisisnotentirelyequivalent,butcloseenoughinpractice.
Youcouldalsotryavariable-lengthargumentlist,e.g.
def __init__ (self ,*args):
...
Thesameapproachworksforallmethoddefinitions.
2.6.10Itrytouse__spamandIgetanerrorabout_SomeClassName__spam.
Variablenameswithdoubleleadingunderscoresare“mangled”toprovideasimplebuteffectivewaytodefineclass
private variables. Any identifier of the form __spam(at least two leading underscores, at most one trailing under-
score)istextuallyreplacedwith _classname__spam ,where classname isthecurrentclassnamewithanyleading
underscoresstripped.
Theidentifiercanbeusedunchangedwithintheclass,buttoaccessitoutsidetheclass,themanglednamemustbe
used:
class A:
def __one (self ):
return 1
def two(self ):
return 2*self .__one()
(continuesonnextpage)
30 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
class B(A):
def three (self ):
return 3*self ._A__one()
four =4*A()._A__one()
Inparticular,thisdoesnotguaranteeprivacysinceanoutsideusercanstilldeliberatelyaccesstheprivateattribute;
manyPythonprogrammersneverbothertouseprivatevariablenamesatall.
µSeealso
Theprivatenamemanglingspecificationsfordetailsandspecialcases.
2.6.11Myclassdefines__del__butitisnotcalledwhenIdeletetheobject.
Thereareseveralpossiblereasonsforthis.
Thedelstatementdoesnotnecessarilycall __del__() –itsimplydecrementstheobject’sreferencecount,andif
thisreacheszero __del__() iscalled.
Ifyourdatastructurescontaincircularlinks(e.g. atreewhereeachchildhasaparentreferenceandeachparenthas
alistofchildren)thereferencecountswillnevergobacktozero. OnceinawhilePythonrunsanalgorithmtodetect
suchcycles,butthegarbagecollectormightrunsometimeafterthelastreferencetoyourdatastructurevanishes,so
your __del__() method may be called at an inconvenient and random time. This is inconvenient if you’re trying
toreproduceaproblem. Worse,theorderinwhichobject’s __del__() methodsareexecutedisarbitrary. Youcan
rungc.collect() toforceacollection,butthere arepathologicalcaseswhereobjectswillneverbecollected.
Despitethecyclecollector,it’sstillagoodideatodefineanexplicit close()methodonobjectstobecalledwhen-
ever you’re done with them. The close()method can then remove attributes that refer to subobjects. Don’t call
__del__() directly– __del__() shouldcall close()andclose()shouldmakesurethatitcanbecalledmore
thanonceforthesameobject.
Anotherwaytoavoidcyclicalreferencesistousethe weakrefmodule,whichallowsyoutopointtoobjectswithout
incrementingtheirreferencecount. Treedatastructures,forinstance,shoulduseweakreferencesfortheirparentand
siblingreferences(iftheyneedthem!).
Finally,ifyour __del__() methodraisesanexception,awarningmessageisprintedto sys.stderr .
2.6.12HowdoIgetalistofallinstancesofagivenclass?
Pythondoesnotkeeptrackofallinstancesofaclass(orofabuilt-intype). Youcanprogramtheclass’sconstructor
tokeeptrackofallinstancesbykeepingalistofweakreferencestoeachinstance.
2.6.13Whydoestheresultof id()appeartobenotunique?
Theid()builtinreturnsanintegerthatisguaranteedtobeuniqueduringthelifetimeoftheobject. SinceinCPython,
thisistheobject’smemoryaddress,ithappensfrequentlythatafteranobjectisdeletedfrommemory,thenextfreshly
createdobjectisallocatedatthesamepositioninmemory. Thisisillustratedbythisexample:
>>> id(1000 )
13901272
>>> id(2000 )
13901272
Thetwoidsbelongtodifferentintegerobjectsthatarecreatedbefore,anddeletedimmediatelyafterexecutionofthe
id()call. Tobesurethatobjectswhoseidyouwanttoexaminearestillalive,createanotherreferencetotheobject:
2.6. Objects 31
PythonFrequentlyAskedQuestions,Release3.13.0
>>> a=1000 ; b =2000
>>> id(a)
13901272
>>> id(b)
13891296
2.6.14WhencanIrelyonidentitytestswiththe isoperator?
Theisoperatortestsforobjectidentity. Thetest a is bisequivalentto id(a) == id(b) .
Themostimportantpropertyofanidentitytestisthatanobjectisalwaysidenticaltoitself, a is aalwaysreturns
True. Identitytestsareusuallyfasterthanequalitytests. Andunlikeequalitytests,identitytestsareguaranteedto
returnaboolean TrueorFalse.
However,identitytestscan onlybesubstitutedforequalitytestswhenobjectidentityisassured. Generally,thereare
threecircumstanceswhereidentityisguaranteed:
1)Assignmentscreatenewnamesbutdonotchangeobjectidentity. Aftertheassignment new = old ,itisguaran-
teedthat new is old .
2)Puttinganobjectinacontainerthatstoresobjectreferencesdoesnotchangeobjectidentity. Afterthelistassign-
ment s[0] = x ,itisguaranteedthat s[0] is x .
3) If an object is a singleton, it means that only one instance of that object can exist. After the assignments a =
Noneandb = None ,itisguaranteedthat a is bbecause Noneisasingleton.
Inmostothercircumstances,identitytestsareinadvisableandequalitytestsarepreferred. Inparticular,identitytests
shouldnotbeusedtocheckconstantssuchas intandstrwhicharen’tguaranteedtobesingletons:
>>> a=1000
>>> b=500
>>> c=b+500
>>> aisc
False
>>> a='Python '
>>> b='Py'
>>> c=b+'thon '
>>> aisc
False
Likewise,newinstancesofmutablecontainersareneveridentical:
>>> a=[]
>>> b=[]
>>> aisb
False
Inthestandardlibrarycode,youwillseeseveralcommonpatternsforcorrectlyusingidentitytests:
1)Asrecommendedby PEP8,anidentitytestisthepreferredwaytocheckfor None. ThisreadslikeplainEnglish
incodeandavoidsconfusionwithotherobjectsthatmayhavebooleanvaluesthatevaluatetofalse.
2)Detectingoptionalargumentscanbetrickywhen Noneisavalidinputvalue. Inthosesituations,youcancreate
a singleton sentinel object guaranteed to be distinct from other objects. For example, here is how to implement a
methodthatbehaveslike dict.pop() :
_sentinel =object ()
def pop(self , key, default =_sentinel):
ifkey inself :
(continuesonnextpage)
32 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
value =self [key]
del self [key]
return value
ifdefault is_sentinel:
raise KeyError (key)
return default
3)Containerimplementationssometimesneedtoaugmentequalitytestswithidentitytests. Thispreventsthecode
frombeingconfusedbyobjectssuchas float('NaN') thatarenotequaltothemselves.
Forexample,hereistheimplementationof collections.abc.Sequence.__contains__() :
def __contains__ (self , value):
for vinself :
ifvisvalue orv==value:
return True
return False
2.6.15Howcanasubclasscontrolwhatdataisstoredinanimmutableinstance?
When subclassing an immutable type, override the __new__() method instead of the __init__() method. The
latteronlyruns afteraninstanceiscreated,whichistoolatetoalterdatainanimmutableinstance.
Alloftheseimmutableclasseshaveadifferentsignaturethantheirparentclass:
from datetime import date
class FirstOfMonthDate (date):
"Always choose the first day of the month "
def __new__ (cls, year, month, day):
return super ().__new__ (cls, year, month, 1)
class NamedInt (int):
"Allow text names for some numbers "
xlat ={'zero ':0,'one':1,'ten':10}
def __new__ (cls, value):
value =cls.xlat .get(value, value)
return super ().__new__ (cls, value)
class TitleStr (str):
"Convert str to name suitable for a URL path "
def __new__ (cls, s):
s=s.lower() .replace( '','-')
s=''.join([c for cinsifc.isalnum() orc=='-'])
return super ().__new__ (cls, s)
Theclassescanbeusedlikethis:
>>> FirstOfMonthDate( 2012 ,2,14)
FirstOfMonthDate(2012, 2, 1)
>>> NamedInt( 'ten')
10
>>> NamedInt( 20)
20
>>> TitleStr( 'Blog: Why Python Rocks ')
'blog-why-python-rocks'
2.6. Objects 33
PythonFrequentlyAskedQuestions,Release3.13.0
2.6.16HowdoIcachemethodcalls?
The two principal tools for caching methods are functools.cached_property() and functools.
lru_cache() . Theformerstoresresultsattheinstancelevelandthelatterattheclasslevel.
Thecached_property approachonlyworkswithmethodsthatdonottakeanyarguments. Itdoesnotcreateareference
totheinstance. Thecachedmethodresultwillbekeptonlyaslongastheinstanceisalive.
Theadvantageisthatwhenaninstanceisnolongerused,thecachedmethodresultwillbereleasedrightaway. The
disadvantage is that if instances accumulate, so too will the accumulated method results. They can grow without
bound.
Thelru_cacheapproach works with methods that have hashablearguments. It creates a reference to the instance
unlessspecialeffortsaremadetopassinweakreferences.
Theadvantageoftheleastrecentlyusedalgorithmisthatthecacheisboundedbythespecified maxsize. Thedisad-
vantageisthatinstancesarekeptaliveuntiltheyageoutofthecacheoruntilthecacheiscleared.
Thisexampleshowsthevarioustechniques:
class Weather :
"Lookup weather information on a government website "
def __init__ (self , station_id):
self ._station_id =station_id
# The _station_id is private and immutable
def current_temperature (self ):
"Latest hourly observation "
# Do not cache this because old results
# can be out of date.
@cached_property
def location (self ):
"Return the longitude/latitude coordinates of the station "
# Result only depends on the station_id
@lru_cache (maxsize =20)
def historic_rainfall (self , date, units ='mm'):
"Rainfall on a given date "
# Depends on the station_id, date, and units.
The above example assumes that the station_idnever changes. If the relevant instance attributes are mutable, the
cached_property approachcan’tbemadetoworkbecauseitcannotdetectchangestotheattributes.
Tomakethe lru_cacheapproachworkwhenthe station_idismutable,theclassneedstodefinethe __eq__() and
__hash__() methodssothatthecachecandetectrelevantattributeupdates:
class Weather :
"Example with a mutable station identifier "
def __init__ (self , station_id):
self .station_id =station_id
def change_station (self , station_id):
self .station_id =station_id
def __eq__ (self , other):
return self .station_id ==other .station_id
def __hash__ (self ):
(continuesonnextpage)
34 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
return hash (self .station_id)
@lru_cache (maxsize =20)
def historic_rainfall (self , date, units ='cm'):
'Rainfall on a given date '
# Depends on the station_id, date, and units.
2.7Modules
2.7.1HowdoIcreatea.pycfile?
Whenamoduleisimportedforthefirsttime(orwhenthesourcefilehaschangedsincethecurrentcompiledfilewas
created)a .pycfilecontainingthecompiledcodeshouldbecreatedina __pycache__ subdirectoryofthedirectory
containingthe .pyfile. The .pycfilewillhaveafilenamethatstartswiththesamenameasthe .pyfile,andends
with.pyc,withamiddlecomponentthatdependsontheparticular pythonbinarythatcreatedit. (See PEP 3147
fordetails.)
One reason that a .pycfile may not be created is a permissions problem with the directory containing the source
file,meaningthatthe __pycache__ subdirectorycannotbecreated. Thiscanhappen,forexample,ifyoudevelop
asoneuserbutrunasanother,suchasifyouaretestingwithawebserver.
Unlessthe PYTHONDONTWRITEBYTECODE environmentvariableisset, creationofa.pycfileisautomaticifyou’re
importingamoduleandPythonhastheability(permissions,freespace,etc…)tocreatea __pycache__ subdirectory
andwritethecompiledmoduletothatsubdirectory.
RunningPythononatoplevelscriptisnotconsideredanimportandno .pycwillbecreated. Forexample,ifyou
haveatop-levelmodule foo.pythatimportsanothermodule xyz.py,whenyourun foo(bytyping python foo.
pyasashellcommand),a .pycwillbecreatedfor xyzbecause xyzisimported,butno .pycfilewillbecreated
forfoosince foo.pyisn’tbeingimported.
Ifyouneedtocreatea .pycfilefor foo–thatis,tocreatea .pycfileforamodulethatisnotimported–youcan,
usingthe py_compile andcompileall modules.
Thepy_compile module can manually compile any module. One way is to use the compile() function in that
moduleinteractively:
>>> import py_compile
>>> py_compile .compile( 'foo.py ')
Thiswillwritethe .pyctoa__pycache__ subdirectoryinthesamelocationas foo.py(oryoucanoverridethat
withtheoptionalparameter cfile).
Youcanalsoautomaticallycompileallfilesinadirectoryordirectoriesusingthe compileall module. Youcando
itfromtheshellpromptbyrunning compileall.py andprovidingthepathofadirectorycontainingPythonfiles
tocompile:
python -m compileall .
2.7.2HowdoIfindthecurrentmodulename?
Amodulecanfindoutitsownmodulenamebylookingatthepredefinedglobalvariable __name__ . Ifthishasthe
value '__main__' ,theprogramisrunningasascript. Manymodulesthatareusuallyusedbyimportingthemalso
provideacommand-lineinterfaceoraself-test,andonlyexecutethiscodeafterchecking __name__ :
def main ():
print ('Running test... ')
...
(continuesonnextpage)
2.7. Modules 35
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
if__name__ =='__main__ ':
main()
2.7.3HowcanIhavemodulesthatmutuallyimporteachother?
Supposeyouhavethefollowingmodules:
foo.py:
from bar import bar_var
foo_var =1
bar.py:
from foo import foo_var
bar_var =2
Theproblemisthattheinterpreterwillperformthefollowingsteps:
•mainimports foo
•Emptyglobalsfor fooarecreated
•fooiscompiledandstartsexecuting
•fooimports bar
•Emptyglobalsfor bararecreated
•bariscompiledandstartsexecuting
•barimports foo(whichisano-opsincetherealreadyisamodulenamed foo)
•Theimportmechanismtriestoread foo_varfrom fooglobals,toset bar.foo_var = foo.foo_var
Thelaststepfails, becausePythonisn’tdonewithinterpreting fooyetandtheglobalsymboldictionaryfor foois
stillempty.
Thesamethinghappenswhenyouuse import foo ,andthentrytoaccess foo.foo_var inglobalcode.
Thereare(atleast)threepossibleworkaroundsforthisproblem.
Guido van Rossum recommends avoiding all uses of from <module> import ... , and placing all code inside
functions. Initializationsofglobalvariablesandclassvariablesshoulduseconstantsorbuilt-infunctionsonly. This
meanseverythingfromanimportedmoduleisreferencedas <module>.<name> .
JimRoskindsuggestsperformingstepsinthefollowingorderineachmodule:
•exports(globals,functions,andclassesthatdon’tneedimportedbaseclasses)
•importstatements
•activecode(includingglobalsthatareinitializedfromimportedvalues).
VanRossumdoesn’tlikethisapproachmuchbecausetheimportsappearinastrangeplace,butitdoeswork.
MatthiasUrlichsrecommendsrestructuringyourcodesothattherecursiveimportisnotnecessaryinthefirstplace.
Thesesolutionsarenotmutuallyexclusive.
2.7.4__import__(‘x.y.z’)returns<module‘x’>;howdoIgetz?
Considerusingtheconveniencefunction import_module() from importlib instead:
z=importlib .import_module( 'x.y.z ')
36 Chapter2. ProgrammingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
2.7.5When I edit an imported module and reimport it, the changes don’t show
up. Whydoesthishappen?
For reasons of efficiency as well as consistency, Python only reads the module file on the first time a module is
imported. Ifitdidn’t,inaprogramconsistingofmanymoduleswhereeachoneimportsthesamebasicmodule,the
basicmodulewouldbeparsedandre-parsedmanytimes. Toforcere-readingofachangedmodule,dothis:
import importlib
import modname
importlib .reload(modname)
Warning: thistechniqueisnot100%fool-proof. Inparticular,modulescontainingstatementslike
from modname import some_objects
willcontinuetoworkwiththeoldversionoftheimportedobjects. Ifthemodulecontainsclassdefinitions,existing
class instances will notbe updated to use the new class definition. This can result in the following paradoxical
behaviour:
>>> import importlib
>>> import cls
>>> c=cls.C() # Create an instance of C
>>> importlib .reload( cls)
<module 'cls' from 'cls.py'>
>>> isinstance (c, cls.C) # isinstance is false?!?
False
Thenatureoftheproblemismadeclearifyouprintoutthe“identity”oftheclassobjects:
>>> hex(id(c.__class__ ))
'0x7352a0'
>>> hex(id(cls.C))
'0x4198d0'
2.7. Modules 37
PythonFrequentlyAskedQuestions,Release3.13.0
38 Chapter2. ProgrammingFAQ
CHAPTER
THREE
DESIGNANDHISTORYFAQ
3.1WhydoesPythonuseindentationforgroupingofstatements?
GuidovanRossumbelievesthatusingindentationforgroupingisextremelyelegantandcontributesalottotheclarity
oftheaveragePythonprogram. Mostpeoplelearntolovethisfeatureafterawhile.
Sincetherearenobegin/endbracketstherecannotbeadisagreementbetweengroupingperceivedbytheparserand
thehumanreader. OccasionallyCprogrammerswillencounterafragmentofcodelikethis:
if(x<=y)
x++;
y--;
z++;
Onlythe x++statementisexecutediftheconditionistrue,buttheindentationleadsmanytobelieveotherwise. Even
experiencedCprogrammerswillsometimesstareatitalongtimewonderingastowhy yisbeingdecrementedeven
forx > y.
Because there are no begin/end brackets, Python is much less prone to coding-style conflicts. In C there are many
different ways to place the braces. After becoming used to reading and writing code using a particular style, it is
normaltofeelsomewhatuneasywhenreading(orbeingrequiredtowrite)inadifferentone.
Manycodingstylesplacebegin/endbracketsonalinebythemselves. Thismakesprogramsconsiderablylongerand
wastesvaluablescreenspace,makingithardertogetagoodoverviewofaprogram. Ideally,afunctionshouldfiton
onescreen(say,20–30lines). 20linesofPythoncandoalotmoreworkthan20linesofC.Thisisnotsolelydueto
thelackofbegin/endbrackets–thelackofdeclarationsandthehigh-leveldatatypesarealsoresponsible–butthe
indentation-basedsyntaxcertainlyhelps.
3.2Why am I getting strange results with simple arithmetic opera-
tions?
Seethenextquestion.
3.3Whyarefloating-pointcalculationssoinaccurate?
Usersareoftensurprisedbyresultslikethis:
>>> 1.2 -1.0
0.19999999999999996
and think it is a bug in Python. It’s not. This has little to do with Python, and much more to do with how the
underlyingplatformhandlesfloating-pointnumbers.
ThefloattypeinCPythonusesaC doubleforstorage. A floatobject’svalueisstoredinbinaryfloating-point
with a fixed precision (typically 53 bits) and Python uses C operations, which in turn rely on the hardware imple-
39
PythonFrequentlyAskedQuestions,Release3.13.0
mentationintheprocessor,toperformfloating-pointoperations. Thismeansthatasfarasfloating-pointoperations
areconcerned,PythonbehaveslikemanypopularlanguagesincludingCandJava.
Many numbers that can be written easily in decimal notation cannot be expressed exactly in binary floating point.
Forexample,after:
>>> x=1.2
thevaluestoredfor xisa(verygood)approximationtothedecimalvalue 1.2, butisnotexactlyequaltoit. Ona
typicalmachine,theactualstoredvalueis:
1.0011001100110011001100110011001100110011001100110011 (binary)
whichisexactly:
1.1999999999999999555910790149937383830547332763671875 (decimal)
Thetypicalprecisionof53bitsprovidesPythonfloatswith15–16decimaldigitsofaccuracy.
Forafullerexplanation,pleaseseethefloating-pointarithmeticchapterinthePythontutorial.
3.4WhyarePythonstringsimmutable?
Thereareseveraladvantages.
Oneisperformance: knowingthatastringisimmutablemeanswecanallocatespaceforitatcreationtime,andthe
storagerequirementsarefixedandunchanging. Thisisalsooneofthereasonsforthedistinctionbetweentuplesand
lists.
Another advantage is that strings in Python are considered as “elemental” as numbers. No amount of activity will
changethevalue8toanythingelse, andinPython, noamountofactivitywillchangethestring“eight”toanything
else.
3.5Why must ‘self’ be used explicitly in method definitions and
calls?
TheideawasborrowedfromModula-3. Itturnsouttobeveryuseful,foravarietyofreasons.
First,it’smoreobviousthatyouareusingamethodorinstanceattributeinsteadofalocalvariable. Reading self.x
orself.meth() makes it absolutely clear that an instance variable or method is used even if you don’t know the
class definition by heart. In C++, you can sort of tell by the lack of a local variable declaration (assuming globals
arerareoreasilyrecognizable)–butinPython,therearenolocalvariabledeclarations,soyou’dhavetolookupthe
classdefinitiontobesure. SomeC++andJavacodingstandardscallforinstanceattributestohavean m_prefix,so
thisexplicitnessisstillusefulinthoselanguages,too.
Second, it means that no special syntax is necessary if you want to explicitly reference or call the method from a
particularclass. In C++, ifyou wantto use a methodfroma base class whichisoverriddenin a derivedclass, you
havetouse the ::operator–inPythonyoucanwrite baseclass.methodname(self, <argument list>) .
Thisisparticularlyusefulfor __init__() methods,andingeneralincaseswhereaderivedclassmethodwantsto
extendthebaseclassmethodofthesamenameandthushastocallthebaseclassmethodsomehow.
Finally, forinstancevariablesitsolvesasyntacticproblemwithassignment: sincelocalvariablesinPythonare(by
definition!) thosevariablestowhichavalueisassignedinafunctionbody(andthataren’texplicitlydeclaredglobal),
therehastobesomewaytotelltheinterpreterthatanassignmentwasmeanttoassigntoaninstancevariableinstead
oftoalocalvariable,anditshouldpreferablybesyntactic(forefficiencyreasons). C++doesthisthroughdeclarations,
butPythondoesn’thavedeclarationsanditwouldbeapityhavingtointroducethemjustforthispurpose. Usingthe
explicit self.var solvesthisnicely. Similarly,forusinginstancevariables,havingtowrite self.var meansthat
referencestounqualifiednamesinsideamethoddon’thavetosearchtheinstance’sdirectories. Toputitanotherway,
localvariablesandinstancevariablesliveintwodifferentnamespaces,andyouneedtotellPythonwhichnamespace
touse.
40 Chapter3. DesignandHistoryFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
3.6Whycan’tIuseanassignmentinanexpression?
StartinginPython3.8,youcan!
Assignmentexpressionsusingthewalrusoperator :=assignavariableinanexpression:
while chunk :=fp.read( 200):
print (chunk)
SeePEP572formoreinformation.
3.7Why does Python use methods for some functionality (e.g.
list.index())butfunctionsforother(e.g. len(list))?
AsGuidosaid:
(a) For some operations, prefix notation just reads better than postfix – prefix (and infix!) operations
have a long tradition in mathematics which likes notations where the visuals help the mathematician
thinkingaboutaproblem. Comparetheeasywithwhichwerewriteaformulalikex*(a+b)intox*a+
x*btotheclumsinessofdoingthesamethingusingarawOOnotation.
(b) When I read code that says len(x) I knowthat it is asking for the length of something. This tells
me two things: the result is an integer, and the argument is some kind of container. To the contrary,
whenIreadx.len(),Ihavetoalreadyknowthatxissomekindofcontainerimplementinganinterface
orinheritingfromaclassthathasastandardlen(). Witnesstheconfusionweoccasionallyhavewhena
classthatisnotimplementingamappinghasaget()orkeys()method,orsomethingthatisn’tafilehas
awrite()method.
—https://mail.python.org/pipermail/python-3000/2006-November/004643.html
3.8Whyisjoin()astringmethodinsteadofalistortuplemethod?
Strings became much more like other standard types starting in Python 1.6, when methods were added which give
the same functionality that has always been available using the functions of the string module. Most of these new
methodshavebeenwidelyaccepted,buttheonewhichappearstomakesomeprogrammersfeeluncomfortableis:
",".join([ '1','2','4','8','16'])
whichgivestheresult:
"1, 2, 4, 8, 16 "
Therearetwocommonargumentsagainstthisusage.
Thefirstrunsalongthelinesof: “Itlooksreallyuglyusingamethodofastringliteral(stringconstant)”,towhichthe
answeristhatitmight,butastringliteralisjustafixedvalue. Ifthemethodsaretobeallowedonnamesboundto
stringsthereisnologicalreasontomakethemunavailableonliterals.
The second objection is typically cast as: “I am really telling a sequence to join its members together with a string
constant”. Sadly,youaren’t. Forsomereasonthereseemstobemuchlessdifficultywithhaving split()asastring
method,sinceinthatcaseitiseasytoseethat
"1, 2, 4, 8, 16 ".split( ",")
isaninstructiontoastringliteraltoreturnthesubstringsdelimitedbythegivenseparator(or, bydefault, arbitrary
runsofwhitespace).
join()isastringmethodbecauseinusingityouaretellingtheseparatorstringtoiterateoverasequenceofstrings
andinsertitselfbetweenadjacentelements. Thismethodcanbeusedwithanyargumentwhichobeystherulesfor
sequenceobjects,includinganynewclassesyoumightdefineyourself. Similarmethodsexistforbytesandbytearray
objects.
3.6. Whycan’tIuseanassignmentinanexpression? 41
PythonFrequentlyAskedQuestions,Release3.13.0
3.9Howfastareexceptions?
Atry/exceptblockisextremelyefficientifnoexceptionsareraised. Actuallycatchinganexceptionisexpensive.
InversionsofPythonpriorto2.0itwascommontousethisidiom:
try:
value =mydict[key]
except KeyError :
mydict[key] =getvalue(key)
value =mydict[key]
This only made sense when you expected the dict to have the key almost all the time. If that wasn’t the case, you
codeditlikethis:
ifkey inmydict:
value =mydict[key]
else :
value =mydict[key] =getvalue(key)
Forthisspecificcase,youcouldalsouse value = dict.setdefault(key, getvalue(key)) ,butonlyifthe
getvalue() callischeapenoughbecauseitisevaluatedinallcases.
3.10Whyisn’tthereaswitchorcasestatementinPython?
Ingeneral,structuredswitchstatementsexecuteoneblockofcodewhenanexpressionhasaparticularvalueorsetof
values. SincePython3.10onecaneasilymatchliteralvalues,orconstantswithinanamespace,witha match ...
casestatement. Anolderalternativeisasequenceof if... elif... elif... else .
Forcaseswhereyouneedtochoosefromaverylargenumberofpossibilities,youcancreateadictionarymapping
casevaluestofunctionstocall. Forexample:
functions ={'a': function_1,
'b': function_2,
'c':self .method_1}
func =functions[value]
func()
For calling methods on objects, you can simplify yet further by using the getattr() built-in to retrieve methods
withaparticularname:
class MyVisitor :
def visit_a (self ):
...
def dispatch (self , value):
method_name ='visit_ '+str(value)
method =getattr (self , method_name)
method()
It’ssuggestedthatyouuseaprefixforthemethodnames,suchas visit_inthisexample. Withoutsuchaprefix,if
valuesarecomingfromanuntrustedsource,anattackerwouldbeabletocallanymethodonyourobject.
Imitatingswitchwithfallthrough,aswithC’sswitch-case-default,ispossible,muchharder,andlessneeded.
42 Chapter3. DesignandHistoryFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
3.11Can’tyouemulatethreadsintheinterpreterinsteadofrelying
onanOS-specificthreadimplementation?
Answer 1: Unfortunately, the interpreter pushes at least one C stack frame for each Python stack frame. Also,
extensions can call back into Python at almost random moments. Therefore, a complete threads implementation
requiresthreadsupportforC.
Answer2: Fortunately,thereis StacklessPython ,whichhasacompletelyredesignedinterpreterloopthatavoidsthe
Cstack.
3.12Whycan’tlambdaexpressionscontainstatements?
PythonlambdaexpressionscannotcontainstatementsbecausePython’ssyntacticframeworkcan’thandlestatements
nestedinsideexpressions. However,inPython,thisisnotaseriousproblem. Unlikelambdaformsinotherlanguages,
wheretheyaddfunctionality,Pythonlambdasareonlyashorthandnotationifyou’retoolazytodefineafunction.
FunctionsarealreadyfirstclassobjectsinPython,andcanbedeclaredinalocalscope. Thereforetheonlyadvantage
of using a lambda instead of a locally defined function is that you don’t need to invent a name for the function –
but that’s just a local variable to which the function object (which is exactly the same type of object that a lambda
expressionyields)isassigned!
3.13Can Python be compiled to machine code, C or some other
language?
Cythoncompiles a modified version of Python with optional annotations into C extensions. Nuitkais an up-and-
comingcompilerofPythonintoC++code,aimingtosupportthefullPythonlanguage.
3.14HowdoesPythonmanagememory?
ThedetailsofPythonmemorymanagementdependontheimplementation. ThestandardimplementationofPython,
CPython,usesreferencecountingtodetectinaccessibleobjects,andanothermechanismtocollectreferencecycles,
periodicallyexecutingacycledetectionalgorithmwhichlooksforinaccessiblecyclesanddeletestheobjectsinvolved.
Thegcmoduleprovidesfunctionstoperformagarbagecollection,obtaindebuggingstatistics,andtunethecollector’s
parameters.
Other implementations (such as JythonorPyPy), however, can rely on a different mechanism such as a full-blown
garbage collector. This difference can cause some subtle porting problems if your Python code depends on the
behaviorofthereferencecountingimplementation.
InsomePythonimplementations,thefollowingcode(whichisfineinCPython)willprobablyrunoutoffiledescrip-
tors:
for file invery_long_list_of_files:
f=open (file)
c=f.read( 1)
Indeed,usingCPython’sreferencecountinganddestructorscheme,eachnewassignmentto fclosesthepreviousfile.
With a traditional GC, however, those file objects will only get collected (and closed) at varying and possibly long
intervals.
IfyouwanttowritecodethatwillworkwithanyPythonimplementation,youshouldexplicitlyclosethefileoruse
thewithstatement;thiswillworkregardlessofmemorymanagementscheme:
for file invery_long_list_of_files:
with open (file) asf:
c=f.read( 1)
3.11. Can’tyouemulatethreadsintheinterpreterinsteadofrelyingonanOS-specificthread
implementation?43
PythonFrequentlyAskedQuestions,Release3.13.0
3.15Why doesn’t CPython use a more traditional garbage collec-
tionscheme?
Foronething,thisisnotaCstandardfeatureandhenceit’snotportable. (Yes,weknowabouttheBoehmGClibrary.
Ithasbitsofassemblercodefor mostcommonplatforms,notforallofthem,andalthoughitismostlytransparent,
itisn’tcompletelytransparent;patchesarerequiredtogetPythontoworkwithit.)
Traditional GC also becomes a problem when Python is embedded into other applications. While in a standalone
Pythonit’sfinetoreplacethestandard malloc() andfree()withversionsprovidedbytheGClibrary,anapplica-
tionembeddingPythonmaywanttohaveits ownsubstitutefor malloc() andfree(),andmaynotwantPython’s.
Rightnow,CPythonworkswithanythingthatimplements malloc() andfree()properly.
3.16Whyisn’tallmemoryfreedwhenCPythonexits?
Objects referenced from the global namespaces of Python modules are not always deallocated when Python exits.
Thismayhappeniftherearecircularreferences. TherearealsocertainbitsofmemorythatareallocatedbytheC
librarythatareimpossibletofree(e.g. atoollikePurifywillcomplainaboutthese). Pythonis,however,aggressive
aboutcleaningupmemoryonexitanddoestrytodestroyeverysingleobject.
If you want to force Python to delete certain things on deallocation use the atexitmodule to run a function that
willforcethosedeletions.
3.17Whyarethereseparatetupleandlistdatatypes?
Lists and tuples, while similar in many respects, are generally used in fundamentally different ways. Tuples can be
thoughtofasbeingsimilartoPascal recordsorCstructs;they’resmallcollectionsofrelateddatawhichmaybe
ofdifferenttypeswhichareoperatedonasagroup. Forexample,aCartesiancoordinateisappropriatelyrepresented
asatupleoftwoorthreenumbers.
Lists,ontheotherhand,aremorelikearraysinotherlanguages. Theytendtoholdavaryingnumberofobjectsall
ofwhichhavethesametypeandwhichareoperatedonone-by-one. Forexample, os.listdir('.') returnsalist
ofstringsrepresentingthefilesinthecurrentdirectory. Functionswhichoperateonthisoutputwouldgenerallynot
breakifyouaddedanotherfileortwotothedirectory.
Tuplesareimmutable,meaningthatonceatuplehasbeencreated,youcan’treplaceanyofitselementswithanew
value. Listsaremutable,meaningthatyoucanalwayschangealist’selements. Onlyimmutableelementscanbeused
asdictionarykeys,andhenceonlytuplesandnotlistscanbeusedaskeys.
3.18HowarelistsimplementedinCPython?
CPython’s lists are really variable-length arrays, not Lisp-style linked lists. The implementation uses a contiguous
arrayofreferencestootherobjects,andkeepsapointertothisarrayandthearray’slengthinalistheadstructure.
This makes indexing a list a[i]an operation whose cost is independent of the size of the list or the value of the
index.
Whenitemsareappendedorinserted,thearrayofreferencesisresized. Someclevernessisappliedtoimprovethe
performanceofappendingitemsrepeatedly;whenthearraymustbegrown,someextraspaceisallocatedsothenext
fewtimesdon’trequireanactualresize.
3.19HowaredictionariesimplementedinCPython?
CPython’sdictionariesareimplementedasresizablehashtables. ComparedtoB-trees,thisgivesbetterperformance
forlookup(themostcommonoperationbyfar)undermostcircumstances,andtheimplementationissimpler.
Dictionariesworkbycomputingahashcodeforeachkeystoredinthedictionaryusingthe hash()built-infunction.
The hash code varies widely depending on the key and a per-process seed; for example, 'Python' could hash to
-539294296 while 'python' , a string that differs by a single bit, could hash to 1142331976 . The hash code is
44 Chapter3. DesignandHistoryFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
then used to calculate a location in an internal array where the value will be stored. Assuming that you’re storing
keysthatallhavedifferenthashvalues,thismeansthatdictionariestakeconstanttime– O(1),inBig-Onotation–to
retrieveakey.
3.20Whymustdictionarykeysbeimmutable?
Thehashtableimplementationofdictionariesusesahashvaluecalculatedfromthekeyvaluetofindthekey. Ifthe
keywereamutableobject, itsvaluecouldchange, andthusitshashcouldalsochange. Butsincewhoeverchanges
the key object can’t tell that it was being used as a dictionary key, it can’t move the entry around in the dictionary.
Then,whenyoutrytolookupthesameobjectinthedictionaryitwon’tbefoundbecauseitshashvalueisdifferent.
Ifyoutriedtolookuptheoldvalueitwouldn’tbefoundeither,becausethevalueoftheobjectfoundinthathashbin
wouldbedifferent.
Ifyouwantadictionaryindexedwithalist,simplyconvertthelisttoatuplefirst;thefunction tuple(L) createsa
tuplewiththesameentriesasthelist L.Tuplesareimmutableandcanthereforebeusedasdictionarykeys.
Someunacceptablesolutionsthathavebeenproposed:
•Hash lists by their address (object ID). This doesn’t work because if you construct a new list with the same
valueitwon’tbefound;e.g.:
mydict ={[1,2]:'12'}
print (mydict[[ 1,2]])
wouldraisea KeyError exceptionbecausetheidofthe [1, 2]usedinthesecondlinediffersfromthatin
thefirstline. Inotherwords,dictionarykeysshouldbecomparedusing ==,notusing is.
•Make a copy when using a list as a key. This doesn’t work because the list, being a mutable object, could
containareferencetoitself,andthenthecopyingcodewouldrunintoaninfiniteloop.
•Allowlistsaskeysbuttelltheusernottomodifythem. Thiswouldallowaclassofhard-to-trackbugsinpro-
gramswhenyouforgotormodifiedalistbyaccident. Italsoinvalidatesanimportantinvariantofdictionaries:
everyvaluein d.keys() isusableasakeyofthedictionary.
•Mark lists as read-only once they are used as a dictionary key. The problem is that it’s not just the top-level
objectthatcouldchangeitsvalue;youcoulduseatuplecontainingalistasakey. Enteringanythingasakeyinto
adictionarywouldrequiremarkingallobjectsreachablefromthereasread-only–andagain,self-referential
objectscouldcauseaninfiniteloop.
Thereisatricktogetaroundthisifyouneedto,butuseitatyourownrisk: Youcanwrapamutablestructureinside
a class instance which has both a __eq__() and a __hash__() method. You must then make sure that the hash
valueforallsuchwrapperobjectsthatresideinadictionary(orotherhashbasedstructure),remainfixedwhilethe
objectisinthedictionary(orotherstructure).
class ListWrapper :
def __init__ (self , the_list):
self .the_list =the_list
def __eq__ (self , other):
return self .the_list ==other .the_list
def __hash__ (self ):
l=self .the_list
result =98767 -len(l)*555
for i, el inenumerate (l):
try:
result =result +(hash (el) %9999999 )*1001 +i
except Exception :
result =(result %7777777 )+i*333
return result
3.20. Whymustdictionarykeysbeimmutable? 45
PythonFrequentlyAskedQuestions,Release3.13.0
Notethatthehashcomputationiscomplicatedbythepossibilitythatsomemembersofthelistmaybeunhashable
andalsobythepossibilityofarithmeticoverflow.
Furthermore it must always be the case that if o1 == o2 (ieo1.__eq__(o2) is True ) then hash(o1) ==
hash(o2) (ie,o1.__hash__() == o2.__hash__() ),regardlessofwhethertheobjectisinadictionaryornot.
Ifyoufailtomeettheserestrictionsdictionariesandotherhashbasedstructureswillmisbehave.
In the case of ListWrapper , whenever the wrapper object is in a dictionary the wrapped list must not change to
avoidanomalies. Don’tdothisunlessyouarepreparedtothinkhardabouttherequirementsandtheconsequences
ofnotmeetingthemcorrectly. Consideryourselfwarned.
3.21Whydoesn’tlist.sort()returnthesortedlist?
Insituationswhereperformancematters,makingacopyofthelistjusttosortitwouldbewasteful. Therefore, list.
sort()sorts the list in place. In order to remind you of that fact, it does not return the sorted list. This way, you
won’tbefooledintoaccidentallyoverwritingalistwhenyouneedasortedcopybutalsoneedtokeeptheunsorted
versionaround.
If you want to return a new list, use the built-in sorted() function instead. This function creates a new list from
aprovidediterable,sortsitandreturnsit. Forexample,here’showtoiterateoverthekeysofadictionaryinsorted
order:
for key insorted (mydict):
...# do whatever with mydict[key]...
3.22HowdoyouspecifyandenforceaninterfacespecinPython?
AninterfacespecificationforamoduleasprovidedbylanguagessuchasC++andJavadescribestheprototypesfor
themethodsandfunctionsofthemodule. Manyfeelthatcompile-timeenforcementofinterfacespecificationshelps
intheconstructionoflargeprograms.
Python2.6addsan abcmodulethatletsyoudefineAbstractBaseClasses(ABCs). Youcanthenuse isinstance()
andissubclass() tocheckwhetheraninstanceoraclassimplementsaparticularABC.The collections.abc
moduledefinesasetofusefulABCssuchas Iterable ,Container ,and MutableMapping .
ForPython,manyoftheadvantagesofinterfacespecificationscanbeobtainedbyanappropriatetestdisciplinefor
components.
Agoodtestsuiteforamodulecanbothprovidearegressiontestandserveasamoduleinterfacespecificationanda
setofexamples. ManyPythonmodulescanberunasascripttoprovideasimple“selftest.” Evenmoduleswhichuse
complexexternalinterfacescanoftenbetestedinisolationusingtrivial“stub”emulationsoftheexternalinterface.
Thedoctestandunittest modulesorthird-partytestframeworkscanbeusedtoconstructexhaustivetestsuites
thatexerciseeverylineofcodeinamodule.
An appropriate testing discipline can help build large complex applications in Python as well as having interface
specifications would. In fact, it can be better because an interface specification cannot test certain properties of a
program. Forexample, the list.append() methodisexpectedtoaddnewelementstotheendofsomeinternal
list;aninterfacespecificationcannottestthatyour list.append() implementationwillactuallydothiscorrectly,
butit’strivialtocheckthispropertyinatestsuite.
Writingtestsuitesisveryhelpful,andyoumightwanttodesignyourcodetomakeiteasilytested. Oneincreasingly
populartechnique,test-drivendevelopment,callsforwritingpartsofthetestsuitefirst,beforeyouwriteanyofthe
actualcode. OfcoursePythonallowsyoutobesloppyandnotwritetestcasesatall.
3.23Whyistherenogoto?
Inthe1970speoplerealizedthatunrestrictedgotocouldleadtomessy“spaghetti”codethatwashardtounderstand
and revise. In a high-level language, it is also unneeded as long as there are ways to branch (in Python, with if
statementsand or,and, and if/elseexpressions)andloop(with whileandforstatements, possiblycontaining
continue andbreak).
46 Chapter3. DesignandHistoryFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
Onecanalsouseexceptionstoprovidea“structuredgoto”thatworksevenacrossfunctioncalls. Manyfeelthatex-
ceptionscanconvenientlyemulateallreasonableusesofthe goorgotoconstructsofC,Fortran,andotherlanguages.
Forexample:
class label (Exception ):pass # declare a label
try:
...
ifcondition: raise label() # goto label
...
except label: # where to goto
pass
...
Thisdoesn’tallowyoutojumpintothemiddleofaloop,butthat’susuallyconsideredanabuseof gotoanyway. Use
sparingly.
3.24Whycan’trawstrings(r-strings)endwithabackslash?
More precisely, they can’t end with an odd number of backslashes: the unpaired backslash at the end escapes the
closingquotecharacter,leavinganunterminatedstring.
Rawstringsweredesignedtoeasecreatinginputforprocessors(chieflyregularexpressionengines)thatwanttodo
their own backslash escape processing. Such processors consider an unmatched trailing backslash to be an error
anyway, so raw strings disallow that. In return, they allow you to pass on the string quote character by escaping it
withabackslash. Theserulesworkwellwhenr-stringsareusedfortheirintendedpurpose.
Ifyou’retryingtobuildWindowspathnames,notethatallWindowssystemcallsacceptforwardslashestoo:
f=open ("/mydir/file.txt ")# works fine!
Ifyou’retryingtobuildapathnameforaDOScommand,trye.g. oneof
dir =r"\this \is\my\dos\dir""\\"
dir =r"\this \is\my\dos\dir\"[:-1]
dir ="\\this \\is\\my\\dos\\dir\\"
3.25Why doesn’t Python have a “with” statement for attribute as-
signments?
Python has a withstatement that wraps the execution of a block, calling code on the entrance and exit from the
block. Somelanguageshaveaconstructthatlookslikethis:
with obj:
a=1 # equivalent to obj.a = 1
total =total +1 # obj.total = obj.total + 1
InPython,suchaconstructwouldbeambiguous.
Otherlanguages,suchasObjectPascal,Delphi,andC++,usestatictypes,soit’spossibletoknow,inanunambiguous
way,whatmemberisbeingassignedto. Thisisthemainpointofstatictyping–thecompiler alwaysknowsthescope
ofeveryvariableatcompiletime.
Pythonusesdynamictypes. Itisimpossibletoknowinadvancewhichattributewillbereferencedatruntime. Member
attributesmaybeaddedorremovedfromobjectsonthefly. Thismakesitimpossibletoknow,fromasimplereading,
whatattributeisbeingreferenced: alocalone,aglobalone,oramemberattribute?
Forinstance,takethefollowingincompletesnippet:
3.24. Whycan’trawstrings(r-strings)endwithabackslash? 47
PythonFrequentlyAskedQuestions,Release3.13.0
def foo(a):
with a:
print (x)
Thesnippetassumesthat amusthaveamemberattributecalled x. However,thereisnothinginPythonthattellsthe
interpreter this. What should happen if ais, let us say, an integer? If there is a global variable named x, will it be
usedinsidethe withblock? Asyousee,thedynamicnatureofPythonmakessuchchoicesmuchharder.
The primary benefit of withand similar language features (reduction of code volume) can, however, easily be
achievedinPythonbyassignment. Insteadof:
function(args) .mydict[index][index] .a=21
function(args) .mydict[index][index] .b=42
function(args) .mydict[index][index] .c=63
writethis:
ref =function(args) .mydict[index][index]
ref.a=21
ref.b=42
ref.c=63
Thisalsohastheside-effectofincreasingexecutionspeedbecausenamebindingsareresolvedatrun-timeinPython,
andthesecondversiononlyneedstoperformtheresolutiononce.
Similarproposalsthatwouldintroducesyntaxtofurtherreducecodevolume,suchasusinga‘leadingdot’,havebeen
rejectedinfavourofexplicitness(see https://mail.python.org/pipermail/python-ideas/2016-May/040070.html ).
3.26Whydon’tgeneratorssupportthewithstatement?
Fortechnicalreasons,ageneratoruseddirectlyasacontextmanagerwouldnotworkcorrectly. When,asismostcom-
mon,ageneratorisusedasaniteratorruntocompletion,noclosingisneeded. Whenitis,wrapitas contextlib.
closing(generator) inthe withstatement.
3.27Whyarecolonsrequiredfortheif/while/def/classstatements?
Thecolonisrequiredprimarilytoenhancereadability(oneoftheresultsoftheexperimentalABClanguage). Con-
siderthis:
ifa==b
print (a)
versus
ifa==b:
print (a)
Notice how the second one is slightly easier to read. Notice further how a colon sets off the example in this FAQ
answer;it’sastandardusageinEnglish.
Anotherminorreasonisthatthecolonmakesiteasierforeditorswithsyntaxhighlighting;theycanlookforcolons
to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program
text.
48 Chapter3. DesignandHistoryFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
3.28WhydoesPythonallowcommasattheendoflistsandtuples?
Pythonletsyouaddatrailingcommaattheendoflists,tuples,anddictionaries:
[1,2,3,]
('a','b','c',)
d={
"A": [1,5],
"B": [6,7], # last trailing comma is optional but good style
}
Thereareseveralreasonstoallowthis.
When you have a literal value for a list, tuple, or dictionary spread across multiple lines, it’s easier to add more
elementsbecauseyoudon’thavetoremembertoaddacommatothepreviousline. Thelinescanalsobereordered
withoutcreatingasyntaxerror.
Accidentallyomittingthecommacanleadtoerrorsthatarehardtodiagnose. Forexample:
x=[
"fee",
"fie"
"foo",
"fum"
]
Thislistlookslikeithasfourelements,butitactuallycontainsthree: “fee”,“fiefoo”and“fum”. Alwaysaddingthe
commaavoidsthissourceoferror.
Allowingthetrailingcommamayalsomakeprogrammaticcodegenerationeasier.
3.28. WhydoesPythonallowcommasattheendoflistsandtuples? 49
PythonFrequentlyAskedQuestions,Release3.13.0
50 Chapter3. DesignandHistoryFAQ
CHAPTER
FOUR
LIBRARYANDEXTENSIONFAQ
4.1GeneralLibraryQuestions
4.1.1HowdoIfindamoduleorapplicationtoperformtaskX?
Check the Library Reference to see if there’s a relevant standard library module. (Eventually you’ll learn what’s in
thestandardlibraryandwillbeabletoskipthisstep.)
Forthird-partypackages, searchthe PythonPackageIndex ortryGoogleoranotherwebsearchengine. Searching
for“Python”plusakeywordortwoforyourtopicofinterestwillusuallyfindsomethinghelpful.
4.1.2Whereisthemath.py(socket.py,regex.py,etc.) sourcefile?
Ifyoucan’tfindasourcefileforamoduleitmaybeabuilt-inordynamicallyloadedmoduleimplementedinC,C++
orothercompiledlanguage. Inthiscaseyoumaynothavethesourcefileoritmaybesomethinglike mathmodule.c ,
somewhereinaCsourcedirectory(notonthePythonPath).
Thereare(atleast)threekindsofmodulesinPython:
1)moduleswritteninPython(.py);
2)moduleswritteninCanddynamicallyloaded(.dll,.pyd,.so,.sl,etc);
3)moduleswritteninCandlinkedwiththeinterpreter;togetalistofthese,type:
import sys
print (sys .builtin_module_names)
4.1.3HowdoImakeaPythonscriptexecutableonUnix?
Youneedtodotwothings: thescriptfile’smodemustbeexecutableandthefirstlinemustbeginwith #!followed
bythepathofthePythoninterpreter.
Thefirstisdonebyexecuting chmod +x scriptfile orperhaps chmod 755 scriptfile .
Thesecondcanbedoneinanumberofways. Themoststraightforwardwayistowrite
#!/usr/local/bin/python
astheveryfirstlineofyourfile,usingthepathnameforwherethePythoninterpreterisinstalledonyourplatform.
IfyouwouldlikethescripttobeindependentofwherethePythoninterpreterlives, youcanusethe envprogram.
AlmostallUnixvariantssupportthefollowing,assumingthePythoninterpreterisinadirectoryontheuser’s PATH:
#!/usr/bin/env python
Don’tdothisforCGIscripts. The PATHvariableforCGIscriptsisoftenveryminimal,soyouneedtousetheactual
absolutepathnameoftheinterpreter.
Occasionally,auser’senvironmentissofullthatthe /usr/bin/env programfails;orthere’snoenvprogramatall.
Inthatcase,youcantrythefollowinghack(duetoAlexRezinsky):
51
PythonFrequentlyAskedQuestions,Release3.13.0
#! /bin/sh
""":"
exec python $0${1+"$@"}
"""
Theminordisadvantageisthatthisdefinesthescript’s__doc__string. However,youcanfixthatbyadding
__doc__ ="""...Whatever... """
4.1.4Isthereacurses/termcappackageforPython?
ForUnixvariants: ThestandardPythonsourcedistributioncomeswithacursesmoduleinthe Modulessubdirectory,
thoughit’snotcompiledbydefault. (NotethatthisisnotavailableintheWindowsdistribution–thereisnocurses
moduleforWindows.)
ThecursesmodulesupportsbasiccursesfeaturesaswellasmanyadditionalfunctionsfromncursesandSYSVcurses
suchascolour,alternativecharactersetsupport,pads,andmousesupport. Thismeansthemoduleisn’tcompatible
withoperatingsystemsthatonlyhaveBSDcurses,buttheredon’tseemtobeanycurrentlymaintainedOSesthatfall
intothiscategory.
4.1.5IsthereanequivalenttoC’sonexit()inPython?
TheatexitmoduleprovidesaregisterfunctionthatissimilartoC’s onexit() .
4.1.6Whydon’tmysignalhandlerswork?
Themostcommonproblemisthatthesignalhandlerisdeclaredwiththewrongargumentlist. Itiscalledas
handler(signum, frame)
soitshouldbedeclaredwithtwoparameters:
def handler (signum, frame):
...
4.2Commontasks
4.2.1HowdoItestaPythonprogramorcomponent?
Pythoncomeswithtwotestingframeworks. The doctestmodulefindsexamplesinthedocstringsforamoduleand
runsthem,comparingtheoutputwiththeexpectedoutputgiveninthedocstring.
Theunittest moduleisafanciertestingframeworkmodelledonJavaandSmalltalktestingframeworks.
Tomaketestingeasier,youshouldusegoodmodulardesigninyourprogram. Yourprogramshouldhavealmostall
functionalityencapsulatedineitherfunctionsorclassmethods–andthissometimeshasthesurprisinganddelightful
effectofmakingtheprogramrunfaster(becauselocalvariableaccessesarefasterthanglobalaccesses). Furthermore
theprogramshouldavoiddependingonmutatingglobalvariables,sincethismakestestingmuchmoredifficulttodo.
The“globalmainlogic”ofyourprogrammaybeassimpleas
if__name__ =="__main__ ":
main_logic()
atthebottomofthemainmoduleofyourprogram.
Once your program is organized as a tractable collection of function and class behaviours, you should write test
functions that exercise the behaviours. A test suite that automates a sequence of tests can be associated with each
module. Thissoundslikealotofwork,butsincePythonissoterseandflexibleit’ssurprisinglyeasy. Youcanmake
52 Chapter4. LibraryandExtensionFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
codingmuchmorepleasantandfunbywritingyourtestfunctionsinparallelwiththe“productioncode”,sincethis
makesiteasytofindbugsandevendesignflawsearlier.
“Supportmodules”thatarenotintendedtobethemainmoduleofaprogrammayincludeaself-testofthemodule.
if__name__ =="__main__ ":
self_test()
Evenprogramsthatinteractwithcomplexexternalinterfacesmaybetestedwhentheexternalinterfacesareunavail-
ablebyusing“fake”interfacesimplementedinPython.
4.2.2HowdoIcreatedocumentationfromdocstrings?
ThepydocmodulecancreateHTMLfromthedocstringsinyourPythonsourcecode. Analternativeforcreating
APIdocumentationpurelyfromdocstringsis epydoc.Sphinxcanalsoincludedocstringcontent.
4.2.3HowdoIgetasinglekeypressatatime?
For Unix variants there are severalsolutions. It’s straightforward to do thisusing curses, but curses is a fairly large
moduletolearn.
4.3Threads
4.3.1HowdoIprogramusingthreads?
Be sure to use the threading module and not the _threadmodule. The threading module builds convenient
abstractionsontopofthelow-levelprimitivesprovidedbythe _threadmodule.
4.3.2Noneofmythreadsseemtorun: why?
Assoonasthemainthreadexits,allthreadsarekilled. Yourmainthreadisrunningtooquickly,givingthethreads
notimetodoanywork.
Asimplefixistoaddasleeptotheendoftheprogramthat’slongenoughforallthethreadstofinish:
import threading ,time
def thread_task (name, n):
for iinrange (n):
print (name, i)
for iinrange (10):
T=threading .Thread(target =thread_task, args =(str(i), i))
T.start()
time .sleep( 10)# <---------------------------!
But now (on many platforms) the threads don’t run in parallel, but appear to run sequentially, one at a time! The
reasonisthattheOSthreadschedulerdoesn’tstartanewthreaduntilthepreviousthreadisblocked.
Asimplefixistoaddatinysleeptothestartoftherunfunction:
def thread_task (name, n):
time .sleep( 0.001 )# <--------------------!
for iinrange (n):
print (name, i)
for iinrange (10):
T=threading .Thread(target =thread_task, args =(str(i), i))
(continuesonnextpage)
4.3. Threads 53
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
T.start()
time .sleep( 10)
Insteadoftryingtoguessagooddelayvaluefor time.sleep() ,it’sbettertousesomekindofsemaphoremech-
anism. Oneideaistousethe queuemoduletocreateaqueueobject, leteachthreadappendatokentothequeue
whenitfinishes,andletthemainthreadreadasmanytokensfromthequeueastherearethreads.
4.3.3HowdoIparceloutworkamongabunchofworkerthreads?
Theeasiestwayistousethe concurrent.futures module,especiallythe ThreadPoolExecutor class.
Or,ifyouwantfinecontroloverthedispatchingalgorithm,youcanwriteyourownlogicmanually. Usethe queue
moduletocreateaqueuecontainingalistofjobs. The Queueclassmaintainsalistofobjectsandhasa .put(obj)
methodthataddsitemstothequeueanda .get()methodtoreturnthem. Theclasswilltakecareofthelocking
necessarytoensurethateachjobishandedoutexactlyonce.
Here’satrivialexample:
import threading ,queue ,time
# The worker thread gets jobs off the queue. When the queue is empty, it
# assumes there will be no more work and exits.
# (Realistically workers will run until terminated.)
def worker ():
print ('Running worker ')
time .sleep( 0.1)
while True :
try:
arg =q.get(block =False )
except queue .Empty:
print ('Worker ', threading .current_thread(), end ='')
print ('queue empty ')
break
else :
print ('Worker ', threading .current_thread(), end ='')
print ('running with argument ', arg)
time .sleep( 0.5)
# Create queue
q=queue .Queue()
# Start a pool of 5 workers
for iinrange (5):
t=threading .Thread(target =worker, name ='worker %i'%(i+1))
t.start()
# Begin adding work to the queue
for iinrange (50):
q.put(i)
# Give threads time to run
print ('Main thread sleeping ')
time .sleep( 5)
Whenrun,thiswillproducethefollowingoutput:
54 Chapter4. LibraryandExtensionFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
Running worker
Running worker
Running worker
Running worker
Running worker
Main thread sleeping
Worker <Thread(worker 1, started 130283832797456)> running with argument 0
Worker <Thread(worker 2, started 130283824404752)> running with argument 1
Worker <Thread(worker 3, started 130283816012048)> running with argument 2
Worker <Thread(worker 4, started 130283807619344)> running with argument 3
Worker <Thread(worker 5, started 130283799226640)> running with argument 4
Worker <Thread(worker 1, started 130283832797456)> running with argument 5
...
Consultthemodule’sdocumentationformoredetails;the Queueclassprovidesafeaturefulinterface.
4.3.4Whatkindsofglobalvaluemutationarethread-safe?
Aglobal interpreter lock (GIL)isusedinternallytoensurethatonlyonethreadrunsinthePythonVMatatime. In
general, Python offers to switch among threads only between bytecode instructions; how frequently it switches can
be set via sys.setswitchinterval() . Each bytecode instruction and therefore all the C implementation code
reachedfromeachinstructionisthereforeatomicfromthepointofviewofaPythonprogram.
Intheory,thismeansanexactaccountingrequiresanexactunderstandingofthePVMbytecodeimplementation. In
practice,itmeansthatoperationsonsharedvariablesofbuilt-indatatypes(ints,lists,dicts,etc)that“lookatomic”
reallyare.
Forexample,thefollowingoperationsareallatomic(L,L1,L2arelists,D,D1,D2aredicts,x,yareobjects,i,jare
ints):
L.append(x)
L1.extend(L2)
x=L[i]
x=L.pop()
L1[i:j] =L2
L.sort()
x=y
x.field =y
D[x] =y
D1.update(D2)
D.keys()
Thesearen’t:
i=i+1
L.append(L[ -1])
L[i] =L[j]
D[x] =D[x] +1
Operationsthatreplaceotherobjectsmayinvokethoseotherobjects’ __del__() methodwhentheirreferencecount
reacheszero,andthatcanaffectthings. Thisisespeciallytrueforthemassupdatestodictionariesandlists. Whenin
doubt,useamutex!
4.3.5Can’twegetridoftheGlobalInterpreterLock?
Theglobal interpreter lock (GIL) is often seen as a hindrance to Python’s deployment on high-end multiprocessor
servermachines,becauseamulti-threadedPythonprogrameffectivelyonlyusesoneCPU,duetotheinsistencethat
(almost)allPythoncodecanonlyrunwhiletheGILisheld.
4.3. Threads 55
PythonFrequentlyAskedQuestions,Release3.13.0
With the approval of PEP 703work is now underway to remove the GIL from the CPython implementation of
Python. Initiallyitwillbeimplementedasanoptionalcompilerflagwhenbuildingtheinterpreter, andsoseparate
buildswillbeavailablewithandwithouttheGIL.Long-term,thehopeistosettleonasinglebuild,oncetheperfor-
manceimplicationsofremovingtheGILarefullyunderstood. Python3.13islikelytobethefirstreleasecontaining
thiswork,althoughitmaynotbecompletelyfunctionalinthisrelease.
Thecurrentworkto removetheGIL is based ona forkofPython3.9 withtheGIL removed bySam Gross. Prior
tothat,inthedaysofPython1.5,GregSteinactuallyimplementedacomprehensivepatchset(the“freethreading”
patches)thatremovedtheGILandreplaceditwithfine-grainedlocking. AdamOlsendidasimilarexperimentinhis
python-safethread project. Unfortunately, bothoftheseearlierexperimentsexhibitedasharpdropinsingle-thread
performance(atleast30%slower),duetotheamountoffine-grainedlockingnecessarytocompensatefortheremoval
oftheGIL.ThePython3.9forkisthefirstattemptatremovingtheGILwithanacceptableperformanceimpact.
ThepresenceoftheGILincurrentPythonreleasesdoesn’tmeanthatyoucan’tmakegooduseofPythononmulti-
CPU machines! You just have to be creative with dividing the work up between multiple processesrather than
multiple threads. The ProcessPoolExecutor classinthenew concurrent.futures moduleprovidesaneasy
way of doing so; the multiprocessing module provides a lower-level API in case you want more control over
dispatchingoftasks.
JudicioususeofCextensionswillalsohelp;ifyouuseaCextensiontoperformatime-consumingtask,theextension
can release the GIL while the thread of execution is in the C code and allow other threads to get some work done.
Somestandardlibrarymodulessuchas zlibandhashlibalreadydothis.
AnalternativeapproachtoreducingtheimpactoftheGIListomaketheGILaper-interpreter-statelockratherthan
truly global. This was first implemented in Python 3.12 and is available in the C API. A Python interface to it is
expectedinPython3.13. Themainlimitationtoitatthemomentislikelytobe3rdpartyextensionmodules,since
thesemustbewrittenwithmultipleinterpretersinmindinordertobeusable,somanyolderextensionmoduleswill
notbeusable.
4.4InputandOutput
4.4.1HowdoIdeleteafile? (Andotherfilequestions…)
Useos.remove(filename) oros.unlink(filename) ;fordocumentation,seethe osmodule. Thetwofunc-
tionsareidentical; unlink() issimplythenameoftheUnixsystemcallforthisfunction.
To remove a directory, use os.rmdir() ; use os.mkdir() to create one. os.makedirs(path) will create any
intermediatedirectoriesin paththatdon’texist. os.removedirs(path) willremoveintermediatedirectoriesas
longasthey’reempty;ifyouwanttodeleteanentiredirectorytreeanditscontents,use shutil.rmtree() .
Torenameafile,use os.rename(old_path, new_path) .
Totruncateafile,openitusing f = open(filename, "rb+") ,anduse f.truncate(offset) ;offsetdefaults
tothecurrentseekposition. There’salso os.ftruncate(fd, offset) forfilesopenedwith os.open() ,where
fdisthefiledescriptor(asmallinteger).
Theshutilmodule also contains a number of functions to work on files including copyfile() ,copytree() ,
andrmtree() .
4.4.2HowdoIcopyafile?
Theshutilmodule contains a copyfile() function. Note that on Windows NTFS volumes, it does not copy
alternatedatastreams norresourceforks onmacOSHFS+volumes,thoughbotharenowrarelyused. Italsodoesn’t
copyfilepermissionsandmetadata, thoughusing shutil.copy2() insteadwillpreservemost(thoughnotall)of
it.
4.4.3HowdoIread(orwrite)binarydata?
To read or write complex binary data formats, it’s best to use the structmodule. It allows you to take a string
containingbinarydata(usuallynumbers)andconvertittoPythonobjects;andviceversa.
Forexample,thefollowingcodereadstwo2-byteintegersandone4-byteintegerinbig-endianformatfromafile:
56 Chapter4. LibraryandExtensionFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
import struct
with open (filename, "rb")asf:
s=f.read( 8)
x, y, z =struct .unpack( ">hhl ", s)
The‘>’intheformatstringforcesbig-endiandata;theletter‘h’readsone“shortinteger”(2bytes),and‘l’readsone
“longinteger”(4bytes)fromthestring.
Fordatathatismoreregular(e.g. ahomogeneouslistofintsorfloats),youcanalsousethe arraymodule.
®Note
Toreadandwritebinarydata,itismandatorytoopenthefileinbinarymode(here,passing "rb"toopen()).
If you use "r"instead (the default), the file will be open in text mode and f.read() will return strobjects
ratherthan bytesobjects.
4.4.4Ican’tseemtouseos.read()onapipecreatedwithos.popen();why?
os.read() is a low-level function which takes a file descriptor, a small integer representing the opened file. os.
popen()creates a high-level file object, the same type returned by the built-in open()function. Thus, to read n
bytesfromapipe pcreatedwith os.popen() ,youneedtouse p.read(n) .
4.4.5HowdoIaccesstheserial(RS232)port?
ForWin32,OSX,Linux,BSD,Jython,IronPython:
pyserial
ForUnix,seeaUsenetpostbyMitchChapman:
https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com
4.4.6Whydoesn’tclosingsys.stdout(stdin,stderr)reallycloseit?
Pythonfile objects areahigh-levellayerofabstractiononlow-levelCfiledescriptors.
FormostfileobjectsyoucreateinPythonviathebuilt-in open()function, f.close() marksthePythonfileobject
as being closed from Python’s point of view, and also arranges to close the underlying C file descriptor. This also
happensautomaticallyin f’sdestructor,when fbecomesgarbage.
But stdin, stdout and stderr are treated specially by Python, because of the special status also given to them by C.
Running sys.stdout.close() marksthePython-levelfileobjectasbeingclosed,butdoes notclosetheassociated
Cfiledescriptor.
ToclosetheunderlyingCfiledescriptorforoneofthesethree,youshouldfirstbesurethat’swhatyoureallywantto
do(e.g.,youmayconfuseextensionmodulestryingtodoI/O).Ifitis,use os.close() :
os.close(stdin .fileno())
os.close(stdout .fileno())
os.close(stderr .fileno())
Oryoucanusethenumericconstants0,1and2,respectively.
4.5Network/InternetProgramming
4.5.1WhatWWWtoolsarethereforPython?
See the chapters titled internet and netdata in the Library Reference Manual. Python has many modules that will
helpyoubuildserver-sideandclient-sidewebsystems.
4.5. Network/InternetProgramming 57
PythonFrequentlyAskedQuestions,Release3.13.0
A summary of available frameworks is maintained by Paul Boddie at https://wiki.python.org/moin/
WebProgramming .
4.5.2WhatmoduleshouldIusetohelpwithgeneratingHTML?
Youcanfindacollectionofusefullinksonthe WebProgrammingwikipage .
4.5.3HowdoIsendmailfromaPythonscript?
Usethestandardlibrarymodule smtplib.
Here’saverysimpleinteractivemailsenderthatusesit. ThismethodwillworkonanyhostthatsupportsanSMTP
listener.
import sys,smtplib
fromaddr =input ("From: ")
toaddrs =input ("To: ").split( ',')
print ("Enter message, end with ^D: ")
msg =''
while True :
line =sys.stdin .readline()
ifnot line:
break
msg +=line
# The actual mail send
server =smtplib .SMTP( 'localhost ')
server .sendmail(fromaddr, toaddrs, msg)
server .quit()
AUnix-onlyalternativeusessendmail. Thelocationofthesendmailprogramvariesbetweensystems;sometimesit
is/usr/lib/sendmail ,sometimes /usr/sbin/sendmail . Thesendmailmanualpagewillhelpyouout. Here’s
somesamplecode:
import os
SENDMAIL ="/usr/sbin/sendmail "# sendmail location
p=os.popen( "%s-t -i "%SENDMAIL, "w")
p.write( "To: receiver@example.com \n")
p.write( "Subject: test \n")
p.write( "\n")# blank line separating headers from body
p.write( "Some text \n")
p.write( "some more text \n")
sts =p.close()
ifsts !=0:
print ("Sendmail exit status ", sts)
4.5.4HowdoIavoidblockingintheconnect()methodofasocket?
TheselectmoduleiscommonlyusedtohelpwithasynchronousI/Oonsockets.
To prevent the TCP connect from blocking, you can set the socket to non-blocking mode. Then when you do the
connect() , you will either connect immediately (unlikely) or get an exception that contains the error number as
.errno.errno.EINPROGRESS indicatesthattheconnectionisinprogress,buthasn’tfinishedyet. DifferentOSes
willreturndifferentvalues,soyou’regoingtohavetocheckwhat’sreturnedonyoursystem.
Youcanusethe connect_ex() methodtoavoidcreatinganexception. Itwilljustreturntheerrnovalue. Topoll,
you can call connect_ex() again later – 0orerrno.EISCONN indicate that you’re connected – or you can pass
thissocketto select.select() tocheckifit’swritable.
58 Chapter4. LibraryandExtensionFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
®Note
Theasynciomodule provides a general purpose single-threaded and concurrent asynchronous library, which
canbeusedforwritingnon-blockingnetworkcode. Thethird-party Twistedlibraryisapopularandfeature-rich
alternative.
4.6Databases
4.6.1ArethereanyinterfacestodatabasepackagesinPython?
Yes.
Interfaces to disk-based hashes such as DBMandGDBMare also included with standard Python. There is also the
sqlite3module,whichprovidesalightweightdisk-basedrelationaldatabase.
Supportformostrelationaldatabasesisavailable. Seethe DatabaseProgrammingwikipage fordetails.
4.6.2HowdoyouimplementpersistentobjectsinPython?
Thepicklelibrary module solves this in a very general way (though you still can’t store things like open files,
socketsorwindows),andthe shelvelibrarymoduleusespickleand(g)dbmtocreatepersistentmappingscontaining
arbitraryPythonobjects.
4.7MathematicsandNumerics
4.7.1HowdoIgeneraterandomnumbersinPython?
Thestandardmodule randomimplementsarandomnumbergenerator. Usageissimple:
import random
random .random()
Thisreturnsarandomfloating-pointnumberintherange[0,1).
Therearealsomanyotherspecializedgeneratorsinthismodule,suchas:
•randrange(a, b) choosesanintegerintherange[a,b).
•uniform(a, b) choosesafloating-pointnumberintherange[a,b).
•normalvariate(mean, sdev) samplesthenormal(Gaussian)distribution.
Somehigher-levelfunctionsoperateonsequencesdirectly,suchas:
•choice(S) choosesarandomelementfromagivensequence.
•shuffle(L) shufflesalistin-place,i.e. permutesitrandomly.
There’salsoa Randomclassyoucaninstantiatetocreateindependentmultiplerandomnumbergenerators.
4.6. Databases 59
PythonFrequentlyAskedQuestions,Release3.13.0
60 Chapter4. LibraryandExtensionFAQ
CHAPTER
FIVE
EXTENDING/EMBEDDINGFAQ
5.1CanIcreatemyownfunctionsinC?
Yes, you can create built-in modules containing functions, variables, exceptions and even new types in C. This is
explainedinthedocumentextending-index.
MostintermediateoradvancedPythonbookswillalsocoverthistopic.
5.2CanIcreatemyownfunctionsinC++?
Yes,usingtheCcompatibilityfeaturesfoundinC++. Place extern "C" { ... } aroundthePythonincludefiles
andput extern "C" beforeeachfunctionthatisgoingtobecalledbythePythoninterpreter. GlobalorstaticC++
objectswithconstructorsareprobablynotagoodidea.
5.3WritingCishard;arethereanyalternatives?
ThereareanumberofalternativestowritingyourownCextensions,dependingonwhatyou’retryingtodo.
Cythonand its relative Pyrexare compilers that accept a slightly modified form of Python and generate the cor-
responding C code. Cython and Pyrex make it possible to write an extension without having to learn Python’s C
API.
IfyouneedtointerfacetosomeCorC++libraryforwhichnoPythonextensioncurrentlyexists,youcantrywrapping
thelibrary’sdatatypesandfunctionswithatoolsuchas SWIG.SIP,CXXBoost,orWeavearealsoalternativesfor
wrappingC++libraries.
5.4HowcanIexecutearbitraryPythonstatementsfromC?
Thehighest-levelfunctiontodothisis PyRun_SimpleString() whichtakesasinglestringargumenttobeexecuted
in the context of the module __main__ and returns 0for success and -1when an exception occurred (including
SyntaxError ). If you want more control, use PyRun_String() ; see the source for PyRun_SimpleString()
inPython/pythonrun.c .
5.5HowcanIevaluateanarbitraryPythonexpressionfromC?
Call the function PyRun_String() from the previous question with the start symbol Py_eval_input ; it parses
anexpression,evaluatesitandreturnsitsvalue.
5.6HowdoIextractCvaluesfromaPythonobject?
That depends on the object’s type. If it’s a tuple, PyTuple_Size() returns its length and PyTuple_GetItem()
returnstheitemataspecifiedindex. Listshavesimilarfunctions, PyList_Size() andPyList_GetItem() .
61
PythonFrequentlyAskedQuestions,Release3.13.0
Forbytes, PyBytes_Size() returnsitslengthand PyBytes_AsStringAndSize() providesapointertoitsvalue
anditslength. NotethatPythonbytesobjectsmaycontainnullbytessoC’s strlen() shouldnotbeused.
Totestthetypeofanobject,firstmakesureitisn’t NULL,andthenuse PyBytes_Check() ,PyTuple_Check() ,
PyList_Check() ,etc.
There is also a high-level API to Python objects which is provided by the so-called ‘abstract’ interface – read
Include/abstract.h forfurtherdetails. ItallowsinterfacingwithanykindofPythonsequenceusingcallslike
PySequence_Length() ,PySequence_GetItem() ,etc. aswellasmanyotherusefulprotocolssuchasnumbers
(PyNumber_Index() etal.) andmappingsinthePyMappingAPIs.
5.7How do I use Py_BuildValue() to create a tuple of arbitrary
length?
Youcan’t. Use PyTuple_Pack() instead.
5.8HowdoIcallanobject’smethodfromC?
ThePyObject_CallMethod() functioncanbeusedtocallanarbitrarymethodofanobject. Theparametersare
theobject,thenameofthemethodtocall,aformatstringlikethatusedwith Py_BuildValue() ,andtheargument
values:
PyObject *
PyObject_CallMethod (PyObject *object, const char *method_name,
const char *arg_format, ...);
This works for any object that has methods – whether built-in or user-defined. You are responsible for eventually
Py_DECREF() ‘ingthereturnvalue.
Tocall,e.g.,afileobject’s“seek”methodwitharguments10,0(assumingthefileobjectpointeris“f”):
res =PyObject_CallMethod(f, "seek ","(ii) ",10,0);
if(res ==NULL ){
... anexception occurred ...
}
else {
Py_DECREF(res);
}
Note that since PyObject_CallObject() alwayswants a tuple for the argument list, to call a function without
arguments,pass“()”fortheformat,andtocallafunctionwithoneargument,surroundtheargumentinparentheses,
e.g. “(i)”.
5.9How do I catch the output from PyErr_Print() (or anything that
printstostdout/stderr)?
InPythoncode,defineanobjectthatsupportsthe write()method. Assignthisobjectto sys.stdout andsys.
stderr. Callprint_error,orjustallowthestandardtracebackmechanismtowork. Then,theoutputwillgowherever
yourwrite()methodsendsit.
Theeasiestwaytodothisistousethe io.StringIO class:
>>> import io,sys
>>> sys.stdout =io.StringIO()
>>> print ('foo')
>>> print ('hello world! ')
>>> sys.stderr .write(sys .stdout .getvalue())
(continuesonnextpage)
62 Chapter5. Extending/EmbeddingFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
foo
hello world!
Acustomobjecttodothesamewouldlooklikethis:
>>> import io,sys
>>> class StdoutCatcher (io.TextIOBase):
... def __init__ (self ):
... self .data =[]
... def write (self , stuff):
... self .data .append(stuff)
...
>>> import sys
>>> sys.stdout =StdoutCatcher()
>>> print ('foo')
>>> print ('hello world! ')
>>> sys.stderr .write( ''.join(sys .stdout .data))
foo
hello world!
5.10HowdoIaccessamodulewritteninPythonfromC?
Youcangetapointertothemoduleobjectasfollows:
module =PyImport_ImportModule( "<modulename> ");
If the module hasn’t been imported yet (i.e. it is not yet present in sys.modules ), this initializes the module;
otherwiseitsimplyreturnsthevalueof sys.modules["<modulename>"] . Notethatitdoesn’tenterthemodule
intoanynamespace–itonlyensuresithasbeeninitializedandisstoredin sys.modules .
Youcanthenaccessthemodule’sattributes(i.e. anynamedefinedinthemodule)asfollows:
attr =PyObject_GetAttrString(module, "<attrname> ");
Calling PyObject_SetAttrString() toassigntovariablesinthemodulealsoworks.
5.11HowdoIinterfacetoC++objectsfromPython?
Dependingonyourrequirements,therearemanyapproaches. Todothismanually,beginbyreadingthe“Extending
andEmbedding”document. RealizethatforthePythonrun-timesystem,thereisn’tawholelotofdifferencebetween
C and C++ – so the strategy of building a new Python type around a C structure (pointer) type will also work for
C++objects.
ForC++libraries,see Writing C is hard; are there any alternatives? .
5.12IaddedamoduleusingtheSetupfileandthemakefails;why?
Setupmustendinanewline,ifthereisnonewlinethere,thebuildprocessfails. (Fixingthisrequiressomeuglyshell
scripthackery,andthisbugissominorthatitdoesn’tseemworththeeffort.)
5.13HowdoIdebuganextension?
WhenusingGDBwithdynamicallyloadedextensions,youcan’tsetabreakpointinyourextensionuntilyourextension
isloaded.
Inyour .gdbinit file(orinteractively),addthecommand:
5.10. HowdoIaccessamodulewritteninPythonfromC? 63
PythonFrequentlyAskedQuestions,Release3.13.0
br _PyImport_LoadDynamicModule
Then,whenyourunGDB:
$gdb /local/bin/python
gdb) run myscript.py
gdb) continue # repeat until your extension is loaded
gdb) finish # so that your extension is loaded
gdb) br myfunction.c:50
gdb) continue
5.14I want to compile a Python module on my Linux system, but
somefilesaremissing. Why?
MostpackagedversionsofPythonomitsomefilesrequiredforcompilingPythonextensions.
ForRedHat,installthepython3-develRPMtogetthenecessaryfiles.
ForDebian,run apt-get install python3-dev .
5.15HowdoItell“incompleteinput”from“invalidinput”?
SometimesyouwanttoemulatethePythoninteractiveinterpreter’sbehavior,whereitgivesyouacontinuationprompt
when the input is incomplete (e.g. you typed the start of an “if” statement or you didn’t close your parentheses or
triplestringquotes),butitgivesyouasyntaxerrormessageimmediatelywhentheinputisinvalid.
In Python you can use the codeopmodule, which approximates the parser’s behavior sufficiently. IDLE uses this,
forexample.
The easiest way to do it in C is to call PyRun_InteractiveLoop() (perhaps in a separate thread) and let the
Pythoninterpreterhandletheinputforyou. Youcanalsosetthe PyOS_ReadlineFunctionPointer() topoint
atyourcustominputfunction. See Modules/readline.c andParser/myreadline.c formorehints.
5.16How do I find undefined g++ symbols __builtin_new or
__pure_virtual?
To dynamically load g++ extension modules, you must recompile Python, relink it using g++ (change LINKCC in
thePythonModulesMakefile),andlinkyourextensionmoduleusingg++(e.g., g++ -shared -o mymodule.so
mymodule.o ).
5.17CanIcreateanobjectclasswithsomemethodsimplemented
inCandothersinPython(e.g. throughinheritance)?
Yes,youcaninheritfrombuilt-inclassessuchas int,list,dict,etc.
The Boost Python Library (BPL, https://www.boost.org/libs/python/doc/index.html ) provides a way of doing this
fromC++(i.e. youcaninheritfromanextensionclasswritteninC++usingtheBPL).
64 Chapter5. Extending/EmbeddingFAQ
CHAPTER
SIX
PYTHONONWINDOWSFAQ
6.1HowdoIrunaPythonprogramunderWindows?
Thisisnotnecessarilyastraightforwardquestion. IfyouarealreadyfamiliarwithrunningprogramsfromtheWin-
dowscommandlinetheneverythingwillseemobvious;otherwise,youmightneedalittlemoreguidance.
Unlessyouusesomesortofintegrateddevelopmentenvironment,youwillendup typingWindowscommandsinto
what is referred to as a “Command prompt window”. Usually you can create such a window from your search bar
bysearchingfor cmd. Youshouldbeabletorecognizewhenyouhavestartedsuchawindowbecauseyouwillseea
Windows“commandprompt”,whichusuallylookslikethis:
C:\>
Thelettermaybedifferent,andtheremightbeotherthingsafterit,soyoumightjustaseasilyseesomethinglike:
D:\YourName\Projects\Python>
dependingonhowyourcomputerhasbeensetupandwhatelseyouhaverecentlydonewithit. Onceyouhavestarted
suchawindow,youarewellonthewaytorunningPythonprograms.
YouneedtorealizethatyourPythonscriptshavetobeprocessedbyanotherprogramcalledthePython interpreter.
Theinterpreterreadsyourscript,compilesitintobytecodes,andthenexecutesthebytecodestorunyourprogram.
So,howdoyouarrangefortheinterpretertohandleyourPython?
First, you need to make sure that your command window recognises the word “py” as an instruction to start the
interpreter. Ifyouhaveopenedacommandwindow,youshouldtryenteringthecommand pyandhittingreturn:
C:\Users\YourName> py
Youshouldthenseesomethinglike:
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] ␣
,→on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
Youhavestartedtheinterpreterin“interactivemode”. ThatmeansyoucanenterPythonstatementsorexpressions
interactivelyandhavethemexecutedorevaluatedwhileyouwait. ThisisoneofPython’sstrongestfeatures. Check
itbyenteringafewexpressionsofyourchoiceandseeingtheresults:
>>> print ("Hello ")
Hello
>>> "Hello "*3
'HelloHelloHello'
Manypeopleuse theinteractivemodeas aconvenientyethighlyprogrammablecalculator. Whenyouwanttoend
yourinteractivePythonsession, callthe exit()functionorholdthe Ctrlkeydownwhileyouentera Z,thenhit
the“Enter”keytogetbacktoyourWindowscommandprompt.
65
PythonFrequentlyAskedQuestions,Release3.13.0
YoumayalsofindthatyouhaveaStart-menuentrysuchas Start ‣ Programs ‣ Python 3.x ‣ Python (command line)
thatresultsinyouseeingthe >>>promptinanewwindow. Ifso,thewindowwilldisappearafteryoucallthe exit()
functionorenterthe Ctrl-Zcharacter;Windowsisrunningasingle“python”commandinthewindow,andcloses
itwhenyouterminatetheinterpreter.
Nowthatweknowthe pycommandisrecognized,youcangiveyourPythonscripttoit. You’llhavetogiveeitheran
absoluteorarelativepathtothePythonscript. Let’ssayyourPythonscriptislocatedinyourdesktopandisnamed
hello.py ,andyourcommandpromptisnicelyopenedinyourhomedirectorysoyou’reseeingsomethingsimilar
to:
C:\Users\YourName>
Sonowyou’llaskthe pycommandtogiveyourscripttoPythonbytyping pyfollowedbyyourscriptpath:
C:\Users\YourName> py Desktop\hello.py
hello
6.2HowdoImakePythonscriptsexecutable?
OnWindows,thestandardPythoninstalleralreadyassociatesthe.pyextensionwithafiletype(Python.File)andgives
thatfiletypeanopencommandthatrunstheinterpreter( D:\Program Files\Python\python.exe "%1" %* ).
Thisisenoughtomakescriptsexecutablefromthecommandpromptas‘foo.py’. Ifyou’dratherbeabletoexecute
thescriptbysimpletyping‘foo’withnoextensionyouneedtoadd.pytothePATHEXTenvironmentvariable.
6.3WhydoesPythonsometimestakesolongtostart?
UsuallyPythonstartsveryquicklyonWindows,butoccasionallytherearebugreportsthatPythonsuddenlybegins
to take a long time to start up. This is made even more puzzling because Python will work fine on other Windows
systemswhichappeartobeconfiguredidentically.
Theproblemmaybecausedbyamisconfigurationofviruscheckingsoftwareontheproblemmachine. Somevirus
scannershavebeenknowntointroducestartupoverheadoftwoordersofmagnitudewhenthescannerisconfigured
tomonitorallreadsfromthefilesystem. Trycheckingtheconfigurationofvirusscanningsoftwareonyoursystems
toensurethattheyareindeedconfiguredidentically. McAfee,whenconfiguredtoscanallfilesystemreadactivity,
isaparticularoffender.
6.4HowdoImakeanexecutablefromaPythonscript?
SeeHowcanIcreateastand-alonebinaryfromaPythonscript? foralistoftoolsthatcanbeusedtomakeexecutables.
6.5Isa*.pydfilethesameasaDLL?
Yes, .pyd files are dll’s, but there are a few differences. If you have a DLL named foo.pyd, then it must have a
function PyInit_foo() . You can then write Python “import foo”, and Python will search for foo.pyd (as well as
foo.py,foo.pyc)andifitfindsit,willattempttocall PyInit_foo() toinitializeit. Youdonotlinkyour.exewith
foo.lib,asthatwouldcauseWindowstorequiretheDLLtobepresent.
Notethatthesearchpathforfoo.pydisPYTHONPATH,notthesameasthepaththatWindowsusestosearchfor
foo.dll. Also, foo.pydneednotbepresenttorunyourprogram, whereasifyoulinkedyourprogramwithadll, the
dllisrequired. Ofcourse,foo.pydisrequiredifyouwanttosay import foo . InaDLL,linkageisdeclaredinthe
sourcecodewith __declspec(dllexport) . Ina.pyd,linkageisdefinedinalistofavailablefunctions.
66 Chapter6. PythononWindowsFAQ
PythonFrequentlyAskedQuestions,Release3.13.0
6.6HowcanIembedPythonintoaWindowsapplication?
EmbeddingthePythoninterpreterinaWindowsappcanbesummarizedasfollows:
1.Donotbuild Python into your .exe file directly. On Windows, Python must be a DLL to handle importing
modulesthatarethemselvesDLL’s. (Thisisthefirstkeyundocumentedfact.) Instead,linkto python NN.dll;
itistypicallyinstalledin C:\Windows\System .NNisthePythonversion,anumbersuchas“33”forPython
3.3.
YoucanlinktoPythonintwodifferentways. Load-timelinkingmeanslinkingagainst python NN.lib,while
run-time linking means linking against python NN.dll. (General note: python NN.libis the so-called
“importlib”correspondingto python NN.dll. Itmerelydefinessymbolsforthelinker.)
Run-time linking greatly simplifies link options; everything happens at run time. Your code must load
python NN.dllusing the Windows LoadLibraryEx() routine. The code must also use access rou-
tines and data in python NN.dll(that is, Python’s C API’s) using pointers obtained by the Windows
GetProcAddress() routine. Macros can make using these pointers transparent to any C code that calls
routinesinPython’sCAPI.
2.IfyouuseSWIG,itiseasytocreateaPython“extensionmodule”thatwillmaketheapp’sdataandmethods
availabletoPython. SWIGwillhandlejustaboutallthegrungydetailsforyou. TheresultisCcodethatyou
linkintoyour.exefile(!) Youdo nothavetocreateaDLLfile,andthisalsosimplifieslinking.
3.SWIGwillcreateaninitfunction(aCfunction)whosenamedependsonthenameoftheextensionmodule.
For example, if the name of the module is leo, the init function will be called initleo(). If you use SWIG
shadowclasses,asyoushould,theinitfunctionwillbecalledinitleoc(). Thisinitializesamostlyhiddenhelper
classusedbytheshadowclass.
The reason you can link the C code in step 2 into your .exe file is that calling the initialization function is
equivalenttoimportingthemoduleintoPython! (Thisisthesecondkeyundocumentedfact.)
4.Inshort,youcanusethefollowingcodetoinitializethePythoninterpreterwithyourextensionmodule.
#include <Python.h>
...
Py_Initialize(); // Initialize Python.
initmyAppc(); // Initialize (import) the helper class.
PyRun_SimpleString( "import myApp "); // Import the shadow class.
5.There are two problems with Python’s C API which will become apparent if you use a compiler other than
MSVC,thecompilerusedtobuildpythonNN.dll.
Problem1: Theso-called“VeryHighLevel”functionsthattake FILE *argumentswillnotworkinamulti-
compiler environment because each compiler’s notion of a struct FILE will be different. From an imple-
mentationstandpointtheseareverylowlevelfunctions.
Problem2: SWIGgeneratesthefollowingcodewhengeneratingwrapperstovoidfunctions:
Py_INCREF(Py_None);
_resultobj =Py_None;
return _resultobj;
Alas,Py_Noneisamacrothatexpandstoareferencetoacomplexdatastructurecalled_Py_NoneStructinside
pythonNN.dll. Again,thiscodewillfailinamult-compilerenvironment. Replacesuchcodeby:
return Py_BuildValue( "");
ItmaybepossibletouseSWIG’s %typemap commandtomakethechangeautomatically,thoughIhavenot
beenabletogetthistowork(I’macompleteSWIGnewbie).
6.Using a Python shell script to put up a Python interpreter window from inside your Windows app is not a
good idea; the resulting window will be independent of your app’s windowing system. Rather, you (or the
wxPythonWindowclass)shouldcreatea“native”interpreterwindow. Itiseasytoconnectthatwindowtothe
6.6. HowcanIembedPythonintoaWindowsapplication? 67
PythonFrequentlyAskedQuestions,Release3.13.0
Pythoninterpreter. YoucanredirectPython’si/oto_any_objectthatsupportsreadandwrite,soallyouneed
isaPythonobject(definedinyourextensionmodule)thatcontainsread()andwrite()methods.
6.7How do I keep editors from inserting tabs into my Python
source?
TheFAQdoesnotrecommendusingtabs,andthePythonstyleguide, PEP 8,recommends4spacesfordistributed
Pythoncode;thisisalsotheEmacspython-modedefault.
Underanyeditor,mixingtabsandspacesisabadidea. MSVCisnodifferentinthisrespect,andiseasilyconfigured
tousespaces: Take Tools ‣ Options ‣ Tabs ,andforfiletype“Default”set“Tabsize”and“Indentsize”to4,andselect
the“Insertspaces”radiobutton.
Pythonraises IndentationError orTabError ifmixedtabsandspacesarecausingproblemsinleadingwhites-
pace. Youmayalsorunthe tabnanny moduletocheckadirectorytreeinbatchmode.
6.8HowdoIcheckforakeypresswithoutblocking?
Use the msvcrtmodule. This is a standard Windows-specific extension module. It defines a function kbhit()
whichcheckswhetherakeyboardhitispresent,and getch()whichgetsonecharacterwithoutechoingit.
6.9HowdoIsolvethemissingapi-ms-win-crt-runtime-l1-1-0.dller-
ror?
ThiscanoccuronPython3.5andlaterwhenusingWindows8.1orearlierwithoutallupdateshavingbeeninstalled.
First ensure your operating system is supported and is up to date, and if that does not resolve the issue, visit the
Microsoftsupportpage forguidanceonmanuallyinstallingtheCRuntimeupdate.
68 Chapter6. PythononWindowsFAQ
CHAPTER
SEVEN
GRAPHICUSERINTERFACEFAQ
7.1GeneralGUIQuestions
7.2WhatGUItoolkitsexistforPython?
StandardbuildsofPythonincludeanobject-orientedinterfacetotheTcl/Tkwidgetset,calledtkinter. Thisisprobably
theeasiesttoinstall(sinceitcomesincludedwithmost binarydistributions ofPython)anduse. Formoreinfoabout
Tk, including pointers to the source, see the Tcl/Tk home page . Tcl/Tk is fully portable to the macOS, Windows,
andUnixplatforms.
Depending on what platform(s) you are aiming at, there are also several alternatives. A list of cross-platform and
platform-specific GUIframeworkscanbefoundonthepythonwiki.
7.3Tkinterquestions
7.3.1HowdoIfreezeTkinterapplications?
Freezeisatooltocreatestand-aloneapplications. WhenfreezingTkinterapplications, theapplicationswillnotbe
trulystand-alone,astheapplicationwillstillneedtheTclandTklibraries.
One solution is to ship the application with the Tcl and Tk libraries, and point to them at run-time using the
TCL_LIBRARY andTK_LIBRARY environmentvariables.
Variousthird-partyfreezelibrariessuchaspy2exeandcx_FreezehavehandlingforTkinterapplicationsbuilt-in.
7.3.2CanIhaveTkeventshandledwhilewaitingforI/O?
OnplatformsotherthanWindows,yes,andyoudon’tevenneedthreads! Butyou’llhavetorestructureyourI/Ocode
abit. TkhastheequivalentofXt’s XtAddInput() call,whichallowsyoutoregisteracallbackfunctionwhichwill
becalledfromtheTkmainloopwhenI/Oispossibleonafiledescriptor. Seetkinter-file-handlers.
7.3.3Ican’tgetkeybindingstoworkinTkinter: why?
An often-heard complaint is that event handlers bound to events with the bind()method don’t get handled even
whentheappropriatekeyispressed.
Themost common cause is thatthe widget to which the bindingapplies doesn’t have “keyboard focus”. Checkout
theTkdocumentationforthefocuscommand. Usuallyawidgetisgiventhekeyboardfocusbyclickinginit(butnot
forlabels;seethetakefocusoption).
69
PythonFrequentlyAskedQuestions,Release3.13.0
70 Chapter7. GraphicUserInterfaceFAQ
CHAPTER
EIGHT
“WHYISPYTHONINSTALLEDONMYCOMPUTER?”FAQ
8.1WhatisPython?
Python is a programming language. It’s used for many different applications. It’s used in some high schools and
collegesasanintroductoryprogramminglanguagebecausePythoniseasytolearn,butit’salsousedbyprofessional
softwaredevelopersatplacessuchasGoogle,NASA,andLucasfilmLtd.
IfyouwishtolearnmoreaboutPython,startwiththe Beginner’sGuidetoPython .
8.2WhyisPythoninstalledonmymachine?
IfyoufindPythoninstalledonyoursystembutdon’trememberinstallingit,thereareseveralpossiblewaysitcould
havegottenthere.
•Perhapsanotheruseronthecomputerwantedtolearnprogrammingandinstalledit;you’llhavetofigureout
who’sbeenusingthemachineandmighthaveinstalledit.
•Athird-partyapplicationinstalledonthemachinemighthavebeenwritteninPythonandincludedaPython
installation. There are many such applications, from GUI programs to network servers and administrative
scripts.
•SomeWindowsmachinesalsohavePythoninstalled. Atthiswritingwe’reawareofcomputersfromHewlett-
PackardandCompaqthatincludePython. ApparentlysomeofHP/Compaq’sadministrativetoolsarewritten
inPython.
•ManyUnix-compatibleoperatingsystems,suchasmacOSandsomeLinuxdistributions,havePythoninstalled
bydefault;it’sincludedinthebaseinstallation.
8.3CanIdeletePython?
ThatdependsonwherePythoncamefrom.
Ifsomeoneinstalleditdeliberately,youcanremoveitwithouthurtinganything. OnWindows,usetheAdd/Remove
ProgramsiconintheControlPanel.
IfPythonwasinstalledbyathird-partyapplication,youcanalsoremoveit,butthatapplicationwillnolongerwork.
Youshouldusethatapplication’suninstallerratherthanremovingPythondirectly.
IfPythoncamewithyouroperatingsystem,removingitisnotrecommended. Ifyouremoveit,whatevertoolswere
written in Python will no longer run, and some of them might be important to you. Reinstalling the whole system
wouldthenberequiredtofixthingsagain.
71
PythonFrequentlyAskedQuestions,Release3.13.0
72 Chapter8. “WhyisPythonInstalledonmyComputer?” FAQ
APPENDIX
A
GLOSSARY
>>>
The default Python prompt of the interactive shell. Often seen for code examples which can be executed
interactivelyintheinterpreter.
...
Canreferto:
•The default Python prompt of the interactive shell when entering the code for an indented code block,
when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or
triplequotes),orafterspecifyingadecorator.
•TheEllipsis built-inconstant.
abstractbase class
Abstractbaseclassescomplement duck-typing byprovidingawaytodefineinterfaceswhenothertechniques
likehasattr() wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual
subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and
issubclass() ;seethe abcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-
tures (in the collections.abc module), numbers (in the numbersmodule), streams (in the iomodule),
import finders and loaders (in the importlib.abc module). You can create your own ABCs with the abc
module.
annotation
Alabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention
asatype hint.
Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-
tributes, and functions are stored in the __annotations__ special attribute of modules, classes, and func-
tions,respectively.
Seevariable annotation ,function annotation ,PEP484andPEP526,whichdescribethisfunctionality. Also
seeannotations-howtoforbestpracticesonworkingwithannotations.
argument
Avaluepassedtoa function(ormethod)whencallingthefunction. Therearetwokindsofargument:
•keyword argument : anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa
valueinadictionaryprecededby **. Forexample, 3and5arebothkeywordargumentsinthefollowing
callsto complex() :
complex (real =3, imag =5)
complex (**{'real ':3,'imag ':5})
•positionalargument : anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe
beginningofanargumentlistand/orbepassedaselementsofan iterableprecededby *. Forexample, 3
and5arebothpositionalargumentsinthefollowingcalls:
complex (3,5)
complex (*(3,5))
73
PythonFrequentlyAskedQuestions,Release3.13.0
Arguments are assigned to the named local variables in a function body. See the calls section for the rules
governingthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument; theevaluated
valueisassignedtothelocalvariable.
Seealsothe parameterglossaryentry,theFAQquestionon the difference between arguments and parameters ,
andPEP 362.
asynchronouscontextmanager
Anobjectwhichcontrolstheenvironmentseeninan async with statementbydefining __aenter__() and
__aexit__() methods. Introducedby PEP492.
asynchronousgenerator
A function which returns an asynchronous generator iterator . It looks like a coroutine function defined with
async def except that it contains yieldexpressions for producing a series of values usable in an async
forloop.
Usually refers to an asynchronous generator function, but may refer to an asynchronous generator iterator in
somecontexts. Incaseswheretheintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
Anasynchronousgeneratorfunctionmaycontain awaitexpressionsaswellas async for ,and async with
statements.
asynchronousgeneratoriterator
Anobjectcreatedbya asynchronous generator function.
Thisisan asynchronousiterator whichwhencalledusingthe __anext__() methodreturnsanawaitableobject
whichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe asynchronous generator iterator effectivelyresumeswithanother
awaitablereturnedby __anext__() ,itpicksupwhereitleftoff. See PEP492andPEP 525.
asynchronousiterable
An object, that can be used in an async for statement. Must return an asynchronous iterator from its
__aiter__() method. Introducedby PEP 492.
asynchronousiterator
An object that implements the __aiter__() and__anext__() methods. __anext__() must return an
awaitableobject. async for resolves the awaitables returned by an asynchronous iterator’s __anext__()
methoduntilitraisesa StopAsyncIteration exception. Introducedby PEP492.
attribute
Avalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,
ifanobject ohasanattribute aitwouldbereferencedas o.a.
Itispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample
using setattr() , if the object allowsit. Such an attributewill not be accessibleusing a dotted expression,
andwouldinsteadneedtoberetrievedwith getattr() .
awaitable
An object that can be used in an awaitexpression. Can be a coroutineor an object with an __await__()
method. Seealso PEP 492.
BDFL
BenevolentDictatorForLife,a.k.a. GuidovanRossum ,Python’screator.
binary file
Afile objectabletoreadandwrite bytes-like objects . Examplesofbinaryfilesarefilesopenedinbinarymode
('rb','wb'or'rb+'),sys.stdin.buffer ,sys.stdout.buffer , andinstancesof io.BytesIO and
gzip.GzipFile .
Seealso text fileforafileobjectabletoreadandwrite strobjects.
borrowedreference
InPython’sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot
ownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection
canremovethelast strong reference totheobjectandsodestroyit.
74 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
Calling Py_INCREF() ontheborrowed reference isrecommendedtoconvertittoa strong reference in-place,
exceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. The Py_NewRef()
functioncanbeusedtocreateanew strong reference .
bytes-likeobject
An object that supports the bufferobjects and can export a C- contiguous buffer. This includes all bytes,
bytearray ,and array.array objects,aswellasmanycommon memoryview objects. Bytes-likeobjects
can be used for variousoperations that work withbinary data; these include compression, saving to a binary
file,andsendingoverasocket.
Someoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas“read-write
bytes-likeobjects”. Examplemutablebufferobjectsinclude bytearray anda memoryview ofabytearray .
Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”);
examplesoftheseinclude bytesanda memoryview ofabytesobject.
bytecode
Pythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython
interpreter. Thebytecodeisalsocachedin .pycfilessothatexecutingthesamefileisfasterthesecondtime
(recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a
virtual machine thatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare
notexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.
Alistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.
callable
Acallableisanobjectthatcanbecalled,possiblywithasetofarguments(see argument),withthefollowing
syntax:
callable (argument1, argument2, argumentN)
Afunction,andbyextensiona method,isacallable. Aninstanceofaclassthatimplementsthe __call__()
methodisalsoacallable.
callback
Asubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.
class
A template for creating user-defined objects. Class definitions normally contain method definitions which
operateoninstancesoftheclass.
classvariable
Avariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).
closurevariable
Afree variable referencedfroma nested scope thatisdefinedinanouterscoperatherthanbeingresolvedat
runtime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to
allowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.
Forexample,inthe innerfunctioninthefollowingcode,both xandprintarefree variables ,butonly xis
aclosure variable :
def outer ():
x=0
def inner ():
nonlocal x
x+=1
print (x)
return inner
Duetothe codeobject.co_freevars attribute(which,despiteitsname,onlyincludesthenamesofclosure
variablesratherthanlistingallreferencedfreevariables),themoregeneral freevariable termissometimesused
evenwhentheintendedmeaningistoreferspecificallytoclosurevariables.
75
PythonFrequentlyAskedQuestions,Release3.13.0
complexnumber
Anextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand
animaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof -1),often
written iin mathematics or jin engineering. Python has built-in support for complex numbers, which are
writtenwiththislatternotation;theimaginarypartiswrittenwitha jsuffix,e.g., 3+1j. Togetaccesstocom-
plexequivalentsofthe mathmodule,use cmath. Useofcomplexnumbersisafairlyadvancedmathematical
feature. Ifyou’renotawareofaneedforthem,it’salmostcertainyoucansafelyignorethem.
context
Thistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:
•Thetemporarystateorenvironmentestablishedbya context manager viaa withstatement.
•The collection of keyvalue bindings associated with a particular contextvars.Context object and
accessedvia ContextVar objects. Alsosee context variable .
•Acontextvars.Context object. Alsosee current context .
contextmanagementprotocol
The__enter__() and__exit__() methodscalledbythe withstatement. See PEP343.
contextmanager
An object which implements the context management protocol and controls the environment seen in a with
statement. See PEP 343.
contextvariable
A variable whose value depends on which context is the current context . Values are accessed via
contextvars.ContextVar objects. Context variables are primarily used to isolate state between concur-
rentasynchronoustasks.
contiguous
Abufferisconsideredcontiguousexactlyifitiseither C-contiguous orFortran contiguous . Zero-dimensional
buffersareCandFortrancontiguous. Inone-dimensionalarrays, theitemsmustbelaidoutinmemorynext
toeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the
lastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous
arrays,thefirstindexvariesthefastest.
coroutine
Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at
anotherpoint. Coroutinescanbeentered, exited, andresumedatmanydifferentpoints. Theycanbeimple-
mentedwiththe async def statement. Seealso PEP492.
coroutinefunction
Afunctionwhichreturnsa coroutineobject. Acoroutinefunctionmaybedefinedwiththe async def state-
ment, and may contain await,async for , and async with keywords. These were introduced by PEP
492.
CPython
ThecanonicalimplementationofthePythonprogramminglanguage,asdistributedon python.org. Theterm
“CPython”isusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.
currentcontext
Thecontext(contextvars.Context object) that is currently used by ContextVar objects to access (get
or set) the values of context variables . Each thread has its own current context. Frameworks for executing
asynchronous tasks (see asyncio) associate each task with a context which becomes the current context
wheneverthetaskstartsorresumesexecution.
decorator
Afunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe @wrapper syntax.
Commonexamplesfordecoratorsare classmethod() andstaticmethod() .
Thedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-
alent:
76 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
def f(arg):
...
f=staticmethod (f)
@staticmethod
def f(arg):
...
The same concept exists for classes, but is less commonly used there. See the documentation for function
definitionsandclassdefinitionsformoreaboutdecorators.
descriptor
Anyobjectwhichdefinesthemethods __get__() ,__set__() ,or__delete__() . Whenaclassattribute
is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.bto get,
set or delete an attribute looks up the object named bin the class dictionary for a, but ifbis a descriptor,
the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of
Pythonbecausetheyarethebasisformanyfeaturesincludingfunctions, methods, properties, classmethods,
staticmethods,andreferencetosuperclasses.
Formoreinformationaboutdescriptors’methods,seedescriptorsortheDescriptorHowToGuide.
dictionary
Anassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith __hash__()
and__eq__() methods. CalledahashinPerl.
dictionarycomprehension
A compact way to process all or part of the elements in an iterable and return a dictionary with the re-
sults. results = {n: n ** 2 for n in range(10)} generatesadictionarycontainingkey nmapped
tovalue n ** 2. Seecomprehensions.
dictionaryview
Theobjectsreturnedfrom dict.keys() ,dict.values() ,and dict.items() arecalleddictionaryviews.
They providea dynamicview onthe dictionary’sentries, whichmeans thatwhen thedictionary changes, the
view reflects these changes. To force the dictionary view to become a full list use list(dictview) . See
dict-views.
docstring
A string literal which appears as the first expression in a class, function or module. While ignored when the
suite is executed, it is recognized by the compiler and put into the __doc__attribute of the enclosing class,
function or module. Since it is available via introspection, it is the canonical place for documentation of the
object.
duck-typing
Aprogrammingstylewhichdoesnotlookatanobject’stypetodetermineifithastherightinterface;instead,
the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be
a duck.”) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility
by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (Note,
however, that duck-typing can be complemented with abstract base classes .) Instead, it typically employs
hasattr() testsorEAFPprogramming.
EAFP
Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of
valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is
characterizedbythepresenceofmany tryandexceptstatements. Thetechniquecontrastswiththe LBYL
stylecommontomanyotherlanguagessuchasC.
expression
Apieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof
expressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In
contrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealso statementswhich
cannotbeusedasexpressions,suchas while. Assignmentsarealsostatements,notexpressions.
77
PythonFrequentlyAskedQuestions,Release3.13.0
extensionmodule
AmodulewritteninCorC++,usingPython’sCAPItointeractwiththecoreandwithusercode.
f-string
String literals prefixed with 'f'or'F'are commonly called “f-strings” which is short for formatted string
literals. Seealso PEP 498.
fileobject
Anobjectexposingafile-orientedAPI(withmethodssuchas read()orwrite())toanunderlyingresource.
Dependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof
storageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).
Fileobjectsarealsocalled file-like objects orstreams.
There are actually three categories of file objects: raw binary files , buffered binary files andtext files. Their
interfaces are defined in the iomodule. The canonical way to create a file object is by using the open()
function.
file-likeobject
Asynonymfor file object.
filesystemencodinganderrorhandler
EncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto
theoperatingsystem.
Thefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding
failstoprovidethisguarantee,APIfunctionscanraise UnicodeError .
Thesys.getfilesystemencoding() andsys.getfilesystemencodeerrors() functions can be
usedtogetthefilesystemencodinganderrorhandler.
Thefilesystem encoding and error handler areconfiguredatPythonstartupbythe PyConfig_Read() func-
tion: see filesystem_encoding andfilesystem_errors membersof PyConfig .
Seealsothe locale encoding .
finder
Anobjectthattriestofindthe loaderforamodulethatisbeingimported.
Therearetwotypesoffinder: meta path finders forusewith sys.meta_path ,andpath entry finders foruse
withsys.path_hooks .
Seefinders-and-loadersand importlib formuchmoredetail.
floordivision
Mathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris //. Forexample,the
expression 11 // 4evaluates to 2in contrast to the 2.75returned by float true division. Note that (-11)
// 4is-3becausethatis -2.75rounded downward. SeePEP238.
free threading
AthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.
Thisisincontrasttothe global interpreter lock whichallowsonlyonethreadtoexecutePythonbytecodeata
time. See PEP703.
free variable
Formally, as defined in the language execution model, a free variable is any variable used in a namespace
whichisnotalocalvariableinthatnamespace. See closure variable foranexample. Pragmatically,duetothe
nameofthe codeobject.co_freevars attribute,thetermisalsosometimesusedasasynonymfor closure
variable.
function
Aseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormore argumentswhich
maybeusedintheexecutionofthebody. Seealso parameter,method,andthefunctionsection.
function annotation
Anannotation ofafunctionparameterorreturnvalue.
78 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
Function annotations are usually used for type hints: for example, this function is expected to take two int
argumentsandisalsoexpectedtohavean intreturnvalue:
def sum_two_numbers (a: int, b: int)->int:
return a+b
Functionannotationsyntaxisexplainedinsectionfunction.
Seevariable annotation andPEP 484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest
practicesonworkingwithannotations.
__future__
A future statement, from __future__ import <feature> , directs the compiler to compile the current
moduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The __future__
moduledocumentsthepossiblevaluesof feature. Byimportingthismoduleandevaluatingitsvariables,you
canseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:
>>> import __future__
>>> __future__ .division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
garbagecollection
Theprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference
countingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector
canbecontrolledusingthe gcmodule.
generator
A function which returns a generator iterator . It looks like a normal function except that it contains yield
expressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe
next()function.
Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where
theintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
generatoriterator
Anobjectcreatedbya generatorfunction.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe generatoriterator resumes,itpicksupwhereitleftoff(incontrast
tofunctionswhichstartfreshoneveryinvocation).
generatorexpression
Anexpression that returns an iterator. It looks like a normal expression followed by a forclause defining a
loop variable, range, and an optional ifclause. The combined expression generates values for an enclosing
function:
>>> sum(i*ifor iinrange (10)) # sum of squares 0, 1, 4, ... 81
285
genericfunction
Afunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-
plementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.
Seealsothe single dispatch glossaryentry,the functools.singledispatch() decorator,and PEP 443.
generictype
Atypethat can be parameterized; typically a container class such as listordict. Used for type hintsand
annotations .
Formoredetails,seegenericaliastypes, PEP483,PEP484,PEP 585,andthe typingmodule.
GIL
Seeglobal interpreter lock .
79
PythonFrequentlyAskedQuestions,Release3.13.0
globalinterpreterlock
The mechanism used by the CPythoninterpreter to assure that only one thread executes Python bytecodeat
a time. This simplifies the CPython implementation by making the object model (including critical built-in
types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier
fortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor
machines.
However,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen
doingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen
doingI/O.
As of Python 3.13, the GIL can be disabled using the --disable-gil build configuration. After building
Pythonwiththisoption,codemustberunwith -X gil=0 oraftersettingthe PYTHON_GIL=0 environment
variable. This feature enables improved performance for multi-threaded applications and makes it easier to
usemulti-coreCPUsefficiently. Formoredetails,see PEP 703.
hash-basedpyc
Abytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto
determineitsvalidity. Seepyc-invalidation.
hashable
Anobjectis hashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa __hash__()
method), and can be compared to other objects (it needs an __eq__() method). Hashable objects which
compareequalmusthavethesamehashvalue.
Hashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe
hashvalueinternally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)
arenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.
Objectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except
withthemselves),andtheirhashvalueisderivedfromtheir id().
IDLE
AnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-
ronmentwhichshipswiththestandarddistributionofPython.
immortal
Immortal objects areaCPythonimplementationdetailintroducedin PEP 683.
If an object is immortal, its reference count is never modified, and therefore it is never deallocated while the
interpreterisrunning. Forexample, TrueandNoneareimmortalinCPython.
immutable
An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot
bealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein
placeswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.
importpath
Alistoflocations(or path entries )thataresearchedbythe path based finder formodulestoimport. During
import, this list of locations usually comes from sys.path , but for subpackages it may also come from the
parentpackage’s __path__ attribute.
importing
TheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.
importer
Anobjectthatbothfindsandloadsamodule;botha finderandloaderobject.
interactive
Pythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter
prompt, immediately execute them and see their results. Just launch pythonwith no arguments (possibly
by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect
modulesandpackages(remember help(x)). Formoreoninteractivemode,seetut-interac.
80 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
interpreted
Pythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause
ofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly
creating an executable which is then run. Interpreted languages typically have a shorter development/debug
cyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealso interactive.
interpretershutdown
Whenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated
resources, such as modules and various critical internal structures. It also makes several calls to the garbage
collector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-
cutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction
anymore(commonexamplesarelibrarymodulesorthewarningsmachinery).
The main reason for interpreter shutdown is that the __main__ module or the script being run has finished
executing.
iterable
An object capable of returning its members one at a time. Examples of iterables include all sequence types
(such as list,str, and tuple) and some non-sequence types like dict,file objects, and objects of any
classesyoudefinewithan __iter__() methodorwitha __getitem__() methodthatimplements sequence
semantics.
Iterables can be used in a forloop and in many other places where a sequence is needed ( zip(),map(),
…). Whenaniterableobjectispassed as anargumentto thebuilt-infunction iter(), itreturnsan iterator
fortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot
necessarytocall iter()ordealwithiteratorobjectsyourself. The forstatementdoesthatautomaticallyfor
you,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealso iterator,
sequence,andgenerator.
iterator
An object representing a stream of data. Repeated calls to the iterator’s __next__() method (or passing
ittothebuilt-infunction next())returnsuccessiveitemsinthestream. Whennomoredataareavailablea
StopIteration exceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls
toits __next__() methodjustraise StopIteration again. Iteratorsarerequiredtohavean __iter__()
methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces
whereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A
containerobject(suchasa list)producesafreshnewiteratoreachtimeyoupassittothe iter()function
oruseitina forloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused
inthepreviousiterationpass,makingitappearlikeanemptycontainer.
Moreinformationcanbefoundintypeiter.
CPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine
__iter__() . Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof
iteratoroperations.
keyfunction
Akeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,
locale.strxfrm() isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.
A number of tools in Python accept key functions to control how elements are ordered or grouped. They
include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq.
nlargest() ,and itertools.groupby() .
There are several ways to create a key function. For example. the str.lower() method can serve as a
key function for case insensitive sorts. Alternatively, a key function can be built from a lambdaexpression
suchas lambda r: (r[0], r[2]) . Also, operator.attrgetter() ,operator.itemgetter() ,and
operator.methodcaller() are three key function constructors. See the Sorting HOW TO for examples
ofhowtocreateandusekeyfunctions.
keywordargument
Seeargument.
81
PythonFrequentlyAskedQuestions,Release3.13.0
lambda
Ananonymousinlinefunctionconsistingofasingle expressionwhichisevaluatedwhenthefunctioniscalled.
Thesyntaxtocreatealambdafunctionis lambda [parameters]: expression
LBYL
Lookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This
stylecontrastswiththe EAFPapproachandischaracterizedbythepresenceofmany ifstatements.
In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the
looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can
failifanotherthreadremoves keyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved
withlocksorbyusingtheEAFPapproach.
list
Abuilt-inPython sequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist
sinceaccesstoelementsis O(1).
listcomprehension
Acompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result
= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generatesalistofstringscon-
tainingevenhexnumbers(0x..) intherangefrom0to255. The ifclauseisoptional. Ifomitted,allelements
inrange(256) areprocessed.
loader
Anobjectthatloadsamodule. Itmustdefineamethodnamed load_module() . Aloaderistypicallyreturned
byafinder. Seealso:
•finders-and-loaders
•importlib.abc.Loader
•PEP 302
localeencoding
On Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.
LC_CTYPE, new_locale) .
OnWindows,itistheANSIcodepage(ex: "cp1252" ).
OnAndroidandVxWorks,Pythonuses "utf-8"asthelocaleencoding.
locale.getencoding() canbeusedtogetthelocaleencoding.
Seealsothe filesystem encoding and error handler .
magicmethod
Aninformalsynonymfor special method .
mapping
A container object that supports arbitrary key lookups and implements the methods specified in the
collections.abc.Mapping orcollections.abc.MutableMapping abstract base classes. Exam-
ples include dict,collections.defaultdict ,collections.OrderedDict andcollections.
Counter.
metapathfinder
Afinderreturnedbyasearchof sys.meta_path . Metapathfindersarerelatedto, butdifferentfrom path
entry finders .
Seeimportlib.abc.MetaPathFinder forthemethodsthatmetapathfindersimplement.
metaclass
The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The
metaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-
gramming languages provide a default implementation. What makes Python special is that it is possible to
createcustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide
powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking
objectcreation,implementingsingletons,andmanyothertasks.
82 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
Moreinformationcanbefoundinmetaclasses.
method
Afunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod
willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self). Seefunctionandnested scope .
methodresolutionorder
Method Resolution Order is the order in which base classes are searched for a member during lookup. See
python_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.
module
AnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary
Pythonobjects. ModulesareloadedintoPythonbytheprocessof importing.
Seealso package.
modulespec
Anamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceof importlib.
machinery.ModuleSpec .
Seealsomodule-specs.
MRO
Seemethod resolution order .
mutable
Mutableobjectscanchangetheirvaluebutkeeptheir id(). Seealso immutable.
namedtuple
Theterm“namedtuple”appliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare
alsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.
Several built-in types are named tuples, including the values returned by time.localtime() andos.
stat(). Anotherexampleis sys.float_info :
>>> sys.float_info[ 1] # indexed access
1024
>>> sys.float_info .max_exp # named field access
1024
>>> isinstance (sys .float_info, tuple ) # kind of tuple
True
Some named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be
created from a regular class definition that inherits from tupleand that defines named fields. Such a class
canbewrittenbyhand,oritcanbecreatedbyinheriting typing.NamedTuple ,orwiththefactoryfunction
collections.namedtuple() . The latter techniques also add some extra methods that may not be found
inhand-writtenorbuilt-innamedtuples.
namespace
The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,
global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support
modularitybypreventingnamingconflicts. Forinstance,thefunctions builtins.open andos.open() are
distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear
which module implements a function. For instance, writing random.seed() oritertools.islice()
makesitclearthatthosefunctionsareimplementedbythe randomanditertools modules,respectively.
namespace package
APEP 420 packagewhich serves only as a container for subpackages. Namespace packages may have no
physical representation, and specifically are not like a regular package because they have no __init__.py
file.
Seealso module.
nestedscope
The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another
83
PythonFrequentlyAskedQuestions,Release3.13.0
functioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference
andnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables
readandwritetotheglobalnamespace. The nonlocal allowswritingtoouterscopes.
new-styleclass
Old name for the flavor of classes now used for all class objects. In earlier Python versions, only
new-style classes could use Python’s newer, versatile features like __slots__ , descriptors, properties,
__getattribute__() ,classmethods,andstaticmethods.
object
Anydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany
new-style class .
optimizedscope
A scope where target local variable names are reliably known to the compiler when the code is compiled,
allowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,
coroutines, comprehensions, and generator expressions are optimized in this fashion. Note: most interpreter
optimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames
arerestrictedtooptimizedscopes.
package
A Python modulewhich can contain submodules or recursively, subpackages. Technically, a package is a
Pythonmodulewitha __path__ attribute.
Seealso regular package andnamespace package .
parameter
Anamedentityina function(ormethod)definitionthatspecifiesan argument(orinsomecases,arguments)
thatthefunctioncanaccept. Therearefivekindsofparameter:
•positional-or-keyword : specifiesanargumentthatcanbepassedeither positionally orasakeyword argu-
ment. Thisisthedefaultkindofparameter,forexample fooandbarinthefollowing:
def func (foo, bar =None ):...
•positional-only : specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters
canbedefinedbyincludinga /characterintheparameterlistofthefunctiondefinitionafterthem,for
example posonly1andposonly2inthefollowing:
def func (posonly1, posonly2, /, positional_or_keyword): ...
•keyword-only : specifies an argument that can be supplied only by keyword. Keyword-only parameters
canbedefinedbyincludingasinglevar-positionalparameterorbare *intheparameterlistofthefunction
definitionbeforethem,forexample kw_only1andkw_only2inthefollowing:
def func (arg, *, kw_only1, kw_only2): ...
•var-positional : specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition
toanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby
prependingtheparameternamewith *,forexample argsinthefollowing:
def func (*args, **kwargs): ...
•var-keyword : specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-
wordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending
theparameternamewith **,forexample kwargsintheexampleabove.
Parameters can specify both optional and required arguments, as well as default values for some optional
arguments.
Seealsothe argumentglossaryentry,theFAQquestionon the difference between arguments and parameters ,
theinspect.Parameter class,thefunctionsection,and PEP362.
84 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
pathentry
Asinglelocationonthe import path whichthe path based finder consultstofindmodulesforimporting.
pathentryfinder
Afinderreturned by a callable on sys.path_hooks (i.e. apath entry hook ) which knows how to locate
modulesgivena path entry.
Seeimportlib.abc.PathEntryFinder forthemethodsthatpathentryfindersimplement.
pathentryhook
Acallableonthe sys.path_hooks listwhichreturnsa path entry finder ifitknowshowtofindmoduleson
aspecific path entry.
pathbased finder
Oneofthedefault meta path finders whichsearchesan import path formodules.
path-likeobject
An object representing a file system path. A path-like object is either a strorbytesobject representing
a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike
protocol can be converted to a strorbytesfile system path by calling the os.fspath() function; os.
fsdecode() andos.fsencode() can be used to guarantee a strorbytesresult instead, respectively.
Introducedby PEP 519.
PEP
PythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,
ordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical
specificationandarationaleforproposedfeatures.
PEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity
input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is
responsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.
SeePEP 1.
portion
A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as
definedin PEP 420.
positionalargument
Seeargument.
provisionalAPI
A provisional API is one which has been deliberately excluded from the standard library’s backwards com-
patibility guarantees. While major changes to such interfaces are not expected, as long as they are marked
provisional, backwards incompatible changes (up to and including removal of the interface) may occur if
deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if
seriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.
Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every
attemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.
Thisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign
errorsforextendedperiodsoftime. See PEP411formoredetails.
provisionalpackage
Seeprovisional API .
Python3000
NicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe
distantfuture.) Thisisalsoabbreviated“Py3k”.
Pythonic
AnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan
implementing code using concepts common to other languages. For example, a common idiom in Python is
to loop over all elementsof an iterable using a forstatement. Many other languages don’thave this type of
construct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:
85
PythonFrequentlyAskedQuestions,Release3.13.0
for iinrange (len(food)):
print (food[i])
Asopposedtothecleaner,Pythonicmethod:
for piece infood:
print (piece)
qualified name
Adottednameshowingthe“path”fromamodule’sglobalscopetoaclass,functionormethoddefinedinthat
module, as defined in PEP 3155 . For top-level functions and classes, the qualified name is the same as the
object’sname:
>>> class C:
... class D:
... def meth (self ):
... pass
...
>>> C.__qualname__
'C'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth .__qualname__
'C.D.meth'
Whenusedtorefertomodules,the fully qualified name meanstheentiredottedpathtothemodule,including
anyparentpackages,e.g. email.mime.text :
>>> import email .mime .text
>>> email .mime .text .__name__
'email.mime.text'
referencecount
Thenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.
Some objects are immortaland have reference counts that are never modified, and therefore the objects are
never deallocated. Reference counting is generally not visible to Python code, but it is a key element of the
CPythonimplementation. Programmers can call the sys.getrefcount() function to return the reference
countforaparticularobject.
regularpackage
Atraditional package,suchasadirectorycontainingan __init__.py file.
Seealso namespace package .
REPL
Anacronymforthe“read–eval–printloop”,anothernameforthe interactiveinterpretershell.
__slots__
Adeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating
instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for
rarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.
sequence
Aniterablewhich supports efficient element access using integer indices via the __getitem__() special
method and defines a __len__() method that returns the length of the sequence. Some built-in sequence
typesare list,str,tuple,and bytes. Notethat dictalsosupports __getitem__() and__len__() ,
but is considered a mapping rather than a sequence because the lookups use arbitrary hashablekeys rather
thanintegers.
Thecollections.abc.Sequence abstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust
__getitem__() and__len__() ,adding count(),index(),__contains__() ,and __reversed__() .
86 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
Types that implement this expanded interface can be registered explicitly using register() . For more
documentationonsequencemethodsgenerally,seeCommonSequenceOperations.
setcomprehension
Acompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results
= {c for c in 'abracadabra' if c not in 'abc'} generatesthesetofstrings {'r', 'd'} . See
comprehensions.
singledispatch
Aformof genericfunction dispatchwheretheimplementationischosenbasedonthetypeofasingleargument.
slice
Anobjectusuallycontainingaportionofa sequence. Asliceiscreatedusingthesubscriptnotation, []with
colons between numbers when several are given, such as in variable_name[1:3:5] . The bracket (sub-
script)notationuses sliceobjectsinternally.
softdeprecated
A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The
APIremainsdocumentedandtested,butwillnotbeenhancedfurther.
Softdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.
SeePEP387: SoftDeprecation .
specialmethod
AmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such
methods have names starting and ending with double underscores. Special methods are documented in spe-
cialnames.
statement
Astatementispartofasuite(a“block”ofcode). Astatementiseitheran expressionoroneofseveralconstructs
withakeyword,suchas if,whileorfor.
statictype checker
An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See also
type hintsandthe typingmodule.
strongreference
In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the
reference. Thestrongreferenceistakenbycalling Py_INCREF() whenthereferenceiscreatedandreleased
withPy_DECREF() whenthereferenceisdeleted.
ThePy_NewRef() functioncanbeusedtocreateastrongreferencetoanobject. Usually,the Py_DECREF()
functionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking
onereference.
Seealso borrowed reference .
textencoding
AstringinPythonisasequenceofUnicodecodepoints(inrange U+0000–U+10FFFF ).Tostoreortransfer
astring,itneedstobeserializedasasequenceofbytes.
Serializingastringintoasequenceofbytesisknownas“encoding”,andrecreatingthestringfromthesequence
ofbytesisknownas“decoding”.
Thereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas“textencodings”.
textfile
Afile objectabletoreadandwrite strobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream
andhandlesthe text encoding automatically. Examplesoftextfilesarefilesopenedintextmode( 'r'or'w'),
sys.stdin ,sys.stdout ,andinstancesof io.StringIO .
Seealso binary file forafileobjectabletoreadandwrite bytes-like objects .
triple-quotedstring
Astringwhichisboundbythreeinstancesofeitheraquotationmark(”)oranapostrophe(‘). Whiletheydon’t
provide any functionality not available with single-quoted strings, they are useful for a number of reasons.
87
PythonFrequentlyAskedQuestions,Release3.13.0
Theyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines
withouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.
type
ThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject’stypeis
accessibleasits __class__ attributeorcanberetrievedwith type(obj) .
type alias
Asynonymforatype,createdbyassigningthetypetoanidentifier.
Typealiasesareusefulforsimplifying type hints. Forexample:
def remove_gray_shades (
colors: list [tuple [int,int,int]]) ->list [tuple [int,int,int]]:
pass
couldbemademorereadablelikethis:
Color =tuple [int,int,int]
def remove_gray_shades (colors: list [Color]) ->list [Color]:
pass
SeetypingandPEP484,whichdescribethisfunctionality.
type hint
Anannotation thatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn
value.
Type hints are optional and are not enforced by Python but they are useful to static type checkers . They can
alsoaidIDEswithcodecompletionandrefactoring.
Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using
typing.get_type_hints() .
SeetypingandPEP484,whichdescribethisfunctionality.
universalnewlines
Amannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix
end-of-lineconvention '\n',theWindowsconvention '\r\n',andtheoldMacintoshconvention '\r'. See
PEP278andPEP 3116,aswellas bytes.splitlines() foranadditionaluse.
variable annotation
Anannotation ofavariableoraclassattribute.
Whenannotatingavariableoraclassattribute,assignmentisoptional:
class C:
field: 'annotation '
Variableannotationsareusuallyusedfor type hints: forexamplethisvariableisexpectedtotake intvalues:
count: int =0
Variableannotationsyntaxisexplainedinsectionannassign.
Seefunctionannotation ,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto
forbestpracticesonworkingwithannotations.
virtualenvironment
AcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade
PythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon
thesamesystem.
Seealso venv.
88 AppendixA. Glossary
PythonFrequentlyAskedQuestions,Release3.13.0
virtualmachine
Acomputerdefinedentirelyinsoftware. Python’svirtualmachineexecutesthe bytecodeemittedbythebyte-
codecompiler.
ZenofPython
ListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.
Thelistingcanbefoundbytyping“ import this ”attheinteractiveprompt.
89
PythonFrequentlyAskedQuestions,Release3.13.0
90 AppendixA. Glossary
APPENDIX
B
ABOUTTHESEDOCUMENTS
Thesedocumentsaregeneratedfrom reStructuredText sourcesby Sphinx,adocumentprocessorspecificallywritten
forthePythondocumentation.
Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you
want to contribute, please take a look at the reporting-bugs page for information on how to do so. New volunteers
arealwayswelcome!
Manythanksgoto:
•FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandwriterofmuchofthecontent;
•theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;
•FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.
B.1ContributorstothePythonDocumentation
ManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.
SeeMisc/ACKS inthePythonsourcedistributionforapartiallistofcontributors.
ItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation
–ThankYou!
91
PythonFrequentlyAskedQuestions,Release3.13.0
92 AppendixB. Aboutthesedocuments
APPENDIX
C
HISTORYANDLICENSE
C.1Historyofthesoftware
Pythonwascreatedintheearly1990s byGuidovanRossumatStichtingMathematischCentrum(CWI, see https:
//www.cwi.nl/ )intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython’sprincipalauthor,
althoughitincludesmanycontributionsfromothers.
In1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,see https:
//www.cnri.reston.va.us/ )inReston,Virginiawherehereleasedseveralversionsofthesoftware.
In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen Python-
Labsteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations(nowZopeCorporation;
seehttps://www.zope.org/ ). In2001, thePythonSoftwareFoundation(PSF,see https://www.python.org/psf/ )was
formed,anon-profitorganizationcreatedspecificallytoownPython-relatedIntellectualProperty. ZopeCorporation
isasponsoringmemberofthePSF.
AllPythonreleasesareOpenSource(see https://opensource.org/ fortheOpenSourceDefinition). Historically,most,
butnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.
Release Derivedfrom Year Owner GPLcompatible?
0.9.0thru1.2 n/a 1991-1995 CWI yes
1.3thru1.5.2 1.2 1995-1999 CNRI yes
1.6 1.5.2 2000 CNRI no
2.0 1.6 2000 BeOpen.com no
1.6.1 1.6 2001 CNRI no
2.1 2.0+1.6.1 2001 PSF no
2.0.1 2.0+1.6.1 2001 PSF yes
2.1.1 2.1+2.0.1 2001 PSF yes
2.1.2 2.1.1 2002 PSF yes
2.1.3 2.1.2 2002 PSF yes
2.2andabove 2.1.1 2001-now PSF yes
®Note
GPL-compatibledoesn’tmeanthatwe’redistributingPythonundertheGPL.AllPythonlicenses,unliketheGPL,
let you distribute a modified version without making your changes open source. The GPL-compatible licenses
makeitpossibletocombinePythonwithothersoftwarethatisreleasedundertheGPL;theothersdon’t.
ThankstothemanyoutsidevolunteerswhohaveworkedunderGuido’sdirectiontomakethesereleasespossible.
93
PythonFrequentlyAskedQuestions,Release3.13.0
C.2TermsandconditionsforaccessingorotherwiseusingPython
Pythonsoftwareanddocumentationarelicensedunderthe PSF License Agreement .
StartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF
LicenseAgreementandthe Zero-Clause BSD license .
Some software incorporated into Python is under different licenses. The licenses are listed with code falling under
thatlicense. See Licenses and Acknowledgements for Incorporated Software foranincompletelistoftheselicenses.
C.2.1PSFLICENSEAGREEMENTFORPYTHON3.13.0
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
the Individual or Organization ("Licensee") accessing and otherwise using Python
3.13.0 software in source or binary form and its associated documentation.
2. Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 3.13.0 alone or in any derivative
version, provided, however, that PSF's License Agreement and PSF's notice of
copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
Reserved" are retained in Python 3.13.0 alone or in any derivative version
prepared by Licensee.
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 3.13.0 or any part thereof, and wants to make the
derivative work available to others as provided herein, then Licensee hereby
agrees to include in any such work a brief summary of the changes made to Python
3.13.0.
4. PSF is making Python 3.13.0 available to Licensee on an "AS IS" basis.
PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF PYTHON 3.13.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.13.0
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.13.0, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. Nothing in this License Agreement shall be deemed to create any relationship
of agency, partnership, or joint venture between PSF and Licensee. This License
Agreement does not grant permission to use PSF trademarks or trade name in a
trademark sense to endorse or promote products or services of Licensee, or any
third party.
8. By copying, installing or otherwise using Python 3.13.0, Licensee agrees
to be bound by the terms and conditions of this License Agreement.
94 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
C.2.2BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0
BEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
("Licensee") accessing and otherwise using this software in source or binary
form and its associated documentation ("the Software").
2. Subject to the terms and conditions of this BeOpen Python License Agreement,
BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
to reproduce, analyze, test, perform and/or display publicly, prepare derivative
works, distribute, and otherwise use the Software alone or in any derivative
version, provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee.
3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
ADVISED OF THE POSSIBILITY THEREOF.
5. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
6. This License Agreement shall be governed by and interpreted in all respects
by the law of the State of California, excluding conflict of law provisions.
Nothing in this License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between BeOpen and Licensee. This License
Agreement does not grant permission to use BeOpen trademarks or trade names in a
trademark sense to endorse or promote products or services of Licensee, or any
third party. As an exception, the "BeOpen Python" logos available at
http://www.pythonlabs.com/logos.html may be used according to the permissions
granted on that web page.
7. By copying, installing or otherwise using the software, Licensee agrees to be
bound by the terms and conditions of this License Agreement.
C.2.3CNRILICENSEAGREEMENTFORPYTHON1.6.1
1. This LICENSE AGREEMENT is between the Corporation for National Research
Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
("CNRI"), and the Individual or Organization ("Licensee") accessing and
otherwise using Python 1.6.1 software in source or binary form and its
associated documentation.
2. Subject to the terms and conditions of this License Agreement, CNRI hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
(continuesonnextpage)
C.2. TermsandconditionsforaccessingorotherwiseusingPython 95
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
prepared by Licensee. Alternately, in lieu of CNRI's License Agreement,
Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
is made available subject to the terms and conditions in CNRI's License
Agreement. This Agreement together with Python 1.6.1 may be located on the
internet using the following unique, persistent identifier (known as a handle):
1895.22/1013. This Agreement may also be obtained from a proxy server on the
internet using the following URL: http://hdl.handle.net/1895.22/1013."
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
work available to others as provided herein, then Licensee hereby agrees to
include in any such work a brief summary of the changes made to Python 1.6.1.
4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis. CNRI
MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. This License Agreement shall be governed by the federal intellectual property
law of the United States, including without limitation the federal copyright
law, and, to the extent such U.S. federal law does not apply, by the law of the
Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
Notwithstanding the foregoing, with regard to derivative works based on Python
1.6.1 that incorporate non-separable material that was previously distributed
under the GNU General Public License (GPL), the law of the Commonwealth of
Virginia shall govern this License Agreement only as to issues arising under or
with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in
this License Agreement shall be deemed to create any relationship of agency,
partnership, or joint venture between CNRI and Licensee. This License Agreement
does not grant permission to use CNRI trademarks or trade name in a trademark
sense to endorse or promote products or services of Licensee, or any third
party.
8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
conditions of this License Agreement.
C.2.4CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands. All rights reserved.
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
(continuesonnextpage)
96 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.
STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
C.2.5ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCU-
MENTATION
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3LicensesandAcknowledgementsforIncorporatedSoftware
Thissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated
inthePythondistribution.
C.3.1MersenneTwister
The_randomCextensionunderlyingthe randommoduleincludescodebasedonadownloadfrom http://www.math.
sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html . Thefollowingaretheverbatimcommentsfromthe
originalcode:
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.
Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 97
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
C.3.2Sockets
Thesocketmoduleusesthefunctions, getaddrinfo() ,andgetnameinfo() ,whicharecodedinseparatesource
filesfromtheWIDEProject, https://www.wide.ad.jp/ .
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
98 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
C.3.3Asynchronoussocketservices
Thetest.support.asynchat andtest.support.asyncore modulescontainthefollowingnotice:
Copyright 1996 by Sam Rushing
All Rights Reserved
Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.
SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
C.3.4Cookiemanagement
Thehttp.cookies modulecontainsthefollowingnotice:
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
All Rights Reserved
Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3.5Executiontracing
Thetracemodulecontainsthefollowingnotice:
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err... reserved and offered to the public under the terms of the
Python 2.2 license.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 99
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com
Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke
Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.
Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
C.3.6UUencodeandUUdecodefunctions
Theuucodeccontainsthefollowingnotice:
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
between ascii and binary. This results in a 1000-fold speedup. The C
version is still 5 times faster, though.
- Arguments more compliant with Python standard
100 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
C.3.7XMLRemoteProcedureCalls
Thexmlrpc.client modulecontainsthefollowingnotice:
The XML-RPC client interface is
Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh
By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:
Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
C.3.8test_epoll
Thetest.test_epoll modulecontainsthefollowingnotice:
Copyright (c) 2001-2006 Twisted Matrix Laboratories.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 101
PythonFrequentlyAskedQuestions,Release3.13.0
C.3.9Selectkqueue
Theselectmodulecontainsthefollowingnoticeforthekqueueinterface:
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.10SipHash24
Thefile Python/pyhash.c containsMarekMajkowski’implementationofDanBernstein’sSipHash24algorithm.
Itcontainsthefollowingnote:
<MIT License>
Copyright (c) 2013 Marek Majkowski <marek@popcount.org>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>
Original location:
https://github.com/majek/csiphash/
Solution inspired by code from:
Samuel Neves (supercop/crypto_auth/siphash24/little)
djb (supercop/crypto_auth/siphash24/little2)
Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
102 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
C.3.11strtodanddtoa
Thefile Python/dtoa.c ,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,
is derived from the file of the same name by David M. Gay, currently available from https://web.archive.org/web/
20220517033456/http://www.netlib.org/fp/dtoa.c . The original file, as retrieved on March 16, 2009, contains the
followingcopyrightandlicensingnotice:
/****************************************************************
*
* The author of this software is David M. Gay.
*
* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
*
* Permission to use, copy, modify, and distribute this software for any
* purpose without fee is hereby granted, provided that this entire notice
* is included in all copies of any software which is or includes a copy
* or modification of this software and in all copies of the supporting
* documentation for such software.
*
* THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
*
***************************************************************/
C.3.12OpenSSL
The modules hashlib,posixandssluse the OpenSSL library for added performance if made available by the
operatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL
libraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived
fromthat,theApacheLicensev2applies:
Apache License
Version 2.0, January 2004
https://www.apache.org/licenses/
TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
1. Definitions.
"License" shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.
"Licensor" shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.
"Legal Entity" shall mean the union of the acting entity and all
other entities that control, are controlled by, or are under common
control with that entity. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.
"You" (or "Your") shall mean an individual or Legal Entity
exercising permissions granted by this License.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 103
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
"Source" form shall mean the preferred form for making modifications,
including but not limited to software source code, documentation
source, and configuration files.
"Object" form shall mean any form resulting from mechanical
transformation or translation of a Source form, including but
not limited to compiled object code, generated documentation,
and conversions to other media types.
"Work" shall mean the work of authorship, whether in Source or
Object form, made available under the License, as indicated by a
copyright notice that is included in or attached to the work
(an example is provided in the Appendix below).
"Derivative Works" shall mean any work, whether in Source or Object
form, that is based on (or derived from) the Work and for which the
editorial revisions, annotations, elaborations, or other modifications
represent, as a whole, an original work of authorship. For the purposes
of this License, Derivative Works shall not include works that remain
separable from, or merely link (or bind by name) to the interfaces of,
the Work and Derivative Works thereof.
"Contribution" shall mean any work of authorship, including
the original version of the Work and any modifications or additions
to that Work or Derivative Works thereof, that is intentionally
submitted to Licensor for inclusion in the Work by the copyright owner
or by an individual or Legal Entity authorized to submit on behalf of
the copyright owner. For the purposes of this definition, "submitted"
means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems,
and issue tracking systems that are managed by, or on behalf of, the
Licensor for the purpose of discussing and improving the Work, but
excluding communication that is conspicuously marked or otherwise
designated in writing by the copyright owner as "Not a Contribution."
"Contributor" shall mean Licensor and any individual or Legal Entity
on behalf of whom a Contribution has been received by Licensor and
subsequently incorporated within the Work.
2. Grant of Copyright License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the
Work and such Derivative Works in Source or Object form.
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
(except as stated in this section) patent license to make, have made,
use, offer to sell, sell, import, and otherwise transfer the Work,
where such license applies only to those patent claims licensable
by such Contributor that are necessarily infringed by their
Contribution(s) alone or by combination of their Contribution(s)
with the Work to which such Contribution(s) was submitted. If You
(continuesonnextpage)
104 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work
or a Contribution incorporated within the Work constitutes direct
or contributory patent infringement, then any patent licenses
granted to You under this License for that Work shall terminate
as of the date such litigation is filed.
4. Redistribution. You may reproduce and distribute copies of the
Work or Derivative Works thereof in any medium, with or without
modifications, and in Source or Object form, provided that You
meet the following conditions:
(a) You must give any other recipients of the Work or
Derivative Works a copy of this License; and
(b) You must cause any modified files to carry prominent notices
stating that You changed the files; and
(c) You must retain, in the Source form of any Derivative Works
that You distribute, all copyright, patent, trademark, and
attribution notices from the Source form of the Work,
excluding those notices that do not pertain to any part of
the Derivative Works; and
(d) If the Work includes a "NOTICE" text file as part of its
distribution, then any Derivative Works that You distribute must
include a readable copy of the attribution notices contained
within such NOTICE file, excluding those notices that do not
pertain to any part of the Derivative Works, in at least one
of the following places: within a NOTICE text file distributed
as part of the Derivative Works; within the Source form or
documentation, if provided along with the Derivative Works; or,
within a display generated by the Derivative Works, if and
wherever such third-party notices normally appear. The contents
of the NOTICE file are for informational purposes only and
do not modify the License. You may add Your own attribution
notices within Derivative Works that You distribute, alongside
or as an addendum to the NOTICE text from the Work, provided
that such additional attribution notices cannot be construed
as modifying the License.
You may add Your own copyright statement to Your modifications and
may provide additional or different license terms and conditions
for use, reproduction, or distribution of Your modifications, or
for any such Derivative Works as a whole, provided Your use,
reproduction, and distribution of the Work otherwise complies with
the conditions stated in this License.
5. Submission of Contributions. Unless You explicitly state otherwise,
any Contribution intentionally submitted for inclusion in the Work
by You to the Licensor shall be under the terms and conditions of
this License, without any additional terms or conditions.
Notwithstanding the above, nothing herein shall supersede or modify
the terms of any separate license agreement you may have executed
with Licensor regarding such Contributions.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 105
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
6. Trademarks. This License does not grant permission to use the trade
names, trademarks, service marks, or product names of the Licensor,
except as required for reasonable and customary use in describing the
origin of the Work and reproducing the content of the NOTICE file.
7. Disclaimer of Warranty. Unless required by applicable law or
agreed to in writing, Licensor provides the Work (and each
Contributor provides its Contributions) on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied, including, without limitation, any warranties or conditions
of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
PARTICULAR PURPOSE. You are solely responsible for determining the
appropriateness of using or redistributing the Work and assume any
risks associated with Your exercise of permissions under this License.
8. Limitation of Liability. In no event and under no legal theory,
whether in tort (including negligence), contract, or otherwise,
unless required by applicable law (such as deliberate and grossly
negligent acts) or agreed to in writing, shall any Contributor be
liable to You for damages, including any direct, indirect, special,
incidental, or consequential damages of any character arising as a
result of this License or out of the use or inability to use the
Work (including but not limited to damages for loss of goodwill,
work stoppage, computer failure or malfunction, or any and all
other commercial damages or losses), even if such Contributor
has been advised of the possibility of such damages.
9. Accepting Warranty or Additional Liability. While redistributing
the Work or Derivative Works thereof, You may choose to offer,
and charge a fee for, acceptance of support, warranty, indemnity,
or other liability obligations and/or rights consistent with this
License. However, in accepting such obligations, You may act only
on Your own behalf and on Your sole responsibility, not on behalf
of any other Contributor, and only if You agree to indemnify,
defend, and hold each Contributor harmless for any liability
incurred by, or claims asserted against, such Contributor by reason
of your accepting any such warranty or additional liability.
END OF TERMS AND CONDITIONS
C.3.13expat
Thepyexpat extension is built using an included copy of the expat sources unless the build is configured
--with-system-expat :
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
and Clark Cooper
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
(continuesonnextpage)
106 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.14libffi
The_ctypesCextensionunderlyingthe ctypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless
thebuildisconfigured --with-system-libffi :
Copyright (c) 1996-2008 Red Hat, Inc and others.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
C.3.15zlib
Thezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo
oldtobeusedforthebuild:
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler
This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 107
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
Jean-loup Gailly Mark Adler
jloup@gzip.org madler@alumni.caltech.edu
C.3.16cfuhash
Theimplementationofthehashtableusedbythe tracemalloc isbasedonthecfuhashproject:
Copyright (c) 2005 Don Owens
All rights reserved.
This code is released under the BSD license:
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.
* Neither the name of the author nor the names of its
contributors may be used to endorse or promote products derived
from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
C.3.17libmpdec
The_decimal Cextensionunderlyingthe decimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary
unlessthebuildisconfigured --with-system-libmpdec :
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.
Redistribution and use in source and binary forms, with or without
(continuesonnextpage)
108 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.18W3CC14Ntestsuite
TheC14N2.0testsuiteinthe testpackage( Lib/test/xmltestdata/c14n-20/ )wasretrievedfromtheW3C
websiteathttps://www.w3.org/TR/xml-c14n2-testcases/ andisdistributedunderthe3-clauseBSDlicense:
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of works must retain the original copyright notice,
this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
used to endorse or promote products derived from this work without
specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 109
PythonFrequentlyAskedQuestions,Release3.13.0
C.3.19mimalloc
MITLicense:
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
C.3.20asyncio
Partsofthe asynciomoduleareincorporatedfrom uvloop0.16 ,whichisdistributedundertheMITlicense:
Copyright (c) 2015-2021 MagicStack Inc. http://magic.io
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.21GlobalUnboundedSequences(GUS)
The file Python/qsbr.c is adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation
schemeinsubr_smr.c . Thefileisdistributedunderthe2-ClauseBSDLicense:
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
(continuesonnextpage)
110 AppendixC. HistoryandLicense
PythonFrequentlyAskedQuestions,Release3.13.0
(continuedfrompreviouspage)
are met:
1. Redistributions of source code must retain the above copyright
notice unmodified, this list of conditions, and the following
disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 111
PythonFrequentlyAskedQuestions,Release3.13.0
112 AppendixC. HistoryandLicense
APPENDIX
D
COPYRIGHT
Pythonandthisdocumentationis:
Copyright©2001-2024PythonSoftwareFoundation. Allrightsreserved.
Copyright©2000BeOpen.com. Allrightsreserved.
Copyright©1995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.
Copyright©1991-1995StichtingMathematischCentrum. Allrightsreserved.
SeeHistory and License forcompletelicenseandpermissionsinformation.
113
PythonFrequentlyAskedQuestions,Release3.13.0
114 AppendixD. Copyright
INDEX
Non-alphabetical
...,73
>>>,73
__future__ ,79
__slots__ ,86
A
abstract base class ,73
annotation ,73
argument ,73
difference from parameter ,12
asynchronous context manager ,74
asynchronous generator ,74
asynchronous generator iterator ,74
asynchronous iterable ,74
asynchronous iterator ,74
attribute ,74
awaitable ,74
B
BDFL,74
binary file ,74
borrowed reference ,74
bytecode ,75
bytes-like object ,75
C
callable ,75
callback ,75
C-contiguous ,76
class,75
class variable ,75
closure variable ,75
complex number ,76
context,76
context management protocol ,76
context manager ,76
context variable ,76
contiguous ,76
coroutine ,76
coroutine function ,76
CPython,76
current context ,76
D
decorator ,76descriptor ,77
dictionary ,77
dictionary comprehension ,77
dictionary view ,77
docstring ,77
duck-typing ,77
E
EAFP,77
environment variable
PATH,51
PYTHON_GIL ,80
PYTHONDONTWRITEBYTECODE ,35
expression ,77
extension module ,78
F
f-string ,78
file object ,78
file-like object ,78
filesystem encoding and error handler ,78
finder,78
floor division ,78
Fortran contiguous ,76
free threading ,78
free variable ,78
function ,78
function annotation ,78
G
garbage collection ,79
generator ,79
generator expression ,79
generator iterator ,79
generic function ,79
generic type ,79
GIL,79
global interpreter lock ,80
H
hash-based pyc ,80
hashable ,80
I
IDLE,80
immortal ,80
115
PythonFrequentlyAskedQuestions,Release3.13.0
immutable ,80
import path ,80
importer ,80
importing ,80
interactive ,80
interpreted ,81
interpreter shutdown ,81
iterable ,81
iterator ,81
K
key function ,81
keyword argument ,81
L
lambda,82
LBYL,82
list,82
list comprehension ,82
loader,82
locale encoding ,82
M
magic
method,82
magic method ,82
mapping,82
meta path finder ,82
metaclass ,82
method,83
magic,82
special,87
method resolution order ,83
module,83
module spec ,83
MRO,83
mutable,83
N
named tuple ,83
namespace ,83
namespace package ,83
nested scope ,83
new-style class ,84
O
object,84
optimized scope ,84
P
package,84
parameter ,84
difference from argument ,12
PATH,51
path based finder ,85
path entry ,85
path entry finder ,85
path entry hook ,85path-like object ,85
PEP,85
portion,85
positional argument ,85
provisional API ,85
provisional package ,85
Python 3000 ,85
Python Enhancement Proposals
PEP 1,85
PEP 5,5
PEP 8,8,32,68
PEP 238,78
PEP 278,88
PEP 302,82
PEP 343,76
PEP 362,74,84
PEP 373,4
PEP 387,2
PEP 411,85
PEP 420,83,85
PEP 443,79
PEP 483,79
PEP 484,73,79,88
PEP 492,74,76
PEP 498,78
PEP 519,85
PEP 525,74
PEP 526,73,88
PEP 572,41
PEP 585,79
PEP 602,4
PEP 683,80
PEP 703,56,78,80
PEP 3116 ,88
PEP 3147 ,35
PEP 3155 ,86
PYTHON_GIL ,80
PYTHONDONTWRITEBYTECODE ,35
Pythonic ,85
Q
qualified name ,86
R
reference count ,86
regular package ,86
REPL,86
S
sequence ,86
set comprehension ,87
single dispatch ,87
slice,87
soft deprecated ,87
special
method,87
special method ,87
statement ,87
116 Index
PythonFrequentlyAskedQuestions,Release3.13.0
static type checker ,87
strong reference ,87
T
text encoding ,87
text file ,87
triple-quoted string ,87
type,88
type alias ,88
type hint ,88
U
universal newlines ,88
V
variable annotation ,88
virtual environment ,88
virtual machine ,89
Z
Zen of Python ,89
Index 117
