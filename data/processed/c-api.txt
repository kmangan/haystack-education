The Python/C API
Release 3.13.0
Guido van Rossum and the Python development team
November 15, 2024
Python Software Foundation
Email: docs@python.org

CONTENTS
1 Introduction 3
1.1 Codingstandards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2 IncludeFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.3 Usefulmacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.4 Objects,TypesandReferenceCounts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.4.1 ReferenceCounts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
1.4.2 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.5 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.6 EmbeddingPython . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
1.7 DebuggingBuilds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2 C API Stability 13
2.1 UnstableCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.2 StableApplicationBinaryInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.2.1 LimitedCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
2.2.2 StableABI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.2.3 LimitedAPIScopeandPerformance . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.2.4 LimitedAPICaveats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2.3 PlatformConsiderations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.4 ContentsofLimitedAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
3 The Very High Level Layer 39
4 Reference Counting 43
5 Exception Handling 47
5.1 Printingandclearing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
5.2 Raisingexceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
5.3 Issuingwarnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
5.4 Queryingtheerrorindicator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
5.5 SignalHandling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
5.6 ExceptionClasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
5.7 ExceptionObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
5.8 UnicodeExceptionObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
5.9 RecursionControl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
5.10 StandardExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
5.11 StandardWarningCategories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
6 Utilities 61
6.1 OperatingSystemUtilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
6.2 SystemFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
6.3 ProcessControl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
6.4 ImportingModules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
6.5 Datamarshallingsupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
6.6 Parsingargumentsandbuildingvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
i
6.6.1 Parsingarguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
6.6.2 Buildingvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
6.7 Stringconversionandformatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
6.8 PyHashAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
6.9 Reflection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
6.10 Codecregistryandsupportfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
6.10.1 CodeclookupAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
6.10.2 RegistryAPIforUnicodeencodingerrorhandlers . . . . . . . . . . . . . . . . . . . . . 84
6.11 PyTimeCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.11.1 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.11.2 ClockFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.11.3 RawClockFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
6.11.4 Conversionfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
6.12 SupportforPerfMaps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
7 Abstract Objects Layer 89
7.1 ObjectProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
7.2 CallProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
7.2.1 The tp_callProtocol. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
7.2.2 TheVectorcallProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
7.2.3 ObjectCallingAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
7.2.4 CallSupportAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
7.3 NumberProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
7.4 SequenceProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
7.5 MappingProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
7.6 IteratorProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
7.7 BufferProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
7.7.1 Bufferstructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
7.7.2 Bufferrequesttypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
7.7.3 Complexarrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
7.7.4 Buffer-relatedfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
8 Concrete Objects Layer 115
8.1 FundamentalObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
8.1.1 TypeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
8.1.2 The NoneObject. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
8.2 NumericObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
8.2.1 IntegerObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
8.2.2 BooleanObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
8.2.3 Floating-PointObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
8.2.4 ComplexNumberObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
8.3 SequenceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
8.3.1 BytesObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
8.3.2 ByteArrayObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
8.3.3 UnicodeObjectsandCodecs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
8.3.4 TupleObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
8.3.5 StructSequenceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
8.3.6 ListObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
8.4 ContainerObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
8.4.1 DictionaryObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
8.4.2 SetObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
8.5 FunctionObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
8.5.1 FunctionObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
8.5.2 InstanceMethodObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
8.5.3 MethodObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
8.5.4 CellObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
8.5.5 CodeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
8.5.6 Extrainformation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
ii
8.6 OtherObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
8.6.1 FileObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
8.6.2 ModuleObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
8.6.3 IteratorObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
8.6.4 DescriptorObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
8.6.5 SliceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
8.6.6 MemoryViewobjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
8.6.7 WeakReferenceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
8.6.8 Capsules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
8.6.9 FrameObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
8.6.10 GeneratorObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
8.6.11 CoroutineObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
8.6.12 ContextVariablesObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
8.6.13 DateTimeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
8.6.14 ObjectsforTypeHinting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
9 Initialization, Finalization, and Threads 195
9.1 BeforePythonInitialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
9.2 Globalconfigurationvariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
9.3 Initializingandfinalizingtheinterpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
9.4 Process-wideparameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
9.5 ThreadStateandtheGlobalInterpreterLock . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
9.5.1 ReleasingtheGILfromextensioncode . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
9.5.2 Non-Pythoncreatedthreads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
9.5.3 Cautionsaboutfork() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
9.5.4 High-levelAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
9.5.5 Low-levelAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
9.6 Sub-interpretersupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
9.6.1 APer-InterpreterGIL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
9.6.2 Bugsandcaveats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
9.7 AsynchronousNotifications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
9.8 ProfilingandTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
9.9 Referencetracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
9.10 AdvancedDebuggerSupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
9.11 ThreadLocalStorageSupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
9.11.1 ThreadSpecificStorage(TSS)API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
9.11.2 ThreadLocalStorage(TLS)API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
9.12 SynchronizationPrimitives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
9.12.1 PythonCriticalSectionAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
10 Python Initialization Configuration 223
10.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
10.2 PyWideStringList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
10.3 PyStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
10.4 PyPreConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
10.5 PreinitializePythonwithPyPreConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
10.6 PyConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
10.7 InitializationwithPyConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239
10.8 IsolatedConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
10.9 PythonConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
10.10 PythonPathConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
10.11 Py_GetArgcArgv() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
10.12 Multi-PhaseInitializationPrivateProvisionalAPI . . . . . . . . . . . . . . . . . . . . . . . . . . 243
11 Memory Management 245
11.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
11.2 AllocatorDomains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
11.3 RawMemoryInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
11.4 MemoryInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
iii
11.5 Objectallocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
11.6 DefaultMemoryAllocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
11.7 CustomizeMemoryAllocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
11.8 DebughooksonthePythonmemoryallocators . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
11.9 Thepymallocallocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
11.9.1 CustomizepymallocArenaAllocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
11.10 Themimallocallocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
11.11 tracemallocCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
11.12 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254
12 Object Implementation Support 255
12.1 AllocatingObjectsontheHeap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
12.2 CommonObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
12.2.1 Baseobjecttypesandmacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
12.2.2 Implementingfunctionsandmethods . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
12.2.3 Accessingattributesofextensiontypes . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
12.3 TypeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
12.3.1 QuickReference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
12.3.2 PyTypeObjectDefinition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
12.3.3 PyObjectSlots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
12.3.4 PyVarObjectSlots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
12.3.5 PyTypeObjectSlots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
12.3.6 StaticTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
12.3.7 HeapTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
12.3.8 NumberObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
12.3.9 MappingObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
12.3.10 SequenceObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
12.3.11 BufferObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294
12.3.12 AsyncObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
12.3.13 SlotTypetypedefs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
12.3.14 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
12.4 SupportingCyclicGarbageCollection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299
12.4.1 ControllingtheGarbageCollectorState . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
12.4.2 QueryingGarbageCollectorState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
13 API and ABI Versioning 305
14 Monitoring C API 307
15 Generating Execution Events 309
15.1 ManagingtheMonitoringState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
A Glossary 313
B About these documents 331
B.1 ContributorstothePythonDocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331
C History and License 333
C.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
C.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 334
C.2.1 PSFLICENSEAGREEMENTFORPYTHON3.13.0 . . . . . . . . . . . . . . . . . . . 334
C.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 335
C.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 335
C.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 336
C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCUMEN-
TATION. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
C.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 337
C.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
iv
C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
C.3.4 Cookiemanagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
C.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
C.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
C.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
C.3.11 strtodanddtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
C.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349
C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
C.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
D Copyright 353
Index 355
v
vi
The Python/C API, Release 3.13.0
ThismanualdocumentstheAPIusedbyCandC++programmerswhowanttowriteextensionmodulesorembed
Python. Itisacompaniontoextending-index, whichdescribesthegeneralprinciplesofextensionwritingbutdoes
notdocumenttheAPIfunctionsindetail.
CONTENTS 1
The Python/C API, Release 3.13.0
2 CONTENTS
CHAPTER
ONE
INTRODUCTION
TheApplicationProgrammer’sInterfacetoPythongivesCandC++programmersaccesstothePythoninterpreter
atavarietyoflevels. TheAPIisequallyusablefromC++,butforbrevityitisgenerallyreferredtoasthePython/C
API.TherearetwofundamentallydifferentreasonsforusingthePython/CAPI.Thefirstreasonistowrite extension
modulesfor specific purposes; these are C modules that extend the Python interpreter. This is probably the most
commonuse. ThesecondreasonistousePythonasacomponentinalargerapplication;thistechniqueisgenerally
referredtoas embedding Pythoninanapplication.
Writinganextensionmoduleisarelativelywell-understoodprocess,wherea“cookbook”approachworkswell. There
areseveraltoolsthatautomatetheprocesstosomeextent. WhilepeoplehaveembeddedPythoninotherapplications
sinceitsearlyexistence,theprocessofembeddingPythonislessstraightforwardthanwritinganextension.
Many API functions are useful independent of whether you’re embedding or extending Python; moreover, most
applications that embed Python will need to provide a custom extension as well, so it’s probably a good idea to
becomefamiliarwithwritinganextensionbeforeattemptingtoembedPythoninarealapplication.
1.1Coding standards
Ifyou’rewritingCcodeforinclusioninCPython,you mustfollowtheguidelinesandstandardsdefinedin PEP 7.
These guidelines apply regardless of the version of Python you are contributing to. Following these conventions is
notnecessaryforyourownthirdpartyextensionmodules,unlessyoueventuallyexpecttocontributethemtoPython.
1.2Include Files
Allfunction,typeandmacrodefinitionsneededtousethePython/CAPIareincludedinyourcodebythefollowing
line:
#define PY_SSIZE_T_CLEAN
#include <Python.h>
This implies inclusion of the following standard headers: <stdio.h> ,<string.h> ,<errno.h> ,<limits.h> ,
<assert.h> and<stdlib.h> (ifavailable).
®Note
SincePythonmaydefinesomepre-processordefinitionswhichaffectthestandardheadersonsomesystems,you
mustinclude Python.h beforeanystandardheadersareincluded.
It is recommended to always define PY_SSIZE_T_CLEAN before including Python.h . See Parsing arguments
and building values foradescriptionofthismacro.
AlluservisiblenamesdefinedbyPython.h(exceptthosedefinedbytheincludedstandardheaders)haveoneofthe
prefixes Pyor_Py. Namesbeginningwith _PyareforinternalusebythePythonimplementationandshouldnotbe
usedbyextensionwriters. Structuremembernamesdonothaveareservedprefix.
3
The Python/C API, Release 3.13.0
®Note
Usercodeshouldneverdefinenamesthatbeginwith Pyor_Py. Thisconfusesthereader, andjeopardizesthe
portabilityoftheusercodetofuturePythonversions,whichmaydefineadditionalnamesbeginningwithoneof
theseprefixes.
TheheaderfilesaretypicallyinstalledwithPython. OnUnix,thesearelocatedinthedirectories prefix /include/
pythonversion/ andexec_prefix /include/pythonversion/ , where prefixandexec_prefix are
defined by the corresponding parameters to Python’s configure script and versionis'%d.%d' % sys.
version_info[:2] . OnWindows,theheadersareinstalledin prefix /include ,where prefixistheinstalla-
tiondirectoryspecifiedtotheinstaller.
Toincludetheheaders,placebothdirectories(ifdifferent)onyourcompiler’ssearchpathforincludes. Do notplace
the parent directories on the search path and then use #include <pythonX.Y/Python.h> ; this will break on
multi-platform builds since the platform independent headers under prefixinclude the platform specific headers
from exec_prefix .
C++usersshouldnotethatalthoughtheAPIisdefinedentirelyusingC,theheaderfilesproperlydeclaretheentry
pointstobe extern "C" . Asaresult,thereisnoneedtodoanythingspecialtousetheAPIfromC++.
1.3Useful macros
SeveralusefulmacrosaredefinedinthePythonheaderfiles. Manyaredefinedclosertowheretheyareuseful(e.g.
Py_RETURN_NONE ).Othersofamoregeneralutilityaredefinedhere. Thisisnotnecessarilyacompletelisting.
PyMODINIT_FUNC
Declare an extension module PyInitinitialization function. The function return type is PyObject *. The
macrodeclaresanyspeciallinkagedeclarationsrequiredbytheplatform,andforC++declaresthefunctionas
extern "C" .
Theinitializationfunctionmustbenamed PyInit_ name,where nameisthenameofthemodule,andshould
betheonlynon- staticitemdefinedinthemodulefile. Example:
static struct PyModuleDef spam_module ={
PyModuleDef_HEAD_INIT,
.m_name ="spam ",
...
};
PyMODINIT_FUNC
PyInit_spam (void )
{
return PyModule_Create( &spam_module);
}
Py_ABS (x)
Returntheabsolutevalueof x.
Addedinversion3.3.
Py_ALWAYS_INLINE
Askthecompilertoalwaysinlineastaticinlinefunction. Thecompilercanignoreitanddecidestonotinline
thefunction.
ItcanbeusedtoinlineperformancecriticalstaticinlinefunctionswhenbuildingPythonindebugmodewith
functioninliningdisabled. Forexample,MSCdisablesfunctioninliningwhenbuildingindebugmode.
Marking blindly a static inline function with Py_ALWAYS_INLINE can result in worse performances (due
to increased code size for example). The compiler is usually smarter than the developer for the cost/benefit
analysis.
4 Chapter 1. Introduction
The Python/C API, Release 3.13.0
IfPythonisbuiltindebugmode(ifthe Py_DEBUG macroisdefined),the Py_ALWAYS_INLINE macrodoes
nothing.
Itmustbespecifiedbeforethefunctionreturntype. Usage:
static inline Py_ALWAYS_INLINE int random( void ){return 4;}
Addedinversion3.11.
Py_CHARMASK (c)
Argumentmustbeacharacteroranintegerintherange[-128,127]or[0,255]. Thismacroreturns ccastto
anunsigned char .
Py_DEPRECATED (version )
Usethisfordeprecateddeclarations. Themacromustbeplacedbeforethesymbolname.
Example:
Py_DEPRECATED( 3.8)PyAPI_FUNC( int)Py_OldFunction( void );
Changedinversion3.8: MSVCsupportwasadded.
Py_GETENV (s)
Like getenv(s) , but returns NULLif-Ewas passed on the command line (see PyConfig.
use_environment ).
Py_MAX (x,y)
Returnthemaximumvaluebetween xandy.
Addedinversion3.3.
Py_MEMBER_SIZE (type,member )
Returnthesizeofastructure( type)memberinbytes.
Addedinversion3.6.
Py_MIN (x,y)
Returntheminimumvaluebetween xandy.
Addedinversion3.3.
Py_NO_INLINE
Disableinliningonafunction. Forexample,itreducestheCstackconsumption: usefulonLTO+PGObuilds
whichheavilyinlinecode(see bpo-33720 ).
Usage:
Py_NO_INLINE static int random( void ){return 4;}
Addedinversion3.11.
Py_STRINGIFY (x)
Convert xtoaCstring. E.g. Py_STRINGIFY(123) returns "123".
Addedinversion3.4.
Py_UNREACHABLE ()
Usethiswhenyouhaveacodepaththatcannotbereachedbydesign. Forexample,inthe default: clause
inaswitchstatementforwhichallpossiblevaluesarecoveredin casestatements. Usethisinplaceswhere
youmightbetemptedtoputan assert(0) orabort()call.
Inreleasemode,themacrohelpsthecompilertooptimizethecode,andavoidsawarningaboutunreachable
code. Forexample,themacroisimplementedwith __builtin_unreachable() onGCCinreleasemode.
A use for Py_UNREACHABLE() is following a call a function that never returns but that is not declared
_Py_NO_RETURN .
1.3. Useful macros 5
The Python/C API, Release 3.13.0
Ifacodepathisveryunlikelycodebutcanbereachedunderexceptionalcase,thismacromustnotbeused.
Forexample,underlowmemoryconditionorifasystemcallreturnsavalueoutoftheexpectedrange. Inthis
case,it’sbettertoreporttheerrortothecaller. Iftheerrorcannotbereportedtocaller, Py_FatalError()
canbeused.
Addedinversion3.7.
Py_UNUSED (arg)
Usethisforunusedargumentsinafunctiondefinitiontosilencecompilerwarnings. Example: int func(int
a, int Py_UNUSED(b)) { return a; } .
Addedinversion3.4.
PyDoc_STRVAR (name,str )
Creates a variable with name namethat can be used in docstrings. If Python is built without docstrings, the
valuewillbeempty.
UsePyDoc_STRVAR fordocstringstosupportbuildingPythonwithoutdocstrings,asspecifiedin PEP 7.
Example:
PyDoc_STRVAR(pop_doc, "Remove and return the rightmost element. ");
static PyMethodDef deque_methods[] ={
// ...
{"pop",(PyCFunction)deque_pop, METH_NOARGS, pop_doc},
// ...
}
PyDoc_STR (str)
Createsadocstringforthegiveninputstringoranemptystringifdocstringsaredisabled.
UsePyDoc_STR inspecifyingdocstringstosupportbuildingPythonwithoutdocstrings,asspecifiedin PEP
7.
Example:
static PyMethodDef pysqlite_row_methods[] ={
{"keys ",(PyCFunction)pysqlite_row_keys, METH_NOARGS,
PyDoc_STR( "Returns the keys of the row. ")},
{NULL ,NULL }
};
1.4Objects, Types and Reference Counts
MostPython/CAPIfunctionshaveoneormoreargumentsaswellasareturnvalueoftype PyObject *. Thistype
isapointertoanopaquedatatyperepresentinganarbitraryPythonobject. SinceallPythonobjecttypesaretreated
the same way by the Python language in most situations (e.g., assignments, scope rules, and argument passing), it
is only fitting that they should be represented by a single C type. Almost all Python objects live on the heap: you
neverdeclareanautomaticorstaticvariableoftype PyObject , onlypointervariablesoftype PyObject *canbe
declared. The sole exception are the type objects; since these must never be deallocated, they are typically static
PyTypeObject objects.
AllPythonobjects(evenPythonintegers)havea typeanda reference count . Anobject’stypedetermineswhatkind
ofobjectitis(e.g.,aninteger,alist,orauser-definedfunction;therearemanymoreasexplainedintypes). Foreach
ofthewell-knowntypesthereisamacrotocheckwhetheranobjectisofthattype;forinstance, PyList_Check(a)
istrueif(andonlyif)theobjectpointedtoby aisaPythonlist.
6 Chapter 1. Introduction
The Python/C API, Release 3.13.0
1.4.1Reference Counts
Thereferencecountisimportantbecausetoday’scomputershaveafinite(andoftenseverelylimited)memorysize;
itcountshowmanydifferentplacestherearethathavea strong reference toanobject. Suchaplacecouldbeanother
object,oraglobal(orstatic)Cvariable,oralocalvariableinsomeCfunction. Whenthelast strong reference toan
objectisreleased(i.e. itsreferencecountbecomeszero),theobjectisdeallocated. Ifitcontainsreferencestoother
objects,thosereferencesarereleased. Thoseotherobjectsmaybedeallocatedinturn,iftherearenomorereferences
tothem,andsoon. (There’sanobviousproblemwithobjectsthatreferenceeachotherhere;fornow,thesolutionis
“don’tdothat.”)
Referencecountsarealwaysmanipulatedexplicitly. Thenormalwayistousethemacro Py_INCREF() totakeanew
reference to an object(i.e. increment itsreferencecountby one), and Py_DECREF() to releasethatreference(i.e.
decrementthereferencecountbyone). The Py_DECREF() macroisconsiderablymorecomplexthantheincrefone,
sinceitmustcheckwhetherthereferencecountbecomeszeroandthencausetheobject’sdeallocatortobecalled. The
deallocatorisafunctionpointercontainedintheobject’stypestructure. Thetype-specificdeallocatortakescareof
releasingreferencesforotherobjectscontainedintheobjectifthisisacompoundobjecttype,suchasalist,aswellas
performinganyadditionalfinalizationthat’sneeded. There’snochancethatthereferencecountcanoverflow;atleast
asmanybitsareusedtoholdthereferencecountastherearedistinctmemorylocationsinvirtualmemory(assuming
sizeof(Py_ssize_t) >= sizeof(void*) ). Thus,thereferencecountincrementisasimpleoperation.
Itisnotnecessarytoholda strong reference (i.e. incrementthereferencecount)foreverylocalvariablethatcontains
apointertoanobject. Intheory, theobject’sreferencecountgoesupbyonewhenthevariableismadetopointto
itanditgoesdownbyonewhenthevariablegoesoutofscope. However,thesetwocanceleachotherout,soatthe
endthereferencecounthasn’tchanged. Theonlyrealreasontousethereferencecountistopreventtheobjectfrom
beingdeallocatedaslongasourvariableispointingtoit. Ifweknowthatthereisatleastoneotherreferencetothe
object that lives at least as long as our variable, there is no need to take a new strong reference (i.e. increment the
referencecount)temporarily. Animportantsituationwherethisarisesisinobjectsthatarepassedasargumentsto
CfunctionsinanextensionmodulethatarecalledfromPython; thecallmechanismguaranteestoholdareference
toeveryargumentforthedurationofthecall.
However, a common pitfall is to extract an object from a list and hold on to it for a while without taking a new
reference. Some other operation might conceivably remove the object from the list, releasing that reference, and
possiblydeallocatingit. Therealdangeristhatinnocent-lookingoperationsmayinvokearbitraryPythoncodewhich
coulddothis;thereisacodepathwhichallowscontroltoflowbacktotheuserfroma Py_DECREF() ,soalmostany
operationispotentiallydangerous.
Asafeapproachistoalwaysusethegenericoperations(functionswhosenamebeginswith PyObject_ ,PyNumber_ ,
PySequence_ orPyMapping_ ). Theseoperationsalwayscreateanew strong reference (i.e. incrementthereference
count) of the object they return. This leaves the caller with the responsibility to call Py_DECREF() when they are
donewiththeresult;thissoonbecomessecondnature.
Reference Count Details
ThereferencecountbehavioroffunctionsinthePython/CAPIisbestexplainedintermsof ownership of references .
Ownership pertains to references, never to objects (objects are not owned: they are always shared). “Owning a
reference”meansbeingresponsibleforcallingPy_DECREFonitwhenthereferenceisnolongerneeded. Ownership
canalsobetransferred,meaningthatthecodethatreceivesownershipofthereferencethenbecomesresponsiblefor
eventuallyreleasingitbycalling Py_DECREF() orPy_XDECREF() whenit’snolongerneeded—orpassingonthis
responsibility (usually to its caller). When a function passes ownership of a reference on to its caller, the caller is
saidtoreceivea newreference. Whennoownershipistransferred,thecallerissaidto borrowthereference. Nothing
needstobedonefora borrowed reference .
Conversely,whenacallingfunctionpassesinareferencetoanobject,therearetwopossibilities: thefunction steals
areferencetotheobject,oritdoesnot. Stealing a reference meansthatwhenyoupassareferencetoafunction,that
functionassumesthatitnowownsthatreference,andyouarenotresponsibleforitanylonger.
Few functions steal references; the two notable exceptions are PyList_SetItem() andPyTuple_SetItem() ,
which steal a reference to the item (but not to the tuple or list into which the item is put!). These functions were
designedtostealareferencebecauseofacommonidiomforpopulatingatupleorlistwithnewlycreatedobjects;for
example, the code to create the tuple (1, 2, "three") could look like this (forgetting about error handling for
themoment;abetterwaytocodethisisshownbelow):
1.4. Objects, Types and Reference Counts 7
The Python/C API, Release 3.13.0
PyObject *t;
t=PyTuple_New( 3);
PyTuple_SetItem(t, 0,PyLong_FromLong( 1L));
PyTuple_SetItem(t, 1,PyLong_FromLong( 2L));
PyTuple_SetItem(t, 2,PyUnicode_FromString( "three "));
Here, PyLong_FromLong() returnsanewreferencewhichisimmediatelystolenby PyTuple_SetItem() . When
you want to keep using an object although the reference to it will be stolen, use Py_INCREF() to grab another
referencebeforecallingthereference-stealingfunction.
Incidentally, PyTuple_SetItem() is the onlyway to set tuple items; PySequence_SetItem() and
PyObject_SetItem() refuse to do this since tuples are an immutable data type. You should only use
PyTuple_SetItem() fortuplesthatyouarecreatingyourself.
Equivalentcodeforpopulatingalistcanbewrittenusing PyList_New() andPyList_SetItem() .
However, in practice, you will rarely use these ways of creating and populating a tuple or list. There’s a generic
function, Py_BuildValue() , that can create most common objects from C values, directed by a format string .
For example, the above two blocks of code could be replaced by the following (which also takes care of the error
checking):
PyObject *tuple, *list;
tuple =Py_BuildValue( "(iis) ",1,2,"three ");
list =Py_BuildValue( "[iis] ",1,2,"three ");
It is much more common to use PyObject_SetItem() and friends with items whose references you are only
borrowing,likeargumentsthatwerepassedintothefunctionyouarewriting. Inthatcase,theirbehaviourregarding
referencesismuchsaner,sinceyoudon’thavetotakeanewreferencejustsoyoucangivethatreferenceaway(“have
itbestolen”). Forexample,thisfunctionsetsallitemsofalist(actually,anymutablesequence)toagivenitem:
int
set_all (PyObject *target, PyObject *item)
{
Py_ssize_t i,n;
n=PyObject_Length(target);
if(n<0)
return -1;
for (i=0;i<n;i++){
PyObject *index =PyLong_FromSsize_t(i);
if(!index)
return -1;
if(PyObject_SetItem(target, index, item) <0){
Py_DECREF(index);
return -1;
}
Py_DECREF(index);
}
return 0;
}
The situation is slightly different for function return values. While passing a reference to most functions does not
changeyourownershipresponsibilitiesforthatreference,manyfunctionsthatreturnareferencetoanobjectgiveyou
ownership of the reference. The reason is simple: in many cases, the returned object is created on the fly, and the
reference you get is the only reference to the object. Therefore, the generic functions that return object references,
likePyObject_GetItem() andPySequence_GetItem() ,alwaysreturnanewreference(thecallerbecomesthe
ownerofthereference).
8 Chapter 1. Introduction
The Python/C API, Release 3.13.0
Itisimportanttorealizethatwhetheryouownareferencereturnedbyafunctiondependsonwhichfunctionyoucall
only— the plumage (thetypeoftheobjectpassedasanargumenttothefunction) doesn’t enter into it! Thus,ifyou
extract an item from a list using PyList_GetItem() , you don’t own the reference — but if you obtain the same
itemfromthesamelistusing PySequence_GetItem() (whichhappenstotakeexactlythesamearguments),you
doownareferencetothereturnedobject.
Hereisanexampleofhowyoucouldwriteafunctionthatcomputesthesumoftheitemsinalistofintegers;once
using PyList_GetItem() ,andonceusing PySequence_GetItem() .
long
sum_list (PyObject *list)
{
Py_ssize_t i,n;
long total =0,value;
PyObject *item;
n=PyList_Size(list);
if(n<0)
return -1;/* Not a list */
for (i=0;i<n;i++){
item =PyList_GetItem(list, i); /* Can't fail */
if(!PyLong_Check(item)) continue ;/* Skip non-integers */
value =PyLong_AsLong(item);
if(value ==-1&&PyErr_Occurred())
/* Integer too big to fit in a C long, bail out */
return -1;
total +=value;
}
return total;
}
long
sum_sequence (PyObject *sequence)
{
Py_ssize_t i,n;
long total =0,value;
PyObject *item;
n=PySequence_Length(sequence);
if(n<0)
return -1;/* Has no length */
for (i=0;i<n;i++){
item =PySequence_GetItem(sequence, i);
if(item ==NULL )
return -1;/* Not a sequence, or other failure */
if(PyLong_Check(item)) {
value =PyLong_AsLong(item);
Py_DECREF(item);
if(value ==-1&&PyErr_Occurred())
/* Integer too big to fit in a C long, bail out */
return -1;
total +=value;
}
else {
Py_DECREF(item); /* Discard reference ownership */
}
}
return total;
}
1.4. Objects, Types and Reference Counts 9
The Python/C API, Release 3.13.0
1.4.2Types
TherearefewotherdatatypesthatplayasignificantroleinthePython/CAPI;mostaresimpleCtypessuchas int,
long,doubleandchar*. Afewstructuretypesareusedtodescribestatictablesusedtolistthefunctionsexported
byamoduleorthedataattributesofanewobjecttype,andanotherisusedtodescribethevalueofacomplexnumber.
Thesewillbediscussedtogetherwiththefunctionsthatusethem.
typePy_ssize_t
Part of the Stable ABI .A signed integral type such that sizeof(Py_ssize_t) == sizeof(size_t) .
C99 doesn’t define such a thing directly (size_t is an unsigned integral type). See PEP 353 for details.
PY_SSIZE_T_MAX isthelargestpositivevalueoftype Py_ssize_t .
1.5Exceptions
ThePythonprogrammeronlyneedstodealwithexceptionsifspecificerrorhandlingisrequired;unhandledexcep-
tions are automatically propagated to the caller, then to the caller’s caller, and so on, until they reach the top-level
interpreter,wheretheyarereportedtotheuseraccompaniedbyastacktraceback.
ForCprogrammers,however,errorcheckingalwayshastobeexplicit. AllfunctionsinthePython/CAPIcanraise
exceptions, unless an explicit claim is made otherwise in a function’s documentation. In general, when a function
encountersanerror, itsetsanexception, discardsanyobjectreferencesthatitowns, andreturnsanerrorindicator.
If not documented otherwise, this indicator is either NULLor-1, depending on the function’s return type. A few
functionsreturnaBooleantrue/falseresult,withfalseindicatinganerror. Veryfewfunctionsreturnnoexpliciterror
indicatororhaveanambiguousreturnvalue,andrequireexplicittestingforerrorswith PyErr_Occurred() . These
exceptionsarealwaysexplicitlydocumented.
Exceptionstateismaintainedinper-threadstorage(thisisequivalenttousingglobalstorageinanunthreadedappli-
cation). Athreadcanbeinoneoftwostates: anexceptionhasoccurred,ornot. Thefunction PyErr_Occurred()
can be used to check for this: it returns a borrowed reference to the exception type object when an exception has
occurred, and NULLotherwise. Thereareanumberoffunctionstosettheexceptionstate: PyErr_SetString()
isthemostcommon(thoughnotthemostgeneral)functiontosettheexceptionstate, and PyErr_Clear() clears
theexceptionstate.
Thefullexceptionstateconsistsofthreeobjects(allofwhichcanbe NULL):theexceptiontype,thecorresponding
exception value, and the traceback. These have the same meanings as the Python result of sys.exc_info() ;
however, theyarenotthesame: thePythonobjectsrepresentthelastexceptionbeinghandledbyaPython try…
exceptstatement, while the C level exception state only exists while an exception is being passed on between C
functions until it reaches the Python bytecode interpreter’s main loop, which takes care of transferring it to sys.
exc_info() andfriends.
Note that starting with Python 1.5, the preferred, thread-safe way to access the exception state from Python code
is to call the function sys.exc_info() , which returns the per-thread exception state for Python code. Also, the
semanticsofbothwaystoaccesstheexceptionstatehavechangedsothatafunctionwhichcatchesanexceptionwill
saveandrestoreitsthread’sexceptionstatesoastopreservetheexceptionstateofitscaller. Thispreventscommon
bugsinexceptionhandlingcodecausedbyaninnocent-lookingfunctionoverwritingtheexceptionbeinghandled;it
alsoreducestheoftenunwantedlifetimeextensionforobjectsthatarereferencedbythestackframesinthetraceback.
Asageneralprinciple,afunctionthatcallsanotherfunctiontoperformsometaskshouldcheckwhetherthecalled
functionraisedanexception,andifso,passtheexceptionstateontoitscaller. Itshoulddiscardanyobjectreferences
thatitowns,andreturnanerrorindicator,butitshould notsetanotherexception—thatwouldoverwritetheexception
thatwasjustraised,andloseimportantinformationabouttheexactcauseoftheerror.
Asimpleexampleofdetectingexceptionsandpassingthemonisshowninthe sum_sequence() exampleabove.
Itsohappensthatthisexampledoesn’tneedtocleanupanyownedreferenceswhenitdetectsanerror. Thefollowing
example function shows some error cleanup. First, to remind you why you like Python, we show the equivalent
Pythoncode:
def incr_item(dict, key) :
try:
item =dict[key]
(continuesonnextpage)
10 Chapter 1. Introduction
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
except KeyError :
item =0
dict[key] =item +1
HereisthecorrespondingCcode,inallitsglory:
int
incr_item (PyObject *dict, PyObject *key)
{
/* Objects all initialized to NULL for Py_XDECREF */
PyObject *item =NULL ,*const_one =NULL ,*incremented_item =NULL ;
int rv=-1;/* Return value initialized to -1 (failure) */
item =PyObject_GetItem(dict, key);
if(item ==NULL ){
/* Handle KeyError only: */
if(!PyErr_ExceptionMatches(PyExc_KeyError))
goto error;
/* Clear the error and use zero: */
PyErr_Clear();
item =PyLong_FromLong( 0L);
if(item ==NULL )
goto error;
}
const_one =PyLong_FromLong( 1L);
if(const_one ==NULL )
goto error;
incremented_item =PyNumber_Add(item, const_one);
if(incremented_item ==NULL )
goto error;
if(PyObject_SetItem(dict, key, incremented_item) <0)
goto error;
rv=0;/* Success */
/* Continue with cleanup code */
error :
/* Cleanup code, shared by success and failure path */
/* Use Py_XDECREF() to ignore NULL references */
Py_XDECREF(item);
Py_XDECREF(const_one);
Py_XDECREF(incremented_item);
return rv; /* -1 for error, 0 for success */
}
This example represents an endorsed use of the gotostatement in C! It illustrates the use of
PyErr_ExceptionMatches() andPyErr_Clear() tohandlespecificexceptions,andtheuseof Py_XDECREF()
to dispose of owned references that may be NULL(note the 'X'in the name; Py_DECREF() would crash when
confrontedwitha NULLreference). Itisimportantthatthevariablesusedtoholdownedreferencesareinitializedto
NULLforthistowork; likewise, theproposedreturnvalueisinitializedto -1(failure)andonlysettosuccessafter
thefinalcallmadeissuccessful.
1.5. Exceptions 11
The Python/C API, Release 3.13.0
1.6Embedding Python
Theoneimportanttaskthatonlyembedders(asopposedtoextensionwriters)ofthePythoninterpreterhavetoworry
aboutistheinitialization,andpossiblythefinalization,ofthePythoninterpreter. Mostfunctionalityoftheinterpreter
canonlybeusedaftertheinterpreterhasbeeninitialized.
Thebasicinitializationfunctionis Py_Initialize() . Thisinitializesthetableofloadedmodules,andcreatesthe
fundamentalmodules builtins ,__main__ ,and sys. Italsoinitializesthemodulesearchpath( sys.path ).
Py_Initialize() doesnotsetthe“scriptargumentlist”( sys.argv ). IfthisvariableisneededbyPythoncodethat
willbeexecutedlater,setting PyConfig.argv andPyConfig.parse_argv mustbeset: see Python Initialization
Configuration .
On most systems (in particular, on Unix and Windows, although the details are slightly different),
Py_Initialize() calculates the module search path based upon its best guess for the location of the standard
Python interpreter executable, assuming that the Python library is found in a fixed location relative to the Python
interpreterexecutable. Inparticular,itlooksforadirectorynamed lib/python X.Yrelativetotheparentdirectory
wheretheexecutablenamed pythonisfoundontheshellcommandsearchpath(theenvironmentvariable PATH).
Forinstance,ifthePythonexecutableisfoundin /usr/local/bin/python ,itwillassumethatthelibrariesarein
/usr/local/lib/python X.Y.(Infact,thisparticularpathisalsothe“fallback”location,usedwhennoexecutable
file named pythonis found along PATH.) The user can override this behavior by setting the environment variable
PYTHONHOME ,orinsertadditionaldirectoriesinfrontofthestandardpathbysetting PYTHONPATH .
The embedding application can steer the search by setting PyConfig.program_name beforecalling
Py_InitializeFromConfig() . Note that PYTHONHOME still overrides this and PYTHONPATH is still inserted
in front of the standard path. An application that requires total control has to provide its own implementation of
Py_GetPath() ,Py_GetPrefix() ,Py_GetExecPrefix() , and Py_GetProgramFullPath() (all defined in
Modules/getpath.c ).
Sometimes,itisdesirableto“uninitialize”Python. Forinstance,theapplicationmaywanttostartover(makeanother
callto Py_Initialize() )ortheapplicationissimplydonewithitsuseofPythonandwantstofreememoryallo-
catedbyPython. Thiscanbeaccomplishedbycalling Py_FinalizeEx() . Thefunction Py_IsInitialized()
returnstrueifPythoniscurrentlyintheinitializedstate. Moreinformationaboutthesefunctionsisgiveninalater
chapter. Noticethat Py_FinalizeEx() doesnotfreeallmemoryallocatedbythePythoninterpreter,e.g. memory
allocatedbyextensionmodulescurrentlycannotbereleased.
1.7Debugging Builds
Python can be built with several macros to enable extra checks of the interpreter and extension modules. These
checkstendtoaddalargeamountofoverheadtotheruntimesotheyarenotenabledbydefault.
Afulllistofthevarioustypesofdebuggingbuildsisinthefile Misc/SpecialBuilds.txt inthePythonsource
distribution. Buildsareavailablethatsupporttracingofreferencecounts,debuggingthememoryallocator,orlow-
levelprofilingofthemaininterpreterloop. Onlythemostfrequentlyusedbuildswillbedescribedintheremainder
ofthissection.
Py_DEBUG
Compilingtheinterpreterwiththe Py_DEBUG macrodefinedproduceswhatisgenerallymeantbyadebugbuildof
Python. Py_DEBUG is enabled in theUnix build byadding --with-pydebug to the ./configure command. It
isalsoimpliedbythepresenceofthenot-Python-specific _DEBUGmacro. When Py_DEBUG isenabledintheUnix
build,compileroptimizationisdisabled.
Inadditiontothereferencecountdebuggingdescribedbelow,extrachecksareperformed,seePythonDebugBuild.
Defining Py_TRACE_REFS enablesreferencetracing(seethe configure --with-trace-refs option ). When
defined, acirculardoublylinkedlistofactiveobjectsismaintainedbyaddingtwoextrafieldstoevery PyObject .
Totalallocationsaretrackedaswell. Uponexit,allexistingreferencesareprinted. (Ininteractivemodethishappens
aftereverystatementrunbytheinterpreter.)
Pleasereferto Misc/SpecialBuilds.txt inthePythonsourcedistributionformoredetailedinformation.
12 Chapter 1. Introduction
CHAPTER
TWO
C API STABILITY
Unlessdocumentedotherwise,Python’sCAPIiscoveredbytheBackwardsCompatibilityPolicy, PEP 387. Most
changestoitaresource-compatible(typicallybyonlyaddingnewAPI).ChangingexistingAPIorremovingAPIis
onlydoneafteradeprecationperiodortofixseriousissues.
CPython’sApplicationBinaryInterface(ABI)isforward-andbackwards-compatibleacrossaminorrelease(ifthese
arecompiledthesameway;see Platform Considerations below). So,codecompiledforPython3.10.0willworkon
3.10.8andviceversa,butwillneedtobecompiledseparatelyfor3.9.xand3.11.x.
TherearetwotiersofCAPIwithdifferentstabilityexpectations:
•Unstable API ,maychangeinminorversionswithoutadeprecationperiod. Itismarkedbythe PyUnstable
prefixinnames.
•Limited API ,iscompatibleacrossseveralminorreleases. When Py_LIMITED_API isdefined,onlythissubset
isexposedfrom Python.h .
Thesearediscussedinmoredetailbelow.
Names prefixed by an underscore, such as _Py_InternalState , are private API that can change without notice
eveninpatchreleases. IfyouneedtousethisAPI,considerreachingoutto CPythondevelopers todiscussadding
publicAPIforyourusecase.
2.1Unstable C API
Any API named with the PyUnstable prefix exposes CPython implementation details, and may change in every
minor release (e.g. from 3.9 to 3.10) without any deprecation warnings. However, it will not change in a bugfix
release(e.g. from3.10.0to3.10.1).
Itisgenerallyintendedforspecialized,low-leveltoolslikedebuggers.
ProjectsthatusethisAPIareexpectedtofollowCPythondevelopmentandspendextraeffortadjustingtochanges.
2.2Stable Application Binary Interface
Forsimplicity,thisdocumenttalksabout extensions,buttheLimitedAPIandStableABIworkthesamewayforall
usesoftheAPI–forexample,embeddingPython.
2.2.1Limited C API
Python3.2introducedthe Limited API ,asubsetofPython’sCAPI.ExtensionsthatonlyusetheLimitedAPIcanbe
compiledonceandworkwithmultipleversionsofPython. ContentsoftheLimitedAPIare listed below .
Py_LIMITED_API
Definethismacrobeforeincluding Python.h tooptintoonlyusetheLimitedAPI,andtoselecttheLimited
APIversion.
Define Py_LIMITED_API tothevalueof PY_VERSION_HEX correspondingtothelowestPythonversionyour
extensionsupports. TheextensionwillworkwithoutrecompilationwithallPython3releasesfromthespecified
oneonward,andcanuseLimitedAPIintroduceduptothatversion.
13
The Python/C API, Release 3.13.0
Rather than using the PY_VERSION_HEX macro directly, hardcode a minimum minor version (e.g.
0x030A0000 forPython3.10)forstabilitywhencompilingwithfuturePythonversions.
Youcanalsodefine Py_LIMITED_API to3. Thisworksthesameas 0x03020000 (Python3.2, theversion
thatintroducedLimitedAPI).
2.2.2Stable ABI
Toenablethis,Pythonprovidesa Stable ABI:asetofsymbolsthatwillremaincompatibleacrossPython3.xversions.
TheStableABIcontainssymbolsexposedinthe Limited API ,butalsootherones–forexample,functionsnecessary
tosupportolderversionsoftheLimitedAPI.
OnWindows,extensionsthatusetheStableABIshouldbelinkedagainst python3.dll ratherthanaversion-specific
librarysuchas python39.dll .
On some platforms, Python will look for and load shared library files named with the abi3tag (e.g. mymodule.
abi3.so). ItdoesnotcheckifsuchextensionsconformtoaStableABI.Theuser(ortheirpackagingtools)needto
ensurethat,forexample,extensionsbuiltwiththe3.10+LimitedAPIarenotinstalledforlowerversionsofPython.
AllfunctionsintheStableABIarepresentasfunctionsinPython’ssharedlibrary,notsolelyasmacros. Thismakes
themusablefromlanguagesthatdon’tusetheCpreprocessor.
2.2.3Limited API Scope and Performance
ThegoalfortheLimitedAPIistoalloweverythingthatispossiblewiththefullCAPI,butpossiblywithaperfor-
mancepenalty.
Forexample,while PyList_GetItem() isavailable,its“unsafe”macrovariant PyList_GET_ITEM() isnot. The
macrocanbefasterbecauseitcanrelyonversion-specificimplementationdetailsofthelistobject.
Without Py_LIMITED_API defined, some C API functions are inlined or replaced by macros. Defining
Py_LIMITED_API disables this inlining, allowing stability as Python’s data structures are improved, but possibly
reducingperformance.
By leaving out the Py_LIMITED_API definition, it is possible to compile a Limited API extension with a version-
specific ABI. This can improve performance for that Python version, but will limit compatibility. Compiling with
Py_LIMITED_API willthenyieldanextensionthatcanbedistributedwhereaversion-specificoneisnotavailable
–forexample,forprereleasesofanupcomingPythonversion.
2.2.4Limited API Caveats
Notethatcompilingwith Py_LIMITED_API isnotacompleteguaranteethatcodeconformstothe Limited API or
theStable ABI.Py_LIMITED_API only covers definitions, but an API also includes other issues, such as expected
semantics.
One issue that Py_LIMITED_API does not guard against is calling a function with arguments that are invalid in a
lowerPythonversion. Forexample,considerafunctionthatstartsaccepting NULLforanargument. InPython3.9,
NULLnowselectsadefaultbehavior,butinPython3.8,theargumentwillbeuseddirectly,causinga NULLdereference
andcrash. Asimilarargumentworksforfieldsofstructs.
Another issue is that some struct fields are currently not hidden when Py_LIMITED_API is defined, even though
they’repartoftheLimitedAPI.
Forthesereasons,werecommendtestinganextensionwith allminorPythonversionsitsupports,andpreferablyto
buildwiththe lowestsuchversion.
WealsorecommendreviewingdocumentationofallusedAPItocheckifitisexplicitlypartoftheLimitedAPI.Even
withPy_LIMITED_API defined,afewprivatedeclarationsareexposedfortechnicalreasons(orevenunintentionally,
asbugs).
AlsonotethattheLimitedAPIisnotnecessarilystable: compilingwith Py_LIMITED_API withPython3.8means
thattheextensionwillrunwithPython3.12,butitwillnotnecessarily compilewithPython3.12. Inparticular,parts
oftheLimitedAPImaybedeprecatedandremoved,providedthattheStableABIstaysstable.
14 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
2.3Platform Considerations
ABIstabilitydependsnotonlyonPython,butalsoonthecompilerused,lower-levellibrariesandcompileroptions.
For the purposes of the Stable ABI , these details define a “platform”. They usually depend on the OS type and
processorarchitecture
It is the responsibility of each particular distributor of Python to ensure that all Python versions on a particular
platformarebuiltinawaythatdoesnotbreaktheStableABI.ThisisthecasewithWindowsandmacOSreleases
from python.org andmanythird-partydistributors.
2.4Contents of Limited API
Currently,the Limited API includesthefollowingitems:
•PY_VECTORCALL_ARGUMENTS_OFFSET
•PyAIter_Check()
•PyArg_Parse()
•PyArg_ParseTuple()
•PyArg_ParseTupleAndKeywords()
•PyArg_UnpackTuple()
•PyArg_VaParse()
•PyArg_VaParseTupleAndKeywords()
•PyArg_ValidateKeywordArguments()
•PyBaseObject_Type
•PyBool_FromLong()
•PyBool_Type
•PyBuffer_FillContiguousStrides()
•PyBuffer_FillInfo()
•PyBuffer_FromContiguous()
•PyBuffer_GetPointer()
•PyBuffer_IsContiguous()
•PyBuffer_Release()
•PyBuffer_SizeFromFormat()
•PyBuffer_ToContiguous()
•PyByteArrayIter_Type
•PyByteArray_AsString()
•PyByteArray_Concat()
•PyByteArray_FromObject()
•PyByteArray_FromStringAndSize()
•PyByteArray_Resize()
•PyByteArray_Size()
•PyByteArray_Type
•PyBytesIter_Type
2.3. Platform Considerations 15
The Python/C API, Release 3.13.0
•PyBytes_AsString()
•PyBytes_AsStringAndSize()
•PyBytes_Concat()
•PyBytes_ConcatAndDel()
•PyBytes_DecodeEscape()
•PyBytes_FromFormat()
•PyBytes_FromFormatV()
•PyBytes_FromObject()
•PyBytes_FromString()
•PyBytes_FromStringAndSize()
•PyBytes_Repr()
•PyBytes_Size()
•PyBytes_Type
•PyCFunction
•PyCFunctionFast
•PyCFunctionFastWithKeywords
•PyCFunctionWithKeywords
•PyCFunction_GetFlags()
•PyCFunction_GetFunction()
•PyCFunction_GetSelf()
•PyCFunction_New()
•PyCFunction_NewEx()
•PyCFunction_Type
•PyCMethod_New()
•PyCallIter_New()
•PyCallIter_Type
•PyCallable_Check()
•PyCapsule_Destructor
•PyCapsule_GetContext()
•PyCapsule_GetDestructor()
•PyCapsule_GetName()
•PyCapsule_GetPointer()
•PyCapsule_Import()
•PyCapsule_IsValid()
•PyCapsule_New()
•PyCapsule_SetContext()
•PyCapsule_SetDestructor()
•PyCapsule_SetName()
•PyCapsule_SetPointer()
16 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyCapsule_Type
•PyClassMethodDescr_Type
•PyCodec_BackslashReplaceErrors()
•PyCodec_Decode()
•PyCodec_Decoder()
•PyCodec_Encode()
•PyCodec_Encoder()
•PyCodec_IgnoreErrors()
•PyCodec_IncrementalDecoder()
•PyCodec_IncrementalEncoder()
•PyCodec_KnownEncoding()
•PyCodec_LookupError()
•PyCodec_NameReplaceErrors()
•PyCodec_Register()
•PyCodec_RegisterError()
•PyCodec_ReplaceErrors()
•PyCodec_StreamReader()
•PyCodec_StreamWriter()
•PyCodec_StrictErrors()
•PyCodec_Unregister()
•PyCodec_XMLCharRefReplaceErrors()
•PyComplex_FromDoubles()
•PyComplex_ImagAsDouble()
•PyComplex_RealAsDouble()
•PyComplex_Type
•PyDescr_NewClassMethod()
•PyDescr_NewGetSet()
•PyDescr_NewMember()
•PyDescr_NewMethod()
•PyDictItems_Type
•PyDictIterItem_Type
•PyDictIterKey_Type
•PyDictIterValue_Type
•PyDictKeys_Type
•PyDictProxy_New()
•PyDictProxy_Type
•PyDictRevIterItem_Type
•PyDictRevIterKey_Type
•PyDictRevIterValue_Type
2.4. Contents of Limited API 17
The Python/C API, Release 3.13.0
•PyDictValues_Type
•PyDict_Clear()
•PyDict_Contains()
•PyDict_Copy()
•PyDict_DelItem()
•PyDict_DelItemString()
•PyDict_GetItem()
•PyDict_GetItemRef()
•PyDict_GetItemString()
•PyDict_GetItemStringRef()
•PyDict_GetItemWithError()
•PyDict_Items()
•PyDict_Keys()
•PyDict_Merge()
•PyDict_MergeFromSeq2()
•PyDict_New()
•PyDict_Next()
•PyDict_SetItem()
•PyDict_SetItemString()
•PyDict_Size()
•PyDict_Type
•PyDict_Update()
•PyDict_Values()
•PyEllipsis_Type
•PyEnum_Type
•PyErr_BadArgument()
•PyErr_BadInternalCall()
•PyErr_CheckSignals()
•PyErr_Clear()
•PyErr_Display()
•PyErr_DisplayException()
•PyErr_ExceptionMatches()
•PyErr_Fetch()
•PyErr_Format()
•PyErr_FormatV()
•PyErr_GetExcInfo()
•PyErr_GetHandledException()
•PyErr_GetRaisedException()
•PyErr_GivenExceptionMatches()
18 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyErr_NewException()
•PyErr_NewExceptionWithDoc()
•PyErr_NoMemory()
•PyErr_NormalizeException()
•PyErr_Occurred()
•PyErr_Print()
•PyErr_PrintEx()
•PyErr_ProgramText()
•PyErr_ResourceWarning()
•PyErr_Restore()
•PyErr_SetExcFromWindowsErr()
•PyErr_SetExcFromWindowsErrWithFilename()
•PyErr_SetExcFromWindowsErrWithFilenameObject()
•PyErr_SetExcFromWindowsErrWithFilenameObjects()
•PyErr_SetExcInfo()
•PyErr_SetFromErrno()
•PyErr_SetFromErrnoWithFilename()
•PyErr_SetFromErrnoWithFilenameObject()
•PyErr_SetFromErrnoWithFilenameObjects()
•PyErr_SetFromWindowsErr()
•PyErr_SetFromWindowsErrWithFilename()
•PyErr_SetHandledException()
•PyErr_SetImportError()
•PyErr_SetImportErrorSubclass()
•PyErr_SetInterrupt()
•PyErr_SetInterruptEx()
•PyErr_SetNone()
•PyErr_SetObject()
•PyErr_SetRaisedException()
•PyErr_SetString()
•PyErr_SyntaxLocation()
•PyErr_SyntaxLocationEx()
•PyErr_WarnEx()
•PyErr_WarnExplicit()
•PyErr_WarnFormat()
•PyErr_WriteUnraisable()
•PyEval_AcquireThread()
•PyEval_EvalCode()
•PyEval_EvalCodeEx()
2.4. Contents of Limited API 19
The Python/C API, Release 3.13.0
•PyEval_EvalFrame()
•PyEval_EvalFrameEx()
•PyEval_GetBuiltins()
•PyEval_GetFrame()
•PyEval_GetFrameBuiltins()
•PyEval_GetFrameGlobals()
•PyEval_GetFrameLocals()
•PyEval_GetFuncDesc()
•PyEval_GetFuncName()
•PyEval_GetGlobals()
•PyEval_GetLocals()
•PyEval_InitThreads()
•PyEval_ReleaseThread()
•PyEval_RestoreThread()
•PyEval_SaveThread()
•PyExc_ArithmeticError
•PyExc_AssertionError
•PyExc_AttributeError
•PyExc_BaseException
•PyExc_BaseExceptionGroup
•PyExc_BlockingIOError
•PyExc_BrokenPipeError
•PyExc_BufferError
•PyExc_BytesWarning
•PyExc_ChildProcessError
•PyExc_ConnectionAbortedError
•PyExc_ConnectionError
•PyExc_ConnectionRefusedError
•PyExc_ConnectionResetError
•PyExc_DeprecationWarning
•PyExc_EOFError
•PyExc_EncodingWarning
•PyExc_EnvironmentError
•PyExc_Exception
•PyExc_FileExistsError
•PyExc_FileNotFoundError
•PyExc_FloatingPointError
•PyExc_FutureWarning
•PyExc_GeneratorExit
20 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyExc_IOError
•PyExc_ImportError
•PyExc_ImportWarning
•PyExc_IndentationError
•PyExc_IndexError
•PyExc_InterruptedError
•PyExc_IsADirectoryError
•PyExc_KeyError
•PyExc_KeyboardInterrupt
•PyExc_LookupError
•PyExc_MemoryError
•PyExc_ModuleNotFoundError
•PyExc_NameError
•PyExc_NotADirectoryError
•PyExc_NotImplementedError
•PyExc_OSError
•PyExc_OverflowError
•PyExc_PendingDeprecationWarning
•PyExc_PermissionError
•PyExc_ProcessLookupError
•PyExc_RecursionError
•PyExc_ReferenceError
•PyExc_ResourceWarning
•PyExc_RuntimeError
•PyExc_RuntimeWarning
•PyExc_StopAsyncIteration
•PyExc_StopIteration
•PyExc_SyntaxError
•PyExc_SyntaxWarning
•PyExc_SystemError
•PyExc_SystemExit
•PyExc_TabError
•PyExc_TimeoutError
•PyExc_TypeError
•PyExc_UnboundLocalError
•PyExc_UnicodeDecodeError
•PyExc_UnicodeEncodeError
•PyExc_UnicodeError
•PyExc_UnicodeTranslateError
2.4. Contents of Limited API 21
The Python/C API, Release 3.13.0
•PyExc_UnicodeWarning
•PyExc_UserWarning
•PyExc_ValueError
•PyExc_Warning
•PyExc_WindowsError
•PyExc_ZeroDivisionError
•PyExceptionClass_Name()
•PyException_GetArgs()
•PyException_GetCause()
•PyException_GetContext()
•PyException_GetTraceback()
•PyException_SetArgs()
•PyException_SetCause()
•PyException_SetContext()
•PyException_SetTraceback()
•PyFile_FromFd()
•PyFile_GetLine()
•PyFile_WriteObject()
•PyFile_WriteString()
•PyFilter_Type
•PyFloat_AsDouble()
•PyFloat_FromDouble()
•PyFloat_FromString()
•PyFloat_GetInfo()
•PyFloat_GetMax()
•PyFloat_GetMin()
•PyFloat_Type
•PyFrameObject
•PyFrame_GetCode()
•PyFrame_GetLineNumber()
•PyFrozenSet_New()
•PyFrozenSet_Type
•PyGC_Collect()
•PyGC_Disable()
•PyGC_Enable()
•PyGC_IsEnabled()
•PyGILState_Ensure()
•PyGILState_GetThisThreadState()
•PyGILState_Release()
22 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyGILState_STATE
•PyGetSetDef
•PyGetSetDescr_Type
•PyImport_AddModule()
•PyImport_AddModuleObject()
•PyImport_AddModuleRef()
•PyImport_AppendInittab()
•PyImport_ExecCodeModule()
•PyImport_ExecCodeModuleEx()
•PyImport_ExecCodeModuleObject()
•PyImport_ExecCodeModuleWithPathnames()
•PyImport_GetImporter()
•PyImport_GetMagicNumber()
•PyImport_GetMagicTag()
•PyImport_GetModule()
•PyImport_GetModuleDict()
•PyImport_Import()
•PyImport_ImportFrozenModule()
•PyImport_ImportFrozenModuleObject()
•PyImport_ImportModule()
•PyImport_ImportModuleLevel()
•PyImport_ImportModuleLevelObject()
•PyImport_ImportModuleNoBlock()
•PyImport_ReloadModule()
•PyIndex_Check()
•PyInterpreterState
•PyInterpreterState_Clear()
•PyInterpreterState_Delete()
•PyInterpreterState_Get()
•PyInterpreterState_GetDict()
•PyInterpreterState_GetID()
•PyInterpreterState_New()
•PyIter_Check()
•PyIter_Next()
•PyIter_Send()
•PyListIter_Type
•PyListRevIter_Type
•PyList_Append()
•PyList_AsTuple()
2.4. Contents of Limited API 23
The Python/C API, Release 3.13.0
•PyList_GetItem()
•PyList_GetItemRef()
•PyList_GetSlice()
•PyList_Insert()
•PyList_New()
•PyList_Reverse()
•PyList_SetItem()
•PyList_SetSlice()
•PyList_Size()
•PyList_Sort()
•PyList_Type
•PyLongObject
•PyLongRangeIter_Type
•PyLong_AsDouble()
•PyLong_AsInt()
•PyLong_AsLong()
•PyLong_AsLongAndOverflow()
•PyLong_AsLongLong()
•PyLong_AsLongLongAndOverflow()
•PyLong_AsSize_t()
•PyLong_AsSsize_t()
•PyLong_AsUnsignedLong()
•PyLong_AsUnsignedLongLong()
•PyLong_AsUnsignedLongLongMask()
•PyLong_AsUnsignedLongMask()
•PyLong_AsVoidPtr()
•PyLong_FromDouble()
•PyLong_FromLong()
•PyLong_FromLongLong()
•PyLong_FromSize_t()
•PyLong_FromSsize_t()
•PyLong_FromString()
•PyLong_FromUnsignedLong()
•PyLong_FromUnsignedLongLong()
•PyLong_FromVoidPtr()
•PyLong_GetInfo()
•PyLong_Type
•PyMap_Type
•PyMapping_Check()
24 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyMapping_GetItemString()
•PyMapping_GetOptionalItem()
•PyMapping_GetOptionalItemString()
•PyMapping_HasKey()
•PyMapping_HasKeyString()
•PyMapping_HasKeyStringWithError()
•PyMapping_HasKeyWithError()
•PyMapping_Items()
•PyMapping_Keys()
•PyMapping_Length()
•PyMapping_SetItemString()
•PyMapping_Size()
•PyMapping_Values()
•PyMem_Calloc()
•PyMem_Free()
•PyMem_Malloc()
•PyMem_RawCalloc()
•PyMem_RawFree()
•PyMem_RawMalloc()
•PyMem_RawRealloc()
•PyMem_Realloc()
•PyMemberDef
•PyMemberDescr_Type
•PyMember_GetOne()
•PyMember_SetOne()
•PyMemoryView_FromBuffer()
•PyMemoryView_FromMemory()
•PyMemoryView_FromObject()
•PyMemoryView_GetContiguous()
•PyMemoryView_Type
•PyMethodDef
•PyMethodDescr_Type
•PyModuleDef
•PyModuleDef_Base
•PyModuleDef_Init()
•PyModuleDef_Type
•PyModule_Add()
•PyModule_AddFunctions()
•PyModule_AddIntConstant()
2.4. Contents of Limited API 25
The Python/C API, Release 3.13.0
•PyModule_AddObject()
•PyModule_AddObjectRef()
•PyModule_AddStringConstant()
•PyModule_AddType()
•PyModule_Create2()
•PyModule_ExecDef()
•PyModule_FromDefAndSpec2()
•PyModule_GetDef()
•PyModule_GetDict()
•PyModule_GetFilename()
•PyModule_GetFilenameObject()
•PyModule_GetName()
•PyModule_GetNameObject()
•PyModule_GetState()
•PyModule_New()
•PyModule_NewObject()
•PyModule_SetDocString()
•PyModule_Type
•PyNumber_Absolute()
•PyNumber_Add()
•PyNumber_And()
•PyNumber_AsSsize_t()
•PyNumber_Check()
•PyNumber_Divmod()
•PyNumber_Float()
•PyNumber_FloorDivide()
•PyNumber_InPlaceAdd()
•PyNumber_InPlaceAnd()
•PyNumber_InPlaceFloorDivide()
•PyNumber_InPlaceLshift()
•PyNumber_InPlaceMatrixMultiply()
•PyNumber_InPlaceMultiply()
•PyNumber_InPlaceOr()
•PyNumber_InPlacePower()
•PyNumber_InPlaceRemainder()
•PyNumber_InPlaceRshift()
•PyNumber_InPlaceSubtract()
•PyNumber_InPlaceTrueDivide()
•PyNumber_InPlaceXor()
26 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyNumber_Index()
•PyNumber_Invert()
•PyNumber_Long()
•PyNumber_Lshift()
•PyNumber_MatrixMultiply()
•PyNumber_Multiply()
•PyNumber_Negative()
•PyNumber_Or()
•PyNumber_Positive()
•PyNumber_Power()
•PyNumber_Remainder()
•PyNumber_Rshift()
•PyNumber_Subtract()
•PyNumber_ToBase()
•PyNumber_TrueDivide()
•PyNumber_Xor()
•PyOS_AfterFork()
•PyOS_AfterFork_Child()
•PyOS_AfterFork_Parent()
•PyOS_BeforeFork()
•PyOS_CheckStack()
•PyOS_FSPath()
•PyOS_InputHook
•PyOS_InterruptOccurred()
•PyOS_double_to_string()
•PyOS_getsig()
•PyOS_mystricmp()
•PyOS_mystrnicmp()
•PyOS_setsig()
•PyOS_sighandler_t
•PyOS_snprintf()
•PyOS_string_to_double()
•PyOS_strtol()
•PyOS_strtoul()
•PyOS_vsnprintf()
•PyObject
•PyObject.ob_refcnt
•PyObject.ob_type
•PyObject_ASCII()
2.4. Contents of Limited API 27
The Python/C API, Release 3.13.0
•PyObject_AsFileDescriptor()
•PyObject_Bytes()
•PyObject_Call()
•PyObject_CallFunction()
•PyObject_CallFunctionObjArgs()
•PyObject_CallMethod()
•PyObject_CallMethodObjArgs()
•PyObject_CallNoArgs()
•PyObject_CallObject()
•PyObject_Calloc()
•PyObject_CheckBuffer()
•PyObject_ClearWeakRefs()
•PyObject_CopyData()
•PyObject_DelAttr()
•PyObject_DelAttrString()
•PyObject_DelItem()
•PyObject_DelItemString()
•PyObject_Dir()
•PyObject_Format()
•PyObject_Free()
•PyObject_GC_Del()
•PyObject_GC_IsFinalized()
•PyObject_GC_IsTracked()
•PyObject_GC_Track()
•PyObject_GC_UnTrack()
•PyObject_GenericGetAttr()
•PyObject_GenericGetDict()
•PyObject_GenericSetAttr()
•PyObject_GenericSetDict()
•PyObject_GetAIter()
•PyObject_GetAttr()
•PyObject_GetAttrString()
•PyObject_GetBuffer()
•PyObject_GetItem()
•PyObject_GetIter()
•PyObject_GetOptionalAttr()
•PyObject_GetOptionalAttrString()
•PyObject_GetTypeData()
•PyObject_HasAttr()
28 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyObject_HasAttrString()
•PyObject_HasAttrStringWithError()
•PyObject_HasAttrWithError()
•PyObject_Hash()
•PyObject_HashNotImplemented()
•PyObject_Init()
•PyObject_InitVar()
•PyObject_IsInstance()
•PyObject_IsSubclass()
•PyObject_IsTrue()
•PyObject_Length()
•PyObject_Malloc()
•PyObject_Not()
•PyObject_Realloc()
•PyObject_Repr()
•PyObject_RichCompare()
•PyObject_RichCompareBool()
•PyObject_SelfIter()
•PyObject_SetAttr()
•PyObject_SetAttrString()
•PyObject_SetItem()
•PyObject_Size()
•PyObject_Str()
•PyObject_Type()
•PyObject_Vectorcall()
•PyObject_VectorcallMethod()
•PyProperty_Type
•PyRangeIter_Type
•PyRange_Type
•PyReversed_Type
•PySeqIter_New()
•PySeqIter_Type
•PySequence_Check()
•PySequence_Concat()
•PySequence_Contains()
•PySequence_Count()
•PySequence_DelItem()
•PySequence_DelSlice()
•PySequence_Fast()
2.4. Contents of Limited API 29
The Python/C API, Release 3.13.0
•PySequence_GetItem()
•PySequence_GetSlice()
•PySequence_In()
•PySequence_InPlaceConcat()
•PySequence_InPlaceRepeat()
•PySequence_Index()
•PySequence_Length()
•PySequence_List()
•PySequence_Repeat()
•PySequence_SetItem()
•PySequence_SetSlice()
•PySequence_Size()
•PySequence_Tuple()
•PySetIter_Type
•PySet_Add()
•PySet_Clear()
•PySet_Contains()
•PySet_Discard()
•PySet_New()
•PySet_Pop()
•PySet_Size()
•PySet_Type
•PySlice_AdjustIndices()
•PySlice_GetIndices()
•PySlice_GetIndicesEx()
•PySlice_New()
•PySlice_Type
•PySlice_Unpack()
•PyState_AddModule()
•PyState_FindModule()
•PyState_RemoveModule()
•PyStructSequence_Desc
•PyStructSequence_Field
•PyStructSequence_GetItem()
•PyStructSequence_New()
•PyStructSequence_NewType()
•PyStructSequence_SetItem()
•PyStructSequence_UnnamedField
•PySuper_Type
30 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PySys_Audit()
•PySys_AuditTuple()
•PySys_FormatStderr()
•PySys_FormatStdout()
•PySys_GetObject()
•PySys_GetXOptions()
•PySys_ResetWarnOptions()
•PySys_SetArgv()
•PySys_SetArgvEx()
•PySys_SetObject()
•PySys_WriteStderr()
•PySys_WriteStdout()
•PyThreadState
•PyThreadState_Clear()
•PyThreadState_Delete()
•PyThreadState_Get()
•PyThreadState_GetDict()
•PyThreadState_GetFrame()
•PyThreadState_GetID()
•PyThreadState_GetInterpreter()
•PyThreadState_New()
•PyThreadState_SetAsyncExc()
•PyThreadState_Swap()
•PyThread_GetInfo()
•PyThread_ReInitTLS()
•PyThread_acquire_lock()
•PyThread_acquire_lock_timed()
•PyThread_allocate_lock()
•PyThread_create_key()
•PyThread_delete_key()
•PyThread_delete_key_value()
•PyThread_exit_thread()
•PyThread_free_lock()
•PyThread_get_key_value()
•PyThread_get_stacksize()
•PyThread_get_thread_ident()
•PyThread_get_thread_native_id()
•PyThread_init_thread()
•PyThread_release_lock()
2.4. Contents of Limited API 31
The Python/C API, Release 3.13.0
•PyThread_set_key_value()
•PyThread_set_stacksize()
•PyThread_start_new_thread()
•PyThread_tss_alloc()
•PyThread_tss_create()
•PyThread_tss_delete()
•PyThread_tss_free()
•PyThread_tss_get()
•PyThread_tss_is_created()
•PyThread_tss_set()
•PyTraceBack_Here()
•PyTraceBack_Print()
•PyTraceBack_Type
•PyTupleIter_Type
•PyTuple_GetItem()
•PyTuple_GetSlice()
•PyTuple_New()
•PyTuple_Pack()
•PyTuple_SetItem()
•PyTuple_Size()
•PyTuple_Type
•PyTypeObject
•PyType_ClearCache()
•PyType_FromMetaclass()
•PyType_FromModuleAndSpec()
•PyType_FromSpec()
•PyType_FromSpecWithBases()
•PyType_GenericAlloc()
•PyType_GenericNew()
•PyType_GetFlags()
•PyType_GetFullyQualifiedName()
•PyType_GetModule()
•PyType_GetModuleByDef()
•PyType_GetModuleName()
•PyType_GetModuleState()
•PyType_GetName()
•PyType_GetQualName()
•PyType_GetSlot()
•PyType_GetTypeDataSize()
32 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyType_IsSubtype()
•PyType_Modified()
•PyType_Ready()
•PyType_Slot
•PyType_Spec
•PyType_Type
•PyUnicodeDecodeError_Create()
•PyUnicodeDecodeError_GetEncoding()
•PyUnicodeDecodeError_GetEnd()
•PyUnicodeDecodeError_GetObject()
•PyUnicodeDecodeError_GetReason()
•PyUnicodeDecodeError_GetStart()
•PyUnicodeDecodeError_SetEnd()
•PyUnicodeDecodeError_SetReason()
•PyUnicodeDecodeError_SetStart()
•PyUnicodeEncodeError_GetEncoding()
•PyUnicodeEncodeError_GetEnd()
•PyUnicodeEncodeError_GetObject()
•PyUnicodeEncodeError_GetReason()
•PyUnicodeEncodeError_GetStart()
•PyUnicodeEncodeError_SetEnd()
•PyUnicodeEncodeError_SetReason()
•PyUnicodeEncodeError_SetStart()
•PyUnicodeIter_Type
•PyUnicodeTranslateError_GetEnd()
•PyUnicodeTranslateError_GetObject()
•PyUnicodeTranslateError_GetReason()
•PyUnicodeTranslateError_GetStart()
•PyUnicodeTranslateError_SetEnd()
•PyUnicodeTranslateError_SetReason()
•PyUnicodeTranslateError_SetStart()
•PyUnicode_Append()
•PyUnicode_AppendAndDel()
•PyUnicode_AsASCIIString()
•PyUnicode_AsCharmapString()
•PyUnicode_AsDecodedObject()
•PyUnicode_AsDecodedUnicode()
•PyUnicode_AsEncodedObject()
•PyUnicode_AsEncodedString()
2.4. Contents of Limited API 33
The Python/C API, Release 3.13.0
•PyUnicode_AsEncodedUnicode()
•PyUnicode_AsLatin1String()
•PyUnicode_AsMBCSString()
•PyUnicode_AsRawUnicodeEscapeString()
•PyUnicode_AsUCS4()
•PyUnicode_AsUCS4Copy()
•PyUnicode_AsUTF16String()
•PyUnicode_AsUTF32String()
•PyUnicode_AsUTF8AndSize()
•PyUnicode_AsUTF8String()
•PyUnicode_AsUnicodeEscapeString()
•PyUnicode_AsWideChar()
•PyUnicode_AsWideCharString()
•PyUnicode_BuildEncodingMap()
•PyUnicode_Compare()
•PyUnicode_CompareWithASCIIString()
•PyUnicode_Concat()
•PyUnicode_Contains()
•PyUnicode_Count()
•PyUnicode_Decode()
•PyUnicode_DecodeASCII()
•PyUnicode_DecodeCharmap()
•PyUnicode_DecodeCodePageStateful()
•PyUnicode_DecodeFSDefault()
•PyUnicode_DecodeFSDefaultAndSize()
•PyUnicode_DecodeLatin1()
•PyUnicode_DecodeLocale()
•PyUnicode_DecodeLocaleAndSize()
•PyUnicode_DecodeMBCS()
•PyUnicode_DecodeMBCSStateful()
•PyUnicode_DecodeRawUnicodeEscape()
•PyUnicode_DecodeUTF16()
•PyUnicode_DecodeUTF16Stateful()
•PyUnicode_DecodeUTF32()
•PyUnicode_DecodeUTF32Stateful()
•PyUnicode_DecodeUTF7()
•PyUnicode_DecodeUTF7Stateful()
•PyUnicode_DecodeUTF8()
•PyUnicode_DecodeUTF8Stateful()
34 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•PyUnicode_DecodeUnicodeEscape()
•PyUnicode_EncodeCodePage()
•PyUnicode_EncodeFSDefault()
•PyUnicode_EncodeLocale()
•PyUnicode_EqualToUTF8()
•PyUnicode_EqualToUTF8AndSize()
•PyUnicode_FSConverter()
•PyUnicode_FSDecoder()
•PyUnicode_Find()
•PyUnicode_FindChar()
•PyUnicode_Format()
•PyUnicode_FromEncodedObject()
•PyUnicode_FromFormat()
•PyUnicode_FromFormatV()
•PyUnicode_FromObject()
•PyUnicode_FromOrdinal()
•PyUnicode_FromString()
•PyUnicode_FromStringAndSize()
•PyUnicode_FromWideChar()
•PyUnicode_GetDefaultEncoding()
•PyUnicode_GetLength()
•PyUnicode_InternFromString()
•PyUnicode_InternInPlace()
•PyUnicode_IsIdentifier()
•PyUnicode_Join()
•PyUnicode_Partition()
•PyUnicode_RPartition()
•PyUnicode_RSplit()
•PyUnicode_ReadChar()
•PyUnicode_Replace()
•PyUnicode_Resize()
•PyUnicode_RichCompare()
•PyUnicode_Split()
•PyUnicode_Splitlines()
•PyUnicode_Substring()
•PyUnicode_Tailmatch()
•PyUnicode_Translate()
•PyUnicode_Type
•PyUnicode_WriteChar()
2.4. Contents of Limited API 35
The Python/C API, Release 3.13.0
•PyVarObject
•PyVarObject.ob_base
•PyVarObject.ob_size
•PyVectorcall_Call()
•PyVectorcall_NARGS()
•PyWeakReference
•PyWeakref_GetObject()
•PyWeakref_GetRef()
•PyWeakref_NewProxy()
•PyWeakref_NewRef()
•PyWrapperDescr_Type
•PyWrapper_New()
•PyZip_Type
•Py_AddPendingCall()
•Py_AtExit()
•Py_BEGIN_ALLOW_THREADS
•Py_BLOCK_THREADS
•Py_BuildValue()
•Py_BytesMain()
•Py_CompileString()
•Py_DecRef()
•Py_DecodeLocale()
•Py_END_ALLOW_THREADS
•Py_EncodeLocale()
•Py_EndInterpreter()
•Py_EnterRecursiveCall()
•Py_Exit()
•Py_FatalError()
•Py_FileSystemDefaultEncodeErrors
•Py_FileSystemDefaultEncoding
•Py_Finalize()
•Py_FinalizeEx()
•Py_GenericAlias()
•Py_GenericAliasType
•Py_GetBuildInfo()
•Py_GetCompiler()
•Py_GetConstant()
•Py_GetConstantBorrowed()
•Py_GetCopyright()
36 Chapter 2. C API Stability
The Python/C API, Release 3.13.0
•Py_GetExecPrefix()
•Py_GetPath()
•Py_GetPlatform()
•Py_GetPrefix()
•Py_GetProgramFullPath()
•Py_GetProgramName()
•Py_GetPythonHome()
•Py_GetRecursionLimit()
•Py_GetVersion()
•Py_HasFileSystemDefaultEncoding
•Py_IncRef()
•Py_Initialize()
•Py_InitializeEx()
•Py_Is()
•Py_IsFalse()
•Py_IsFinalizing()
•Py_IsInitialized()
•Py_IsNone()
•Py_IsTrue()
•Py_LeaveRecursiveCall()
•Py_Main()
•Py_MakePendingCalls()
•Py_NewInterpreter()
•Py_NewRef()
•Py_ReprEnter()
•Py_ReprLeave()
•Py_SetProgramName()
•Py_SetPythonHome()
•Py_SetRecursionLimit()
•Py_UCS4
•Py_UNBLOCK_THREADS
•Py_UTF8Mode
•Py_VaBuildValue()
•Py_Version
•Py_XNewRef()
•Py_buffer
•Py_intptr_t
•Py_ssize_t
•Py_uintptr_t
2.4. Contents of Limited API 37
The Python/C API, Release 3.13.0
•allocfunc
•binaryfunc
•descrgetfunc
•descrsetfunc
•destructor
•getattrfunc
•getattrofunc
•getbufferproc
•getiterfunc
•getter
•hashfunc
•initproc
•inquiry
•iternextfunc
•lenfunc
•newfunc
•objobjargproc
•objobjproc
•releasebufferproc
•reprfunc
•richcmpfunc
•setattrfunc
•setattrofunc
•setter
•ssizeargfunc
•ssizeobjargproc
•ssizessizeargfunc
•ssizessizeobjargproc
•symtable
•ternaryfunc
•traverseproc
•unaryfunc
•vectorcallfunc
•visitproc
38 Chapter 2. C API Stability
CHAPTER
THREE
THE VERY HIGH LEVEL LAYER
ThefunctionsinthischapterwillletyouexecutePythonsourcecodegiveninafileorabuffer,buttheywillnotlet
youinteractinamoredetailedwaywiththeinterpreter.
Severalofthesefunctionsacceptastartsymbolfromthegrammarasaparameter. Theavailablestartsymbolsare
Py_eval_input ,Py_file_input ,and Py_single_input . Thesearedescribedfollowingthefunctionswhich
acceptthemasparameters.
Note also that several of these functions take FILE*parameters. One particular issue which needs to be handled
carefully is that the FILEstructure for different C libraries can be different and incompatible. Under Windows (at
least),itispossiblefordynamicallylinkedextensionstoactuallyusedifferentlibraries,socareshouldbetakenthat
FILE*parametersareonlypassedto thesefunctionsifitiscertainthattheywerecreatedbythesamelibrarythat
thePythonruntimeisusing.
intPyRun_AnyFile (FILE*fp,constchar*filename )
This is a simplified interface to PyRun_AnyFileExFlags() below, leaving closeitset to 0andflagsset to
NULL.
intPyRun_AnyFileFlags (FILE*fp,constchar*filename, PyCompilerFlags *flags )
Thisisasimplifiedinterfaceto PyRun_AnyFileExFlags() below,leavingthe closeitargumentsetto 0.
intPyRun_AnyFileEx (FILE*fp,constchar*filename,intcloseit )
Thisisasimplifiedinterfaceto PyRun_AnyFileExFlags() below,leavingthe flagsargumentsetto NULL.
intPyRun_AnyFileExFlags (FILE*fp,constchar*filename,intcloseit, PyCompilerFlags *flags )
Iffpreferstoafileassociatedwithaninteractivedevice(consoleorterminalinputorUnixpseudo-terminal),
return the value of PyRun_InteractiveLoop() , otherwise return the result of PyRun_SimpleFile() .
filenameis decoded from the filesystem encoding ( sys.getfilesystemencoding() ). If filename
isNULL, this function uses "???"as the filename. If closeitis true, the file is closed before
PyRun_SimpleFileExFlags() returns.
intPyRun_SimpleString (constchar*command )
This is a simplified interface to PyRun_SimpleStringFlags() below, leaving the PyCompilerFlags *
argumentsetto NULL.
intPyRun_SimpleStringFlags (constchar*command, PyCompilerFlags *flags )
ExecutesthePythonsourcecodefrom commandinthe __main__ moduleaccordingto the flagsargument.
If__main__ does not already exist, it is created. Returns 0on success or -1if an exception was raised. If
therewasanerror,thereisnowaytogettheexceptioninformation. Forthemeaningof flags,seebelow.
Note that if an otherwise unhandled SystemExit is raised, this function will not return -1, but exit the
process,aslongas PyConfig.inspect iszero.
intPyRun_SimpleFile (FILE*fp,constchar*filename )
Thisisasimplifiedinterfaceto PyRun_SimpleFileExFlags() below,leaving closeitsetto 0andflagsset
toNULL.
intPyRun_SimpleFileEx (FILE*fp,constchar*filename,intcloseit )
Thisisasimplifiedinterfaceto PyRun_SimpleFileExFlags() below,leaving flagssetto NULL.
39
The Python/C API, Release 3.13.0
intPyRun_SimpleFileExFlags (FILE*fp,constchar*filename,intcloseit, PyCompilerFlags *flags )
Similar to PyRun_SimpleStringFlags() , but the Python source code is read from fpinstead of an in-
memory string. filenameshould be the name of the file, it is decoded from filesystem encoding and error
handler. Ifcloseitistrue,thefileisclosedbefore PyRun_SimpleFileExFlags() returns.
®Note
OnWindows, fpshouldbeopenedasbinarymode(e.g. fopen(filename, "rb") ). Otherwise,Python
maynothandlescriptfilewithLFlineendingcorrectly.
intPyRun_InteractiveOne (FILE*fp,constchar*filename )
Thisisasimplifiedinterfaceto PyRun_InteractiveOneFlags() below,leaving flagssetto NULL.
intPyRun_InteractiveOneFlags (FILE*fp,constchar*filename, PyCompilerFlags *flags )
Read and execute a single statement from a file associated with an interactive device according to the flags
argument. Theuserwillbepromptedusing sys.ps1andsys.ps2.filenameisdecodedfromthe filesystem
encoding and error handler .
Returns 0whentheinputwasexecutedsuccessfully, -1iftherewasanexception,oranerrorcodefromthe
errcode.h includefiledistributedaspartofPythoniftherewasaparseerror. (Notethat errcode.h isnot
includedby Python.h ,somustbeincludedspecificallyifneeded.)
intPyRun_InteractiveLoop (FILE*fp,constchar*filename )
Thisisasimplifiedinterfaceto PyRun_InteractiveLoopFlags() below,leaving flagssetto NULL.
intPyRun_InteractiveLoopFlags (FILE*fp,constchar*filename, PyCompilerFlags *flags )
ReadandexecutestatementsfromafileassociatedwithaninteractivedeviceuntilEOFisreached. Theuser
willbepromptedusing sys.ps1andsys.ps2.filenameisdecodedfromthe filesystem encoding and error
handler. Returns 0atEOForanegativenumberuponfailure.
int(* PyOS_InputHook )(void)
Part of the StableABI .Canbesettopointtoafunctionwiththeprototype int func(void) . Thefunction
will be called when Python’s interpreter prompt is about to become idle and wait for user input from the
terminal. Thereturnvalueisignored. Overridingthishookcanbeusedtointegratetheinterpreter’sprompt
withothereventloops,asdoneinthe Modules/_tkinter.c inthePythonsourcecode.
Changedinversion3.12: Thisfunctionisonlycalledfromthe main interpreter .
char*(* PyOS_ReadlineFunctionPointer )(FILE*,FILE*,constchar*)
Canbesettopointtoafunctionwiththeprototype char *func(FILE *stdin, FILE *stdout, char
*prompt) ,overridingthedefaultfunctionusedtoreadasinglelineofinputattheinterpreter’sprompt. The
functionisexpectedtooutputthestring promptifit’snot NULL,andthenreadalineofinputfromtheprovided
standardinputfile,returningtheresultingstring. Forexample,The readline modulesetsthishooktoprovide
line-editingandtab-completionfeatures.
The result must be a string allocated by PyMem_RawMalloc() orPyMem_RawRealloc() , orNULLif an
erroroccurred.
Changedinversion3.4: Theresultmustbeallocatedby PyMem_RawMalloc() orPyMem_RawRealloc() ,
insteadofbeingallocatedby PyMem_Malloc() orPyMem_Realloc() .
Changedinversion3.12: Thisfunctionisonlycalledfromthe main interpreter .
PyObject*PyRun_String (constchar*str,intstart, PyObject*globals, PyObject*locals )
Return value: New reference. This is a simplified interface to PyRun_StringFlags() below, leaving flags
setto NULL.
PyObject*PyRun_StringFlags (constchar*str,intstart, PyObject*globals, PyObject*locals, PyCompilerFlags
*flags )
Return value: New reference. Execute Python source code from strin the context specified by the objects
globalsandlocalswith the compiler flags specified by flags.globalsmust be a dictionary; localscan be any
40 Chapter 3. The Very High Level Layer
The Python/C API, Release 3.13.0
objectthatimplementsthemappingprotocol. Theparameter startspecifiesthestarttokenthatshouldbeused
toparsethesourcecode.
ReturnstheresultofexecutingthecodeasaPythonobject,or NULLifanexceptionwasraised.
PyObject*PyRun_File (FILE*fp,constchar*filename,intstart, PyObject*globals, PyObject*locals )
Return value: New reference. Thisisasimplifiedinterfaceto PyRun_FileExFlags() below,leaving closeit
setto 0andflagssetto NULL.
PyObject*PyRun_FileEx (FILE*fp,constchar*filename,intstart, PyObject*globals, PyObject*locals,int
closeit )
Return value: New reference. This is a simplified interface to PyRun_FileExFlags() below, leaving flags
setto NULL.
PyObject*PyRun_FileFlags (FILE*fp,constchar*filename,intstart, PyObject*globals, PyObject*locals,
PyCompilerFlags *flags )
Return value: New reference. Thisisasimplifiedinterfaceto PyRun_FileExFlags() below,leaving closeit
setto 0.
PyObject*PyRun_FileExFlags (FILE*fp,constchar*filename,intstart, PyObject*globals, PyObject*locals,
intcloseit, PyCompilerFlags *flags )
Return value: New reference. Similar to PyRun_StringFlags() , but the Python source code is read from
fpinsteadofanin-memorystring. filenameshouldbe thenameofthefile, itisdecodedfromthe filesystem
encoding and error handler . Ifcloseitistrue,thefileisclosedbefore PyRun_FileExFlags() returns.
PyObject*Py_CompileString (constchar*str,constchar*filename,intstart )
Return value: New reference. Part of the Stable ABI .This is a simplified interface to
Py_CompileStringFlags() below,leaving flagssetto NULL.
PyObject*Py_CompileStringFlags (constchar*str,constchar*filename,intstart, PyCompilerFlags *flags )
Return value: New reference. This is a simplified interface to Py_CompileStringExFlags() below, with
optimizesetto -1.
PyObject*Py_CompileStringObject (constchar*str, PyObject*filename,intstart, PyCompilerFlags *flags,int
optimize )
Return value: New reference. Parse and compile the Python source code in str, returning the resulting code
object. The start token is given by start; this can be used to constrain the code which can be compiled and
shouldbe Py_eval_input ,Py_file_input , orPy_single_input . Thefilenamespecifiedby filename
isusedtoconstructthecodeobjectandmayappearintracebacksor SyntaxError exceptionmessages. This
returns NULLifthecodecannotbeparsedorcompiled.
The integer optimizespecifies the optimization level of the compiler; a value of -1selects the optimization
leveloftheinterpreterasgivenby -Ooptions. Explicitlevelsare 0(nooptimization; __debug__ istrue), 1
(assertsareremoved, __debug__ isfalse)or 2(docstringsareremovedtoo).
Addedinversion3.4.
PyObject*Py_CompileStringExFlags (constchar*str,constchar*filename,intstart, PyCompilerFlags *flags,
intoptimize )
Return value: New reference. Like Py_CompileStringObject() , butfilenameis a byte string decoded
fromthe filesystem encoding and error handler .
Addedinversion3.2.
PyObject*PyEval_EvalCode (PyObject*co,PyObject*globals, PyObject*locals )
Return value: New reference. Part of the StableABI .Thisisasimplifiedinterfaceto PyEval_EvalCodeEx() ,
withjustthecodeobject,andglobalandlocalvariables. Theotherargumentsaresetto NULL.
PyObject*PyEval_EvalCodeEx (PyObject*co,PyObject*globals, PyObject*locals, PyObject*const*args,int
argcount, PyObject*const*kws,intkwcount, PyObject*const*defs,int
defcount, PyObject*kwdefs, PyObject*closure )
Return value: New reference. Part of the Stable ABI .Evaluate a precompiled code object, given a particular
41
The Python/C API, Release 3.13.0
environmentforitsevaluation. Thisenvironmentconsistsofadictionaryofglobalvariables,amappingobject
oflocalvariables,arraysofarguments,keywordsanddefaults,adictionaryofdefaultvaluesfor keyword-only
argumentsandaclosuretupleofcells.
PyObject*PyEval_EvalFrame (PyFrameObject *f)
Return value: New reference. Part of the StableABI .Evaluateanexecutionframe. Thisisasimplifiedinterface
toPyEval_EvalFrameEx() ,forbackwardcompatibility.
PyObject*PyEval_EvalFrameEx (PyFrameObject *f,intthrowflag )
Return value: New reference. Part of the Stable ABI .This is the main, unvarnished function of Python in-
terpretation. The code object associated with the execution frame fis executed, interpreting bytecode and
executingcallsas needed. Theadditional throwflagparametercanmostlybe ignored-iftrue, thenitcauses
anexceptiontoimmediatelybethrown;thisisusedforthe throw()methodsofgeneratorobjects.
Changed in version 3.4: This function now includes a debug assertion to help ensure that it does not silently
discardanactiveexception.
intPyEval_MergeCompilerFlags (PyCompilerFlags *cf)
Thisfunctionchangestheflagsofthecurrentevaluationframe,andreturnstrueonsuccess,falseonfailure.
intPy_eval_input
ThestartsymbolfromthePythongrammarforisolatedexpressions;forusewith Py_CompileString() .
intPy_file_input
ThestartsymbolfromthePythongrammarforsequencesofstatementsasreadfromafileorothersource;for
use with Py_CompileString() . This is the symbol to use when compiling arbitrarily long Python source
code.
intPy_single_input
ThestartsymbolfromthePythongrammarforasinglestatement;forusewith Py_CompileString() . This
isthesymbolusedfortheinteractiveinterpreterloop.
struct PyCompilerFlags
This is the structure used to hold compiler flags. In cases where code is only being compiled, it is passed as
int flags ,andincaseswherecodeisbeingexecuted,itispassedas PyCompilerFlags *flags . Inthis
case, from __future__ import canmodify flags.
Whenever PyCompilerFlags *flags isNULL,cf_flags is treated as equal to 0, and any modification
dueto from __future__ import isdiscarded.
intcf_flags
Compilerflags.
intcf_feature_version
cf_feature_version istheminorPythonversion. Itshouldbeinitializedto PY_MINOR_VERSION .
Thefieldisignoredbydefault,itisusedifandonlyif PyCF_ONLY_AST flagissetin cf_flags .
Changedinversion3.8: Added cf_feature_version field.
intCO_FUTURE_DIVISION
Thisbitcanbesetin flagstocausedivisionoperator /tobeinterpretedas“truedivision”accordingto PEP
238.
42 Chapter 3. The Very High Level Layer
CHAPTER
FOUR
REFERENCE COUNTING
ThefunctionsandmacrosinthissectionareusedformanagingreferencecountsofPythonobjects.
Py_ssize_t Py_REFCNT (PyObject*o)
GetthereferencecountofthePythonobject o.
Notethatthereturnedvaluemaynotactuallyreflecthowmanyreferencestotheobjectareactuallyheld. For
example, someobjectsare immortalandhaveaveryhighrefcountthatdoesnotreflecttheactualnumberof
references. Consequently,donotrelyonthereturnedvaluetobeaccurate,otherthanavalueof0or1.
Usethe Py_SET_REFCNT() functiontosetanobjectreferencecount.
Changedinversion3.10: Py_REFCNT() ischangedtotheinlinestaticfunction.
Changedinversion3.11: Theparametertypeisnolonger const PyObject *.
voidPy_SET_REFCNT (PyObject*o,Py_ssize_t refcnt )
Settheobject oreferencecounterto refcnt.
OnPythonbuildwithFreeThreading,if refcntislargerthan UINT32_MAX ,theobjectismade immortal.
Thisfunctionhasnoeffecton immortalobjects.
Addedinversion3.9.
Changedinversion3.12: Immortalobjectsarenotmodified.
voidPy_INCREF (PyObject*o)
Indicatetakinganew strong reference toobject o,indicatingitisinuseandshouldnotbedestroyed.
Thisfunctionhasnoeffecton immortalobjects.
Thisfunctionisusuallyusedtoconverta borrowed reference toastrong reference in-place. The Py_NewRef()
functioncanbeusedtocreateanew strong reference .
Whendoneusingtheobject,releaseisbycalling Py_DECREF() .
Theobjectmustnotbe NULL;ifyouaren’tsurethatitisn’t NULL,use Py_XINCREF() .
Do not expect this function to actually modify oin any way. For at least some objects , this function has no
effect.
Changedinversion3.12: Immortalobjectsarenotmodified.
voidPy_XINCREF (PyObject*o)
Similarto Py_INCREF() ,buttheobject ocanbe NULL,inwhichcasethishasnoeffect.
Seealso Py_XNewRef() .
PyObject*Py_NewRef (PyObject*o)
Part of the StableABI since version 3.10. Createanew strong reference toanobject: call Py_INCREF() ono
andreturntheobject o.
Whenthe strong reference isnolongerneeded, Py_DECREF() shouldbecalledonittoreleasethereference.
Theobject omustnotbe NULL;use Py_XNewRef() ifocanbe NULL.
43
The Python/C API, Release 3.13.0
Forexample:
Py_INCREF(obj);
self ->attr =obj;
canbewrittenas:
self ->attr =Py_NewRef(obj);
Seealso Py_INCREF() .
Addedinversion3.10.
PyObject*Py_XNewRef (PyObject*o)
Part of the StableABI since version 3.10. Similarto Py_NewRef() ,buttheobject ocanbeNULL.
Iftheobject oisNULL,thefunctionjustreturns NULL.
Addedinversion3.10.
voidPy_DECREF (PyObject*o)
Releasea strong reference toobject o,indicatingthereferenceisnolongerused.
Thisfunctionhasnoeffecton immortalobjects.
Oncethelast strong reference isreleased(i.e. theobject’sreferencecountreaches0),theobject’stype’sdeal-
locationfunction(whichmustnotbe NULL)isinvoked.
Thisfunctionisusuallyusedtodeletea strong reference beforeexitingitsscope.
Theobjectmustnotbe NULL;ifyouaren’tsurethatitisn’t NULL,use Py_XDECREF() .
Do not expect this function to actually modify oin any way. For at least some objects , this function has no
effect.
ÁWarning
ThedeallocationfunctioncancausearbitraryPythoncodetobeinvoked(e.g. whenaclassinstancewitha
__del__() methodisdeallocated). Whileexceptionsinsuchcodearenotpropagated,theexecutedcode
has free access to all Python global variables. This means that any object that is reachable from a global
variableshouldbeinaconsistentstatebefore Py_DECREF() isinvoked. Forexample, codetodeletean
objectfromalistshouldcopyareferencetothedeletedobjectinatemporaryvariable,updatethelistdata
structure,andthencall Py_DECREF() forthetemporaryvariable.
Changedinversion3.12: Immortalobjectsarenotmodified.
voidPy_XDECREF (PyObject*o)
Similarto Py_DECREF() ,buttheobject ocanbe NULL,inwhichcasethishasnoeffect. Thesamewarning
from Py_DECREF() applieshereaswell.
voidPy_CLEAR (PyObject*o)
Release a strong reference for object o. The object may be NULL, in which case the macro has no effect;
otherwise the effect is the same as for Py_DECREF() , except that the argument is also set to NULL. The
warningfor Py_DECREF() doesnotapplywithrespecttotheobjectpassedbecausethemacrocarefullyuses
atemporaryvariableandsetstheargumentto NULLbeforereleasingthereference.
Itisagoodideatousethismacrowheneverreleasingareferencetoanobjectthatmightbetraversedduring
garbagecollection.
Changed in version 3.12: The macro argument is now only evaluated once. If the argument has side effects,
thesearenolongerduplicated.
44 Chapter 4. Reference Counting
The Python/C API, Release 3.13.0
voidPy_IncRef (PyObject*o)
Part of the Stable ABI .Indicate taking a new strong reference to object o. A function version of
Py_XINCREF() . ItcanbeusedforruntimedynamicembeddingofPython.
voidPy_DecRef (PyObject*o)
Part of the StableABI .Releasea strong reference toobject o. Afunctionversionof Py_XDECREF() . Itcan
beusedforruntimedynamicembeddingofPython.
Py_SETREF (dst,src )
Macrosafelyreleasinga strong reference toobject dstandsetting dsttosrc.
Asincaseof Py_CLEAR() ,“theobvious”codecanbedeadly:
Py_DECREF(dst);
dst =src;
Thesafewayis:
Py_SETREF(dst, src);
Thatarrangestoset dsttosrc_before_releasingthereferencetotheoldvalueof dst,sothatanycodetriggered
asaside-effectof dstgettingtorndownnolongerbelieves dstpointstoavalidobject.
Addedinversion3.6.
Changedinversion3.12: Themacroargumentsarenowonlyevaluatedonce. Ifanargumenthassideeffects,
thesearenolongerduplicated.
Py_XSETREF (dst,src )
Variantof Py_SETREF macrothatuses Py_XDECREF() insteadof Py_DECREF() .
Addedinversion3.6.
Changedinversion3.12: Themacroargumentsarenowonlyevaluatedonce. Ifanargumenthassideeffects,
thesearenolongerduplicated.
45
The Python/C API, Release 3.13.0
46 Chapter 4. Reference Counting
CHAPTER
FIVE
EXCEPTION HANDLING
ThefunctionsdescribedinthischapterwillletyouhandleandraisePythonexceptions. Itisimportanttounderstand
some of the basics of Python exception handling. It works somewhat like the POSIX errnovariable: there is a
globalindicator(perthread)ofthelasterrorthatoccurred. MostCAPIfunctionsdon’tclearthisonsuccess,butwill
setittoindicatethecauseoftheerroronfailure. MostCAPIfunctionsalsoreturnanerrorindicator,usually NULL
iftheyaresupposedtoreturnapointer,or -1iftheyreturnaninteger(exception: the PyArg_*functionsreturn 1
forsuccessand 0forfailure).
Concretely, theerrorindicatorconsistsofthreeobjectpointers: theexception’stype, theexception’svalue, andthe
traceback object. Any of those pointers can be NULLif non-set (although some combinations are forbidden, for
exampleyoucan’thaveanon- NULLtracebackiftheexceptiontypeis NULL).
When a function must fail because some function it called failed, it generally doesn’t set the error indicator; the
functionitcalledalreadysetit. Itisresponsibleforeitherhandlingtheerrorandclearingtheexceptionorreturning
after cleaning up any resources it holds (such as object references or memory allocations); it should notcontinue
normallyifitisnotpreparedtohandletheerror. Ifreturningduetoanerror,itisimportanttoindicatetothecaller
thatanerrorhasbeenset. Iftheerrorisnothandledorcarefullypropagated,additionalcallsintothePython/CAPI
maynotbehaveasintendedandmayfailinmysteriousways.
®Note
Theerrorindicatoris nottheresultof sys.exc_info() . Theformercorrespondstoanexceptionthatisnotyet
caught(andisthereforestillpropagating),whilethelatterreturnsanexceptionafteritiscaught(andhastherefore
stoppedpropagating).
5.1Printing and clearing
voidPyErr_Clear ()
Part of the StableABI .Cleartheerrorindicator. Iftheerrorindicatorisnotset,thereisnoeffect.
voidPyErr_PrintEx (intset_sys_last_vars )
Part of the Stable ABI .Print a standard traceback to sys.stderr and clear the error indicator. Unlessthe
error is a SystemExit , in that case no traceback is printed and the Python process will exit with the error
codespecifiedbythe SystemExit instance.
Callthisfunction onlywhentheerrorindicatorisset. Otherwiseitwillcauseafatalerror!
Ifset_sys_last_vars is nonzero, the variable sys.last_exc is set to the printed exception. For backwards
compatibility, the deprecated variables sys.last_type ,sys.last_value andsys.last_traceback
arealsosettothetype,valueandtracebackofthisexception,respectively.
Changedinversion3.12: Thesettingof sys.last_exc wasadded.
voidPyErr_Print ()
Part of the StableABI .Aliasfor PyErr_PrintEx(1) .
47
The Python/C API, Release 3.13.0
voidPyErr_WriteUnraisable (PyObject*obj)
Part of the StableABI .Callsys.unraisablehook() usingthecurrentexceptionand objargument.
This utility function prints a warning message to sys.stderr when an exception has been set but it is im-
possible for the interpreter to actually raise the exception. It is used, for example, when an exception occurs
inan __del__() method.
Thefunctioniscalledwithasingleargument objthatidentifiesthecontextinwhichtheunraisableexception
occurred. Ifpossible,thereprof objwillbeprintedinthewarningmessage. If objisNULL,onlythetraceback
isprinted.
Anexceptionmustbesetwhencallingthisfunction.
Changedinversion3.4: Printatraceback. Printonlytracebackif objisNULL.
Changedinversion3.8: Use sys.unraisablehook() .
voidPyErr_FormatUnraisable (constchar*format,... )
Similar to PyErr_WriteUnraisable() , but the formatand subsequent parameters help format
the warning message; they have the same meaning and values as in PyUnicode_FromFormat() .
PyErr_WriteUnraisable(obj) is roughly equivalent to PyErr_FormatUnraisable("Exception
ignored in: %R", obj) . IfformatisNULL,onlythetracebackisprinted.
Addedinversion3.13.
voidPyErr_DisplayException (PyObject*exc)
Part of the Stable ABI since version 3.12. Print the standard traceback display of exctosys.stderr , in-
cludingchainedexceptionsandnotes.
Addedinversion3.12.
5.2Raising exceptions
Thesefunctionshelpyousetthecurrentthread’serrorindicator. Forconvenience,someofthesefunctionswillalways
returna NULLpointerforuseina returnstatement.
voidPyErr_SetString (PyObject*type,constchar*message )
Part of the Stable ABI .This isthe mostcommonway to set theerror indicator. Thefirst argumentspecifies
theexceptiontype;itisnormallyoneofthestandardexceptions,e.g. PyExc_RuntimeError . Youneednot
createanew strong reference toit(e.g. with Py_INCREF() ). Thesecondargumentisanerrormessage;itis
decodedfrom 'utf-8'.
voidPyErr_SetObject (PyObject*type, PyObject*value )
Part of the Stable ABI .This function is similar to PyErr_SetString() but lets you specify an arbitrary
Pythonobjectforthe“value”oftheexception.
PyObject*PyErr_Format (PyObject*exception,constchar*format,... )
Return value: Always NULL. Part of the StableABI .Thisfunctionsetstheerrorindicatorandreturns NULL.
exceptionshould be a Python exception class. The formatand subsequent parameters help format the error
message; they have the same meaning and values as in PyUnicode_FromFormat() .formatis an ASCII-
encodedstring.
PyObject*PyErr_FormatV (PyObject*exception,constchar*format,va_listvargs )
Return value: Always NULL. Part of the StableABI since version 3.5. Sameas PyErr_Format() ,buttaking
ava_listargumentratherthanavariablenumberofarguments.
Addedinversion3.5.
voidPyErr_SetNone (PyObject*type )
Part of the StableABI .Thisisashorthandfor PyErr_SetObject(type, Py_None) .
48 Chapter 5. Exception Handling
The Python/C API, Release 3.13.0
intPyErr_BadArgument ()
Part of the StableABI .Thisisashorthandfor PyErr_SetString(PyExc_TypeError, message) ,where
messageindicatesthatabuilt-inoperationwasinvokedwithanillegalargument. Itismostlyforinternaluse.
PyObject*PyErr_NoMemory ()
Return value: Always NULL. Part of the Stable ABI .This is a shorthand for
PyErr_SetNone(PyExc_MemoryError) ; it returns NULLso an object allocation function can write
return PyErr_NoMemory(); whenitrunsoutofmemory.
PyObject*PyErr_SetFromErrno (PyObject*type )
Return value: Always NULL. Part of the StableABI .Thisisaconveniencefunctiontoraiseanexceptionwhen
a C library function has returned an error and set the C variable errno. It constructs a tuple object whose
firstitemistheinteger errnovalueandwhoseseconditemisthecorrespondingerrormessage(gottenfrom
strerror() ), and then calls PyErr_SetObject(type, object) . On Unix, when the errnovalue is
EINTR, indicating an interrupted system call, this calls PyErr_CheckSignals() , and if that set the error
indicator,leavesitsettothat. Thefunctionalwaysreturns NULL,soawrapperfunctionaroundasystemcall
canwrite return PyErr_SetFromErrno(type); whenthesystemcallreturnsanerror.
PyObject*PyErr_SetFromErrnoWithFilenameObject (PyObject*type, PyObject*filenameObject )
Return value: Always NULL. Part of the StableABI .Similarto PyErr_SetFromErrno() ,withtheadditional
behaviorthatif filenameObject isnot NULL,itispassedtotheconstructorof typeasathirdparameter. Inthe
caseof OSErrorexception,thisisusedtodefinethe filename attributeoftheexceptioninstance.
PyObject*PyErr_SetFromErrnoWithFilenameObjects (PyObject*type, PyObject*filenameObject,
PyObject*filenameObject2 )
Return value: Always NULL. Part of the Stable ABI since version 3.7. Similar to
PyErr_SetFromErrnoWithFilenameObject() , but takes a second filename object, for raising
errorswhenafunctionthattakestwofilenamesfails.
Addedinversion3.4.
PyObject*PyErr_SetFromErrnoWithFilename (PyObject*type,constchar*filename )
Return value: Always NULL. Part of the Stable ABI .Similar to
PyErr_SetFromErrnoWithFilenameObject() , but the filename is given as a C string. filename
isdecodedfromthe filesystem encoding and error handler .
PyObject*PyErr_SetFromWindowsErr (intierr )
Return value: Always NULL. Part of the Stable ABI on Windows since version 3.7. This is a convenience
functiontoraise OSError. Ifcalledwith ierrof0,theerrorcodereturnedbyacallto GetLastError() is
usedinstead. ItcallstheWin32function FormatMessage() toretrievetheWindowsdescriptionoferrorcode
givenby ierrorGetLastError() ,thenitconstructsa OSErrorobjectwiththe winerror attributesettothe
errorcode,the strerror attributesettothecorrespondingerrormessage(gottenfrom FormatMessage() ),
andthencalls PyErr_SetObject(PyExc_OSError, object) . Thisfunctionalwaysreturns NULL.
Availability: Windows.
PyObject*PyErr_SetExcFromWindowsErr (PyObject*type,intierr )
Return value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to
PyErr_SetFromWindowsErr() ,withanadditionalparameterspecifyingtheexceptiontypetoberaised.
Availability: Windows.
PyObject*PyErr_SetFromWindowsErrWithFilename (intierr,constchar*filename )
Return value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to
PyErr_SetFromWindowsErr() , with the additional behavior that if filenameis not NULL, it is decoded
fromthefilesystemencoding( os.fsdecode() )andpassedtotheconstructorof OSErrorasathirdparam-
etertobeusedtodefinethe filename attributeoftheexceptioninstance.
Availability: Windows.
PyObject*PyErr_SetExcFromWindowsErrWithFilenameObject (PyObject*type,intierr, PyObject
*filename )
5.2. Raising exceptions 49
The Python/C API, Release 3.13.0
Return value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to
PyErr_SetExcFromWindowsErr() ,withtheadditionalbehaviorthatif filenameisnot NULL,itispassedto
theconstructorof OSErrorasathirdparametertobeusedtodefinethe filename attributeoftheexception
instance.
Availability: Windows.
PyObject*PyErr_SetExcFromWindowsErrWithFilenameObjects (PyObject*type,intierr, PyObject
*filename, PyObject*filename2 )
Return value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to
PyErr_SetExcFromWindowsErrWithFilenameObject() ,butacceptsasecondfilenameobject.
Availability: Windows.
Addedinversion3.4.
PyObject*PyErr_SetExcFromWindowsErrWithFilename (PyObject*type,intierr,constchar*filename )
Return value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to
PyErr_SetFromWindowsErrWithFilename() , with an additional parameter specifying the exception
typetoberaised.
Availability: Windows.
PyObject*PyErr_SetImportError (PyObject*msg, PyObject*name, PyObject*path )
Return value: Always NULL. Part of the StableABI since version 3.7. Thisisaconveniencefunctiontoraise
ImportError .msgwillbesetastheexception’smessagestring. nameandpath,bothofwhichcanbe NULL,
willbesetasthe ImportError ’srespective nameandpathattributes.
Addedinversion3.3.
PyObject*PyErr_SetImportErrorSubclass (PyObject*exception, PyObject*msg, PyObject*name, PyObject
*path )
Return value: Always NULL. Part of the StableABI since version 3.6. Muchlike PyErr_SetImportError()
butthisfunctionallowsforspecifyingasubclassof ImportError toraise.
Addedinversion3.6.
voidPyErr_SyntaxLocationObject (PyObject*filename,intlineno,intcol_offset )
Setfile,line,andoffsetinformationforthecurrentexception. Ifthecurrentexceptionisnota SyntaxError ,
then it sets additional attributes, which make the exception printing subsystem think the exception is a
SyntaxError .
Addedinversion3.4.
voidPyErr_SyntaxLocationEx (constchar*filename,intlineno,intcol_offset )
Part of the Stable ABI since version 3.7. Like PyErr_SyntaxLocationObject() , butfilenameis a byte
stringdecodedfromthe filesystem encoding and error handler .
Addedinversion3.2.
voidPyErr_SyntaxLocation (constchar*filename,intlineno )
Part of the StableABI .Like PyErr_SyntaxLocationEx() ,butthe col_offsetparameterisomitted.
voidPyErr_BadInternalCall ()
Part of the Stable ABI .This is a shorthand for PyErr_SetString(PyExc_SystemError, message) ,
where messageindicatesthataninternaloperation(e.g. aPython/CAPIfunction)wasinvokedwithanillegal
argument. Itismostlyforinternaluse.
5.3Issuing warnings
UsethesefunctionstoissuewarningsfromCcode. TheymirrorsimilarfunctionsexportedbythePython warnings
module. Theynormallyprintawarningmessageto sys.stderr;however,itisalsopossiblethattheuserhasspecified
50 Chapter 5. Exception Handling
The Python/C API, Release 3.13.0
that warnings are to be turned into errors, and in that case they will raise an exception. It is also possible that the
functionsraiseanexceptionbecauseofaproblemwiththewarningmachinery. Thereturnvalueis 0ifnoexception
israised,or -1ifanexceptionisraised. (Itisnotpossibletodeterminewhetherawarningmessageisactuallyprinted,
norwhatthereasonisfortheexception;thisisintentional.) Ifanexceptionisraised,thecallershoulddoitsnormal
exceptionhandling(forexample, Py_DECREF() ownedreferencesandreturnanerrorvalue).
intPyErr_WarnEx (PyObject*category,constchar*message, Py_ssize_t stack_level )
Part of the Stable ABI .Issue a warning message. The categoryargument is a warning category (see below)
orNULL;themessageargumentisaUTF-8encodedstring. stack_level isapositivenumbergivinganumber
of stack frames; the warning will be issued from the currently executing line of code in that stack frame. A
stack_level of1isthefunctioncalling PyErr_WarnEx() ,2isthefunctionabovethat,andsoforth.
Warning categories must be subclasses of PyExc_Warning ;PyExc_Warning is a subclass of
PyExc_Exception ;thedefaultwarningcategoryis PyExc_RuntimeWarning . ThestandardPythonwarn-
ingcategoriesareavailableasglobalvariableswhosenamesareenumeratedat Standard Warning Categories .
Forinformationaboutwarningcontrol,seethedocumentationforthe warnings moduleandthe -Woptionin
thecommandlinedocumentation. ThereisnoCAPIforwarningcontrol.
intPyErr_WarnExplicitObject (PyObject*category, PyObject*message, PyObject*filename,intlineno,
PyObject*module, PyObject*registry )
Issue a warning message with explicit control over all warning attributes. This is a straightforward wrapper
aroundthePythonfunction warnings.warn_explicit() ;seethereformoreinformation. The moduleand
registryargumentsmaybesetto NULLtogetthedefaulteffectdescribedthere.
Addedinversion3.4.
intPyErr_WarnExplicit (PyObject*category,constchar*message,constchar*filename,intlineno,constchar
*module, PyObject*registry )
Part of the Stable ABI .Similar to PyErr_WarnExplicitObject() except that messageandmoduleare
UTF-8encodedstrings,and filenameisdecodedfromthe filesystem encoding and error handler .
intPyErr_WarnFormat (PyObject*category, Py_ssize_t stack_level,constchar*format,... )
Part of theStableABI .Functionsimilarto PyErr_WarnEx() ,butuse PyUnicode_FromFormat() toformat
thewarningmessage. formatisanASCII-encodedstring.
Addedinversion3.2.
intPyErr_ResourceWarning (PyObject*source, Py_ssize_t stack_level,constchar*format,... )
Part of the Stable ABI since version 3.6. Function similar to PyErr_WarnFormat() , but categoryis
ResourceWarning anditpasses sourcetowarnings.WarningMessage .
Addedinversion3.6.
5.4Querying the error indicator
PyObject*PyErr_Occurred ()
Return value: Borrowed reference. Part of the Stable ABI .Test whether the error indicator is set. If set,
return the exception type(the first argument to the last call to one of the PyErr_Set* functions or to
PyErr_Restore() ). If not set, return NULL. You do not own a reference to the return value, so you do
notneedto Py_DECREF() it.
ThecallermustholdtheGIL.
®Note
Do not compare the return value to a specific exception; use PyErr_ExceptionMatches() instead,
shownbelow. (Thecomparisoncouldeasilyfailsincetheexceptionmaybeaninstanceinsteadofaclass,
inthecaseofaclassexception,oritmaybeasubclassoftheexpectedexception.)
5.4. Querying the error indicator 51
The Python/C API, Release 3.13.0
intPyErr_ExceptionMatches (PyObject*exc)
Part of the Stable ABI .Equivalent to PyErr_GivenExceptionMatches(PyErr_Occurred(), exc) .
This should only be called when an exception is actually set; a memory access violation will occur if no ex-
ceptionhasbeenraised.
intPyErr_GivenExceptionMatches (PyObject*given, PyObject*exc)
Part of the StableABI .Returntrueifthe givenexceptionmatchestheexceptiontypein exc. Ifexcisaclass
object,thisalsoreturnstruewhen givenisaninstanceofasubclass. If excisatuple,allexceptiontypesinthe
tuple(andrecursivelyinsubtuples)aresearchedforamatch.
PyObject*PyErr_GetRaisedException (void)
Return value: New reference. Part of the StableABI since version 3.12. Returntheexceptioncurrentlybeing
raised,clearingtheerrorindicatoratthesametime. Return NULLiftheerrorindicatorisnotset.
Thisfunctionisusedbycodethatneedstocatchexceptions, orcodethatneedstosaveandrestoretheerror
indicatortemporarily.
Forexample:
{
PyObject *exc =PyErr_GetRaisedException();
/* ... code that might produce other errors ... */
PyErr_SetRaisedException(exc);
}
µSee also
PyErr_GetHandledException() ,tosavetheexceptioncurrentlybeinghandled.
Addedinversion3.12.
voidPyErr_SetRaisedException (PyObject*exc)
Part of the StableABI since version 3.12. Setexcastheexceptioncurrentlybeingraised,clearingtheexisting
exceptionifoneisset.
ÁWarning
Thiscallstealsareferenceto exc,whichmustbeavalidexception.
Addedinversion3.12.
voidPyErr_Fetch (PyObject**ptype, PyObject**pvalue, PyObject**ptraceback )
Part of the StableABI .Deprecatedsinceversion3.12: Use PyErr_GetRaisedException() instead.
Retrieve the error indicator into three variables whose addresses are passed. If the error indicator is not set,
setallthreevariablesto NULL.Ifitisset,itwillbeclearedandyouownareferencetoeachobjectretrieved.
Thevalueandtracebackobjectmaybe NULLevenwhenthetypeobjectisnot.
®Note
Thisfunctionisnormallyonlyusedbylegacycodethatneedstocatchexceptionsorsaveandrestorethe
errorindicatortemporarily.
Forexample:
52 Chapter 5. Exception Handling
The Python/C API, Release 3.13.0
{
PyObject *type, *value, *traceback;
PyErr_Fetch( &type, &value, &traceback);
/* ... code that might produce other errors ... */
PyErr_Restore(type, value, traceback);
}
voidPyErr_Restore (PyObject*type, PyObject*value, PyObject*traceback )
Part of the StableABI .Deprecatedsinceversion3.12: Use PyErr_SetRaisedException() instead.
Settheerrorindicatorfromthethreeobjects, type,value,andtraceback,clearingtheexistingexceptionifone
isset. Iftheobjectsare NULL,theerrorindicatoriscleared. Donotpassa NULLtypeandnon- NULLvalueor
traceback. The exception type should be a class. Do not pass an invalid exception type or value. (Violating
these rules will cause subtle problems later.) This call takes away a reference to each object: you must own
areferencetoeachobjectbeforethecallandafterthecallyounolongerownthesereferences. (Ifyoudon’t
understandthis,don’tusethisfunction. Iwarnedyou.)
®Note
Thisfunctionisnormallyonlyusedbylegacycodethatneedstosaveandrestoretheerrorindicatortem-
porarily. Use PyErr_Fetch() tosavethecurrenterrorindicator.
voidPyErr_NormalizeException (PyObject**exc, PyObject**val, PyObject**tb)
Part of the Stable ABI .Deprecated since version 3.12: Use PyErr_GetRaisedException() instead, to
avoidanypossiblede-normalization.
Undercertaincircumstances,thevaluesreturnedby PyErr_Fetch() belowcanbe“unnormalized”,meaning
that*excisaclassobjectbut *valisnotaninstanceofthesameclass. Thisfunctioncanbeusedtoinstantiate
the class in that case. If the values are already normalized, nothing happens. The delayed normalization is
implementedtoimproveperformance.
®Note
Thisfunction does notimplicitlysetthe __traceback__ attributeontheexceptionvalue. Ifsettingthe
tracebackappropriatelyisdesired,thefollowingadditionalsnippetisneeded:
if(tb !=NULL ){
PyException_SetTraceback(val, tb);
}
PyObject*PyErr_GetHandledException (void)
Part of the Stable ABI since version 3.11. Retrieve the active exception instance, as would be returned by
sys.exception() . Thisreferstoanexceptionthatwas already caught ,nottoanexceptionthatwasfreshly
raised. Returnsanewreferencetotheexceptionor NULL.Doesnotmodifytheinterpreter’sexceptionstate.
®Note
This function isnot normally used by code thatwants to handleexceptions. Rather, itcan be used when
codeneedstosaveandrestoretheexceptionstatetemporarily. Use PyErr_SetHandledException()
torestoreorcleartheexceptionstate.
Addedinversion3.11.
5.4. Querying the error indicator 53
The Python/C API, Release 3.13.0
voidPyErr_SetHandledException (PyObject*exc)
Part of the StableABI since version 3.11. Settheactiveexception,asknownfrom sys.exception() . This
referstoanexceptionthatwas already caught ,nottoanexceptionthatwasfreshlyraised. Tocleartheexception
state,pass NULL.
®Note
This function isnot normally used by code thatwants to handleexceptions. Rather, itcan be used when
codeneedstosaveandrestoretheexceptionstatetemporarily. Use PyErr_GetHandledException()
togettheexceptionstate.
Addedinversion3.11.
voidPyErr_GetExcInfo (PyObject**ptype, PyObject**pvalue, PyObject**ptraceback )
Part of the Stable ABI since version 3.7. Retrieve the old-style representation of the exception info, as
known from sys.exc_info() . This refers to an exception that was already caught , not to an excep-
tion that was freshly raised. Returns new references for the three objects, any of which may be NULL.
Does not modify the exception info state. This function is kept for backwards compatibility. Prefer using
PyErr_GetHandledException() .
®Note
This function isnot normally used by code thatwants to handleexceptions. Rather, itcan be used when
codeneedstosaveandrestoretheexceptionstatetemporarily. Use PyErr_SetExcInfo() torestoreor
cleartheexceptionstate.
Addedinversion3.3.
voidPyErr_SetExcInfo (PyObject*type, PyObject*value, PyObject*traceback )
Part of the StableABI since version 3.7. Settheexceptioninfo,asknownfrom sys.exc_info() . Thisrefers
to an exception that was already caught , not to an exception that was freshly raised. This function steals the
referencesofthearguments. Tocleartheexceptionstate,pass NULLforallthreearguments. Thisfunctionis
keptforbackwardscompatibility. Preferusing PyErr_SetHandledException() .
®Note
This function isnot normally used by code thatwants to handleexceptions. Rather, itcan be used when
code needs to save and restore the exception state temporarily. Use PyErr_GetExcInfo() to read the
exceptionstate.
Addedinversion3.3.
Changed in version 3.11: The typeandtraceback arguments are no longer used and can be NULL. The
interpreter now derives them from the exception instance (the valueargument). The function still steals
referencesofallthreearguments.
5.5Signal Handling
intPyErr_CheckSignals ()
Part of the StableABI .ThisfunctioninteractswithPython’ssignalhandling.
IfthefunctioniscalledfromthemainthreadandunderthemainPythoninterpreter,itcheckswhetherasignal
has been sent to the processes and if so, invokes the corresponding signal handler. If the signalmodule is
supported,thiscaninvokeasignalhandlerwritteninPython.
54 Chapter 5. Exception Handling
The Python/C API, Release 3.13.0
Thefunctionattemptstohandleallpendingsignals, andthenreturns 0. However, ifaPythonsignalhandler
raisesanexception,theerrorindicatorissetandthefunctionreturns -1immediately(suchthatotherpending
signalsmaynothavebeenhandledyet: theywillbeonthenext PyErr_CheckSignals() invocation).
Ifthefunctioniscalledfromanon-mainthread,orunderanon-mainPythoninterpreter,itdoesnothingand
returns 0.
Thisfunctioncanbecalledbylong-runningCcodethatwantstobeinterruptiblebyuserrequests(suchasby
pressingCtrl-C).
®Note
ThedefaultPythonsignalhandlerfor SIGINTraisesthe KeyboardInterrupt exception.
voidPyErr_SetInterrupt ()
Part of the Stable ABI .Simulate the effect of a SIGINTsignal arriving. This is equivalent to
PyErr_SetInterruptEx(SIGINT) .
®Note
Thisfunctionisasync-signal-safe. Itcanbecalledwithoutthe GILandfromaCsignalhandler.
intPyErr_SetInterruptEx (intsignum )
Part of the Stable ABI since version 3.10. Simulate the effect of a signal arriving. The next time
PyErr_CheckSignals() iscalled,thePythonsignalhandlerforthegivensignalnumberwillbecalled.
This function can be called by C code that sets up its own signal handling and wants Python signal handlers
to be invoked as expected when an interruption is requested (for example when the user presses Ctrl-C to
interruptanoperation).
Ifthegivensignalisn’thandledbyPython(itwassetto signal.SIG_DFL orsignal.SIG_IGN ),itwillbe
ignored.
Ifsignumis outside of the allowed range of signal numbers, -1is returned. Otherwise, 0is returned. The
errorindicatorisneverchangedbythisfunction.
®Note
Thisfunctionisasync-signal-safe. Itcanbecalledwithoutthe GILandfromaCsignalhandler.
Addedinversion3.10.
intPySignal_SetWakeupFd (intfd )
Thisutilityfunctionspecifiesafiledescriptortowhichthesignalnumberiswrittenasasinglebytewhenever
asignalisreceived. fdmustbenon-blocking. Itreturnstheprevioussuchfiledescriptor.
Thevalue -1disablesthefeature; thisistheinitialstate. Thisisequivalentto signal.set_wakeup_fd()
in Python, but without any error checking. fdshould be a valid file descriptor. The function should only be
calledfromthemainthread.
Changedinversion3.5: OnWindows,thefunctionnowalsosupportssockethandles.
5.6Exception Classes
PyObject*PyErr_NewException (constchar*name, PyObject*base, PyObject*dict)
Return value: New reference. Part of the StableABI .Thisutilityfunctioncreatesandreturnsanewexception
class. The nameargumentmustbethenameofthenewexception,aCstringoftheform module.classname .
5.6. Exception Classes 55
The Python/C API, Release 3.13.0
Thebaseanddictargumentsarenormally NULL.Thiscreatesaclassobjectderivedfrom Exception (acces-
sibleinCas PyExc_Exception ).
The__module__ attributeofthenewclassissettothefirstpart(uptothelastdot)ofthe nameargument,
andtheclassnameissettothelastpart(afterthelastdot). The baseargumentcanbeusedtospecifyalternate
baseclasses; itcaneitherbe onlyoneclassoratupleofclasses. The dictargumentcanbe usedto specifya
dictionaryofclassvariablesandmethods.
PyObject*PyErr_NewExceptionWithDoc (constchar*name,constchar*doc, PyObject*base, PyObject*dict)
Return value: New reference. Part of the StableABI .Sameas PyErr_NewException() ,exceptthatthenew
exception class can easily be given a docstring: If docis non- NULL, it will be used as the docstring for the
exceptionclass.
Addedinversion3.2.
5.7Exception Objects
PyObject*PyException_GetTraceback (PyObject*ex)
Return value: New reference. Part of the Stable ABI .Return the traceback associated with the exception as
a new reference, as accessible from Python through the __traceback__ attribute. If there is no traceback
associated,thisreturns NULL.
intPyException_SetTraceback (PyObject*ex,PyObject*tb)
Part of the StableABI .Setthetracebackassociatedwiththeexceptionto tb. Use Py_Nonetoclearit.
PyObject*PyException_GetContext (PyObject*ex)
Return value: New reference. Part of the Stable ABI .Return the context (another exception instance during
whose handling exwas raised) associated with the exception as a new reference, as accessible from Python
throughthe __context__ attribute. Ifthereisnocontextassociated,thisreturns NULL.
voidPyException_SetContext (PyObject*ex,PyObject*ctx)
Part of the StableABI .Setthecontextassociatedwiththeexceptionto ctx. Use NULLtoclearit. Thereisno
typechecktomakesurethat ctxisanexceptioninstance. Thisstealsareferenceto ctx.
PyObject*PyException_GetCause (PyObject*ex)
Return value: New reference. Part of the StableABI .Returnthecause(eitheranexceptioninstance,or None,
setby raise ... from ... )associatedwiththeexceptionasanewreference,asaccessiblefromPython
throughthe __cause__ attribute.
voidPyException_SetCause (PyObject*ex,PyObject*cause )
Part of the StableABI .Setthecauseassociatedwiththeexceptionto cause. Use NULLtoclearit. Thereisno
typechecktomakesurethat causeiseitheranexceptioninstanceor None. Thisstealsareferenceto cause.
The__suppress_context__ attributeisimplicitlysetto Truebythisfunction.
PyObject*PyException_GetArgs (PyObject*ex)
Return value: New reference. Part of the StableABI since version 3.12. Return argsofexception ex.
voidPyException_SetArgs (PyObject*ex,PyObject*args )
Part of the StableABI since version 3.12. Setargsofexception extoargs.
PyObject*PyUnstable_Exc_PrepReraiseStar (PyObject*orig, PyObject*excs )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Implementpartoftheinterpreter’simplementationof except*.origistheoriginalexceptionthatwascaught,
andexcsisthelistoftheexceptionsthatneedtoberaised. Thislistcontainstheunhandledpartof orig,ifany,
aswellastheexceptionsthatwereraisedfromthe except*clauses(sotheyhaveadifferenttracebackfrom
56 Chapter 5. Exception Handling
The Python/C API, Release 3.13.0
orig)andthosethatwerereraised(andhavethesametracebackas orig). Returnthe ExceptionGroup that
needstobereraisedintheend,or Noneifthereisnothingtoreraise.
Addedinversion3.12.
5.8Unicode Exception Objects
ThefollowingfunctionsareusedtocreateandmodifyUnicodeexceptionsfromC.
PyObject*PyUnicodeDecodeError_Create (constchar*encoding,constchar*object, Py_ssize_t length,
Py_ssize_t start,Py_ssize_t end,constchar*reason )
Return value: New reference. Part of the Stable ABI .Create a UnicodeDecodeError object with the at-
tributes encoding,object,length,start,endandreason.encodingandreasonareUTF-8encodedstrings.
PyObject*PyUnicodeDecodeError_GetEncoding (PyObject*exc)
PyObject*PyUnicodeEncodeError_GetEncoding (PyObject*exc)
Return value: New reference. Part of the Stable ABI .Return the encodingattribute of the given exception
object.
PyObject*PyUnicodeDecodeError_GetObject (PyObject*exc)
PyObject*PyUnicodeEncodeError_GetObject (PyObject*exc)
PyObject*PyUnicodeTranslateError_GetObject (PyObject*exc)
Return value: New reference. Part of the StableABI .Returnthe objectattributeofthegivenexceptionobject.
intPyUnicodeDecodeError_GetStart (PyObject*exc, Py_ssize_t *start )
intPyUnicodeEncodeError_GetStart (PyObject*exc, Py_ssize_t *start )
intPyUnicodeTranslateError_GetStart (PyObject*exc, Py_ssize_t *start )
Part of the StableABI .Getthe startattributeofthegivenexceptionobjectandplaceitinto *start.startmust
notbe NULL.Return 0onsuccess, -1onfailure.
intPyUnicodeDecodeError_SetStart (PyObject*exc, Py_ssize_t start)
intPyUnicodeEncodeError_SetStart (PyObject*exc, Py_ssize_t start)
intPyUnicodeTranslateError_SetStart (PyObject*exc, Py_ssize_t start)
Part of the StableABI .Setthe startattributeofthegivenexceptionobjectto start. Return 0onsuccess, -1on
failure.
intPyUnicodeDecodeError_GetEnd (PyObject*exc, Py_ssize_t *end)
intPyUnicodeEncodeError_GetEnd (PyObject*exc, Py_ssize_t *end)
intPyUnicodeTranslateError_GetEnd (PyObject*exc, Py_ssize_t *end)
Part of the StableABI .Getthe endattributeofthegivenexceptionobjectandplaceitinto *end.endmustnot
beNULL.Return 0onsuccess, -1onfailure.
intPyUnicodeDecodeError_SetEnd (PyObject*exc, Py_ssize_t end)
intPyUnicodeEncodeError_SetEnd (PyObject*exc, Py_ssize_t end)
intPyUnicodeTranslateError_SetEnd (PyObject*exc, Py_ssize_t end)
Part of the StableABI .Setthe endattributeofthegivenexceptionobjectto end. Return 0onsuccess, -1on
failure.
PyObject*PyUnicodeDecodeError_GetReason (PyObject*exc)
PyObject*PyUnicodeEncodeError_GetReason (PyObject*exc)
PyObject*PyUnicodeTranslateError_GetReason (PyObject*exc)
Return value: New reference. Part of the StableABI .Returnthe reasonattributeofthegivenexceptionobject.
intPyUnicodeDecodeError_SetReason (PyObject*exc,constchar*reason )
intPyUnicodeEncodeError_SetReason (PyObject*exc,constchar*reason )
intPyUnicodeTranslateError_SetReason (PyObject*exc,constchar*reason )
Part of the StableABI .Setthe reasonattributeofthegivenexceptionobjectto reason. Return 0onsuccess,
-1onfailure.
5.8. Unicode Exception Objects 57
The Python/C API, Release 3.13.0
5.9Recursion Control
These two functions provide a way to perform safe recursive calls at the C level, both in the core and in extension
modules. TheyareneedediftherecursivecodedoesnotnecessarilyinvokePythoncode(whichtracksitsrecursion
depth automatically). They are also not needed for tp_callimplementations because the call protocol takes care of
recursionhandling.
intPy_EnterRecursiveCall (constchar*where )
Part of the StableABI since version 3.9. MarksapointwherearecursiveC-levelcallisabouttobeperformed.
IfUSE_STACKCHECK isdefined,thisfunctionchecksiftheOSstackoverflowedusing PyOS_CheckStack() .
Ifthisisthecase,itsetsa MemoryError andreturnsanonzerovalue.
Thefunctionthenchecksiftherecursionlimitisreached. Ifthisisthecase,a RecursionError issetanda
nonzerovalueisreturned. Otherwise,zeroisreturned.
whereshould be a UTF-8 encoded string such as " in instance check" to be concatenated to the
RecursionError messagecausedbytherecursiondepthlimit.
Changedinversion3.9: Thisfunctionisnowalsoavailableinthe limited API .
voidPy_LeaveRecursiveCall (void)
Part of the StableABI since version 3.9. Endsa Py_EnterRecursiveCall() . Mustbecalledonceforeach
successfulinvocationof Py_EnterRecursiveCall() .
Changedinversion3.9: Thisfunctionisnowalsoavailableinthe limited API .
Properlyimplementing tp_reprforcontainertypesrequiresspecialrecursionhandling. Inadditiontoprotectingthe
stack, tp_repralsoneedstotrackobjectstopreventcycles. Thefollowingtwofunctionsfacilitatethisfunctionality.
Effectively,thesearetheCequivalentto reprlib.recursive_repr() .
intPy_ReprEnter (PyObject*object )
Part of the StableABI .Calledatthebeginningofthe tp_reprimplementationtodetectcycles.
If the object has already been processed, the function returns a positive integer. In that case the tp_repr
implementationshouldreturnastringobjectindicatingacycle. Asexamples, dictobjectsreturn {...}and
listobjectsreturn [...].
Thefunctionwillreturnanegativeintegeriftherecursionlimitisreached. Inthatcasethe tp_reprimple-
mentationshouldtypicallyreturn NULL.
Otherwise,thefunctionreturnszeroandthe tp_reprimplementationcancontinuenormally.
voidPy_ReprLeave (PyObject*object )
Part of the Stable ABI .Ends a Py_ReprEnter() . Must be called once for each invocation of
Py_ReprEnter() thatreturnszero.
5.10Standard Exceptions
All standard Python exceptions are available as global variables whose names are PyExc_followed by the Python
exception name. These have the type PyObject *; they are all class objects. For completeness, here are all the
variables:
CName PythonName Notes
PyExc_BaseException BaseException1
PyExc_Exception ExceptionPage59,1
PyExc_ArithmeticError ArithmeticErrorPage59,1
PyExc_AssertionError AssertionError
PyExc_AttributeError AttributeError
PyExc_BlockingIOError BlockingIOError
PyExc_BrokenPipeError BrokenPipeError
continuesonnextpage
58 Chapter 5. Exception Handling
The Python/C API, Release 3.13.0
Table 1–continuedfrompreviouspage
CName PythonName Notes
PyExc_BufferError BufferError
PyExc_ChildProcessError ChildProcessError
PyExc_ConnectionAbortedError ConnectionAbortedError
PyExc_ConnectionError ConnectionError
PyExc_ConnectionRefusedError ConnectionRefusedError
PyExc_ConnectionResetError ConnectionResetError
PyExc_EOFError EOFError
PyExc_FileExistsError FileExistsError
PyExc_FileNotFoundError FileNotFoundError
PyExc_FloatingPointError FloatingPointError
PyExc_GeneratorExit GeneratorExit
PyExc_ImportError ImportError
PyExc_IndentationError IndentationError
PyExc_IndexError IndexError
PyExc_InterruptedError InterruptedError
PyExc_IsADirectoryError IsADirectoryError
PyExc_KeyError KeyError
PyExc_KeyboardInterrupt KeyboardInterrupt
PyExc_LookupError LookupError1
PyExc_MemoryError MemoryError
PyExc_ModuleNotFoundError ModuleNotFoundError
PyExc_NameError NameError
PyExc_NotADirectoryError NotADirectoryError
PyExc_NotImplementedError NotImplementedError
PyExc_OSError OSError1
PyExc_OverflowError OverflowError
PyExc_PermissionError PermissionError
PyExc_ProcessLookupError ProcessLookupError
PyExc_PythonFinalizationError PythonFinalizationError
PyExc_RecursionError RecursionError
PyExc_ReferenceError ReferenceError
PyExc_RuntimeError RuntimeError
PyExc_StopAsyncIteration StopAsyncIteration
PyExc_StopIteration StopIteration
PyExc_SyntaxError SyntaxError
PyExc_SystemError SystemError
PyExc_SystemExit SystemExit
PyExc_TabError TabError
PyExc_TimeoutError TimeoutError
PyExc_TypeError TypeError
PyExc_UnboundLocalError UnboundLocalError
PyExc_UnicodeDecodeError UnicodeDecodeError
PyExc_UnicodeEncodeError UnicodeEncodeError
PyExc_UnicodeError UnicodeError
PyExc_UnicodeTranslateError UnicodeTranslateError
PyExc_ValueError ValueError
PyExc_ZeroDivisionError ZeroDivisionError
Addedinversion3.3: PyExc_BlockingIOError ,PyExc_BrokenPipeError ,PyExc_ChildProcessError ,
PyExc_ConnectionError ,PyExc_ConnectionAbortedError ,PyExc_ConnectionRefusedError ,
PyExc_ConnectionResetError , PyExc_FileExistsError , PyExc_FileNotFoundError ,
PyExc_InterruptedError , PyExc_IsADirectoryError , PyExc_NotADirectoryError ,
PyExc_PermissionError ,PyExc_ProcessLookupError and PyExc_TimeoutError were introduced
following PEP 3151.
1Thisisabaseclassforotherstandardexceptions.
5.10. Standard Exceptions 59
The Python/C API, Release 3.13.0
Addedinversion3.5: PyExc_StopAsyncIteration andPyExc_RecursionError .
Addedinversion3.6: PyExc_ModuleNotFoundError .
Thesearecompatibilityaliasesto PyExc_OSError :
CName Notes
PyExc_EnvironmentError
PyExc_IOError
PyExc_WindowsError2
Changedinversion3.3: Thesealiasesusedtobeseparateexceptiontypes.
Notes:
5.11Standard Warning Categories
All standard Python warning categories are available as global variables whose names are PyExc_followed by the
Pythonexceptionname. Thesehavethetype PyObject *;theyareallclassobjects. Forcompleteness,hereareall
thevariables:
CName PythonName Notes
PyExc_Warning Warning3
PyExc_BytesWarning BytesWarning
PyExc_DeprecationWarning DeprecationWarning
PyExc_FutureWarning FutureWarning
PyExc_ImportWarning ImportWarning
PyExc_PendingDeprecationWarning PendingDeprecationWarning
PyExc_ResourceWarning ResourceWarning
PyExc_RuntimeWarning RuntimeWarning
PyExc_SyntaxWarning SyntaxWarning
PyExc_UnicodeWarning UnicodeWarning
PyExc_UserWarning UserWarning
Addedinversion3.2: PyExc_ResourceWarning .
Notes:
2OnlydefinedonWindows;protectcodethatusesthisbytestingthatthepreprocessormacro MS_WINDOWS isdefined.
3Thisisabaseclassforotherstandardwarningcategories.
60 Chapter 5. Exception Handling
CHAPTER
SIX
UTILITIES
The functions in this chapter perform various utility tasks, ranging from helping C code be more portable across
platforms, using Python modules from C, and parsing function arguments and constructing Python values from C
values.
6.1Operating System Utilities
PyObject*PyOS_FSPath (PyObject*path )
Return value: New reference. Part of the StableABI since version 3.6. Returnthefilesystemrepresentationfor
path. Iftheobjectisa strorbytesobject,thenanew strong reference isreturned. Iftheobjectimplements
theos.PathLike interface,then __fspath__() isreturnedaslongasitisa strorbytesobject. Otherwise
TypeError israisedand NULLisreturned.
Addedinversion3.6.
intPy_FdIsInteractive (FILE*fp,constchar*filename )
Returntrue(nonzero)ifthestandardI/Ofile fpwithname filenameisdeemedinteractive. Thisisthecasefor
files for which isatty(fileno(fp)) is true. If the PyConfig.interactive is non-zero, this function
also returns true if the filenamepointer is NULLor if the name is equal to one of the strings '<stdin>' or
'???'.
ThisfunctionmustnotbecalledbeforePythonisinitialized.
voidPyOS_BeforeFork ()
Part of the Stable ABI on platforms with fork() since version 3.7. Function to prepare some internal state
before a process fork. This should be called before calling fork()or any similar function that clones the
currentprocess. Onlyavailableonsystemswhere fork()isdefined.
ÁWarning
TheC fork()callshouldonlybemadefromthe “main” thread (ofthe “main” interpreter ). Thesameis
truefor PyOS_BeforeFork() .
Addedinversion3.7.
voidPyOS_AfterFork_Parent ()
Part of the StableABI on platforms with fork() since version 3.7. Functiontoupdatesomeinternalstateafter
aprocessfork. Thisshouldbecalledfromtheparentprocessaftercalling fork()oranysimilarfunctionthat
clones the current process, regardless of whether process cloning was successful. Only available on systems
where fork()isdefined.
ÁWarning
TheC fork()callshouldonlybemadefromthe “main” thread (ofthe “main” interpreter ). Thesameis
truefor PyOS_AfterFork_Parent() .
61
The Python/C API, Release 3.13.0
Addedinversion3.7.
voidPyOS_AfterFork_Child ()
Part of the StableABI on platforms with fork() since version 3.7. Functiontoupdateinternalinterpreterstate
afteraprocessfork. Thismustbecalledfromthechildprocessaftercalling fork(),oranysimilarfunction
that clones the current process, if there is any chance the process will call back into the Python interpreter.
Onlyavailableonsystemswhere fork()isdefined.
ÁWarning
TheC fork()callshouldonlybemadefromthe “main” thread (ofthe “main” interpreter ). Thesameis
truefor PyOS_AfterFork_Child() .
Addedinversion3.7.
µSee also
os.register_at_fork() allows registering custom Python functions to be called by
PyOS_BeforeFork() ,PyOS_AfterFork_Parent() andPyOS_AfterFork_Child() .
voidPyOS_AfterFork ()
Part of the Stable ABI on platforms with fork(). Function to update some internal state after a process fork;
thisshouldbecalledinthenewprocessifthePythoninterpreterwillcontinuetobeused. Ifanewexecutable
isloadedintothenewprocess,thisfunctiondoesnotneedtobecalled.
Deprecatedsinceversion3.7: Thisfunctionissupersededby PyOS_AfterFork_Child() .
intPyOS_CheckStack ()
Part of theStableABI on platforms with USE_STACKCHECK since version 3.7. Returntruewhentheinterpreter
runs out of stack space. This is a reliable check, but is only available when USE_STACKCHECK is defined
(currentlyoncertainversionsofWindowsusingtheMicrosoftVisualC++compiler). USE_STACKCHECK will
bedefinedautomatically;youshouldneverchangethedefinitioninyourowncode.
typedefvoid(* PyOS_sighandler_t )(int)
Part of the StableABI .
PyOS_sighandler_t PyOS_getsig (inti)
Part of the Stable ABI .Return the current signal handler for signal i. This is a thin wrapper around either
sigaction() orsignal() . Donotcallthosefunctionsdirectly!
PyOS_sighandler_t PyOS_setsig (inti,PyOS_sighandler_t h)
Part of the StableABI .Setthesignalhandlerforsignal itobe h; returntheoldsignalhandler. Thisisathin
wrapperaroundeither sigaction() orsignal() . Donotcallthosefunctionsdirectly!
wchar_t* Py_DecodeLocale (constchar*arg,size_t*size )
Part of the StableABI since version 3.7.
ÁWarning
This function should not be called directly: use the PyConfig API with the
PyConfig_SetBytesString() functionwhichensuresthat Python is preinitialized .
Thisfunctionmustnotbecalledbefore Python is preinitialized andsothattheLC_CTYPElocaleisproperly
configured: seethe Py_PreInitialize() function.
Decodeabytestringfromthe filesystem encoding and error handler . Iftheerrorhandlerissurrogateescapeer-
rorhandler,undecodablebytesaredecodedascharactersinrangeU+DC80..U+DCFF;andifabytesequence
62 Chapter 6. Utilities
The Python/C API, Release 3.13.0
canbedecodedasasurrogatecharacter,thebytesareescapedusingthesurrogateescapeerrorhandlerinstead
ofdecodingthem.
Return a pointer to a newly allocated wide character string, use PyMem_RawFree() to free the memory. If
sizeisnot NULL,writethenumberofwidecharactersexcludingthenullcharacterinto *size
Return NULLondecodingerrorormemoryallocationerror. If sizeisnot NULL,*sizeissetto (size_t)-1
onmemoryerrororsetto (size_t)-2 ondecodingerror.
Thefilesystem encoding and error handler areselectedby PyConfig_Read() : seefilesystem_encoding
andfilesystem_errors membersof PyConfig .
Decodingerrorsshouldneverhappen,unlessthereisabugintheClibrary.
Usethe Py_EncodeLocale() functiontoencodethecharacterstringbacktoabytestring.
µSee also
ThePyUnicode_DecodeFSDefaultAndSize() andPyUnicode_DecodeLocaleAndSize() func-
tions.
Addedinversion3.5.
Changedinversion3.7: ThefunctionnowusestheUTF-8encodinginthePythonUTF-8Mode.
Changed in version 3.8: The function now uses the UTF-8 encoding on Windows if PyPreConfig.
legacy_windows_fs_encoding iszero;
char* Py_EncodeLocale (constwchar_t*text,size_t*error_pos )
Part of the Stable ABI since version 3.7. Encode a wide character string to the filesystem encoding and
error handler . If the error handler is surrogateescape error handler, surrogate characters in the range
U+DC80..U+DCFFareconvertedtobytes0x80..0xFF.
Return a pointer to a newly allocated byte string, use PyMem_Free() to free the memory. Return NULLon
encodingerrorormemoryallocationerror.
If error_pos is not NULL,*error_pos is set to (size_t)-1 on success, or set to the index of the invalid
characteronencodingerror.
Thefilesystem encoding and error handler areselectedby PyConfig_Read() : seefilesystem_encoding
andfilesystem_errors membersof PyConfig .
Usethe Py_DecodeLocale() functiontodecodethebytesstringbacktoawidecharacterstring.
ÁWarning
Thisfunctionmustnotbecalledbefore Python is preinitialized andsothattheLC_CTYPElocaleisproperly
configured: seethe Py_PreInitialize() function.
µSee also
ThePyUnicode_EncodeFSDefault() andPyUnicode_EncodeLocale() functions.
Addedinversion3.5.
Changedinversion3.7: ThefunctionnowusestheUTF-8encodinginthePythonUTF-8Mode.
Changed in version 3.8: The function now uses the UTF-8 encoding on Windows if PyPreConfig.
legacy_windows_fs_encoding iszero.
6.1. Operating System Utilities 63
The Python/C API, Release 3.13.0
6.2System Functions
These are utility functions that make functionality from the sysmodule accessible to C code. They all work with
thecurrentinterpreterthread’s sysmodule’sdict,whichiscontainedintheinternalthreadstatestructure.
PyObject*PySys_GetObject (constchar*name )
Return value: Borrowed reference. Part of the Stable ABI .Return the object namefrom the sysmodule or
NULLifitdoesnotexist,withoutsettinganexception.
intPySys_SetObject (constchar*name, PyObject*v)
Part of the StableABI .Setnameinthe sysmoduleto vunless visNULL,inwhichcase nameisdeletedfrom
thesysmodule. Returns 0onsuccess, -1onerror.
voidPySys_ResetWarnOptions ()
Part of the Stable ABI .Reset sys.warnoptions to an empty list. This function may be called prior to
Py_Initialize() .
Deprecatedsinceversion3.13,willberemovedinversion3.15: Clear sys.warnoptions andwarnings.
filtersinstead.
voidPySys_WriteStdout (constchar*format,... )
Part of the StableABI .Writetheoutputstringdescribedby formattosys.stdout . Noexceptionsareraised,
eveniftruncationoccurs(seebelow).
formatshould limit the total size of the formatted output string to 1000 bytes or less – after 1000 bytes, the
outputstringistruncated. Inparticular,thismeansthatnounrestricted“%s”formatsshouldoccur;theseshould
belimitedusing“%.<N>s”where<N>isadecimalnumbercalculatedsothat<N>plusthemaximumsizeof
otherformattedtextdoesnotexceed1000bytes. Alsowatchoutfor“%f”,whichcanprinthundredsofdigits
forverylargenumbers.
Ifaproblemoccurs,or sys.stdout isunset,theformattedmessageiswrittentothereal(Clevel) stdout.
voidPySys_WriteStderr (constchar*format,... )
Part of the StableABI .AsPySys_WriteStdout() ,butwriteto sys.stderr orstderrinstead.
voidPySys_FormatStdout (constchar*format,... )
Part of the Stable ABI .Function similar to PySys_WriteStdout() but format the message using
PyUnicode_FromFormatV() anddon’ttruncatethemessagetoanarbitrarylength.
Addedinversion3.2.
voidPySys_FormatStderr (constchar*format,... )
Part of the StableABI .AsPySys_FormatStdout() ,butwriteto sys.stderr orstderrinstead.
Addedinversion3.2.
PyObject*PySys_GetXOptions ()
Return value: Borrowed reference. Part of the Stable ABI since version 3.7. Returnthe current dictionaryof
-Xoptions,similarlyto sys._xoptions . Onerror, NULLisreturnedandanexceptionisset.
Addedinversion3.2.
intPySys_Audit (constchar*event,constchar*format,... )
Part of the Stable ABI since version 3.13. Raise an auditing event with any active hooks. Return zero for
successandnon-zerowithanexceptionsetonfailure.
Theeventstringargumentmustnotbe NULL.
If any hooks have been added, formatand other arguments will be used to construct a tuple to pass. Apart
from N, the same format characters as used in Py_BuildValue() are available. If the built value is not a
tuple,itwillbeaddedintoasingle-elementtuple.
TheNformat option must not be used. It consumes a reference, but since there is no way to know whether
argumentstothisfunctionwillbeconsumed,usingitmaycausereferenceleaks.
64 Chapter 6. Utilities
The Python/C API, Release 3.13.0
Note that #format characters should always be treated as Py_ssize_t , regardless of whether
PY_SSIZE_T_CLEAN wasdefined.
sys.audit() performsthesamefunctionfromPythoncode.
Seealso PySys_AuditTuple() .
Addedinversion3.8.
Changed in version 3.8.2: Require Py_ssize_t for#format characters. Previously, an unavoidable depre-
cationwarningwasraised.
intPySys_AuditTuple (constchar*event, PyObject*args )
Part of the StableABI since version 3.13. Similarto PySys_Audit() ,butpassargumentsasaPythonobject.
argsmustbea tuple. Topassnoarguments, argscanbe NULL.
Addedinversion3.13.
intPySys_AddAuditHook (Py_AuditHookFunction hook,void*userData )
Appendthecallable hooktothelistofactiveauditinghooks. Returnzeroonsuccessandnon-zeroonfailure.
Iftheruntimehasbeeninitialized,alsosetanerroronfailure. HooksaddedthroughthisAPIarecalledforall
interpreterscreatedbytheruntime.
TheuserDatapointer is passed into the hook function. Since hook functions may be called from different
runtimes,thispointershouldnotreferdirectlytoPythonstate.
Thisfunctionissafetocallbefore Py_Initialize() . Whencalledafterruntimeinitialization,existingaudit
hooksarenotifiedandmaysilentlyaborttheoperationbyraisinganerrorsubclassedfrom Exception (other
errorswillnotbesilenced).
ThehookfunctionisalwayscalledwiththeGILheldbythePythoninterpreterthatraisedtheevent.
SeePEP 578for a detailed description of auditing. Functions in the runtime and standard library that raise
eventsarelistedintheauditeventstable. Detailsareineachfunction’sdocumentation.
Iftheinterpreterisinitialized,thisfunctionraisesanauditingevent sys.addaudithook withnoarguments.
If any existing hooks raise an exception derived from Exception , the new hook will not be added and the
exceptioniscleared. Asaresult,callerscannotassumethattheirhookhasbeenaddedunlesstheycontrolall
existinghooks.
typedefint(* Py_AuditHookFunction )(constchar*event, PyObject*args,void*userData)
The type of the hook function. eventis the C string event argument passed to PySys_Audit() or
PySys_AuditTuple() .argsisguaranteedtobea PyTupleObject .userDataistheargumentpassed
toPySys_AddAuditHook().
Addedinversion3.8.
6.3Process Control
voidPy_FatalError (constchar*message )
Part of the StableABI .Printafatalerrormessageandkilltheprocess. Nocleanupisperformed. Thisfunction
shouldonlybeinvokedwhenaconditionisdetectedthatwouldmakeitdangeroustocontinueusingthePython
interpreter; e.g., when the object administration appears to be corrupted. On Unix, the standard C library
function abort()iscalledwhichwillattempttoproducea corefile.
ThePy_FatalError() functionisreplacedwithamacrowhichlogsautomaticallythenameofthecurrent
function,unlessthe Py_LIMITED_API macroisdefined.
Changedinversion3.9: Logthefunctionnameautomatically.
6.3. Process Control 65
The Python/C API, Release 3.13.0
voidPy_Exit (intstatus )
Part of the StableABI .Exitthecurrentprocess. Thiscalls Py_FinalizeEx() andthencallsthestandardC
libraryfunction exit(status) . IfPy_FinalizeEx() indicatesanerror,theexitstatusissetto120.
Changedinversion3.6: Errorsfromfinalizationnolongerignored.
intPy_AtExit (void(*func)() )
Part of the StableABI .Registeracleanupfunctiontobecalledby Py_FinalizeEx() . Thecleanupfunction
willbecalledwithnoargumentsandshouldreturnnovalue. Atmost32cleanupfunctionscanberegistered.
When the registration is successful, Py_AtExit() returns 0; on failure, it returns -1. The cleanup func-
tion registered last is called first. Each cleanup function will be called at most once. Since Python’s internal
finalizationwillhavecompletedbeforethecleanupfunction,noPythonAPIsshouldbecalledby func.
6.4Importing Modules
PyObject*PyImport_ImportModule (constchar*name )
Return value: New reference. Part of the StableABI .Thisisawrapperaround PyImport_Import() which
takesa const char* asanargumentinsteadofa PyObject *.
PyObject*PyImport_ImportModuleNoBlock (constchar*name )
Return value: New reference. Part of the Stable ABI .This function is a deprecated alias of
PyImport_ImportModule() .
Changed in version 3.3: This function used to fail immediately when the import lock was held by another
thread. In Python 3.3 though, the locking scheme switched to per-module locks for most purposes, so this
function’sspecialbehaviourisn’tneededanymore.
Deprecatedsinceversion3.13,willberemovedinversion3.15: Use PyImport_ImportModule() instead.
PyObject*PyImport_ImportModuleEx (constchar*name, PyObject*globals, PyObject*locals, PyObject
*fromlist )
Return value: New reference. Import a module. This is best described by referring to the built-in Python
function __import__() .
Thereturnvalueisanewreferencetotheimportedmoduleortop-levelpackage,or NULLwithanexception
set on failure. Like for __import__() , the return value when a submodule of a package was requested is
normallythetop-levelpackage,unlessanon-empty fromlistwasgiven.
Failingimportsremoveincompletemoduleobjects,likewith PyImport_ImportModule() .
PyObject*PyImport_ImportModuleLevelObject (PyObject*name, PyObject*globals, PyObject*locals,
PyObject*fromlist,intlevel )
Return value: New reference. Part of the StableABI since version 3.7. Importamodule. Thisisbestdescribed
by referring to the built-in Python function __import__() , as the standard __import__() function calls
thisfunctiondirectly.
Thereturnvalueisanewreferencetotheimportedmoduleortop-levelpackage,or NULLwithanexception
set on failure. Like for __import__() , the return value when a submodule of a package was requested is
normallythetop-levelpackage,unlessanon-empty fromlistwasgiven.
Addedinversion3.3.
PyObject*PyImport_ImportModuleLevel (constchar*name, PyObject*globals, PyObject*locals, PyObject
*fromlist,intlevel )
Return value: New reference. Part of the StableABI .Similarto PyImport_ImportModuleLevelObject() ,
butthenameisaUTF-8encodedstringinsteadofaUnicodeobject.
Changedinversion3.3: Negativevaluesfor levelarenolongeraccepted.
PyObject*PyImport_Import (PyObject*name )
Return value: New reference. Part of the Stable ABI .This is a higher-level interface that calls the current
“importhookfunction”(withanexplicit levelof0,meaningabsoluteimport). Itinvokesthe __import__()
66 Chapter 6. Utilities
The Python/C API, Release 3.13.0
functionfromthe __builtins__ ofthecurrentglobals. Thismeansthattheimportisdoneusingwhatever
importhooksareinstalledinthecurrentenvironment.
Thisfunctionalwaysusesabsoluteimports.
PyObject*PyImport_ReloadModule (PyObject*m)
Return value: New reference. Part of the StableABI .Reloadamodule. Returnanewreferencetothereloaded
module,or NULLwithanexceptionsetonfailure(themodulestillexistsinthiscase).
PyObject*PyImport_AddModuleRef (constchar*name )
Return value: New reference. Part of the StableABI since version 3.13. Returnthemoduleobjectcorresponding
toamodulename.
Thenameargumentmaybeoftheform package.module . Firstcheckthemodulesdictionaryifthere’sone
there,andifnot,createanewoneandinsertitinthemodulesdictionary.
Returna strong reference tothemoduleonsuccess. Return NULLwithanexceptionsetonfailure.
Themodulename nameisdecodedfromUTF-8.
Thisfunctiondoesnotloadorimportthemodule;ifthemodulewasn’talreadyloaded,youwillgetanempty
moduleobject. Use PyImport_ImportModule() oroneofitsvariantstoimportamodule. Packagestruc-
turesimpliedbyadottednamefor namearenotcreatedifnotalreadypresent.
Addedinversion3.13.
PyObject*PyImport_AddModuleObject (PyObject*name )
Return value: Borrowed reference. Part of the Stable ABI since version 3.7. Similar to
PyImport_AddModuleRef() ,butreturna borrowed reference andnameisaPython strobject.
Addedinversion3.3.
PyObject*PyImport_AddModule (constchar*name )
Return value: Borrowed reference. Part of the Stable ABI .Similar to PyImport_AddModuleRef() , but
returna borrowed reference .
PyObject*PyImport_ExecCodeModule (constchar*name, PyObject*co)
Return value: New reference. Part of the StableABI .Givenamodulename(possiblyoftheform package.
module)andacodeobjectreadfromaPythonbytecodefileorobtainedfromthebuilt-infunction compile() ,
load the module. Return a new reference to the module object, or NULLwith an exception set if an error
occurred. nameis removed from sys.modules in error cases, even if namewas already in sys.modules
on entry to PyImport_ExecCodeModule() . Leaving incompletely initialized modules in sys.modules
is dangerous, as imports of such modules have no way to know that the module object is an unknown (and
probablydamagedwithrespecttothemoduleauthor’sintents)state.
The module’s __spec__ and__loader__ will be set, if not set already, with the appropriate values. The
spec’s loader will be set to the module’s __loader__ (if set) and to an instance of SourceFileLoader
otherwise.
Themodule’s __file__ attributewillbesettothecodeobject’s co_filename . Ifapplicable, __cached__
willalsobeset.
This function will reload the module if it was already imported. See PyImport_ReloadModule() for the
intendedwaytoreloadamodule.
Ifnamepoints to a dotted name of the form package.module , any package structures not already created
willstillnotbecreated.
Seealso PyImport_ExecCodeModuleEx() andPyImport_ExecCodeModuleWithPathnames() .
Changedinversion3.12: Thesettingof __cached__ and__loader__ isdeprecated. See ModuleSpec for
alternatives.
PyObject*PyImport_ExecCodeModuleEx (constchar*name, PyObject*co,constchar*pathname )
Return value: New reference. Part of the Stable ABI .Like PyImport_ExecCodeModule() , but the
__file__ attributeofthemoduleobjectissetto pathnameifitisnon- NULL.
6.4. Importing Modules 67
The Python/C API, Release 3.13.0
Seealso PyImport_ExecCodeModuleWithPathnames() .
PyObject*PyImport_ExecCodeModuleObject (PyObject*name, PyObject*co,PyObject*pathname, PyObject
*cpathname )
Return value: New reference. Part of the Stable ABI since version 3.7. Like
PyImport_ExecCodeModuleEx() , but the __cached__ attribute of the module object is set to
cpathname ifitisnon- NULL.Ofthethreefunctions,thisisthepreferredonetouse.
Addedinversion3.3.
Changedinversion3.12: Setting __cached__ isdeprecated. See ModuleSpec foralternatives.
PyObject*PyImport_ExecCodeModuleWithPathnames (constchar*name, PyObject*co,constchar
*pathname,constchar*cpathname )
Return value: New reference. Part of the Stable ABI .Like PyImport_ExecCodeModuleObject() , but
name,pathnameandcpathname are UTF-8 encoded strings. Attempts are also made to figure out what the
valuefor pathnameshouldbefrom cpathname iftheformerissetto NULL.
Addedinversion3.2.
Changedinversion3.3: Uses imp.source_from_cache() incalculatingthesourcepathifonlythebyte-
codepathisprovided.
Changedinversion3.12: Nolongerusestheremoved impmodule.
longPyImport_GetMagicNumber ()
Part of the Stable ABI .Return the magic number for Python bytecode files (a.k.a. .pycfile). The magic
numbershouldbepresentinthefirstfourbytesofthebytecodefile,inlittle-endianbyteorder. Returns -1on
error.
Changedinversion3.3: Returnvalueof -1uponfailure.
constchar* PyImport_GetMagicTag ()
Part of the StableABI .Returnthemagictagstringfor PEP 3147 formatPythonbytecodefilenames. Keep
inmindthatthevalueat sys.implementation.cache_tag isauthoritativeandshouldbeusedinsteadof
thisfunction.
Addedinversion3.2.
PyObject*PyImport_GetModuleDict ()
Return value: Borrowed reference. Part of the StableABI .Returnthedictionaryusedforthemoduleadmin-
istration(a.k.a. sys.modules ). Notethatthisisaper-interpretervariable.
PyObject*PyImport_GetModule (PyObject*name )
Return value: New reference. Part of the Stable ABI since version 3.8. Return the already imported module
with the given name. If the module has not been imported yet then returns NULLbut does not set an error.
Returns NULLandsetsanerrorifthelookupfailed.
Addedinversion3.7.
PyObject*PyImport_GetImporter (PyObject*path )
Return value: New reference. Part of the StableABI .Returnafinderobjectfora sys.path /pkg.__path__
itempath,possiblybyfetchingitfromthe sys.path_importer_cache dict. Ifitwasn’tyetcached,traverse
sys.path_hooks until a hook is found that can handle the path item. Return Noneif no hook could; this
tells our caller that the path based finder could not find a finder for this path item. Cache the result in sys.
path_importer_cache . Returnanewreferencetothefinderobject.
intPyImport_ImportFrozenModuleObject (PyObject*name )
Part of the Stable ABI since version 3.7. Load a frozen module named name. Return 1for success, 0if the
moduleisnotfound,and -1withanexceptionsetiftheinitializationfailed. Toaccesstheimportedmodule
onasuccessfulload,use PyImport_ImportModule() . (Notethemisnomer—thisfunctionwouldreload
themoduleifitwasalreadyimported.)
Addedinversion3.3.
68 Chapter 6. Utilities
The Python/C API, Release 3.13.0
Changedinversion3.4: The __file__ attributeisnolongersetonthemodule.
intPyImport_ImportFrozenModule (constchar*name )
Part of the StableABI .Similarto PyImport_ImportFrozenModuleObject() , butthenameisaUTF-8
encodedstringinsteadofaUnicodeobject.
struct _frozen
This is the structure type definition for frozen module descriptors, as generated by the freezeutility (see
Tools/freeze/ inthePythonsourcedistribution). Itsdefinition,foundin Include/import.h ,is:
struct _frozen {
const char *name;
const unsigned char *code;
int size;
bool is_package;
};
Changedinversion3.11: Thenew is_package fieldindicateswhetherthemoduleisapackageornot. This
replacessettingthe sizefieldtoanegativevalue.
conststruct _frozen*PyImport_FrozenModules
Thispointerisinitializedtopointtoanarrayof _frozenrecords,terminatedbyonewhosemembersareall
NULLor zero. When a frozen module is imported, it is searched in this table. Third-party code could play
trickswiththistoprovideadynamicallycreatedcollectionoffrozenmodules.
intPyImport_AppendInittab (constchar*name, PyObject*(*initfunc)(void) )
Part of the Stable ABI .Add a single module to the existing table of built-in modules. This is a convenience
wrapper around PyImport_ExtendInittab() , returning -1if the table could not be extended. The new
modulecanbeimportedbythename name,andusesthefunction initfuncastheinitializationfunctioncalled
onthefirstattemptedimport. Thisshouldbecalledbefore Py_Initialize() .
struct _inittab
Structuredescribingasingleentryinthelistofbuilt-inmodules. ProgramswhichembedPythonmayusean
array of these structures in conjunction with PyImport_ExtendInittab() to provide additional built-in
modules. Thestructureconsistsoftwomembers:
constchar* name
Themodulename,asanASCIIencodedstring.
PyObject*(*initfunc )(void)
Initializationfunctionforamodulebuiltintotheinterpreter.
intPyImport_ExtendInittab (struct _inittab*newtab )
Addacollectionofmodulestothetableofbuilt-inmodules. The newtabarraymustendwithasentinelentry
which contains NULLfor the namefield; failure to provide the sentinel value can result in a memory fault.
Returns 0onsuccessor -1ifinsufficientmemorycouldbeallocatedtoextendtheinternaltable. Intheevent
offailure,nomodulesareaddedtotheinternaltable. Thismustbecalledbefore Py_Initialize() .
If Python is initialized multiple times, PyImport_AppendInittab() orPyImport_ExtendInittab()
mustbecalledbeforeeachPythoninitialization.
6.5Data marshalling support
These routines allow C code to work with serialized objects using the same data format as the marshalmodule.
Therearefunctionstowritedataintotheserializationformat,andadditionalfunctionsthatcanbeusedtoreadthe
databack. Filesusedtostoremarshalleddatamustbeopenedinbinarymode.
Numericvaluesarestoredwiththeleastsignificantbytefirst.
The module supports two versions of the data format: version 0 is the historical version, version 1 shares in-
terned strings in the file, and upon unmarshalling. Version 2 uses a binary format for floating-point numbers.
Py_MARSHAL_VERSION indicatesthecurrentfileformat(currently2).
6.5. Data marshalling support 69
The Python/C API, Release 3.13.0
voidPyMarshal_WriteLongToFile (longvalue,FILE*file,intversion )
Marshala longinteger, value,tofile. Thiswillonlywritetheleast-significant32bitsof value;regardlessof
thesizeofthenative longtype. versionindicatesthefileformat.
Thisfunctioncanfail,inwhichcaseitsetstheerrorindicator. Use PyErr_Occurred() tocheckforthat.
voidPyMarshal_WriteObjectToFile (PyObject*value,FILE*file,intversion )
MarshalaPythonobject, value,tofile.versionindicatesthefileformat.
Thisfunctioncanfail,inwhichcaseitsetstheerrorindicator. Use PyErr_Occurred() tocheckforthat.
PyObject*PyMarshal_WriteObjectToString (PyObject*value,intversion )
Return value: New reference. Returnabytesobjectcontainingthemarshalledrepresentationof value.version
indicatesthefileformat.
Thefollowingfunctionsallowmarshalledvaluestobereadbackin.
longPyMarshal_ReadLongFromFile (FILE*file )
ReturnaC longfromthedatastreamina FILE*openedforreading. Onlya32-bitvaluecanbereadinusing
thisfunction,regardlessofthenativesizeof long.
Onerror,setstheappropriateexception( EOFError )andreturns -1.
intPyMarshal_ReadShortFromFile (FILE*file )
Return a C shortfrom the data stream in a FILE*opened for reading. Only a 16-bit value can be read in
usingthisfunction,regardlessofthenativesizeof short.
Onerror,setstheappropriateexception( EOFError )andreturns -1.
PyObject*PyMarshal_ReadObjectFromFile (FILE*file )
Return value: New reference. ReturnaPythonobjectfromthedatastreamina FILE*openedforreading.
Onerror,setstheappropriateexception( EOFError ,ValueError orTypeError )andreturns NULL.
PyObject*PyMarshal_ReadLastObjectFromFile (FILE*file )
Return value: New reference. Return a Python object from the data stream in a FILE*opened for reading.
Unlike PyMarshal_ReadObjectFromFile() , this function assumes that no further objects will be read
fromthefile,allowingittoaggressivelyloadfiledataintomemorysothatthede-serializationcanoperatefrom
datainmemoryratherthanreadingabyteatatimefromthefile. Onlyusethesevariantifyouarecertainthat
youwon’tbereadinganythingelsefromthefile.
Onerror,setstheappropriateexception( EOFError ,ValueError orTypeError )andreturns NULL.
PyObject*PyMarshal_ReadObjectFromString (constchar*data, Py_ssize_t len)
Return value: New reference. ReturnaPythonobjectfromthedatastreaminabytebuffercontaining lenbytes
pointedtoby data.
Onerror,setstheappropriateexception( EOFError ,ValueError orTypeError )andreturns NULL.
6.6Parsing arguments and building values
These functions are useful when creating your own extensions functions and methods. Additional information and
examplesareavailableinextending-index.
Thefirstthreeofthesefunctionsdescribed, PyArg_ParseTuple() ,PyArg_ParseTupleAndKeywords() ,and
PyArg_Parse() ,alluse format strings whichareusedtotellthefunctionabouttheexpectedarguments. Theformat
stringsusethesamesyntaxforeachofthesefunctions.
6.6.1Parsing arguments
A format string consists of zero or more “format units.” A format unit describes one Python object; it is usually
a single character or a parenthesized sequence of format units. With a few exceptions, a format unit that is not
a parenthesized sequence normally corresponds to a single address argument to these functions. In the following
70 Chapter 6. Utilities
The Python/C API, Release 3.13.0
description,thequotedformistheformatunit;theentryin(round)parenthesesisthePythonobjecttypethatmatches
theformatunit;andtheentryin[square]bracketsisthetypeoftheCvariable(s)whoseaddressshouldbepassed.
Strings and buffers
®Note
OnPython3.12andolder,themacro PY_SSIZE_T_CLEAN mustbedefinedbeforeincluding Python.h touse
all#variantsofformats( s#,y#,etc.) explainedbelow. ThisisnotnecessaryonPython3.13andlater.
These formats allow accessing an object as a contiguous chunk of memory. You don’t have to provide raw storage
forthereturnedunicodeorbytesarea.
Unlessotherwisestated,buffersarenotNUL-terminated.
TherearethreewaysstringsandbufferscanbeconvertedtoC:
•Formats such as y*ands*fill a Py_buffer structure. This locks the underlying buffer so that the caller
cansubsequentlyusethebuffereveninsidea Py_BEGIN_ALLOW_THREADS blockwithouttheriskofmutable
databeingresizedordestroyed. Asaresult, you have to call PyBuffer_Release() afteryouhavefinished
processingthedata(orinanyearlyabortcase).
•Thees,es#,etandet#formatsallocatetheresultbuffer. You have to call PyMem_Free() afteryouhave
finishedprocessingthedata(orinanyearlyabortcase).
•Otherformatstakea stroraread-only bytes-like object ,suchas bytes,andprovidea const char * pointer
toitsbuffer. Inthiscasethebufferis“borrowed”: itismanagedbythecorrespondingPythonobject,andshares
thelifetimeofthisobject. Youwon’thavetoreleaseanymemoryyourself.
To ensure that the underlying buffer may be safely borrowed, the object’s PyBufferProcs.
bf_releasebuffer fieldmustbe NULL.Thisdisallowscommonmutableobjectssuchas bytearray ,but
alsosomeread-onlyobjectssuchas memoryview ofbytes.
Besides this bf_releasebuffer requirement, there is no check to verify whether the input object is im-
mutable(e.g. whetheritwouldhonorarequestforawritablebuffer,orwhetheranotherthreadcanmutatethe
data).
s(str) [const char *]
ConvertaUnicodeobjecttoaCpointertoacharacterstring. Apointertoanexistingstringisstoredinthe
characterpointervariablewhoseaddressyoupass. TheCstringisNUL-terminated. ThePythonstringmust
not contain embedded null code points; if it does, a ValueError exception is raised. Unicode objects are
convertedtoCstringsusing 'utf-8'encoding. Ifthisconversionfails,a UnicodeError israised.
®Note
Thisformatdoesnotaccept bytes-like objects . Ifyouwanttoacceptfilesystempathsandconvertthemto
Ccharacterstrings,itispreferabletousethe O&formatwith PyUnicode_FSConverter() asconverter.
Changedinversion3.5: Previously, TypeError wasraisedwhenembeddednullcodepointswereencountered
inthePythonstring.
s*(strorbytes-like object ) [Py_buffer]
ThisformatacceptsUnicodeobjectsaswellasbytes-likeobjects. Itfillsa Py_buffer structureprovidedby
thecaller. InthiscasetheresultingCstringmaycontainembeddedNULbytes. Unicodeobjectsareconverted
toCstringsusing 'utf-8'encoding.
s#(str, read-only bytes-like object ) [const char *, Py_ssize_t ]
Like s*, except that it provides a borrowed buffer . The result is stored into two C variables, the first one a
pointertoaCstring,thesecondoneitslength. Thestringmaycontainembeddednullbytes. Unicodeobjects
areconvertedtoCstringsusing 'utf-8'encoding.
6.6. Parsing arguments and building values 71
The Python/C API, Release 3.13.0
z(strorNone) [const char *]
Like s,butthePythonobjectmayalsobe None,inwhichcasetheCpointerissetto NULL.
z*(str,bytes-like object orNone) [Py_buffer]
Like s*,butthePythonobjectmayalsobe None,inwhichcasethe bufmemberofthe Py_buffer structure
issetto NULL.
z#(str, read-only bytes-like object orNone) [const char *, Py_ssize_t ]
Like s#,butthePythonobjectmayalsobe None,inwhichcasetheCpointerissetto NULL.
y(read-only bytes-like object ) [const char *]
Thisformatconvertsabytes-likeobjecttoaCpointertoa borrowedcharacterstring;itdoesnotacceptUnicode
objects. Thebytesbuffermustnotcontainembeddednullbytes;ifitdoes,a ValueError exceptionisraised.
Changed in version 3.5: Previously, TypeError was raised when embedded null bytes were encountered in
thebytesbuffer.
y*(bytes-like object ) [Py_buffer]
Thisvarianton s*doesn’tacceptUnicodeobjects,onlybytes-likeobjects. This is the recommended way to
accept binary data.
y#(read-only bytes-like object ) [const char *, Py_ssize_t ]
Thisvarianton s#doesn’tacceptUnicodeobjects,onlybytes-likeobjects.
S(bytes ) [PyBytesObject *]
RequiresthatthePythonobjectisa bytesobject,withoutattemptinganyconversion. Raises TypeError if
theobjectisnotabytesobject. TheCvariablemayalsobedeclaredas PyObject *.
Y(bytearray ) [PyByteArrayObject *]
Requires that the Python object is a bytearray object, without attempting any conversion. Raises
TypeError iftheobjectisnota bytearray object. TheCvariablemayalsobedeclaredas PyObject *.
U(str) [PyObject *]
RequiresthatthePythonobjectisaUnicodeobject,withoutattemptinganyconversion. Raises TypeError
iftheobjectisnotaUnicodeobject. TheCvariablemayalsobedeclaredas PyObject *.
w*(read-write bytes-like object ) [Py_buffer]
This format accepts any object which implements the read-write buffer interface. It fills a Py_buffer
structure provided by the caller. The buffer may contain embedded null bytes. The caller have to call
PyBuffer_Release() whenitisdonewiththebuffer.
es(str) [const char *encoding, char **buffer]
Thisvarianton sisusedforencodingUnicodeintoacharacterbuffer. Itonlyworksforencodeddatawithout
embeddedNULbytes.
Thisformatrequirestwoarguments. Thefirstisonlyusedasinput,andmustbea const char* whichpoints
tothenameofanencodingasaNUL-terminatedstring,or NULL,inwhichcase 'utf-8'encodingisused.
AnexceptionisraisedifthenamedencodingisnotknowntoPython. Thesecondargumentmustbea char**;
the value of the pointer it references will be set to a buffer with the contents of the argument text. The text
willbeencodedintheencodingspecifiedbythefirstargument.
PyArg_ParseTuple() will allocate a buffer of the needed size, copy the encoded data into this buffer and
adjust *buffertoreferencethenewlyallocatedstorage. Thecallerisresponsibleforcalling PyMem_Free() to
freetheallocatedbufferafteruse.
et(str,bytes orbytearray ) [const char *encoding, char **buffer]
Sameas esexceptthatbytestringobjectsarepassedthroughwithoutrecodingthem. Instead,theimplemen-
tationassumesthatthebytestringobjectusestheencodingpassedinasparameter.
es#(str) [const char *encoding, char **buffer, Py_ssize_t *buffer_length]
This variant on s#is used for encoding Unicode into a character buffer. Unlike the esformat, this variant
allowsinputdatawhichcontainsNULcharacters.
Itrequiresthreearguments. Thefirstisonlyusedasinput,andmustbea const char* whichpointstothe
name of an encoding as a NUL-terminated string, or NULL, in which case 'utf-8'encoding is used. An
exceptionisraisedifthenamedencodingisnotknowntoPython. Thesecondargumentmustbea char**;
72 Chapter 6. Utilities
The Python/C API, Release 3.13.0
the value of the pointer it references will be set to a buffer with the contents of the argument text. The text
will be encoded in the encoding specified by the first argument. The third argument must be a pointer to an
integer;thereferencedintegerwillbesettothenumberofbytesintheoutputbuffer.
Therearetwomodesofoperation:
If*bufferpointsa NULLpointer,thefunctionwillallocateabufferoftheneededsize,copytheencodeddata
into this buffer and set *bufferto reference the newly allocated storage. The caller is responsible for calling
PyMem_Free() tofreetheallocatedbufferafterusage.
If*bufferpoints to a non- NULLpointer (an already allocated buffer), PyArg_ParseTuple() will use this
location as the buffer and interpret the initial value of *buffer_length as the buffer size. It will then copy the
encodeddataintothebufferandNUL-terminateit. Ifthebufferisnotlargeenough,a ValueError willbe
set.
Inbothcases, *buffer_length issettothelengthoftheencodeddatawithoutthetrailingNULbyte.
et#(str,bytes orbytearray ) [const char *encoding, char **buffer, Py_ssize_t *buffer_length]
Same as es#except that byte string objects are passed through without recoding them. Instead, the imple-
mentationassumesthatthebytestringobjectusestheencodingpassedinasparameter.
Changedinversion3.12: u,u#,Z,and Z#areremovedbecausetheyusedalegacy Py_UNICODE* representation.
Numbers
b(int) [unsigned char]
ConvertanonnegativePythonintegertoanunsignedtinyint,storedinaC unsigned char .
B(int) [unsigned char]
ConvertaPythonintegertoatinyintwithoutoverflowchecking,storedinaC unsigned char .
h(int) [short int]
ConvertaPythonintegertoaC short int .
H(int) [unsigned short int]
ConvertaPythonintegertoaC unsigned short int ,withoutoverflowchecking.
i(int) [int]
ConvertaPythonintegertoaplainC int.
I(int) [unsigned int]
ConvertaPythonintegertoaC unsigned int ,withoutoverflowchecking.
l(int) [long int]
ConvertaPythonintegertoaC long int .
k(int) [unsigned long]
ConvertaPythonintegertoaC unsigned long withoutoverflowchecking.
L(int) [long long]
ConvertaPythonintegertoaC long long .
K(int) [unsigned long long]
ConvertaPythonintegertoaC unsigned long long withoutoverflowchecking.
n(int) [Py_ssize_t ]
ConvertaPythonintegertoaC Py_ssize_t .
c(bytes orbytearray of length 1) [char]
ConvertaPythonbyte,representedasa bytesorbytearray objectoflength1,toaC char.
Changedinversion3.3: Allow bytearray objects.
C(strof length 1) [int]
ConvertaPythoncharacter,representedasa strobjectoflength1,toaC int.
f(float ) [float]
ConvertaPythonfloating-pointnumbertoaC float.
6.6. Parsing arguments and building values 73
The Python/C API, Release 3.13.0
d(float ) [double]
ConvertaPythonfloating-pointnumbertoaC double.
D(complex ) [Py_complex]
ConvertaPythoncomplexnumbertoaC Py_complex structure.
Other objects
O(object) [PyObject *]
StoreaPythonobject(withoutanyconversion)inaCobjectpointer. TheCprogramthusreceivestheactual
object that was passed. A new strong reference to the object is not created (i.e. its reference count is not
increased). Thepointerstoredisnot NULL.
O!(object) [ typeobject , PyObject *]
Store a Python object in a C object pointer. This is similar to O, but takes two C arguments: the first is the
addressofaPythontypeobject,thesecondistheaddressoftheCvariable(oftype PyObject *)intowhich
theobjectpointerisstored. IfthePythonobjectdoesnothavetherequiredtype, TypeError israised.
O&(object) [ converter ,anything ]
Convert a Python object to a C variable through a converterfunction. This takes two arguments: the first is
a function, the second is the address of a C variable (of arbitrary type), converted to void*. The converter
functioninturniscalledasfollows:
status =converter(object, address);
where objectisthe Python objectto be converted and addressis the void*argument that was passed to the
PyArg_Parse* function. Thereturned statusshouldbe 1forasuccessfulconversionand 0iftheconversion
has failed. When the conversion fails, the converterfunction should raise an exception and leave the content
ofaddressunmodified.
If the converterreturns Py_CLEANUP_SUPPORTED , it may get called a second time if the argument parsing
eventually fails, giving the converter a chance to release any memory that it had already allocated. In this
secondcall,the objectparameterwillbe NULL;addresswillhavethesamevalueasintheoriginalcall.
Changedinversion3.1: Py_CLEANUP_SUPPORTED wasadded.
p(bool) [int]
Tests the value passed in for truth (a boolean predicate) and converts the result to its equivalent C true/false
integervalue. Setstheintto 1iftheexpressionwastrueand 0ifitwasfalse. ThisacceptsanyvalidPython
value. SeetruthformoreinformationabouthowPythontestsvaluesfortruth.
Addedinversion3.3.
(items) (tuple ) [matching-items ]
TheobjectmustbeaPythonsequencewhoselengthisthenumberofformatunitsin items. TheCarguments
mustcorrespondtotheindividualformatunitsin items. Formatunitsforsequencesmaybenested.
Itispossibletopass“long”integers(integerswhosevalueexceedstheplatform’s LONG_MAX )howevernoproperrange
checkingisdone—themostsignificantbitsaresilentlytruncatedwhenthereceivingfieldistoosmalltoreceivethe
value(actually,thesemanticsareinheritedfromdowncastsinC—yourmileagemayvary).
Afewothercharactershaveameaninginaformatstring. Thesemaynotoccurinsidenestedparentheses. Theyare:
|
IndicatesthattheremainingargumentsinthePythonargumentlistareoptional. TheCvariablescorresponding
tooptionalargumentsshouldbeinitializedtotheirdefaultvalue—whenanoptionalargumentisnotspecified,
PyArg_ParseTuple() doesnottouchthecontentsofthecorrespondingCvariable(s).
$
PyArg_ParseTupleAndKeywords() only: IndicatesthattheremainingargumentsinthePythonargument
list are keyword-only. Currently, all keyword-only arguments must also be optional arguments, so |must
alwaysbespecifiedbefore $intheformatstring.
Addedinversion3.3.
74 Chapter 6. Utilities
The Python/C API, Release 3.13.0
:
Thelistofformatunitsendshere;thestringafterthecolonisusedasthefunctionnameinerrormessages(the
“associatedvalue”oftheexceptionthat PyArg_ParseTuple() raises).
;
The list of format units ends here; the string after the semicolon is used as the error message insteadof the
defaulterrormessage. :and;mutuallyexcludeeachother.
NotethatanyPythonobjectreferenceswhichareprovidedtothecallerare borrowedreferences;donotreleasethem
(i.e. donotdecrementtheirreferencecount)!
Additionalargumentspassedtothesefunctionsmustbeaddressesofvariableswhosetypeisdeterminedbytheformat
string;theseareusedtostorevaluesfromtheinputtuple. Thereareafewcases,asdescribedinthelistofformatunits
above, where these parameters are used as input values; they should match what is specified for the corresponding
formatunitinthatcase.
Fortheconversiontosucceed,the argobjectmustmatchtheformatandtheformatmustbeexhausted. Onsuccess,
thePyArg_Parse* functionsreturntrue,otherwisetheyreturnfalseandraiseanappropriateexception. Whenthe
PyArg_Parse* functions fail due to conversion failure in one of the format units, the variables at the addresses
correspondingtothatandthefollowingformatunitsareleftuntouched.
API Functions
intPyArg_ParseTuple (PyObject*args,constchar*format,... )
Part of the Stable ABI .Parse the parameters of a function that takes only positional parameters into local
variables. Returnstrueonsuccess;onfailure,itreturnsfalseandraisestheappropriateexception.
intPyArg_VaParse (PyObject*args,constchar*format,va_listvargs )
Part of the Stable ABI .Identical to PyArg_ParseTuple() , except that it accepts a va_list rather than a
variablenumberofarguments.
intPyArg_ParseTupleAndKeywords (PyObject*args, PyObject*kw,constchar*format,char*const
*keywords,... )
Part of the StableABI .Parsetheparametersofafunctionthattakesbothpositionalandkeywordparameters
intolocalvariables. The keywordsargumentisa NULL-terminatedarrayofkeywordparameternamesspeci-
fiedasnull-terminatedASCIIorUTF-8encodedCstrings. Emptynamesdenote positional-only parameters .
Returnstrueonsuccess;onfailure,itreturnsfalseandraisestheappropriateexception.
®Note
Thekeywordsparameter declaration is char *const* in C and const char *const* in C++. This
canbeoverriddenwiththe PY_CXX_CONST macro.
Changedinversion3.6: Addedsupportfor positional-only parameters .
Changed in version 3.13: The keywordsparameter has now type char *const* in C and const char
*const*inC++,insteadof char**. Addedsupportfornon-ASCIIkeywordparameternames.
intPyArg_VaParseTupleAndKeywords (PyObject*args, PyObject*kw,constchar*format,char*const
*keywords,va_listvargs )
Part of the Stable ABI .Identical to PyArg_ParseTupleAndKeywords() , except that it accepts a va_list
ratherthanavariablenumberofarguments.
intPyArg_ValidateKeywordArguments (PyObject*)
Part of the Stable ABI .Ensure that the keys in the keywords argument dictionary are strings. This is only
neededif PyArg_ParseTupleAndKeywords() isnotused,sincethelatteralreadydoesthischeck.
Addedinversion3.2.
6.6. Parsing arguments and building values 75
The Python/C API, Release 3.13.0
intPyArg_Parse (PyObject*args,constchar*format,... )
Part of the StableABI .Parsetheparameterofafunctionthattakesasinglepositionalparameterintoalocal
variable. Returnstrueonsuccess;onfailure,itreturnsfalseandraisestheappropriateexception.
Example:
// Function using METH_O calling convention
static PyObject *
my_function (PyObject *module, PyObject *arg)
{
int value;
if(!PyArg_Parse(arg, "i:my_function ",&value)) {
return NULL ;
}
// ... use value ...
}
intPyArg_UnpackTuple (PyObject*args,constchar*name, Py_ssize_t min,Py_ssize_t max,... )
Part of the StableABI .Asimplerformofparameterretrievalwhichdoesnotuseaformatstringtospecifythe
types of the arguments. Functions which use this method to retrieve their parameters should be declared as
METH_VARARGS infunctionormethodtables. Thetuplecontainingtheactualparametersshouldbepassedas
args;itmustactuallybeatuple. Thelengthofthetuplemustbeatleast minandnomorethan max;minand
maxmaybeequal. Additionalargumentsmustbepassedtothefunction,eachofwhichshouldbeapointerto
aPyObject *variable;thesewillbefilledinwiththevaluesfrom args;theywillcontain borrowed references .
Thevariableswhichcorrespondtooptionalparametersnotgivenby argswillnotbefilledin;theseshouldbe
initialized by the caller. This function returns true on success and false if argsis not a tuple or contains the
wrongnumberofelements;anexceptionwillbesetiftherewasafailure.
This is an example of the use of this function, taken from the sources for the _weakref helper module for
weakreferences:
static PyObject *
weakref_ref (PyObject *self, PyObject *args)
{
PyObject *object;
PyObject *callback =NULL ;
PyObject *result =NULL ;
if(PyArg_UnpackTuple(args, "ref",1,2,&object, &callback)) {
result =PyWeakref_NewRef(object, callback);
}
return result;
}
The call to PyArg_UnpackTuple() in this example is entirely equivalent to this call to
PyArg_ParseTuple() :
PyArg_ParseTuple(args, "O|O:ref ",&object, &callback)
PY_CXX_CONST
The value to be inserted, if any, before char *const* in the keywordsparameter declaration of
PyArg_ParseTupleAndKeywords() andPyArg_VaParseTupleAndKeywords() . DefaultemptyforC
andconstfor C++ ( const char *const* ). To override, define it to the desired value before including
Python.h .
Addedinversion3.13.
76 Chapter 6. Utilities
The Python/C API, Release 3.13.0
6.6.2Building values
PyObject*Py_BuildValue (constchar*format,... )
Return value: New reference. Part of the Stable ABI .Create a new value based on a format string similar to
those accepted by the PyArg_Parse* family of functions and a sequence of values. Returns the value or
NULLinthecaseofanerror;anexceptionwillberaisedif NULLisreturned.
Py_BuildValue() does not always build a tuple. It builds a tuple only if its format string contains two or
moreformatunits. Iftheformatstringisempty,itreturns None;ifitcontainsexactlyoneformatunit,itreturns
whateverobjectisdescribedbythatformatunit. Toforceittoreturnatupleofsize0orone,parenthesizethe
formatstring.
When memory buffers are passed as parameters to supply data to build objects, as for the sands#formats,
the required data is copied. Buffers provided by the caller are never referenced by the objects created by
Py_BuildValue() . In other words, if your code invokes malloc() and passes the allocated memory to
Py_BuildValue() ,yourcodeisresponsibleforcalling free()forthatmemoryonce Py_BuildValue()
returns.
Inthefollowingdescription,thequotedformistheformatunit;theentryin(round)parenthesesisthePython
objecttypethattheformatunitwillreturn;andtheentryin[square]bracketsisthetypeoftheCvalue(s)to
bepassed.
Thecharactersspace,tab,colonandcommaareignoredinformatstrings(butnotwithinformatunitssuchas
s#). Thiscanbeusedtomakelongformatstringsatadmorereadable.
s(strorNone) [const char *]
Convert a null-terminated C string to a Python strobject using 'utf-8'encoding. If the C string
pointeris NULL,Noneisused.
s#(strorNone) [const char *, Py_ssize_t ]
ConvertaCstringanditslengthtoaPython strobjectusing 'utf-8'encoding. IftheCstringpointer
isNULL,thelengthisignoredand Noneisreturned.
y(bytes ) [const char *]
ThisconvertsaCstringtoaPython bytesobject. IftheCstringpointeris NULL,Noneisreturned.
y#(bytes ) [const char *, Py_ssize_t ]
This converts a C string and its lengths to a Python object. If the C string pointer is NULL,Noneis
returned.
z(strorNone) [const char *]
Sameas s.
z#(strorNone) [const char *, Py_ssize_t ]
Sameas s#.
u(str) [const wchar_t *]
Convert a null-terminated wchar_tbuffer of Unicode (UTF-16 or UCS-4) data to a Python Unicode
object. IftheUnicodebufferpointeris NULL,Noneisreturned.
u#(str) [const wchar_t *, Py_ssize_t ]
Convert a Unicode (UTF-16 or UCS-4) data buffer and its length to a Python Unicode object. If the
Unicodebufferpointeris NULL,thelengthisignoredand Noneisreturned.
U(strorNone) [const char *]
Sameas s.
U#(strorNone) [const char *, Py_ssize_t ]
Sameas s#.
i(int) [int]
ConvertaplainC inttoaPythonintegerobject.
b(int) [char]
ConvertaplainC chartoaPythonintegerobject.
6.6. Parsing arguments and building values 77
The Python/C API, Release 3.13.0
h(int) [short int]
ConvertaplainC short int toaPythonintegerobject.
l(int) [long int]
ConvertaC long int toaPythonintegerobject.
B(int) [unsigned char]
ConvertaC unsigned char toaPythonintegerobject.
H(int) [unsigned short int]
ConvertaC unsigned short int toaPythonintegerobject.
I(int) [unsigned int]
ConvertaC unsigned int toaPythonintegerobject.
k(int) [unsigned long]
ConvertaC unsigned long toaPythonintegerobject.
L(int) [long long]
ConvertaC long long toaPythonintegerobject.
K(int) [unsigned long long]
ConvertaC unsigned long long toaPythonintegerobject.
n(int) [Py_ssize_t ]
ConvertaC Py_ssize_t toaPythoninteger.
c(bytes of length 1) [char]
ConvertaC intrepresentingabytetoaPython bytesobjectoflength1.
C(strof length 1) [int]
ConvertaC intrepresentingacharactertoPython strobjectoflength1.
d(float ) [double]
ConvertaC doubletoaPythonfloating-pointnumber.
f(float ) [float]
ConvertaC floattoaPythonfloating-pointnumber.
D(complex ) [Py_complex *]
ConvertaC Py_complex structuretoaPythoncomplexnumber.
O(object) [PyObject *]
PassaPythonobjectuntouchedbutcreateanew strong reference toit(i.e. itsreferencecountisincre-
mentedbyone). Iftheobjectpassedinisa NULLpointer,itisassumedthatthiswascausedbecausethe
call producing the argument found an error and set an exception. Therefore, Py_BuildValue() will
return NULLbutwon’traiseanexception. Ifnoexceptionhasbeenraisedyet, SystemError isset.
S(object) [PyObject *]
Sameas O.
N(object) [PyObject *]
Sameas O,exceptitdoesn’tcreateanew strong reference . Usefulwhentheobjectiscreatedbyacallto
anobjectconstructorintheargumentlist.
O&(object) [ converter ,anything ]
Convert anythingtoaPythonobjectthrougha converterfunction. Thefunctioniscalledwith anything
(whichshouldbecompatiblewith void*)asitsargumentandshouldreturna“new”Pythonobject,or
NULLifanerroroccurred.
(items) (tuple ) [matching-items ]
ConvertasequenceofCvaluestoaPythontuplewiththesamenumberofitems.
[items] (list) [matching-items ]
ConvertasequenceofCvaluestoaPythonlistwiththesamenumberofitems.
78 Chapter 6. Utilities
The Python/C API, Release 3.13.0
{items} (dict) [matching-items ]
ConvertasequenceofCvaluestoaPythondictionary. EachpairofconsecutiveCvaluesaddsoneitem
tothedictionary,servingaskeyandvalue,respectively.
Ifthereisanerrorintheformatstring,the SystemError exceptionissetand NULLreturned.
PyObject*Py_VaBuildValue (constchar*format,va_listvargs )
Return value: New reference. Part of the StableABI .Identicalto Py_BuildValue() ,exceptthatitacceptsa
va_listratherthanavariablenumberofarguments.
6.7String conversion and formatting
Functionsfornumberconversionandformattedstringoutput.
intPyOS_snprintf (char*str,size_tsize,constchar*format,... )
Part of the Stable ABI .Output not more than sizebytes to straccording to the format string formatand the
extraarguments. SeetheUnixmanpage snprintf(3) .
intPyOS_vsnprintf (char*str,size_tsize,constchar*format,va_listva )
Part of the Stable ABI .Output not more than sizebytes to straccording to the format string formatand the
variableargumentlist va. Unixmanpage vsnprintf(3) .
PyOS_snprintf() and PyOS_vsnprintf() wrap the Standard C library functions snprintf() and
vsnprintf() . Their purpose is to guarantee consistent behavior in corner cases, which the Standard C functions
donot.
Thewrappersensurethat str[size-1] isalways '\0'uponreturn. Theyneverwritemorethan sizebytes(including
thetrailing '\0')intostr. Bothfunctionsrequirethat str != NULL ,size > 0 ,format != NULL andsize <
INT_MAX.NotethatthismeansthereisnoequivalenttotheC99 n = snprintf(NULL, 0, ...) whichwould
determinethenecessarybuffersize.
Thereturnvalue( rv)forthesefunctionsshouldbeinterpretedasfollows:
•When 0 <= rv < size ,theoutputconversionwassuccessfuland rvcharacterswerewrittento str(excluding
thetrailing '\0'byteat str[rv]).
•When rv >= size , the output conversion was truncated and a buffer with rv + 1bytes would have been
neededtosucceed. str[size-1] is'\0'inthiscase.
•When rv < 0, “something bad happened.” str[size-1] is'\0'in this case too, but the rest of stris
undefined. Theexactcauseoftheerrordependsontheunderlyingplatform.
Thefollowingfunctionsprovidelocale-independentstringtonumberconversions.
unsignedlong PyOS_strtoul (constchar*str,char**ptr,intbase )
Part of the StableABI .Converttheinitialpartofthestringin strtoan unsigned long valueaccordingto
thegiven base,whichmustbebetween 2and36inclusive,orbethespecialvalue 0.
Leadingwhitespaceandcaseofcharactersareignored. If baseiszeroitlooksforaleading 0b,0oor0xto
tellwhichbase. Iftheseareabsentitdefaultsto 10. Basemustbe0orbetween2and36(inclusive). If ptr
isnon- NULLitwillcontainapointertotheendofthescan.
If the converted value falls out of range of corresponding return type, range error occurs ( errnois set to
ERANGE)and ULONG_MAX isreturned. Ifnoconversioncanbeperformed, 0isreturned.
SeealsotheUnixmanpage strtoul(3) .
Addedinversion3.2.
longPyOS_strtol (constchar*str,char**ptr,intbase )
Part of the Stable ABI .Convert the initial part of the string in strto an longvalue according to the given
base,whichmustbebetween 2and36inclusive,orbethespecialvalue 0.
Sameas PyOS_strtoul() ,butreturna longvalueinsteadand LONG_MAX onoverflows.
SeealsotheUnixmanpage strtol(3) .
6.7. String conversion and formatting 79
The Python/C API, Release 3.13.0
Addedinversion3.2.
double PyOS_string_to_double (constchar*s,char**endptr, PyObject*overflow_exception )
Part of the Stable ABI .Convert a string sto adouble, raising a Python exception on failure. The set of
accepted strings corresponds to the set of strings accepted by Python’s float()constructor, except that s
mustnothaveleadingortrailingwhitespace. Theconversionisindependentofthecurrentlocale.
IfendptrisNULL,convertthewholestring. Raise ValueError andreturn -1.0ifthestringisnotavalid
representationofafloating-pointnumber.
Ifendptrisnot NULL,convertasmuchofthestringaspossibleandset *endptrtopointtothefirstunconverted
character. Ifnoinitialsegmentofthestringisthevalidrepresentationofafloating-pointnumber,set *endptr
topointtothebeginningofthestring,raiseValueError,andreturn -1.0.
Ifsrepresents a value that is too large to store in a float (for example, "1e500"is such a string on many
platforms)thenif overflow_exception isNULLreturn Py_HUGE_VAL (withanappropriatesign)anddon’t
set any exception. Otherwise, overflow_exception must point to a Python exception object; raise that
exceptionandreturn -1.0. Inbothcases,set *endptrtopointtothefirstcharacteraftertheconvertedvalue.
If any other error occurs during the conversion (for example an out-of-memory error), set the appropriate
Pythonexceptionandreturn -1.0.
Addedinversion3.1.
char* PyOS_double_to_string (doubleval,charformat_code,intprecision,intflags,int*ptype )
Part of the StableABI .Converta double valtoastringusingsupplied format_code ,precision,andflags.
format_code mustbeoneof 'e','E','f','F','g','G'or'r'. For 'r',thesupplied precisionmustbe
0andisignored. The 'r'formatcodespecifiesthestandard repr()format.
flagscan be zero or more of the values Py_DTSF_SIGN ,Py_DTSF_ADD_DOT_0 , orPy_DTSF_ALT , or-ed
together:
•Py_DTSF_SIGN means to always precede the returned string with a sign character, even if valis non-
negative.
•Py_DTSF_ADD_DOT_0 meanstoensurethatthereturnedstringwillnotlooklikeaninteger.
•Py_DTSF_ALT means to apply “alternate” formatting rules. See the documentation for the
PyOS_snprintf() '#'specifierfordetails.
Ifptypeisnon- NULL,thenthevalueitpointstowillbesettooneof Py_DTST_FINITE ,Py_DTST_INFINITE ,
orPy_DTST_NAN ,signifyingthat valisafinitenumber,aninfinitenumber,ornotanumber,respectively.
Thereturnvalueisapointerto bufferwiththeconvertedstringor NULLiftheconversionfailed. Thecalleris
responsibleforfreeingthereturnedstringbycalling PyMem_Free() .
Addedinversion3.1.
intPyOS_stricmp (constchar*s1,constchar*s2 )
Case insensitive comparison of strings. The function works almost identically to strcmp() except that it
ignoresthecase.
intPyOS_strnicmp (constchar*s1,constchar*s2, Py_ssize_t size)
Case insensitive comparison of strings. The function works almost identically to strncmp() except that it
ignoresthecase.
6.8PyHash API
Seealsothe PyTypeObject.tp_hash memberandnumeric-hash.
typePy_hash_t
Hashvaluetype: signedinteger.
Addedinversion3.2.
80 Chapter 6. Utilities
The Python/C API, Release 3.13.0
typePy_uhash_t
Hashvaluetype: unsignedinteger.
Addedinversion3.2.
PyHASH_MODULUS
TheMersenneprime P = 2**n -1 ,usedfornumerichashscheme.
Addedinversion3.13.
PyHASH_BITS
Theexponent nofPinPyHASH_MODULUS .
Addedinversion3.13.
PyHASH_MULTIPLIER
Primemultiplierusedinstringandvariousotherhashes.
Addedinversion3.13.
PyHASH_INF
Thehashvaluereturnedforapositiveinfinity.
Addedinversion3.13.
PyHASH_IMAG
Themultiplierusedfortheimaginarypartofacomplexnumber.
Addedinversion3.13.
typePyHash_FuncDef
Hashfunctiondefinitionusedby PyHash_GetFuncDef() .
constchar* name
Hashfunctionname(UTF-8encodedstring).
constint hash_bits
Internalsizeofthehashvalueinbits.
constint seed_bits
Sizeofseedinputinbits.
Addedinversion3.4.
PyHash_FuncDef *PyHash_GetFuncDef (void)
Getthehashfunctiondefinition.
µSee also
PEP 456“Secureandinterchangeablehashalgorithm”.
Addedinversion3.4.
Py_hash_t Py_HashPointer (constvoid*ptr )
Hashapointervalue: processthepointervalueasaninteger(castitto uintptr_t internally). Thepointeris
notdereferenced.
Thefunctioncannotfail: itcannotreturn -1.
Addedinversion3.13.
6.8. PyHash API 81
The Python/C API, Release 3.13.0
Py_hash_t PyObject_GenericHash (PyObject*obj)
Generichashingfunctionthatismeanttobeputintoatypeobject’s tp_hashslot. Itsresultonlydependson
theobject’sidentity.
CPython implementation detail: InCPython,itisequivalentto Py_HashPointer() .
Addedinversion3.13.
6.9Reflection
PyObject*PyEval_GetBuiltins (void)
Return value: Borrowed reference. Part of the Stable ABI .Deprecated since version 3.13: Use
PyEval_GetFrameBuiltins() instead.
Return a dictionary of the builtins in the current execution frame, or the interpreter of the thread state if no
frameiscurrentlyexecuting.
PyObject*PyEval_GetLocals (void)
Return value: Borrowed reference. Part of the Stable ABI .Deprecated since version 3.13: Use either
PyEval_GetFrameLocals() to obtain the same behaviour as calling locals() in Python code, or else
callPyFrame_GetLocals() on the result of PyEval_GetFrame() to access the f_locals attribute of
thecurrentlyexecutingframe.
Returnamappingprovidingaccesstothelocalvariablesinthecurrentexecutionframe,or NULLifnoframe
iscurrentlyexecuting.
Referto locals() fordetailsofthemappingreturnedatdifferentscopes.
As this function returns a borrowed reference , the dictionary returned for optimized scopes is cached on the
frame object and will remain alive as long as the frame object does. Unlike PyEval_GetFrameLocals()
andlocals() , subsequent calls to this function in the same frame will update the contents of the cached
dictionarytoreflectchangesinthestateofthelocalvariablesratherthanreturninganewsnapshot.
Changed in version 3.13: As part of PEP 667,PyFrame_GetLocals() ,locals() , and FrameType.
f_locals nolongermakeuseofthesharedcachedictionary. RefertotheWhat’sNewentryforadditional
details.
PyObject*PyEval_GetGlobals (void)
Return value: Borrowed reference. Part of the Stable ABI .Deprecated since version 3.13: Use
PyEval_GetFrameGlobals() instead.
Return a dictionary of the global variables in the current execution frame, or NULLif no frame is currently
executing.
PyFrameObject *PyEval_GetFrame (void)
Return value: Borrowed reference. Part of the Stable ABI .Return the current thread state’s frame, which is
NULLifnoframeiscurrentlyexecuting.
Seealso PyThreadState_GetFrame() .
PyObject*PyEval_GetFrameBuiltins (void)
Return value: New reference. Part of the StableABI since version 3.13. Returnadictionaryofthebuiltinsin
thecurrentexecutionframe,ortheinterpreterofthethreadstateifnoframeiscurrentlyexecuting.
Addedinversion3.13.
PyObject*PyEval_GetFrameLocals (void)
Return value: New reference. Part of the StableABI since version 3.13. Returnadictionaryofthelocalvariables
inthecurrentexecutionframe,or NULLifnoframeiscurrentlyexecuting. Equivalenttocalling locals() in
Pythoncode.
Toaccess f_locals onthecurrentframewithoutmakinganindependentsnapshotin optimized scopes ,call
PyFrame_GetLocals() ontheresultof PyEval_GetFrame() .
82 Chapter 6. Utilities
The Python/C API, Release 3.13.0
Addedinversion3.13.
PyObject*PyEval_GetFrameGlobals (void)
Return value: New reference. Part of the Stable ABI since version 3.13. Return a dictionary of the global
variables in the current execution frame, or NULLif no frame is currently executing. Equivalent to calling
globals() inPythoncode.
Addedinversion3.13.
constchar* PyEval_GetFuncName (PyObject*func )
Part of the StableABI .Returnthenameof funcifitisafunction, classorinstanceobject, elsethenameof
funcstype.
constchar* PyEval_GetFuncDesc (PyObject*func )
Part of the Stable ABI .Return a description string, depending on the type of func. Return values include
“()” for functions and methods, “ constructor”, “ instance”, and “ object”. Concatenated with the result of
PyEval_GetFuncName() ,theresultwillbeadescriptionof func.
6.10Codec registry and support functions
intPyCodec_Register (PyObject*search_function )
Part of the StableABI .Registeranewcodecsearchfunction.
Assideeffect,thistriestoloadthe encodings package,ifnotyetdone,tomakesurethatitisalwaysfirstin
thelistofsearchfunctions.
intPyCodec_Unregister (PyObject*search_function )
Part of the Stable ABI since version 3.10. Unregister a codec search function and clear the registry’s cache.
Ifthesearchfunctionisnotregistered,donothing. Return0onsuccess. Raiseanexceptionandreturn-1on
error.
Addedinversion3.10.
intPyCodec_KnownEncoding (constchar*encoding )
Part of the StableABI .Return 1or0dependingonwhetherthereisaregisteredcodecforthegiven encoding.
Thisfunctionalwayssucceeds.
PyObject*PyCodec_Encode (PyObject*object,constchar*encoding,constchar*errors )
Return value: New reference. Part of the StableABI .GenericcodecbasedencodingAPI.
objectis passed through the encoder function found for the given encodingusing the error handling method
definedby errors.errorsmaybe NULLtousethedefaultmethoddefinedforthecodec. Raisesa LookupError
ifnoencodercanbefound.
PyObject*PyCodec_Decode (PyObject*object,constchar*encoding,constchar*errors )
Return value: New reference. Part of the StableABI .GenericcodecbaseddecodingAPI.
objectis passed through the decoder function found for the given encodingusing the error handling method
definedby errors.errorsmaybe NULLtousethedefaultmethoddefinedforthecodec. Raisesa LookupError
ifnoencodercanbefound.
6.10.1 Codec lookup API
In the following functions, the encodingstring is looked up converted to all lower-case characters, which makes
encodings looked up through this mechanism effectively case-insensitive. If no codec is found, a KeyError is set
andNULLreturned.
PyObject*PyCodec_Encoder (constchar*encoding )
Return value: New reference. Part of the StableABI .Getanencoderfunctionforthegiven encoding.
PyObject*PyCodec_Decoder (constchar*encoding )
Return value: New reference. Part of the StableABI .Getadecoderfunctionforthegiven encoding.
6.10. Codec registry and support functions 83
The Python/C API, Release 3.13.0
PyObject*PyCodec_IncrementalEncoder (constchar*encoding,constchar*errors )
Return value: New reference. Part of the Stable ABI .Get an IncrementalEncoder object for the given
encoding.
PyObject*PyCodec_IncrementalDecoder (constchar*encoding,constchar*errors )
Return value: New reference. Part of the Stable ABI .Get an IncrementalDecoder object for the given
encoding.
PyObject*PyCodec_StreamReader (constchar*encoding, PyObject*stream,constchar*errors )
Return value: New reference. Part of the Stable ABI .Get a StreamReader factory function for the given
encoding.
PyObject*PyCodec_StreamWriter (constchar*encoding, PyObject*stream,constchar*errors )
Return value: New reference. Part of the Stable ABI .Get a StreamWriter factory function for the given
encoding.
6.10.2 Registry API for Unicode encoding error handlers
intPyCodec_RegisterError (constchar*name, PyObject*error )
Part of the StableABI .Registertheerrorhandlingcallbackfunction errorunderthegiven name. Thiscallback
functionwillbecalledbyacodecwhenitencountersunencodablecharacters/undecodablebytesand nameis
specifiedastheerrorparameterinthecalltotheencode/decodefunction.
The callback gets a single argument, an instance of UnicodeEncodeError ,UnicodeDecodeError or
UnicodeTranslateError that holds information about the problematic sequence of characters or bytes
andtheiroffsetintheoriginalstring(see Unicode Exception Objects forfunctionstoextractthisinformation).
Thecallbackmusteitherraisethegivenexception,orreturnatwo-itemtuplecontainingthereplacementfor
the problematic sequence, and an integer giving the offset in the original string at which encoding/decoding
shouldberesumed.
Return 0onsuccess, -1onerror.
PyObject*PyCodec_LookupError (constchar*name )
Return value: New reference. Part of the StableABI .Lookuptheerrorhandlingcallbackfunctionregistered
under name. Asaspecialcase NULLcanbepassed,inwhichcasetheerrorhandlingcallbackfor“strict”will
bereturned.
PyObject*PyCodec_StrictErrors (PyObject*exc)
Return value: Always NULL. Part of the StableABI .Raise excasanexception.
PyObject*PyCodec_IgnoreErrors (PyObject*exc)
Return value: New reference. Part of the StableABI .Ignoretheunicodeerror,skippingthefaultyinput.
PyObject*PyCodec_ReplaceErrors (PyObject*exc)
Return value: New reference. Part of the StableABI .Replacetheunicodeencodeerrorwith ?orU+FFFD.
PyObject*PyCodec_XMLCharRefReplaceErrors (PyObject*exc)
Return value: New reference. Part of the StableABI .ReplacetheunicodeencodeerrorwithXMLcharacter
references.
PyObject*PyCodec_BackslashReplaceErrors (PyObject*exc)
Return value: New reference. Part of the StableABI .Replacetheunicodeencodeerrorwithbackslashescapes
(\x,\uand\U).
PyObject*PyCodec_NameReplaceErrors (PyObject*exc)
Return value: New reference. Part of the StableABI since version 3.7. Replacetheunicodeencodeerrorwith
\N{...}escapes.
Addedinversion3.5.
84 Chapter 6. Utilities
The Python/C API, Release 3.13.0
6.11PyTime C API
Addedinversion3.13.
TheclockCAPIprovidesaccesstosystemclocks. ItissimilartothePython timemodule.
ForCAPIrelatedtothe datetime module,see DateTime Objects .
6.11.1 Types
typePyTime_t
Atimestampordurationinnanoseconds,representedasasigned64-bitinteger.
Thereferencepointfortimestampsdependsontheclockused. Forexample, PyTime_Time() returnstimes-
tampsrelativetotheUNIXepoch.
The supported range is around [-292.3 years; +292.3 years]. Using the Unix epoch (January 1st, 1970) as
reference, the supported date range is around [1677-09-21; 2262-04-11]. The exact limits are exposed as
constants:
PyTime_t PyTime_MIN
Minimumvalueof PyTime_t .
PyTime_t PyTime_MAX
Maximumvalueof PyTime_t .
6.11.2 Clock Functions
Thefollowingfunctionstakeapointertoa PyTime_t thattheysettothevalueofaparticularclock. Detailsofeach
clockaregiveninthedocumentationofthecorrespondingPythonfunction.
Thefunctionsreturn 0onsuccess,or -1(withanexceptionset)onfailure.
Onintegeroverflow,theysetthe PyExc_OverflowError exceptionandset *resulttothevalueclampedtothe
[PyTime_MIN; PyTime_MAX] range. (On current systems, integer overflows are likely caused by misconfigured
systemtime.)
AsanyotherCAPI(unlessotherwisespecified),thefunctionsmustbecalledwiththe GILheld.
intPyTime_Monotonic (PyTime_t*result )
Readthemonotonicclock. See time.monotonic() forimportantdetailsonthisclock.
intPyTime_PerfCounter (PyTime_t*result )
Readtheperformancecounter. See time.perf_counter() forimportantdetailsonthisclock.
intPyTime_Time (PyTime_t*result )
Readthe“wallclock”time. See time.time() fordetailsimportantonthisclock.
6.11.3 Raw Clock Functions
Similartoclockfunctions,butdon’tsetanexceptiononerroranddon’trequirethecallertoholdtheGIL.
Onsuccess,thefunctionsreturn 0.
Onfailure,theyset *resultto0andreturn -1,withoutsettinganexception. Togetthecauseoftheerror,acquire
theGILandcalltheregular(non- Raw)function. Notethattheregularfunctionmaysucceedafterthe Rawonefailed.
intPyTime_MonotonicRaw (PyTime_t*result )
Similarto PyTime_Monotonic() ,butdon’tsetanexceptiononerroranddon’trequireholdingtheGIL.
intPyTime_PerfCounterRaw (PyTime_t*result )
Similarto PyTime_PerfCounter() ,butdon’tsetanexceptiononerroranddon’trequireholdingtheGIL.
6.11. PyTime C API 85
The Python/C API, Release 3.13.0
intPyTime_TimeRaw (PyTime_t*result )
Similarto PyTime_Time() ,butdon’tsetanexceptiononerroranddon’trequireholdingtheGIL.
6.11.4 Conversion functions
double PyTime_AsSecondsDouble (PyTime_tt)
ConvertatimestamptoanumberofsecondsasaC double.
Thefunctioncannotfail,butnotethat doublehaslimitedaccuracyforlargevalues.
6.12Support for Perf Maps
On supported platforms (as of this writing, only Linux), the runtime can take advantage of perf map files to make
Pythonfunctionsvisibletoanexternalprofilingtool(suchas perf). Arunningprocessmaycreateafileinthe /tmp
directory,whichcontainsentriesthatcanmapasectionofexecutablecodetoaname. Thisinterfaceisdescribedin
thedocumentationoftheLinuxPerftool .
InPython,thesehelperAPIscanbeusedbylibrariesandfeaturesthatrelyongeneratingmachinecodeonthefly.
NotethatholdingtheGlobalInterpreterLock(GIL)isnotrequiredfortheseAPIs.
intPyUnstable_PerfMapState_Init (void)
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Openthe /tmp/perf-$pid.map file,unlessit’salreadyopened,andcreatealocktoensurethread-safewrites
tothefile(providedthewritesaredonethrough PyUnstable_WritePerfMapEntry() ). Normally,there’s
noneedtocallthisexplicitly;justuse PyUnstable_WritePerfMapEntry() anditwillinitializethestate
onfirstcall.
Returns 0onsuccess, -1onfailuretocreate/opentheperfmapfile,or -2onfailuretocreatealock. Check
errnoformoreinformationaboutthecauseofafailure.
intPyUnstable_WritePerfMapEntry (constvoid*code_addr,unsignedintcode_size,constchar
*entry_name )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Write one single entry to the /tmp/perf-$pid.map file. This function is thread safe. Here is what an
exampleentrylookslike:
#address size name
7f3529f cf759 b py::bar:/run/t.py
Willcall PyUnstable_PerfMapState_Init() beforewritingtheentry,iftheperfmapfileisnotalready
opened. Returns 0onsuccess,orthesameerrorcodesas PyUnstable_PerfMapState_Init() onfailure.
voidPyUnstable_PerfMapState_Fini (void)
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
86 Chapter 6. Utilities
The Python/C API, Release 3.13.0
Close the perf map file opened by PyUnstable_PerfMapState_Init() . This is called by the runtime
itself during interpreter shut-down. In general, there shouldn’t be a reason to explicitly call this, except to
handlespecificscenariossuchasforking.
6.12. Support for Perf Maps 87
The Python/C API, Release 3.13.0
88 Chapter 6. Utilities
CHAPTER
SEVEN
ABSTRACT OBJECTS LAYER
ThefunctionsinthischapterinteractwithPythonobjectsregardlessoftheirtype,orwithwideclassesofobjecttypes
(e.g. all numerical types, or all sequence types). When used on object types for which they do not apply, they will
raiseaPythonexception.
Itisnotpossibletousethesefunctionsonobjectsthatarenotproperlyinitialized,suchasalistobjectthathasbeen
createdby PyList_New() ,butwhoseitemshavenotbeensettosomenon- NULLvalueyet.
7.1Object Protocol
PyObject*Py_GetConstant (unsignedintconstant_id )
Part of the StableABI since version 3.13. Geta strong reference toaconstant.
Setanexceptionandreturn NULLifconstant_id isinvalid.
constant_id mustbeoneoftheseconstantidentifiers:
89
The Python/C API, Release 3.13.0
ConstantIdentifier Value Returnedobject
Py_CONSTANT_NONE0 None
Py_CONSTANT_FALSE1 False
Py_CONSTANT_TRUE2 True
Py_CONSTANT_ELLIPSIS3 Ellipsis
Py_CONSTANT_NOT_IMPLEMENTED4 NotImplemented
Py_CONSTANT_ZERO5 0
Py_CONSTANT_ONE6 1
Py_CONSTANT_EMPTY_STR7 ''
Py_CONSTANT_EMPTY_BYTES8 b''
Py_CONSTANT_EMPTY_TUPLE9 ()
Numericvaluesareonlygivenforprojectswhichcannotusetheconstantidentifiers.
Addedinversion3.13.
CPython implementation detail: InCPython,alloftheseconstantsare immortal.
PyObject*Py_GetConstantBorrowed (unsignedintconstant_id )
Part of the StableABI since version 3.13. Similarto Py_GetConstant() ,butreturna borrowed reference .
Thisfunctionisprimarilyintendedforbackwardscompatibility: using Py_GetConstant() isrecommended
fornewcode.
Thereferenceisborrowedfromtheinterpreter,andisvaliduntiltheinterpreterfinalization.
Addedinversion3.13.
PyObject*Py_NotImplemented
TheNotImplemented singleton,usedtosignalthatanoperationisnotimplementedforthegiventypecom-
bination.
Py_RETURN_NOTIMPLEMENTED
Properlyhandlereturning Py_NotImplemented fromwithinaCfunction(thatis,createanew strong refer-
encetoNotImplemented andreturnit).
Py_PRINT_RAW
Flag to be used with multiple functions that print the object (like PyObject_Print() and
PyFile_WriteObject() ). If passed, these function would use the str()of the object instead of the
repr().
90 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
intPyObject_Print (PyObject*o,FILE*fp,intflags )
Printanobject o,onfile fp. Returns -1onerror. Theflagsargumentisusedtoenablecertainprintingoptions.
Theonlyoptioncurrentlysupportedis Py_PRINT_RAW ;ifgiven,the str()oftheobjectiswritteninsteadof
therepr().
intPyObject_HasAttrWithError (PyObject*o,constchar*attr_name )
Part of the StableABI since version 3.13. Returns 1ifohastheattribute attr_name,and 0otherwise. Thisis
equivalenttothePythonexpression hasattr(o, attr_name) . Onfailure,return -1.
Addedinversion3.13.
intPyObject_HasAttrStringWithError (PyObject*o,constchar*attr_name )
Part of the Stable ABI since version 3.13. This is the same as PyObject_HasAttrWithError() , but
attr_nameisspecifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
Addedinversion3.13.
intPyObject_HasAttr (PyObject*o,PyObject*attr_name )
Part of the Stable ABI .Returns 1ifohas the attribute attr_name, and 0otherwise. This function always
succeeds.
®Note
Exceptions that occur when this calls __getattr__() and __getattribute__() meth-
ods are silently ignored. For proper error handling, use PyObject_HasAttrWithError() ,
PyObject_GetOptionalAttr() orPyObject_GetAttr() instead.
intPyObject_HasAttrString (PyObject*o,constchar*attr_name )
Part of the Stable ABI .This is the same as PyObject_HasAttr() , butattr_name is specified as a const
char*UTF-8encodedbytesstring,ratherthana PyObject *.
®Note
Exceptions that occur when this calls __getattr__() and __getattribute__() methods
or while creating the temporary strobject are silently ignored. For proper error han-
dling, use PyObject_HasAttrStringWithError() ,PyObject_GetOptionalAttrString() or
PyObject_GetAttrString() instead.
PyObject*PyObject_GetAttr (PyObject*o,PyObject*attr_name )
Return value: New reference. Part of the Stable ABI .Retrieve an attribute named attr_name from object o.
Returns the attribute value on success, or NULLon failure. This is the equivalent of the Python expression
o.attr_name .
If the missing attribute should not be treated as a failure, you can use PyObject_GetOptionalAttr()
instead.
PyObject*PyObject_GetAttrString (PyObject*o,constchar*attr_name )
Return value: New reference. Part of the Stable ABI .This is the same as PyObject_GetAttr() , but
attr_nameisspecifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
If the missing attribute should not be treated as a failure, you can use
PyObject_GetOptionalAttrString() instead.
intPyObject_GetOptionalAttr (PyObject*obj, PyObject*attr_name, PyObject**result );
Part of the Stable ABI since version 3.13. Variant of PyObject_GetAttr() which doesn’t raise
AttributeError iftheattributeisnotfound.
If the attribute is found, return 1and set *resultto a new strong reference to the attribute. If the attribute
is not found, return 0and set *resulttoNULL; the AttributeError is silenced. If an error other than
AttributeError israised,return -1andset *resulttoNULL.
7.1. Object Protocol 91
The Python/C API, Release 3.13.0
Addedinversion3.13.
intPyObject_GetOptionalAttrString (PyObject*obj,constchar*attr_name, PyObject**result );
Part of the Stable ABI since version 3.13. This is the same as PyObject_GetOptionalAttr() , but
attr_nameisspecifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
Addedinversion3.13.
PyObject*PyObject_GenericGetAttr (PyObject*o,PyObject*name )
Return value: New reference. Part of the StableABI .Genericattributegetterfunctionthatismeanttobeput
into a type object’s tp_getattro slot. It looks for a descriptor in the dictionary of classes in the object’s
MROaswellasanattributeintheobject’s __dict__ (ifpresent). Asoutlinedindescriptors,datadescriptors
takepreferenceoverinstanceattributes,whilenon-datadescriptorsdon’t. Otherwise,an AttributeError is
raised.
intPyObject_SetAttr (PyObject*o,PyObject*attr_name, PyObject*v)
Part of the Stable ABI .Set the value of the attribute named attr_name, for object o, to the value v. Raise
an exception and return -1on failure; return 0on success. This is the equivalent of the Python statement
o.attr_name = v .
IfvisNULL,theattributeisdeleted. Thisbehaviourisdeprecatedinfavourofusing PyObject_DelAttr() ,
buttherearecurrentlynoplanstoremoveit.
intPyObject_SetAttrString (PyObject*o,constchar*attr_name, PyObject*v)
Part of the Stable ABI .This is the same as PyObject_SetAttr() , butattr_name is specified as a const
char*UTF-8encodedbytesstring,ratherthana PyObject *.
IfvisNULL, the attribute is deleted, but this feature is deprecated in favour of using
PyObject_DelAttrString() .
The number of different attribute names passed to this function should be kept small, usually by us-
ing a statically allocated string as attr_name. For attribute names that aren’t known at compile time,
prefer calling PyUnicode_FromString() andPyObject_SetAttr() directly. For more details, see
PyUnicode_InternFromString() ,whichmaybeusedinternallytocreateakeyobject.
intPyObject_GenericSetAttr (PyObject*o,PyObject*name, PyObject*value )
Part of the StableABI .Genericattributesetteranddeleterfunctionthatismeanttobeputintoatypeobject’s
tp_setattro slot. Itlooksforadatadescriptorinthedictionaryofclassesintheobject’sMRO,andiffound
ittakespreferenceoversettingordeletingtheattributeintheinstancedictionary. Otherwise,theattributeisset
ordeletedintheobject’s __dict__ (ifpresent). Onsuccess, 0isreturned,otherwisean AttributeError
israisedand -1isreturned.
intPyObject_DelAttr (PyObject*o,PyObject*attr_name )
Part of the Stable ABI since version 3.13. Delete attribute named attr_name, for object o. Returns -1on
failure. ThisistheequivalentofthePythonstatement del o.attr_name .
intPyObject_DelAttrString (PyObject*o,constchar*attr_name )
Part of the Stable ABI since version 3.13. This is the same as PyObject_DelAttr() , but attr_name is
specifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
The number of different attribute names passed to this function should be kept small, usually by us-
ing a statically allocated string as attr_name. For attribute names that aren’t known at compile time,
prefer calling PyUnicode_FromString() andPyObject_DelAttr() directly. For more details, see
PyUnicode_InternFromString() ,whichmaybeusedinternallytocreateakeyobjectforlookup.
PyObject*PyObject_GenericGetDict (PyObject*o,void*context )
Return value: New reference. Part of the StableABI since version 3.10. Agenericimplementationforthegetter
ofa__dict__ descriptor. Itcreatesthedictionaryifnecessary.
This function may also be called to get the __dict__ of the object o. Pass NULLforcontextwhen call-
ing it. Since this function may need to allocate memory for the dictionary, it may be more efficient to call
PyObject_GetAttr() whenaccessinganattributeontheobject.
Onfailure,returns NULLwithanexceptionset.
92 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
Addedinversion3.3.
intPyObject_GenericSetDict (PyObject*o,PyObject*value,void*context )
Part of the StableABI since version 3.7. Agenericimplementationforthesetterofa __dict__ descriptor.
Thisimplementationdoesnotallowthedictionarytobedeleted.
Addedinversion3.3.
PyObject**_PyObject_GetDictPtr (PyObject*obj)
Return a pointer to __dict__ of the object obj. If there is no __dict__ , return NULLwithout setting an
exception.
This function may need to allocate memory for the dictionary, so it may be more efficient to call
PyObject_GetAttr() whenaccessinganattributeontheobject.
PyObject*PyObject_RichCompare (PyObject*o1,PyObject*o2,intopid )
Return value: New reference. Part of the Stable ABI .Compare the values of o1ando2using the operation
specifiedby opid,whichmustbeoneof Py_LT,Py_LE,Py_EQ,Py_NE,Py_GT,orPy_GE,correspondingto
<,<=,==,!=,>,or>=respectively. ThisistheequivalentofthePythonexpression o1 op o2 ,where opis
theoperatorcorrespondingto opid. Returnsthevalueofthecomparisononsuccess,or NULLonfailure.
intPyObject_RichCompareBool (PyObject*o1,PyObject*o2,intopid )
Part of the Stable ABI .Compare the values of o1ando2using the operation specified by opid, like
PyObject_RichCompare() ,butreturns -1onerror, 0iftheresultisfalse, 1otherwise.
®Note
Ifo1ando2arethesameobject, PyObject_RichCompareBool() willalwaysreturn 1forPy_EQand0for
Py_NE.
PyObject*PyObject_Format (PyObject*obj, PyObject*format_spec )
Part of the Stable ABI .Format objusing format_spec . This is equivalent to the Python expression
format(obj, format_spec) .
format_spec maybe NULL.Inthiscasethecallisequivalentto format(obj) . Returnstheformattedstring
onsuccess, NULLonfailure.
PyObject*PyObject_Repr (PyObject*o)
Return value: New reference. Part of the StableABI .Computeastringrepresentationofobject o. Returnsthe
string representation on success, NULLon failure. This is the equivalent of the Python expression repr(o).
Calledbythe repr()built-infunction.
Changed in version 3.4: This function now includes a debug assertion to help ensure that it does not silently
discardanactiveexception.
PyObject*PyObject_ASCII (PyObject*o)
Return value: New reference. Part of the StableABI .AsPyObject_Repr() ,computeastringrepresentation
ofobject o,butescapethenon-ASCIIcharactersinthestringreturnedby PyObject_Repr() with\x,\uor
\Uescapes. Thisgeneratesastringsimilartothatreturnedby PyObject_Repr() inPython2. Calledbythe
ascii()built-infunction.
PyObject*PyObject_Str (PyObject*o)
Return value: New reference. Part of the Stable ABI .Compute a string representation of object o. Returns
thestringrepresentationonsuccess, NULLonfailure. ThisistheequivalentofthePythonexpression str(o).
Calledbythe str()built-infunctionand,therefore,bythe print()function.
Changed in version 3.4: This function now includes a debug assertion to help ensure that it does not silently
discardanactiveexception.
7.1. Object Protocol 93
The Python/C API, Release 3.13.0
PyObject*PyObject_Bytes (PyObject*o)
Return value: New reference. Part of the Stable ABI .Compute a bytes representation of object o.NULLis
returnedonfailureandabytesobjectonsuccess. ThisisequivalenttothePythonexpression bytes(o) ,when
oisnotaninteger. Unlike bytes(o) ,aTypeErrorisraisedwhen oisanintegerinsteadofazero-initialized
bytesobject.
intPyObject_IsSubclass (PyObject*derived, PyObject*cls)
Part of the Stable ABI .Return 1if the class derivedis identical to or derived from the class cls, otherwise
return 0. Incaseofanerror,return -1.
Ifclsisatuple,thecheckwillbedoneagainsteveryentryin cls. Theresultwillbe 1whenatleastoneofthe
checksreturns 1,otherwiseitwillbe 0.
Ifclshas a __subclasscheck__() method, it will be called to determine the subclass status as described
inPEP 3119 . Otherwise, derivedis a subclass of clsif it is a direct or indirect subclass, i.e. contained in
cls.__mro__ .
Normallyonlyclassobjects,i.e. instancesof typeoraderivedclass,areconsideredclasses. However,objects
canoverridethisbyhavinga __bases__ attribute(whichmustbeatupleofbaseclasses).
intPyObject_IsInstance (PyObject*inst, PyObject*cls)
Part of the StableABI .Return 1ifinstisaninstanceoftheclass clsorasubclassof cls,or0ifnot. Onerror,
returns -1andsetsanexception.
Ifclsisatuple,thecheckwillbedoneagainsteveryentryin cls. Theresultwillbe 1whenatleastoneofthe
checksreturns 1,otherwiseitwillbe 0.
Ifclshasa __instancecheck__() method,itwillbecalledtodeterminethesubclassstatusasdescribedin
PEP 3119. Otherwise, instisaninstanceof clsifitsclassisasubclassof cls.
Aninstance instcanoverridewhatisconsidereditsclassbyhavinga __class__ attribute.
An object clscan override if it is considered a class, and what its base classes are, by having a __bases__
attribute(whichmustbeatupleofbaseclasses).
Py_hash_t PyObject_Hash (PyObject*o)
Part of the StableABI .Computeandreturnthehashvalueofanobject o. Onfailure, return -1. Thisisthe
equivalentofthePythonexpression hash(o).
Changed in version 3.2: The return type is now Py_hash_t. This is a signed integer the same size as
Py_ssize_t .
Py_hash_t PyObject_HashNotImplemented (PyObject*o)
Part of the StableABI .Seta TypeError indicatingthat type(o)isnot hashableandreturn -1. Thisfunction
receivesspecialtreatmentwhenstoredina tp_hashslot,allowingatypetoexplicitlyindicatetotheinterpreter
thatitisnothashable.
intPyObject_IsTrue (PyObject*o)
Part of the StableABI .Returns 1iftheobject oisconsideredtobetrue,and 0otherwise. Thisisequivalent
tothePythonexpression not not o . Onfailure,return -1.
intPyObject_Not (PyObject*o)
Part of the StableABI .Returns 0iftheobject oisconsideredtobetrue,and 1otherwise. Thisisequivalent
tothePythonexpression not o. Onfailure,return -1.
PyObject*PyObject_Type (PyObject*o)
Return value: New reference. Part of the StableABI .When oisnon- NULL,returnsatypeobjectcorrespond-
ing to the object type of object o. On failure, raises SystemError and returns NULL. This is equivalent to
the Python expression type(o). This function creates a new strong reference to the return value. There’s
really no reason to use this function instead of the Py_TYPE() function, which returns a pointer of type
PyTypeObject *,exceptwhenanew strong reference isneeded.
94 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
intPyObject_TypeCheck (PyObject*o,PyTypeObject *type )
Returnnon-zeroiftheobject oisoftype typeorasubtypeof type,and 0otherwise. Bothparametersmustbe
non-NULL.
Py_ssize_t PyObject_Size (PyObject*o)
Py_ssize_t PyObject_Length (PyObject*o)
Part of the StableABI .Returnthelengthofobject o. Iftheobject oprovideseitherthesequenceandmapping
protocols, the sequence length is returned. On error, -1is returned. This is the equivalent to the Python
expression len(o).
Py_ssize_t PyObject_LengthHint (PyObject*o,Py_ssize_t defaultvalue )
Return an estimated length for the object o. First try to return its actual length, then an estimate using
__length_hint__() , and finally return the default value. On error return -1. This is the equivalent to
thePythonexpression operator.length_hint(o, defaultvalue) .
Addedinversion3.4.
PyObject*PyObject_GetItem (PyObject*o,PyObject*key)
Return value: New reference. Part of the StableABI .Returnelementof ocorrespondingtotheobject keyor
NULLonfailure. ThisistheequivalentofthePythonexpression o[key].
intPyObject_SetItem (PyObject*o,PyObject*key, PyObject*v)
Part of the StableABI .Maptheobject keytothevalue v. Raiseanexceptionandreturn -1onfailure;return
0on success. This is the equivalent of the Python statement o[key] = v . This function does notsteal a
referenceto v.
intPyObject_DelItem (PyObject*o,PyObject*key)
Part of the StableABI .Removethemappingfortheobject keyfromtheobject o. Return -1onfailure. This
isequivalenttothePythonstatement del o[key] .
PyObject*PyObject_Dir (PyObject*o)
Return value: New reference. Part of the Stable ABI .This is equivalent to the Python expression dir(o),
returninga(possiblyempty)listofstringsappropriatefortheobjectargument,or NULLiftherewasanerror.
Iftheargumentis NULL,thisislikethePython dir(),returningthenamesofthecurrentlocals;inthiscase,
ifnoexecutionframeisactivethen NULLisreturnedbut PyErr_Occurred() willreturnfalse.
PyObject*PyObject_GetIter (PyObject*o)
Return value: New reference. Part of the StableABI .ThisisequivalenttothePythonexpression iter(o). It
returns a new iterator for the object argument, or the object itself if the object is already an iterator. Raises
TypeError andreturns NULLiftheobjectcannotbeiterated.
PyObject*PyObject_GetAIter (PyObject*o)
Return value: New reference. Part of the Stable ABI since version 3.10. This is the equivalent to the Python
expression aiter(o) . Takes an AsyncIterable object and returns an AsyncIterator for it. This is
typicallyanewiteratorbutiftheargumentisan AsyncIterator ,thisreturnsitself. Raises TypeError and
returns NULLiftheobjectcannotbeiterated.
Addedinversion3.10.
void* PyObject_GetTypeData (PyObject*o,PyTypeObject *cls)
Part of the StableABI since version 3.12. Getapointertosubclass-specificdatareservedfor cls.
The object omust be an instance of cls, and clsmust have been created using negative PyType_Spec.
basicsize . Pythondoesnotcheckthis.
Onerror,setanexceptionandreturn NULL.
Addedinversion3.12.
Py_ssize_t PyType_GetTypeDataSize (PyTypeObject *cls)
Part of the StableABI since version 3.12. Returnthesizeoftheinstancememoryspacereservedfor cls, i.e.
thesizeofthememory PyObject_GetTypeData() returns.
7.1. Object Protocol 95
The Python/C API, Release 3.13.0
This may be larger than requested using -PyType_Spec.basicsize ; it is safe to use this larger size (e.g.
withmemset() ).
Thetype clsmusthavebeencreatedusingnegative PyType_Spec.basicsize . Pythondoesnotcheckthis.
Onerror,setanexceptionandreturnanegativevalue.
Addedinversion3.12.
void* PyObject_GetItemData (PyObject*o)
Getapointertoper-itemdataforaclasswith Py_TPFLAGS_ITEMS_AT_END .
On error, set an exception and return NULL.TypeError is raised if odoes not have
Py_TPFLAGS_ITEMS_AT_END set.
Addedinversion3.12.
intPyObject_VisitManagedDict (PyObject*obj, visitprocvisit,void*arg )
Visitthemanageddictionaryof obj.
This function must only be called in a traverse function of the type which has the
Py_TPFLAGS_MANAGED_DICT flagset.
Addedinversion3.13.
voidPyObject_ClearManagedDict (PyObject*obj)
Clearthemanageddictionaryof obj.
This function must only be called in a traverse function of the type which has the
Py_TPFLAGS_MANAGED_DICT flagset.
Addedinversion3.13.
7.2Call Protocol
CPythonsupportstwodifferentcallingprotocols: tp_callandvectorcall.
7.2.1Thetp_call Protocol
Instancesofclassesthatset tp_callarecallable. Thesignatureoftheslotis:
PyObject *tp_call (PyObject *callable, PyObject *args, PyObject *kwargs);
A call is made using a tuple for the positional arguments and a dict for the keyword arguments, similarly to
callable(*args, **kwargs) in Python code. argsmust be non-NULL (use an empty tuple if there are no
arguments)but kwargsmaybe NULLiftherearenokeywordarguments.
Thisconventionisnotonlyusedby tp_call:tp_newandtp_initalsopassargumentsthisway.
Tocallanobject,use PyObject_Call() oranother call API.
7.2.2The Vectorcall Protocol
Addedinversion3.9.
Thevectorcallprotocolwasintroducedin PEP 590asanadditionalprotocolformakingcallsmoreefficient.
Asruleofthumb,CPythonwillpreferthevectorcallforinternalcallsifthecallablesupportsit. However,thisisnot
a hard rule. Additionally, some third-party extensions use tp_calldirectly (rather than using PyObject_Call() ).
Therefore, a class supporting vectorcall must also implement tp_call. Moreover, the callable must behave the
same regardless of which protocol is used. The recommended way to achieve this is by setting tp_callto
PyVectorcall_Call() . Thisbearsrepeating:
96 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
ÁWarning
Aclasssupportingvectorcall mustalsoimplement tp_callwiththesamesemantics.
Changedinversion3.12: The Py_TPFLAGS_HAVE_VECTORCALL flagisnowremovedfromaclasswhentheclass’s
__call__() method is reassigned. (This internally sets tp_callonly, and thus may make it behave differently
than the vectorcall function.) In earlier Python versions, vectorcall should only be used with immutable or static
types.
A class should not implement vectorcall if that would be slower than tp_call. For example, if the callee needs to
converttheargumentstoanargstupleandkwargsdictanyway,thenthereisnopointinimplementingvectorcall.
Classes can implement the vectorcall protocol by enabling the Py_TPFLAGS_HAVE_VECTORCALL flag and setting
tp_vectorcall_offset totheoffsetinsidetheobjectstructurewherea vectorcallfunc appears. Thisisapointer
toafunctionwiththefollowingsignature:
typedef PyObject*(*vectorcallfunc )(PyObject*callable, PyObject*const*args,size_tnargsf, PyObject
*kwnames)
Part of the StableABI since version 3.12.
•callableistheobjectbeingcalled.
•argsis a C array consisting of the positional arguments followed by the
valuesofthekeywordarguments. Thiscanbe NULLiftherearenoarguments.
•nargsf is the number of positional arguments plus possibly the
PY_VECTORCALL_ARGUMENTS_OFFSET flag. To get the actual number of positional arguments from
nargsf,use PyVectorcall_NARGS() .
•kwnames is a tuple containing the names of the keyword arguments;
inotherwords,thekeysofthekwargsdict. Thesenamesmustbestrings(instancesof strorasubclass)
andtheymustbeunique. Iftherearenokeywordarguments,then kwnamescaninsteadbe NULL.
PY_VECTORCALL_ARGUMENTS_OFFSET
Part of the StableABI since version 3.12. Ifthisflagissetinavectorcall nargsfargument,thecalleeisallowed
to temporarily change args[-1] . In other words, argspoints to argument 1 (not 0) in the allocated vector.
Thecalleemustrestorethevalueof args[-1] beforereturning.
ForPyObject_VectorcallMethod() ,thisflagmeansinsteadthat args[0]maybechanged.
Whenever they can do so cheaply (without additional allocation), callers are encouraged to use
PY_VECTORCALL_ARGUMENTS_OFFSET .Doingsowillallowcallablessuchasboundmethodstomaketheir
onwardcalls(whichincludeaprepended selfargument)veryefficiently.
Addedinversion3.8.
To call an object that implements vectorcall, use a call API function as with any other callable.
PyObject_Vectorcall() willusuallybemostefficient.
Recursion Control
Whenusing tp_call,calleesdonotneedtoworryabout recursion: CPythonuses Py_EnterRecursiveCall() and
Py_LeaveRecursiveCall() forcallsmadeusing tp_call.
For efficiency, this is not the case for calls done using vectorcall: the callee should use Py_EnterRecursiveCall and
Py_LeaveRecursiveCall ifneeded.
Vectorcall Support API
Py_ssize_t PyVectorcall_NARGS (size_tnargsf )
Part of the Stable ABI since version 3.12. Given a vectorcall nargsfargument, return the actual number of
arguments. Currentlyequivalentto:
7.2. Call Protocol 97
The Python/C API, Release 3.13.0
(Py_ssize_t)(nargsf &~PY_VECTORCALL_ARGUMENTS_OFFSET)
However,thefunction PyVectorcall_NARGS shouldbeusedtoallowforfutureextensions.
Addedinversion3.8.
vectorcallfunc PyVectorcall_Function (PyObject*op)
Ifopdoesnotsupportthevectorcallprotocol(eitherbecausethetypedoesnotorbecausethespecificinstance
does not), return NULL. Otherwise, return the vectorcall function pointer stored in op. This function never
raisesanexception.
This is mostly useful to check whether or not opsupports vectorcall, which can be done by checking
PyVectorcall_Function(op) != NULL .
Addedinversion3.9.
PyObject*PyVectorcall_Call (PyObject*callable, PyObject*tuple, PyObject*dict)
Part of the Stable ABI since version 3.12. Callcallable’svectorcallfunc with positional and keyword
argumentsgiveninatupleanddict,respectively.
This is a specialized function, intended to be put in the tp_callslot or be used in an implementation of
tp_call. Itdoesnotcheckthe Py_TPFLAGS_HAVE_VECTORCALL flaganditdoesnotfallbackto tp_call.
Addedinversion3.8.
7.2.3Object Calling API
Various functions are available for calling a Python object. Each converts its arguments to a convention supported
bythecalledobject–either tp_callorvectorcall. Inordertodoaslittleconversionaspossible,pickonethatbestfits
theformatofdatayouhaveavailable.
Thefollowingtablesummarizestheavailablefunctions;pleaseseeindividualdocumentationfordetails.
Function callable args kwargs
PyObject_Call() PyObject * tuple dict/NULL
PyObject_CallNoArgs() PyObject * — —
PyObject_CallOneArg() PyObject * 1object —
PyObject_CallObject() PyObject * tuple/ NULL—
PyObject_CallFunction() PyObject * format —
PyObject_CallMethod() obj+ char* format —
PyObject_CallFunctionObjArgs() PyObject * variadic —
PyObject_CallMethodObjArgs() obj+name variadic —
PyObject_CallMethodNoArgs() obj+name — —
PyObject_CallMethodOneArg() obj+name 1object —
PyObject_Vectorcall() PyObject * vectorcall vectorcall
PyObject_VectorcallDict() PyObject * vectorcall dict/NULL
PyObject_VectorcallMethod() arg+name vectorcall vectorcall
PyObject*PyObject_Call (PyObject*callable, PyObject*args, PyObject*kwargs )
Return value: New reference. Part of the Stable ABI .Call a callable Python object callable, with arguments
givenbythetuple args,andnamedargumentsgivenbythedictionary kwargs.
argsmustnotbe NULL;useanemptytupleifnoargumentsareneeded. Ifnonamedargumentsareneeded,
kwargscanbe NULL.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
ThisistheequivalentofthePythonexpression: callable(*args, **kwargs) .
98 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyObject_CallNoArgs (PyObject*callable )
Return value: New reference. Part of the StableABI since version 3.10. CallacallablePythonobject callable
withoutanyarguments. ItisthemostefficientwaytocallacallablePythonobjectwithoutanyargument.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
Addedinversion3.9.
PyObject*PyObject_CallOneArg (PyObject*callable, PyObject*arg)
Return value: New reference. CallacallablePythonobject callablewithexactly1positionalargument argand
nokeywordarguments.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
Addedinversion3.9.
PyObject*PyObject_CallObject (PyObject*callable, PyObject*args )
Return value: New reference. Part of the Stable ABI .Call a callable Python object callable, with arguments
givenbythetuple args. Ifnoargumentsareneeded,then argscanbe NULL.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
ThisistheequivalentofthePythonexpression: callable(*args) .
PyObject*PyObject_CallFunction (PyObject*callable,constchar*format,... )
Return value: New reference. Part of the Stable ABI .Call a callable Python object callable, with a variable
numberofCarguments. TheCargumentsaredescribedusinga Py_BuildValue() styleformatstring. The
formatcanbe NULL,indicatingthatnoargumentsareprovided.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
ThisistheequivalentofthePythonexpression: callable(*args) .
Notethatifyouonlypass PyObject *args, PyObject_CallFunctionObjArgs() isafasteralternative.
Changedinversion3.4: Thetypeof formatwaschangedfrom char *.
PyObject*PyObject_CallMethod (PyObject*obj,constchar*name,constchar*format,... )
Return value: New reference. Part of the StableABI .Callthemethodnamed nameofobject objwithavariable
numberofCarguments. TheCargumentsaredescribedbya Py_BuildValue() formatstringthatshould
produceatuple.
Theformatcanbe NULL,indicatingthatnoargumentsareprovided.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
ThisistheequivalentofthePythonexpression: obj.name(arg1, arg2, ...) .
Notethatifyouonlypass PyObject *args, PyObject_CallMethodObjArgs() isafasteralternative.
Changedinversion3.4: Thetypesof nameandformatwerechangedfrom char *.
PyObject*PyObject_CallFunctionObjArgs (PyObject*callable,... )
Return value: New reference. Part of the Stable ABI .Call a callable Python object callable, with a variable
numberof PyObject *arguments. Theargumentsareprovidedasavariablenumberofparametersfollowed
byNULL.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
ThisistheequivalentofthePythonexpression: callable(arg1, arg2, ...) .
PyObject*PyObject_CallMethodObjArgs (PyObject*obj, PyObject*name,... )
Return value: New reference. Part of the StableABI .CallamethodofthePythonobject obj,wherethename
ofthemethodisgivenasaPythonstringobjectin name. Itiscalledwithavariablenumberof PyObject *
arguments. Theargumentsareprovidedasavariablenumberofparametersfollowedby NULL.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
7.2. Call Protocol 99
The Python/C API, Release 3.13.0
PyObject*PyObject_CallMethodNoArgs (PyObject*obj, PyObject*name )
CallamethodofthePythonobject objwithoutarguments,wherethenameofthemethodisgivenasaPython
stringobjectin name.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
Addedinversion3.9.
PyObject*PyObject_CallMethodOneArg (PyObject*obj, PyObject*name, PyObject*arg)
CallamethodofthePythonobject objwithasinglepositionalargument arg,wherethenameofthemethod
isgivenasaPythonstringobjectin name.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
Addedinversion3.9.
PyObject*PyObject_Vectorcall (PyObject*callable, PyObject*const*args,size_tnargsf, PyObject
*kwnames )
Part of the StableABI since version 3.12. CallacallablePythonobject callable. Theargumentsarethesame
as for vectorcallfunc . Ifcallablesupports vectorcall, this directly calls the vectorcall function stored in
callable.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
Addedinversion3.9.
PyObject*PyObject_VectorcallDict (PyObject*callable, PyObject*const*args,size_tnargsf, PyObject
*kwdict )
Callcallablewithpositionalargumentspassedexactlyasinthe vectorcallprotocol,butwithkeywordarguments
passedasadictionary kwdict. The argsarraycontainsonlythepositionalarguments.
Regardlessofwhichprotocolisusedinternally, aconversionofargumentsneedstobedone. Therefore, this
functionshouldonlybeusedifthecalleralreadyhasadictionaryreadytouseforthekeywordarguments,but
notatupleforthepositionalarguments.
Addedinversion3.9.
PyObject*PyObject_VectorcallMethod (PyObject*name, PyObject*const*args,size_tnargsf, PyObject
*kwnames )
Part of the Stable ABI since version 3.12. Call a method using the vectorcall calling convention. The name
of the method is given as a Python string name. The object whose method is called is args[0], and the args
arraystartingat args[1]representstheargumentsofthecall. Theremustbeatleastonepositionalargument.
nargsfisthenumberofpositionalargumentsincluding args[0],plus PY_VECTORCALL_ARGUMENTS_OFFSET
if the value of args[0]may temporarily be changed. Keyword arguments can be passed just like in
PyObject_Vectorcall() .
Iftheobjecthasthe Py_TPFLAGS_METHOD_DESCRIPTOR feature, thiswillcalltheunboundmethodobject
withthefull argsvectorasarguments.
Returntheresultofthecallonsuccess,orraiseanexceptionandreturn NULLonfailure.
Addedinversion3.9.
7.2.4Call Support API
intPyCallable_Check (PyObject*o)
Part of the StableABI .Determineiftheobject oiscallable. Return 1iftheobjectiscallableand 0otherwise.
Thisfunctionalwayssucceeds.
100 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
7.3Number Protocol
intPyNumber_Check (PyObject*o)
Part of the StableABI .Returns 1iftheobject oprovidesnumericprotocols,andfalseotherwise. Thisfunction
alwayssucceeds.
Changedinversion3.8: Returns 1ifoisanindexinteger.
PyObject*PyNumber_Add (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofadding o1ando2,orNULLonfailure.
ThisistheequivalentofthePythonexpression o1 + o2.
PyObject*PyNumber_Subtract (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofsubtracting o2fromo1,orNULLon
failure. ThisistheequivalentofthePythonexpression o1 - o2.
PyObject*PyNumber_Multiply (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofmultiplying o1ando2,orNULLon
failure. ThisistheequivalentofthePythonexpression o1 * o2.
PyObject*PyNumber_MatrixMultiply (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI since version 3.7. Returnstheresultofmatrixmultiplication
ono1ando2,orNULLonfailure. ThisistheequivalentofthePythonexpression o1 @ o2.
Addedinversion3.5.
PyObject*PyNumber_FloorDivide (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnthefloorof o1dividedby o2,orNULLonfailure.
ThisistheequivalentofthePythonexpression o1 // o2 .
PyObject*PyNumber_TrueDivide (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnareasonableapproximationforthemathematical
valueof o1dividedby o2,orNULLonfailure. Thereturnvalueis“approximate”becausebinaryfloating-point
numbersareapproximate;itisnotpossibletorepresentallrealnumbersinbasetwo. Thisfunctioncanreturn
afloating-pointvaluewhenpassedtwointegers. ThisistheequivalentofthePythonexpression o1 / o2.
PyObject*PyNumber_Remainder (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheremainderofdividing o1byo2,orNULLon
failure. ThisistheequivalentofthePythonexpression o1 % o2.
PyObject*PyNumber_Divmod (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .See the built-in function divmod() . Returns NULLon
failure. ThisistheequivalentofthePythonexpression divmod(o1, o2) .
PyObject*PyNumber_Power (PyObject*o1,PyObject*o2,PyObject*o3)
Return value: New reference. Part of the Stable ABI .See the built-in function pow(). Returns NULLon
failure. ThisistheequivalentofthePythonexpression pow(o1, o2, o3) ,where o3isoptional. If o3isto
beignored,pass Py_Noneinitsplace(passing NULLforo3wouldcauseanillegalmemoryaccess).
PyObject*PyNumber_Negative (PyObject*o)
Return value: New reference. Part of the StableABI .Returnsthenegationof oonsuccess,or NULLonfailure.
ThisistheequivalentofthePythonexpression -o.
PyObject*PyNumber_Positive (PyObject*o)
Return value: New reference. Part of the Stable ABI .Returns oon success, or NULLon failure. This is the
equivalentofthePythonexpression +o.
PyObject*PyNumber_Absolute (PyObject*o)
Return value: New reference. Part of the StableABI .Returnstheabsolutevalueof o,orNULLonfailure. This
istheequivalentofthePythonexpression abs(o).
7.3. Number Protocol 101
The Python/C API, Release 3.13.0
PyObject*PyNumber_Invert (PyObject*o)
Return value: New reference. Part of the StableABI .Returnsthebitwisenegationof oonsuccess,or NULLon
failure. ThisistheequivalentofthePythonexpression ~o.
PyObject*PyNumber_Lshift (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofleftshifting o1byo2onsuccess,or
NULLonfailure. ThisistheequivalentofthePythonexpression o1 << o2 .
PyObject*PyNumber_Rshift (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofrightshifting o1byo2onsuccess,
orNULLonfailure. ThisistheequivalentofthePythonexpression o1 >> o2 .
PyObject*PyNumber_And (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .Returns the “bitwise and” of o1ando2on success and
NULLonfailure. ThisistheequivalentofthePythonexpression o1 & o2.
PyObject*PyNumber_Xor (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnsthe“bitwiseexclusiveor”of o1byo2onsuccess,
orNULLonfailure. ThisistheequivalentofthePythonexpression o1 ^ o2.
PyObject*PyNumber_Or (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnsthe“bitwiseor”of o1ando2onsuccess,or NULL
onfailure. ThisistheequivalentofthePythonexpression o1 | o2.
PyObject*PyNumber_InPlaceAdd (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofadding o1ando2,orNULLonfailure.
Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePythonstatement o1 += o2 .
PyObject*PyNumber_InPlaceSubtract (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofsubtracting o2fromo1,orNULLon
failure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePythonstatement o1
-= o2.
PyObject*PyNumber_InPlaceMultiply (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofmultiplying o1ando2,orNULLon
failure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePythonstatement o1
*= o2.
PyObject*PyNumber_InPlaceMatrixMultiply (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI since version 3.7. Returnstheresultofmatrixmultiplication
ono1ando2, orNULLonfailure. Theoperationisdone in-placewhen o1supportsit. Thisistheequivalent
ofthePythonstatement o1 @= o2 .
Addedinversion3.5.
PyObject*PyNumber_InPlaceFloorDivide (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .Returns the mathematical floor of dividing o1byo2,
orNULLonfailure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePython
statement o1 //= o2 .
PyObject*PyNumber_InPlaceTrueDivide (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnareasonableapproximationforthemathematical
valueof o1dividedby o2,orNULLonfailure. Thereturnvalueis“approximate”becausebinaryfloating-point
numbersareapproximate;itisnotpossibletorepresentallrealnumbersinbasetwo. Thisfunctioncanreturn
a floating-point value when passed two integers. The operation is done in-placewhen o1supports it. This is
theequivalentofthePythonstatement o1 /= o2 .
PyObject*PyNumber_InPlaceRemainder (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheremainderofdividing o1byo2,orNULLon
failure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePythonstatement o1
%= o2.
102 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyNumber_InPlacePower (PyObject*o1,PyObject*o2,PyObject*o3)
Return value: New reference. Part of the StableABI .Seethebuilt-infunction pow(). Returns NULLonfailure.
The operation is done in-placewhen o1supports it. This is the equivalent of the Python statement o1 **=
o2wheno3is Py_None,oranin-placevariantof pow(o1, o2, o3) otherwise. If o3istobeignored,pass
Py_Noneinitsplace(passing NULLforo3wouldcauseanillegalmemoryaccess).
PyObject*PyNumber_InPlaceLshift (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .Returns the result of left shifting o1byo2on success,
orNULLonfailure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePython
statement o1 <<= o2 .
PyObject*PyNumber_InPlaceRshift (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnstheresultofrightshifting o1byo2onsuccess,
orNULLonfailure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePython
statement o1 >>= o2 .
PyObject*PyNumber_InPlaceAnd (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .Returns the “bitwise and” of o1ando2on success and
NULLon failure. The operation is done in-placewhen o1supports it. This is the equivalent of the Python
statement o1 &= o2 .
PyObject*PyNumber_InPlaceXor (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnsthe“bitwiseexclusiveor”of o1byo2onsuccess,
orNULLonfailure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePython
statement o1 ^= o2 .
PyObject*PyNumber_InPlaceOr (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the StableABI .Returnsthe“bitwiseor”of o1ando2onsuccess,or NULL
onfailure. Theoperationisdone in-placewhen o1supportsit. ThisistheequivalentofthePythonstatement
o1 |= o2 .
PyObject*PyNumber_Long (PyObject*o)
Return value: New reference. Part of the StableABI .Returnsthe oconvertedtoanintegerobjectonsuccess,
orNULLonfailure. ThisistheequivalentofthePythonexpression int(o).
PyObject*PyNumber_Float (PyObject*o)
Return value: New reference. Part of the Stable ABI .Returns the oconvertedto a float object onsuccess, or
NULLonfailure. ThisistheequivalentofthePythonexpression float(o) .
PyObject*PyNumber_Index (PyObject*o)
Return value: New reference. Part of the Stable ABI .Returns the oconverted to a Python int on success or
NULLwitha TypeError exceptionraisedonfailure.
Changed in version 3.10: The result always has exact type int. Previously, the result could have been an
instanceofasubclassof int.
PyObject*PyNumber_ToBase (PyObject*n,intbase )
Return value: New reference. Part of the StableABI .Returnstheinteger nconvertedtobase baseasastring.
Thebaseargumentmustbeoneof2,8,10,or16. Forbase2,8,or16,thereturnedstringisprefixedwithabase
markerof '0b','0o',or'0x',respectively. If nisnotaPythonint,itisconvertedwith PyNumber_Index()
first.
Py_ssize_t PyNumber_AsSsize_t (PyObject*o,PyObject*exc)
Part of the StableABI .Returns oconvertedtoa Py_ssize_t valueif ocanbeinterpretedasaninteger. If
thecallfails,anexceptionisraisedand -1isreturned.
Ifocan be converted to a Python int but the attempt to convert to a Py_ssize_t value would raise an
OverflowError ,thenthe excargumentisthetypeofexceptionthatwillberaised(usually IndexError or
OverflowError ). IfexcisNULL,thentheexceptionisclearedandthevalueisclippedto PY_SSIZE_T_MIN
foranegativeintegeror PY_SSIZE_T_MAX forapositiveinteger.
7.3. Number Protocol 103
The Python/C API, Release 3.13.0
intPyIndex_Check (PyObject*o)
Part of the Stable ABI since version 3.8. Returns 1ifois an index integer (has the nb_index slot of the
tp_as_number structurefilledin),and 0otherwise. Thisfunctionalwayssucceeds.
7.4Sequence Protocol
intPySequence_Check (PyObject*o)
Part of the Stable ABI .Return 1if the object provides the sequence protocol, and 0otherwise. Note that it
returns 1forPythonclasseswitha __getitem__() method,unlesstheyare dictsubclasses,sinceingeneral
itisimpossibletodeterminewhattypeofkeystheclasssupports. Thisfunctionalwayssucceeds.
Py_ssize_t PySequence_Size (PyObject*o)
Py_ssize_t PySequence_Length (PyObject*o)
Part of the Stable ABI .Returns the number of objects in sequence oon success, and -1on failure. This is
equivalenttothePythonexpression len(o).
PyObject*PySequence_Concat (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .Return the concatenation of o1ando2on success, and
NULLonfailure. ThisistheequivalentofthePythonexpression o1 + o2.
PyObject*PySequence_Repeat (PyObject*o,Py_ssize_t count )
Return value: New reference. Part of the Stable ABI .Return the result of repeating sequence object o count
times,or NULLonfailure. ThisistheequivalentofthePythonexpression o * count .
PyObject*PySequence_InPlaceConcat (PyObject*o1,PyObject*o2)
Return value: New reference. Part of the Stable ABI .Return the concatenation of o1ando2on success, and
NULLon failure. The operation is done in-placewhen o1supports it. This is the equivalent of the Python
expression o1 += o2 .
PyObject*PySequence_InPlaceRepeat (PyObject*o,Py_ssize_t count )
Return value: New reference. Part of the Stable ABI .Return the result of repeating sequence object o count
times, or NULLon failure. The operation is done in-placewhen osupports it. This is the equivalent of the
Pythonexpression o *= count .
PyObject*PySequence_GetItem (PyObject*o,Py_ssize_t i)
Return value: New reference. Part of the StableABI .Returnthe ithelementof o,orNULLonfailure. Thisis
theequivalentofthePythonexpression o[i].
PyObject*PySequence_GetSlice (PyObject*o,Py_ssize_t i1,Py_ssize_t i2)
Return value: New reference. Part of the StableABI .Returnthesliceofsequenceobject obetween i1andi2,
orNULLonfailure. ThisistheequivalentofthePythonexpression o[i1:i2] .
intPySequence_SetItem (PyObject*o,Py_ssize_t i,PyObject*v)
Part of the Stable ABI .Assign object vto the ith element of o. Raise an exception and return -1on failure;
return 0onsuccess. ThisistheequivalentofthePythonstatement o[i] = v . Thisfunction does notsteala
referenceto v.
IfvisNULL,theelementisdeleted,butthisfeatureisdeprecatedinfavourofusing PySequence_DelItem() .
intPySequence_DelItem (PyObject*o,Py_ssize_t i)
Part of the StableABI .Deletethe ithelementofobject o. Returns -1onfailure. Thisistheequivalentofthe
Pythonstatement del o[i] .
intPySequence_SetSlice (PyObject*o,Py_ssize_t i1,Py_ssize_t i2,PyObject*v)
Part of the StableABI .Assignthesequenceobject vtothesliceinsequenceobject ofromi1toi2. Thisisthe
equivalentofthePythonstatement o[i1:i2] = v .
intPySequence_DelSlice (PyObject*o,Py_ssize_t i1,Py_ssize_t i2)
Part of the StableABI .Deletethesliceinsequenceobject ofromi1toi2. Returns -1onfailure. Thisisthe
equivalentofthePythonstatement del o[i1:i2] .
104 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
Py_ssize_t PySequence_Count (PyObject*o,PyObject*value )
Part of the Stable ABI .Return the number of occurrences of valueino, that is, return the number of
keys for which o[key] == value . On failure, return -1. This is equivalent to the Python expression o.
count(value) .
intPySequence_Contains (PyObject*o,PyObject*value )
Part of the Stable ABI .Determine if ocontains value. If an item in ois equal to value, return 1, otherwise
return 0. Onerror,return -1. ThisisequivalenttothePythonexpression value in o .
Py_ssize_t PySequence_Index (PyObject*o,PyObject*value )
Part of the Stable ABI .Return the first index ifor which o[i] == value . On error, return -1. This is
equivalenttothePythonexpression o.index(value) .
PyObject*PySequence_List (PyObject*o)
Return value: New reference. Part of the StableABI .Returnalistobjectwiththesamecontentsasthesequence
oriterable o, orNULLonfailure. Thereturnedlistisguaranteedtobenew. ThisisequivalenttothePython
expression list(o).
PyObject*PySequence_Tuple (PyObject*o)
Return value: New reference. Part of the Stable ABI .Return a tuple object with the same contents as the
sequenceoriterable o,orNULLonfailure. If oisatuple,anewreferencewillbereturned,otherwiseatuple
willbeconstructedwiththeappropriatecontents. ThisisequivalenttothePythonexpression tuple(o) .
PyObject*PySequence_Fast (PyObject*o,constchar*m )
Return value: New reference. Part of the StableABI .Returnthesequenceoriterable oasanobjectusablebythe
other PySequence_Fast* familyoffunctions. Iftheobjectisnotasequenceoriterable,raises TypeError
withmasthemessagetext. Returns NULLonfailure.
ThePySequence_Fast* functions are thus named because they assume ois aPyTupleObject or a
PyListObject andaccessthedatafieldsof odirectly.
AsaCPythonimplementationdetail,if oisalreadyasequenceorlist,itwillbereturned.
Py_ssize_t PySequence_Fast_GET_SIZE (PyObject*o)
Returnsthelengthof o,assumingthat owasreturnedby PySequence_Fast() andthat oisnot NULL.The
size can also be retrieved by calling PySequence_Size() ono, but PySequence_Fast_GET_SIZE() is
fasterbecauseitcanassume oisalistortuple.
PyObject*PySequence_Fast_GET_ITEM (PyObject*o,Py_ssize_t i)
Return value: Borrowed reference. Return the ith element of o, assuming that owas returned by
PySequence_Fast() ,oisnot NULL,andthat iiswithinbounds.
PyObject**PySequence_Fast_ITEMS (PyObject*o)
ReturntheunderlyingarrayofPyObjectpointers. Assumesthat owasreturnedby PySequence_Fast() and
oisnot NULL.
Note, if a list gets resized, the reallocation may relocate the items array. So, only use the underlying array
pointerincontextswherethesequencecannotchange.
PyObject*PySequence_ITEM (PyObject*o,Py_ssize_t i)
Return value: New reference. Return the ith element of oorNULLon failure. Faster form of
PySequence_GetItem() but without checking that PySequence_Check() onois true and without ad-
justmentfornegativeindices.
7.5Mapping Protocol
Seealso PyObject_GetItem() ,PyObject_SetItem() andPyObject_DelItem() .
intPyMapping_Check (PyObject*o)
Part of theStableABI .Return 1iftheobjectprovidesthemappingprotocolorsupportsslicing,and 0otherwise.
Notethatitreturns 1forPythonclasseswitha __getitem__() method,sinceingeneralitisimpossibleto
determinewhattypeofkeystheclasssupports. Thisfunctionalwayssucceeds.
7.5. Mapping Protocol 105
The Python/C API, Release 3.13.0
Py_ssize_t PyMapping_Size (PyObject*o)
Py_ssize_t PyMapping_Length (PyObject*o)
Part of the StableABI .Returnsthenumberofkeysinobject oonsuccess,and -1onfailure. Thisisequivalent
tothePythonexpression len(o).
PyObject*PyMapping_GetItemString (PyObject*o,constchar*key )
Return value: New reference. Part of the StableABI .Thisisthesameas PyObject_GetItem() ,butkeyis
specifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
intPyMapping_GetOptionalItem (PyObject*obj, PyObject*key, PyObject**result )
Part of the StableABI since version 3.13. Variantof PyObject_GetItem() whichdoesn’traise KeyError
ifthekeyisnotfound.
Ifthekeyisfound,return 1andset *resulttoanew strong reference tothecorrespondingvalue. Ifthekeyis
not found, return 0and set *resulttoNULL; the KeyError is silenced. If an error other than KeyError is
raised,return -1andset *resulttoNULL.
Addedinversion3.13.
intPyMapping_GetOptionalItemString (PyObject*obj,constchar*key, PyObject**result )
Part of the StableABI since version 3.13. Thisisthesameas PyMapping_GetOptionalItem() ,butkeyis
specifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
Addedinversion3.13.
intPyMapping_SetItemString (PyObject*o,constchar*key, PyObject*v)
Part of the StableABI .Thisisthesameas PyObject_SetItem() ,butkeyisspecifiedasa const char*
UTF-8encodedbytesstring,ratherthana PyObject *.
intPyMapping_DelItem (PyObject*o,PyObject*key)
Thisisanaliasof PyObject_DelItem() .
intPyMapping_DelItemString (PyObject*o,constchar*key )
This is the same as PyObject_DelItem() , butkeyis specified as a const char* UTF-8 encoded bytes
string,ratherthana PyObject *.
intPyMapping_HasKeyWithError (PyObject*o,PyObject*key)
Part of the Stable ABI since version 3.13. Return 1if the mapping object has the key keyand0otherwise.
ThisisequivalenttothePythonexpression key in o . Onfailure,return -1.
Addedinversion3.13.
intPyMapping_HasKeyStringWithError (PyObject*o,constchar*key )
Part of the StableABI since version 3.13. Thisisthesameas PyMapping_HasKeyWithError() ,butkeyis
specifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
Addedinversion3.13.
intPyMapping_HasKey (PyObject*o,PyObject*key)
Part of the StableABI .Return 1ifthemappingobjecthasthekey keyand0otherwise. Thisisequivalentto
thePythonexpression key in o . Thisfunctionalwayssucceeds.
®Note
Exceptions which occur when this calls __getitem__() method are silently ignored. For
propererrorhandling,use PyMapping_HasKeyWithError() ,PyMapping_GetOptionalItem() or
PyObject_GetItem() instead.
intPyMapping_HasKeyString (PyObject*o,constchar*key )
Part of the StableABI .Thisisthesameas PyMapping_HasKey() ,butkeyisspecifiedasa const char*
UTF-8encodedbytesstring,ratherthana PyObject *.
106 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
®Note
Exceptionsthatoccurwhenthiscalls __getitem__() methodorwhilecreatingthetemporary strob-
ject are silently ignored. For proper error handling, use PyMapping_HasKeyStringWithError() ,
PyMapping_GetOptionalItemString() orPyMapping_GetItemString() instead.
PyObject*PyMapping_Keys (PyObject*o)
Return value: New reference. Part of the Stable ABI .On success, return a list of the keys in object o. On
failure,return NULL.
Changedinversion3.7: Previously,thefunctionreturnedalistoratuple.
PyObject*PyMapping_Values (PyObject*o)
Return value: New reference. Part of the Stable ABI .On success, return a list of the values in object o. On
failure,return NULL.
Changedinversion3.7: Previously,thefunctionreturnedalistoratuple.
PyObject*PyMapping_Items (PyObject*o)
Return value: New reference. Part of the StableABI .Onsuccess,returnalistoftheitemsinobject o,where
eachitemisatuplecontainingakey-valuepair. Onfailure,return NULL.
Changedinversion3.7: Previously,thefunctionreturnedalistoratuple.
7.6Iterator Protocol
Therearetwofunctionsspecificallyforworkingwithiterators.
intPyIter_Check (PyObject*o)
Part of the Stable ABI since version 3.8. Return non-zero if the object ocan be safely passed to
PyIter_Next() ,and 0otherwise. Thisfunctionalwayssucceeds.
intPyAIter_Check (PyObject*o)
Part of the Stable ABI since version 3.10. Return non-zero if the object oprovides the AsyncIterator
protocol,and 0otherwise. Thisfunctionalwayssucceeds.
Addedinversion3.10.
PyObject*PyIter_Next (PyObject*o)
Return value: New reference. Part of the StableABI .Returnthenextvaluefromtheiterator o. Theobjectmust
beaniteratoraccordingto PyIter_Check() (itisuptothecallertocheckthis). Iftherearenoremaining
values, returns NULLwith no exception set. If an error occurs while retrieving the item, returns NULLand
passesalongtheexception.
Towritealoopwhichiteratesoveraniterator,theCcodeshouldlooksomethinglikethis:
PyObject *iterator =PyObject_GetIter(obj);
PyObject *item;
if(iterator ==NULL ){
/* propagate error */
}
while ((item =PyIter_Next(iterator))) {
/* do something with item */
...
/* release reference when done */
Py_DECREF(item);
}
(continuesonnextpage)
7.6. Iterator Protocol 107
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
Py_DECREF(iterator);
if(PyErr_Occurred()) {
/* propagate error */
}
else {
/* continue doing useful work */
}
typePySendResult
Theenumvalueusedtorepresentdifferentresultsof PyIter_Send() .
Addedinversion3.10.
PySendResult PyIter_Send (PyObject*iter, PyObject*arg,PyObject**presult )
Part of the StableABI since version 3.10. Sendsthe argvalueintotheiterator iter. Returns:
•PYGEN_RETURN ifiteratorreturns. Returnvalueisreturnedvia presult.
•PYGEN_NEXT ifiteratoryields. Yieldedvalueisreturnedvia presult.
•PYGEN_ERROR ifiteratorhasraisedandexception. presultissetto NULL.
Addedinversion3.10.
7.7Buffer Protocol
CertainobjectsavailableinPythonwrapaccesstoan underlyingmemoryarrayor buffer. Suchobjectsincludethe
built-in bytesandbytearray , and some extension types like array.array . Third-party libraries may define
theirowntypesforspecialpurposes,suchasimageprocessingornumericanalysis.
While each of these types have their own semantics, they share the common characteristic of being backed by a
possibly large memory buffer. It is then desirable, in some situations, to access that buffer directly and without
intermediatecopying.
PythonprovidessuchafacilityattheClevelintheformofthe buffer protocol . Thisprotocolhastwosides:
•ontheproducerside,atypecanexporta“bufferinterface”whichallowsobjectsofthattypetoexposeinfor-
mationabouttheirunderlyingbuffer. Thisinterfaceisdescribedinthesection Buffer Object Structures ;
•ontheconsumerside, severalmeansareavailabletoobtainapointertotherawunderlyingdataofanobject
(forexampleamethodparameter).
Simple objects such as bytesandbytearray expose their underlying buffer in byte-oriented form. Other forms
arepossible;forexample,theelementsexposedbyan array.array canbemulti-bytevalues.
An example consumer of the buffer interface is the write()method of file objects: any object that can export a
seriesofbytesthroughthebufferinterfacecanbewrittentoafile. While write()onlyneedsread-onlyaccesstothe
internalcontentsoftheobjectpassedtoit,othermethodssuchas readinto() needwriteaccesstothecontentsof
theirargument. Thebufferinterfaceallowsobjectstoselectivelyalloworrejectexportingofread-writeandread-only
buffers.
Therearetwowaysforaconsumerofthebufferinterfacetoacquireabufferoveratargetobject:
•callPyObject_GetBuffer() withtherightparameters;
•callPyArg_ParseTuple() (oroneofitssiblings)withoneofthe y*,w*ors*format codes .
Inbothcases, PyBuffer_Release() mustbecalledwhenthebufferisn’tneededanymore. Failuretodosocould
leadtovariousissuessuchasresourceleaks.
108 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
7.7.1Buffer structure
Bufferstructures(orsimply“buffers”)areusefulasawaytoexposethebinarydatafromanotherobjecttothePython
programmer. They can also be used as a zero-copy slicing mechanism. Using their ability to reference a block of
memory, it is possible to expose any data to the Python programmer quite easily. The memory could be a large,
constantarrayinaCextension,itcouldbearawblockofmemoryformanipulationbeforepassingtoanoperating
systemlibrary,oritcouldbeusedtopassaroundstructureddatainitsnative,in-memoryformat.
ContrarytomostdatatypesexposedbythePythoninterpreter,buffersarenot PyObject pointersbutrathersimple
C structures. This allows them to be created and copied very simply. When a generic wrapper around a buffer is
needed,a memoryview objectcanbecreated.
For short instructions how to write an exporting object, see Buffer Object Structures . For obtaining a buffer, see
PyObject_GetBuffer() .
typePy_buffer
Part of the StableABI (including all members) since version 3.11.
void* buf
A pointer to the start of the logical structure described by the buffer fields. This can be any location
withintheunderlyingphysicalmemoryblockoftheexporter. Forexample,withnegative stridesthe
valuemaypointtotheendofthememoryblock.
Forcontiguous arrays,thevaluepointstothebeginningofthememoryblock.
PyObject*obj
A new reference to the exporting object. The reference is owned by the consumer and automatically
released(i.e. referencecountdecremented)andsetto NULLbyPyBuffer_Release() . Thefieldisthe
equivalentofthereturnvalueofanystandardC-APIfunction.
As a special case, for temporary buffers that are wrapped by PyMemoryView_FromBuffer() or
PyBuffer_FillInfo() thisfieldis NULL.Ingeneral,exportingobjectsMUSTNOTusethisscheme.
Py_ssize_t len
product(shape) * itemsize . For contiguous arrays, this is the length of the underlying memory
block. Fornon-contiguousarrays,itisthelengththatthelogicalstructurewouldhaveifitwerecopied
toacontiguousrepresentation.
Accessing ((char *)buf)[0] up to ((char *)buf)[len-1] isonlyvalidifthebufferhasbeen
obtained by a request that guarantees contiguity. In most cases such a request will be PyBUF_SIMPLE
orPyBUF_WRITABLE .
intreadonly
Anindicatorofwhetherthebufferisread-only. Thisfieldiscontrolledbythe PyBUF_WRITABLE flag.
Py_ssize_t itemsize
Itemsizeinbytesofasingleelement. Sameasthevalueof struct.calcsize() calledonnon- NULL
formatvalues.
Importantexception: Ifaconsumerrequestsabufferwithoutthe PyBUF_FORMAT flag,formatwillbe
setto NULL,butitemsize stillhasthevaluefortheoriginalformat.
Ifshapeispresent,theequality product(shape) * itemsize == len stillholdsandtheconsumer
canuse itemsize tonavigatethebuffer.
IfshapeisNULLasaresultofa PyBUF_SIMPLE oraPyBUF_WRITABLE request,theconsumermust
disregard itemsize andassume itemsize == 1 .
char* format
ANULLterminated string in structmodule style syntax describing the contents of a single item. If
thisis NULL,"B"(unsignedbytes)isassumed.
Thisfieldiscontrolledbythe PyBUF_FORMAT flag.
7.7. Buffer Protocol 109
The Python/C API, Release 3.13.0
intndim
Thenumberofdimensionsthememoryrepresentsasann-dimensionalarray. Ifitis 0,bufpointstoa
singleitemrepresentingascalar. Inthiscase, shape,stridesandsuboffsets MUSTbe NULL.The
maximumnumberofdimensionsisgivenby PyBUF_MAX_NDIM .
Py_ssize_t *shape
Anarrayof Py_ssize_t oflength ndimindicatingtheshapeofthememoryasann-dimensionalarray.
Notethat shape[0] * ... * shape[ndim-1] * itemsize MUSTbeequalto len.
Shapevaluesarerestrictedto shape[n] >= 0 . Thecase shape[n] == 0 requiresspecialattention.
Seecomplex arrays forfurtherinformation.
Theshapearrayisread-onlyfortheconsumer.
Py_ssize_t *strides
Anarrayof Py_ssize_t oflength ndimgivingthenumberofbytestoskiptogettoanewelementin
eachdimension.
Stridevaluescanbeanyinteger. Forregulararrays,stridesareusuallypositive,butaconsumerMUST
beabletohandlethecase strides[n] <= 0 . See complex arrays forfurtherinformation.
Thestridesarrayisread-onlyfortheconsumer.
Py_ssize_t *suboffsets
An arrayof Py_ssize_t oflength ndim. Ifsuboffsets[n] >= 0 , thevaluesstoredalongthenth
dimensionarepointersandthesuboffsetvaluedictateshowmanybytestoaddtoeachpointerafterde-
referencing. Asuboffsetvaluethatisnegativeindicatesthatnode-referencingshouldoccur(stridingin
acontiguousmemoryblock).
Ifallsuboffsetsarenegative(i.e. node-referencingisneeded),thenthisfieldmustbe NULL(thedefault
value).
This type of array representation is used by the Python Imaging Library (PIL). See complex arrays for
furtherinformationhowtoaccesselementsofsuchanarray.
Thesuboffsetsarrayisread-onlyfortheconsumer.
void* internal
Thisisforuseinternallybytheexportingobject. Forexample,thismightbere-castasanintegerbythe
exporter and used to store flags about whether or not the shape, strides, and suboffsets arrays must be
freedwhenthebufferisreleased. TheconsumerMUSTNOTalterthisvalue.
Constants:
PyBUF_MAX_NDIM
Themaximumnumberofdimensionsthememoryrepresents. ExportersMUSTrespectthislimit,consumers
ofmulti-dimensionalbuffersSHOULDbeabletohandleupto PyBUF_MAX_NDIM dimensions. Currentlyset
to64.
7.7.2Buffer request types
Buffersareusuallyobtainedbysendingabufferrequesttoanexportingobjectvia PyObject_GetBuffer() . Since
thecomplexityofthelogicalstructureofthememorycanvarydrastically,theconsumerusesthe flagsargumentto
specifytheexactbuffertypeitcanhandle.
AllPy_buffer fieldsareunambiguouslydefinedbytherequesttype.
request-independent fields
Thefollowingfieldsarenotinfluencedby flagsandmustalwaysbefilledinwiththecorrectvalues: obj,buf,len,
itemsize ,ndim.
110 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
readonly, format
PyBUF_WRITABLE
Controlsthe readonly field. Ifset, theexporterMUSTprovideawritablebufferorelsereport
failure. Otherwise,theexporterMAYprovideeitheraread-onlyorwritablebuffer,butthechoice
MUSTbeconsistentforallconsumers. Forexample, PyBUF_SIMPLE |PyBUF_WRITABLE can
beusedtorequestasimplewritablebuffer.
PyBUF_FORMAT
Controls the formatfield. If set, this field MUST be filled in correctly. Otherwise, this field
MUSTbe NULL.
PyBUF_WRITABLE can be |’d to any of the flags in the next section. Since PyBUF_SIMPLE is defined as 0,
PyBUF_WRITABLE canbeusedasastand-aloneflagtorequestasimplewritablebuffer.
PyBUF_FORMAT mustbe|’dtoanyoftheflagsexcept PyBUF_SIMPLE ,becausethelatteralreadyimpliesformat B
(unsignedbytes). PyBUF_FORMAT cannotbeusedonitsown.
shape, strides, suboffsets
Theflagsthatcontrolthelogicalstructureofthememoryarelistedindecreasingorderofcomplexity. Notethateach
flagcontainsallbitsoftheflagsbelowit.
Request shapestridessuboffsets
PyBUF_INDIRECTyesyesifneeded
PyBUF_STRIDESyesyesNULL
PyBUF_NDyesNULLNULL
PyBUF_SIMPLENULLNULLNULL
contiguity requests
CorFortran contiguitycanbeexplicitlyrequested,withandwithoutstrideinformation. Withoutstrideinformation,
thebuffermustbeC-contiguous.
Request shapestridessuboffsets contig
PyBUF_C_CONTIGUOUSyesyesNULL C
PyBUF_F_CONTIGUOUSyesyesNULL F
PyBUF_ANY_CONTIGUOUSyesyesNULL CorF
PyBUF_ND yesNULLNULL C
7.7. Buffer Protocol 111
The Python/C API, Release 3.13.0
compound requests
Allpossiblerequestsarefullydefinedbysomecombinationoftheflagsintheprevioussection. Forconvenience,the
bufferprotocolprovidesfrequentlyusedcombinationsassingleflags.
In the following table Ustands for undefined contiguity. The consumer would have to call
PyBuffer_IsContiguous() todeterminecontiguity.
Request shapestridessuboffsets contigreadonly format
PyBUF_FULLyesyesifneeded U0 yes
PyBUF_FULL_ROyesyesifneeded U1or0 yes
PyBUF_RECORDSyesyesNULL U0 yes
PyBUF_RECORDS_ROyesyesNULL U1or0 yes
PyBUF_STRIDEDyesyesNULL U0 NULL
PyBUF_STRIDED_ROyesyesNULL U1or0 NULL
PyBUF_CONTIGyesNULLNULL C0 NULL
PyBUF_CONTIG_ROyesNULLNULL C1or0 NULL
7.7.3Complex arrays
NumPy-style: shape and strides
ThelogicalstructureofNumPy-stylearraysisdefinedby itemsize ,ndim,shapeandstrides.
Ifndim == 0 , the memory location pointed to by bufis interpreted as a scalar of size itemsize . In that case,
bothshapeandstridesareNULL.
IfstridesisNULL, the array is interpreted as a standard n-dimensional C-array. Otherwise, the consumer must
accessann-dimensionalarrayasfollows:
ptr =(char *)buf +indices[ 0]*strides[ 0]+... +indices[n -1]*strides[n -1];
item =*((typeof(item) *)ptr);
Asnotedabove, bufcanpointtoanylocationwithintheactualmemoryblock. Anexportercancheckthevalidity
ofabufferwiththisfunction:
def verify_structure (memlen, itemsize, ndim, shape, strides, offset):
"""Verify that the parameters represent a valid array within
the bounds of the allocated memory:
char *mem: start of the physical memory block
memlen: length of the physical memory block
offset: (char *)buf - mem
"""
(continuesonnextpage)
112 Chapter 7. Abstract Objects Layer
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
ifoffset %itemsize:
return False
ifoffset <0oroffset +itemsize >memlen:
return False
ifany(v%itemsize for vinstrides):
return False
ifndim <=0:
return ndim ==0and not shape and not strides
if0inshape:
return True
imin =sum(strides[j] *(shape[j] -1)for jinrange (ndim)
ifstrides[j] <=0)
imax =sum(strides[j] *(shape[j] -1)for jinrange (ndim)
ifstrides[j] >0)
return 0<=offset +imin and offset +imax +itemsize <=memlen
PIL-style: shape, strides and suboffsets
In addition to the regular items, PIL-style arrays can contain pointers that must be followed in order to get to the
next element in a dimension. For example, the regular three-dimensional C-array char v[2][2][3] can also be
viewedasanarrayof2pointersto2two-dimensionalarrays: char (*v[2])[2][3] . Insuboffsetsrepresentation,
thosetwopointerscanbeembeddedatthestartof buf,pointingtotwo char x[2][3] arraysthatcanbelocated
anywhereinmemory.
HereisafunctionthatreturnsapointertotheelementinanN-DarraypointedtobyanN-dimensionalindexwhen
therearebothnon- NULLstridesandsuboffsets:
void *get_item_pointer (int ndim, void *buf, Py_ssize_t *strides,
Py_ssize_t *suboffsets, Py_ssize_t *indices) {
char *pointer =(char *)buf;
int i;
for (i=0;i<ndim; i++){
pointer +=strides[i] *indices[i];
if(suboffsets[i] >=0){
pointer =*((char **)pointer) +suboffsets[i];
}
}
return (void *)pointer;
}
7.7.4Buffer-related functions
intPyObject_CheckBuffer (PyObject*obj)
Part of the StableABI since version 3.11. Return 1ifobjsupportsthebufferinterfaceotherwise 0. When 1is
returned,itdoesn’tguaranteethat PyObject_GetBuffer() willsucceed. Thisfunctionalwayssucceeds.
intPyObject_GetBuffer (PyObject*exporter, Py_buffer*view,intflags )
Part of the StableABI since version 3.11. Sendarequestto exportertofillin viewasspecifiedby flags. Ifthe
exporter cannot provide a buffer of the exact type, it MUST raise BufferError , setview->obj toNULL
andreturn -1.
On success, fill in view, setview->obj to a new reference to exporterand return 0. In the case of chained
buffer providers that redirect requests to a single object, view->obj MAY refer to this object instead of
exporter(SeeBuffer Object Structures ).
7.7. Buffer Protocol 113
The Python/C API, Release 3.13.0
Successfulcallsto PyObject_GetBuffer() mustbe pairedwithcallsto PyBuffer_Release() , similar
tomalloc() andfree(). Thus, aftertheconsumerisdonewiththebuffer, PyBuffer_Release() must
becalledexactlyonce.
voidPyBuffer_Release (Py_buffer*view )
Part of theStableABI since version 3.11. Releasethebuffer viewandreleasethe strong reference (i.e. decrement
the reference count) to the view’s supporting object, view->obj . This function MUST be called when the
bufferisnolongerbeingused,otherwisereferenceleaksmayoccur.
Itisanerrortocallthisfunctiononabufferthatwasnotobtainedvia PyObject_GetBuffer() .
Py_ssize_t PyBuffer_SizeFromFormat (constchar*format )
Part of the Stable ABI since version 3.11. Return the implied itemsize from format. On error, raise an
exceptionandreturn-1.
Addedinversion3.9.
intPyBuffer_IsContiguous (const Py_buffer*view,charorder )
Part of the Stable ABI since version 3.11. Return 1if the memory defined by the viewis C-style ( orderis
'C')orFortran-style( orderis'F')contiguous oreitherone( orderis'A').Return 0otherwise. Thisfunction
alwayssucceeds.
void* PyBuffer_GetPointer (const Py_buffer*view,const Py_ssize_t *indices )
Part of the StableABI since version 3.11. Getthememoryareapointedtobythe indicesinsidethegiven view.
indicesmustpointtoanarrayof view->ndim indices.
intPyBuffer_FromContiguous (const Py_buffer*view,constvoid*buf, Py_ssize_t len,charfort )
Part of the StableABI since version 3.11. Copycontiguous lenbytesfrom buftoview.fortcanbe 'C'or'F'
(forC-styleorFortran-styleordering). 0isreturnedonsuccess, -1onerror.
intPyBuffer_ToContiguous (void*buf,const Py_buffer*src,Py_ssize_t len,charorder )
Part of the StableABI since version 3.11. Copy lenbytesfrom srctoitscontiguousrepresentationin buf.order
canbe 'C'or'F'or'A'(forC-styleorFortran-styleorderingoreitherone). 0isreturnedonsuccess, -1
onerror.
Thisfunctionfailsif len!=src->len.
intPyObject_CopyData (PyObject*dest, PyObject*src)
Part of the StableABI since version 3.11. Copydatafrom srctodestbuffer. CanconvertbetweenC-styleand
orFortran-stylebuffers.
0isreturnedonsuccess, -1onerror.
voidPyBuffer_FillContiguousStrides (intndims, Py_ssize_t *shape, Py_ssize_t *strides,intitemsize,char
order )
Part of the StableABI since version 3.11. Fillthe stridesarraywithbyte-stridesofa contiguous (C-styleif order
is'C'orFortran-styleif orderis'F')arrayofthegivenshapewiththegivennumberofbytesperelement.
intPyBuffer_FillInfo (Py_buffer*view, PyObject*exporter,void*buf, Py_ssize_t len,intreadonly,intflags )
Part of the StableABI since version 3.11. Handlebufferrequestsforanexporterthatwantstoexpose bufof
sizelenwithwritabilitysetaccordingto readonly.bufisinterpretedasasequenceofunsignedbytes.
Theflagsargument indicates the request type. This function always fills in viewas specified by flags, unless
bufhasbeendesignatedasread-onlyand PyBUF_WRITABLE issetin flags.
Onsuccess,set view->obj toanewreferenceto exporterandreturn0. Otherwise,raise BufferError ,set
view->obj toNULLandreturn -1;
Ifthisfunctionisusedaspartofa getbufferproc ,exporterMUSTbesettotheexportingobjectand flagsmust
bepassedunmodified. Otherwise, exporterMUSTbe NULL.
114 Chapter 7. Abstract Objects Layer
CHAPTER
EIGHT
CONCRETE OBJECTS LAYER
ThefunctionsinthischapterarespecifictocertainPythonobjecttypes. Passingthemanobjectofthewrongtypeis
notagoodidea;ifyoureceiveanobjectfromaPythonprogramandyouarenotsurethatithastherighttype,you
must perform a type check first; for example, to check that an object is a dictionary, use PyDict_Check() . The
chapterisstructuredlikethe“familytree”ofPythonobjecttypes.
ÁWarning
Whilethefunctionsdescribedinthischaptercarefullycheckthetypeoftheobjectswhicharepassedin,many
ofthemdonotcheckfor NULLbeingpassedinsteadofavalidobject. Allowing NULLtobepassedincancause
memoryaccessviolationsandimmediateterminationoftheinterpreter.
8.1Fundamental Objects
ThissectiondescribesPythontypeobjectsandthesingletonobject None.
8.1.1Type Objects
typePyTypeObject
Part of the LimitedAPI (as an opaque struct). TheCstructureoftheobjectsusedtodescribebuilt-intypes.
PyTypeObject PyType_Type
Part of the Stable ABI .This is the type object for type objects; it is the same object as typein the Python
layer.
intPyType_Check (PyObject*o)
Return non-zero if the object ois a type object, including instances of types derived from the standard type
object. Return0inallothercases. Thisfunctionalwayssucceeds.
intPyType_CheckExact (PyObject*o)
Returnnon-zeroiftheobject oisatypeobject,butnotasubtypeofthestandardtypeobject. Return0inall
othercases. Thisfunctionalwayssucceeds.
unsignedint PyType_ClearCache ()
Part of the StableABI .Cleartheinternallookupcache. Returnthecurrentversiontag.
unsignedlong PyType_GetFlags (PyTypeObject *type )
Part of the StableABI .Returnthe tp_flags memberof type. Thisfunctionisprimarilymeantforusewith
Py_LIMITED_API ; the individual flag bits are guaranteed to be stable across Python releases, but access to
tp_flags itselfisnotpartofthe limited API .
Addedinversion3.2.
Changedinversion3.4: Thereturntypeisnow unsigned long ratherthan long.
115
The Python/C API, Release 3.13.0
PyObject*PyType_GetDict (PyTypeObject *type )
Return the type object’s internal namespace, which is otherwise only exposed via a read-only proxy ( cls.
__dict__ ). Thisisareplacementforaccessing tp_dictdirectly. Thereturneddictionarymustbetreated
asread-only.
This function is meant for specific embedding and language-binding cases, where direct access to the dict is
necessaryandindirectaccess(e.g. viatheproxyor PyObject_GetAttr() )isn’tadequate.
Extensionmodulesshouldcontinuetouse tp_dict,directlyorindirectly,whensettinguptheirowntypes.
Addedinversion3.12.
voidPyType_Modified (PyTypeObject *type )
Part of the StableABI .Invalidatetheinternallookupcacheforthetypeandallofitssubtypes. Thisfunction
mustbecalledafteranymanualmodificationoftheattributesorbaseclassesofthetype.
intPyType_AddWatcher (PyType_WatchCallback callback )
Register callbackasatypewatcher. Returnanon-negativeintegerIDwhichmustbepassedtofuturecallsto
PyType_Watch() . Incaseoferror(e.g. nomorewatcherIDsavailable),return -1andsetanexception.
Addedinversion3.12.
intPyType_ClearWatcher (intwatcher_id )
Clear watcher identified by watcher_id (previously returned from PyType_AddWatcher() ). Return 0on
success, -1onerror(e.g. if watcher_id wasneverregistered.)
An extension should never call PyType_ClearWatcher with a watcher_id that was not returned to it by a
previouscallto PyType_AddWatcher() .
Addedinversion3.12.
intPyType_Watch (intwatcher_id, PyObject*type )
Mark typeaswatched. Thecallbackgranted watcher_id byPyType_AddWatcher() willbecalledwhenever
PyType_Modified() reports a change to type. (The callback may be called only once for a series of con-
secutivemodificationsto type,if_PyType_Lookup() isnotcalledon typebetweenthemodifications;thisis
animplementationdetailandsubjecttochange.)
Anextensionshouldnevercall PyType_Watch witha watcher_id thatwasnotreturnedtoitbyapreviouscall
toPyType_AddWatcher() .
Addedinversion3.12.
typedefint(* PyType_WatchCallback )(PyObject*type)
Typeofatype-watchercallbackfunction.
Thecallbackmustnotmodify typeorcause PyType_Modified() tobecalledon typeoranytypeinitsMRO;
violatingthisrulecouldcauseinfiniterecursion.
Addedinversion3.12.
intPyType_HasFeature (PyTypeObject *o,intfeature )
Returnnon-zeroifthetypeobject osetsthefeature feature. Typefeaturesaredenotedbysinglebitflags.
intPyType_IS_GC (PyTypeObject *o)
Return true if the type object includes support for the cycle detector; this tests the type flag
Py_TPFLAGS_HAVE_GC .
intPyType_IsSubtype (PyTypeObject *a,PyTypeObject *b)
Part of the StableABI .Returntrueif aisasubtypeof b.
Thisfunctiononlychecksforactualsubtypes,whichmeansthat __subclasscheck__() isnotcalledon b.
CallPyObject_IsSubclass() todothesamecheckthat issubclass() woulddo.
116 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyType_GenericAlloc (PyTypeObject *type, Py_ssize_t nitems )
Return value: New reference. Part of the StableABI .Generichandlerforthe tp_alloc slotofatypeobject.
UsePython’sdefaultmemoryallocationmechanismtoallocateanewinstanceandinitializeallitscontentsto
NULL.
PyObject*PyType_GenericNew (PyTypeObject *type, PyObject*args, PyObject*kwds )
Return value: New reference. Part of the Stable ABI .Generic handler for the tp_newslot of a type object.
Createanewinstanceusingthetype’s tp_alloc slot.
intPyType_Ready (PyTypeObject *type )
Part of the StableABI .Finalizeatypeobject. Thisshouldbecalledonalltypeobjectstofinishtheirinitial-
ization. This function is responsible for adding inherited slots from a type’s base class. Return 0on success,
orreturn -1andsetsanexceptiononerror.
®Note
If some of the base classes implements the GC protocol and the provided type does not include the
Py_TPFLAGS_HAVE_GC in its flags, then the GC protocol will be automatically implemented from its
parents. Onthecontrary,ifthetypebeingcreateddoesinclude Py_TPFLAGS_HAVE_GC initsflagsthen
itmustimplementtheGCprotocolitselfbyatleastimplementingthe tp_traverse handle.
PyObject*PyType_GetName (PyTypeObject *type )
Return value: New reference. Part of the StableABI since version 3.11. Returnthetype’sname. Equivalentto
gettingthetype’s __name__ attribute.
Addedinversion3.11.
PyObject*PyType_GetQualName (PyTypeObject *type )
Return value: New reference. Part of the Stable ABI since version 3.11. Return the type’s qualified name.
Equivalenttogettingthetype’s __qualname__ attribute.
Addedinversion3.11.
PyObject*PyType_GetFullyQualifiedName (PyTypeObject *type )
Part of the Stable ABI since version 3.13. Return the type’s fully qualified name. Equivalent to f"{type.
__module__}.{type.__qualname__}" ,ortype.__qualname__ iftype.__module__ isnotastring
orisequalto "builtins" .
Addedinversion3.13.
PyObject*PyType_GetModuleName (PyTypeObject *type )
Part of the Stable ABI since version 3.13. Return the type’s module name. Equivalent to getting the type.
__module__ attribute.
Addedinversion3.13.
void* PyType_GetSlot (PyTypeObject *type,intslot )
Part of the Stable ABI since version 3.4. Return the function pointer stored in the given slot. If the result is
NULL,thisindicatesthateithertheslotis NULL,orthatthefunctionwascalledwithinvalidparameters. Callers
willtypicallycasttheresultpointerintotheappropriatefunctiontype.
SeePyType_Slot.slot forpossiblevaluesofthe slotargument.
Addedinversion3.4.
Changed in version 3.10: PyType_GetSlot() can now accept all types. Previously, it was limited to heap
types.
PyObject*PyType_GetModule (PyTypeObject *type )
Part of the StableABI since version 3.10. Returnthemoduleobjectassociatedwiththegiventypewhenthe
typewascreatedusing PyType_FromModuleAndSpec() .
Ifnomoduleisassociatedwiththegiventype,sets TypeError andreturns NULL.
8.1. Fundamental Objects 117
The Python/C API, Release 3.13.0
This function is usually used to get the module in which a method is defined. Note that in such a method,
PyType_GetModule(Py_TYPE(self)) may not return the intended result. Py_TYPE(self) may be a
subclassoftheintendedclass,andsubclassesarenotnecessarilydefinedinthesamemoduleastheirsuperclass.
SeePyCMethod togettheclassthatdefinesthemethod. See PyType_GetModuleByDef() forcaseswhen
PyCMethod cannotbeused.
Addedinversion3.9.
void* PyType_GetModuleState (PyTypeObject *type )
Part of the StableABI since version 3.10. Returnthestateofthemoduleobjectassociatedwiththegiventype.
Thisisashortcutforcalling PyModule_GetState() ontheresultof PyType_GetModule() .
Ifnomoduleisassociatedwiththegiventype,sets TypeError andreturns NULL.
Ifthe typehasanassociatedmodulebutitsstateis NULL,returns NULLwithoutsettinganexception.
Addedinversion3.9.
PyObject*PyType_GetModuleByDef (PyTypeObject *type,struct PyModuleDef *def)
Part of the StableABI since version 3.13. Findthefirstsuperclasswhosemodulewascreatedfromthegiven
PyModuleDef def,andreturnthatmodule.
Ifnomoduleisfound,raisesa TypeError andreturns NULL.
This function is intended to be used together with PyModule_GetState() to get module state from slot
methods (such as tp_initornb_add) and other places where a method’s defining class cannot be passed
usingthe PyCMethod callingconvention.
Addedinversion3.11.
intPyUnstable_Type_AssignVersionTag (PyTypeObject *type )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Attempttoassignaversiontagtothegiventype.
Returns1ifthetypealreadyhadavalidversiontagoranewonewasassigned,or0ifanewtagcouldnotbe
assigned.
Addedinversion3.12.
Creating Heap-Allocated Types
Thefollowingfunctionsandstructsareusedtocreate heap types.
PyObject*PyType_FromMetaclass (PyTypeObject *metaclass, PyObject*module, PyType_Spec *spec, PyObject
*bases )
Part of the Stable ABI since version 3.12. Create and return a heap type from the spec(see
Py_TPFLAGS_HEAPTYPE ).
Themetaclass metaclassisusedtoconstructtheresultingtypeobject. When metaclassisNULL,themetaclass
isderivedfrom bases(orPy_tp_base[s] slotsif basesisNULL,seebelow).
Metaclassesthatoverride tp_newarenotsupported,exceptif tp_newisNULL.(Forbackwardscompatibility,
other PyType_From* functionsallowsuchmetaclasses. Theyignore tp_new,whichmayresultinincomplete
initialization. ThisisdeprecatedandinPython3.14+suchmetaclasseswillnotbesupported.)
Thebasesargumentcanbeusedtospecifybaseclasses;itcaneitherbeonlyoneclassoratupleofclasses. If
basesisNULL,thePy_tp_bases slotisusedinstead. Ifthatalsois NULL,thePy_tp_base slotisusedinstead. If
thatalsois NULL,thenewtypederivesfrom object.
Themoduleargument can be used to record the module in which the new class is defined. It must be a
module object or NULL. If not NULL, the module is associated with the new type and can later be retrieved
118 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
withPyType_GetModule() . Theassociatedmoduleisnotinheritedbysubclasses; itmustbespecifiedfor
eachclassindividually.
Thisfunctioncalls PyType_Ready() onthenewtype.
Note that this function does notfully match the behavior of calling type()or using the classstatement.
With user-provided base types or metaclasses, prefer calling type(or the metaclass) over PyType_From*
functions. Specifically:
•__new__() isnotcalledonthenewclass(anditmustbesetto type.__new__ ).
•__init__() isnotcalledonthenewclass.
•__init_subclass__() isnotcalledonanybases.
•__set_name__() isnotcalledonnewdescriptors.
Addedinversion3.12.
PyObject*PyType_FromModuleAndSpec (PyObject*module, PyType_Spec *spec, PyObject*bases )
Return value: New reference. Part of the Stable ABI since version 3.10. Equivalent to
PyType_FromMetaclass(NULL, module, spec, bases) .
Addedinversion3.9.
Changed in version 3.10: The function now accepts a single class as the basesargument and NULLas the
tp_docslot.
Changed in version 3.12: The function now finds and uses a metaclass corresponding to the provided base
classes. Previously,only typeinstanceswerereturned.
Thetp_newofthemetaclassis ignored. whichmayresultinincompleteinitialization. Creatingclasseswhose
metaclassoverrides tp_newisdeprecatedandinPython3.14+itwillbenolongerallowed.
PyObject*PyType_FromSpecWithBases (PyType_Spec *spec, PyObject*bases )
Return value: New reference. Part of the Stable ABI since version 3.3. Equivalent to
PyType_FromMetaclass(NULL, NULL, spec, bases) .
Addedinversion3.3.
Changed in version 3.12: The function now finds and uses a metaclass corresponding to the provided base
classes. Previously,only typeinstanceswerereturned.
Thetp_newofthemetaclassis ignored. whichmayresultinincompleteinitialization. Creatingclasseswhose
metaclassoverrides tp_newisdeprecatedandinPython3.14+itwillbenolongerallowed.
PyObject*PyType_FromSpec (PyType_Spec *spec )
Return value: New reference. Part of the StableABI .Equivalentto PyType_FromMetaclass(NULL, NULL,
spec, NULL) .
Changed in version 3.12: The function now finds and uses a metaclass corresponding to the base classes
providedin Py_tp_base[s] slots. Previously,only typeinstanceswerereturned.
Thetp_newofthemetaclassis ignored. whichmayresultinincompleteinitialization. Creatingclasseswhose
metaclassoverrides tp_newisdeprecatedandinPython3.14+itwillbenolongerallowed.
typePyType_Spec
Part of the StableABI (including all members). Structuredefiningatype’sbehavior.
constchar* name
Nameofthetype,usedtoset PyTypeObject.tp_name .
intbasicsize
Ifpositive,specifiesthesizeoftheinstanceinbytes. Itisusedtoset PyTypeObject.tp_basicsize .
Ifzero,specifiesthat tp_basicsize shouldbeinherited.
8.1. Fundamental Objects 119
The Python/C API, Release 3.13.0
If negative, the absolute value specifies how much space instances of the class need in addition to the
superclass. Use PyObject_GetTypeData() togetapointertosubclass-specificmemoryreservedthis
way.
Changedinversion3.12: Previously,thisfieldcouldnotbenegative.
intitemsize
Sizeofoneelementofavariable-sizetype,inbytes. Usedtoset PyTypeObject.tp_itemsize . See
tp_itemsize documentationforcaveats.
Ifzero, tp_itemsize isinherited. Extendingarbitraryvariable-sizedclassesisdangerous,sincesome
typesuseafixedoffsetforvariable-sizedmemory,whichcanthenoverlapfixed-sizedmemoryusedbya
subclass. Tohelppreventmistakes,inheriting itemsize isonlypossibleinthefollowingsituations:
•Thebaseisnotvariable-sized(its tp_itemsize ).
•The requested PyType_Spec.basicsize is positive, suggesting that the memory layout of the
baseclassisknown.
•Therequested PyType_Spec.basicsize iszero,suggestingthatthesubclassdoesnotaccessthe
instance’smemorydirectly.
•Withthe Py_TPFLAGS_ITEMS_AT_END flag.
unsignedint flags
Typeflags,usedtoset PyTypeObject.tp_flags .
Ifthe Py_TPFLAGS_HEAPTYPE flagisnotset, PyType_FromSpecWithBases() setsitautomatically.
PyType_Slot *slots
Arrayof PyType_Slot structures. Terminatedbythespecialslotvalue {0, NULL} .
EachslotIDshouldbespecifiedatmostonce.
typePyType_Slot
Part of the StableABI (including all members). Structuredefiningoptionalfunctionalityofatype,containing
aslotIDandavaluepointer.
intslot
AslotID.
SlotIDsarenamedlikethefieldnamesofthestructures PyTypeObject ,PyNumberMethods ,
PySequenceMethods ,PyMappingMethods andPyAsyncMethods withanadded Py_pre-
fix. Forexample,use:
•Py_tp_dealloc toset PyTypeObject.tp_dealloc
•Py_nb_add toset PyNumberMethods.nb_add
•Py_sq_length toset PySequenceMethods.sq_length
Thefollowing“offset”fieldscannotbesetusing PyType_Slot :
•tp_weaklistoffset (usePy_TPFLAGS_MANAGED_WEAKREF instead if possi-
ble)
•tp_dictoffset (usePy_TPFLAGS_MANAGED_DICT insteadifpossible)
•tp_vectorcall_offset (use"__vectorcalloffset__" inPyMemberDef )
Ifitisnotpossibletoswitchtoa MANAGEDflag(forexample,forvectorcallortosupport
Python older than 3.12), specify the offset in Py_tp_members . See PyMemberDef
documentation fordetails.
Thefollowingfieldscannotbesetatallwhencreatingaheaptype:
•tp_vectorcall (usetp_newand/or tp_init)
•Internalfields: tp_dict,tp_mro,tp_cache ,tp_subclasses ,and tp_weaklist .
120 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Setting Py_tp_bases orPy_tp_base maybeproblematiconsomeplatforms. Toavoidis-
sues,usethe basesargumentof PyType_FromSpecWithBases() instead.
Changedinversion3.9: Slotsin PyBufferProcs maybesetintheunlimitedAPI.
Changedinversion3.11: bf_getbuffer andbf_releasebuffer arenowavailableunderthe limited
API.
void* pfunc
Thedesiredvalueoftheslot. Inmostcases,thisisapointertoafunction.
Slotsotherthan Py_tp_doc maynotbe NULL.
8.1.2The NoneObject
Note that the PyTypeObject forNoneis not directly exposed in the Python/C API. Since Noneis a singleton,
testingforobjectidentity(using ==inC)issufficient. Thereisno PyNone_Check() functionforthesamereason.
PyObject*Py_None
ThePython Noneobject,denotinglackofvalue. Thisobjecthasnomethodsandis immortal.
Changedinversion3.12: Py_Noneisimmortal.
Py_RETURN_NONE
Return Py_Nonefromafunction.
8.2Numeric Objects
8.2.1Integer Objects
Allintegersareimplementedas“long”integerobjectsofarbitrarysize.
Onerror,most PyLong_As* APIsreturn (return type)-1 whichcannotbedistinguishedfromanumber. Use
PyErr_Occurred() todisambiguate.
typePyLongObject
Part of the LimitedAPI (as an opaque struct). Thissubtypeof PyObject representsaPythonintegerobject.
PyTypeObject PyLong_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythonintegertype. Thisisthesame
objectas intinthePythonlayer.
intPyLong_Check (PyObject*p)
Return true if its argument is a PyLongObject ora subtype of PyLongObject . This function always suc-
ceeds.
intPyLong_CheckExact (PyObject*p)
Returntrueifitsargumentisa PyLongObject ,butnotasubtypeof PyLongObject . Thisfunctionalways
succeeds.
PyObject*PyLong_FromLong (longv )
Return value: New reference. Part of the StableABI .Returnanew PyLongObject objectfrom v,orNULLon
failure.
Thecurrentimplementationkeepsanarrayofintegerobjectsforallintegersbetween -5and256. Whenyou
createanintinthatrangeyouactuallyjustgetbackareferencetotheexistingobject.
PyObject*PyLong_FromUnsignedLong (unsignedlongv )
Return value: New reference. Part of the StableABI .Returnanew PyLongObject objectfromaC unsigned
long,orNULLonfailure.
8.2. Numeric Objects 121
The Python/C API, Release 3.13.0
PyObject*PyLong_FromSsize_t (Py_ssize_t v)
Return value: New reference. Part of the Stable ABI .Return a new PyLongObject object from a C
Py_ssize_t ,orNULLonfailure.
PyObject*PyLong_FromSize_t (size_tv )
Return value: New reference. Part of the StableABI .Returnanew PyLongObject objectfromaC size_t,
orNULLonfailure.
PyObject*PyLong_FromLongLong (longlongv )
Return value: New reference. Part of the Stable ABI .Return a new PyLongObject object from a C long
long,orNULLonfailure.
PyObject*PyLong_FromUnsignedLongLong (unsignedlonglongv )
Return value: New reference. Part of the StableABI .Returnanew PyLongObject objectfromaC unsigned
long long ,orNULLonfailure.
PyObject*PyLong_FromDouble (doublev )
Return value: New reference. Part of the Stable ABI .Return a new PyLongObject object from the integer
partof v,orNULLonfailure.
PyObject*PyLong_FromString (constchar*str,char**pend,intbase )
Return value: New reference. Part of the StableABI .Returnanew PyLongObject basedonthestringvalue
instr,whichisinterpretedaccordingtotheradixin base,orNULLonfailure. If pendisnon- NULL,*pendwill
point to the end of stron success or to the first character that could not be processed on error. If baseis0,
strisinterpretedusingtheintegersdefinition;inthiscase,leadingzerosinanon-zerodecimalnumberraises
aValueError . Ifbaseis not 0, it must be between 2and36, inclusive. Leading and trailing whitespace
andsingleunderscoresafterabasespecifierandbetweendigitsareignored. Iftherearenodigitsor strisnot
NULL-terminatedfollowingthedigitsandtrailingwhitespace, ValueError willberaised.
µSee also
Python methods int.to_bytes() andint.from_bytes() to convert a PyLongObject to/from an
arrayofbytesinbase 256. YoucancallthosefromCusing PyObject_CallMethod() .
PyObject*PyLong_FromUnicodeObject (PyObject*u,intbase )
Return value: New reference. ConvertasequenceofUnicodedigitsinthestring utoaPythonintegervalue.
Addedinversion3.3.
PyObject*PyLong_FromVoidPtr (void*p )
Return value: New reference. Part of the StableABI .CreateaPythonintegerfromthepointer p. Thepointer
valuecanberetrievedfromtheresultingvalueusing PyLong_AsVoidPtr() .
PyObject*PyLong_FromNativeBytes (constvoid*buffer,size_tn_bytes,intflags )
Create a Python integer from the value contained in the first n_bytesofbuffer, interpreted as a two’s-
complementsignednumber.
flagsare as for PyLong_AsNativeBytes() . Passing -1will select the native endian
that CPython was compiled with and assume that the most-significant bit is a sign bit.
Passing Py_ASNATIVEBYTES_UNSIGNED_BUFFER will produce the same result as calling
PyLong_FromUnsignedNativeBytes() . Otherflagsareignored.
Addedinversion3.13.
PyObject*PyLong_FromUnsignedNativeBytes (constvoid*buffer,size_tn_bytes,intflags )
Create a Python integer from the value contained in the first n_bytesofbuffer, interpreted as an unsigned
number.
flagsare as for PyLong_AsNativeBytes() . Passing -1will select the native endian that CPython was
compiledwithandassumethatthemost-significantbitisnotasignbit. Flagsotherthanendianareignored.
Addedinversion3.13.
122 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
longPyLong_AsLong (PyObject*obj)
Part of the StableABI .Returna C longrepresentation of obj. Ifobjisnotan instanceof PyLongObject ,
firstcallits __index__() method(ifpresent)toconvertittoa PyLongObject .
Raise OverflowError ifthevalueof objisoutofrangefora long.
Returns -1onerror. Use PyErr_Occurred() todisambiguate.
Changedinversion3.8: Use __index__() ifavailable.
Changedinversion3.10: Thisfunctionwillnolongeruse __int__() .
longPyLong_AS_LONG (PyObject*obj)
Asoft deprecated alias. Exactly equivalent to the preferred PyLong_AsLong . In particular, it can fail
withOverflowError oranotherexception.
Deprecatedsinceversion3.14: Thefunctionissoftdeprecated.
intPyLong_AsInt (PyObject*obj)
Part of the Stable ABI since version 3.13. Similar to PyLong_AsLong() , but store the result in a C int
insteadofaC long.
Addedinversion3.13.
longPyLong_AsLongAndOverflow (PyObject*obj,int*overflow )
Part of the StableABI .Returna C longrepresentation of obj. Ifobjisnotan instanceof PyLongObject ,
firstcallits __index__() method(ifpresent)toconvertittoa PyLongObject .
If the value of objis greater than LONG_MAX or less than LONG_MIN , set*overflowto1or-1, respectively,
andreturn -1;otherwise,set *overflowto0. Ifanyotherexceptionoccursset *overflowto0andreturn -1as
usual.
Returns -1onerror. Use PyErr_Occurred() todisambiguate.
Changedinversion3.8: Use __index__() ifavailable.
Changedinversion3.10: Thisfunctionwillnolongeruse __int__() .
longlong PyLong_AsLongLong (PyObject*obj)
Part of the Stable ABI .Return a C long long representation of obj. If objis not an instance of
PyLongObject ,firstcallits __index__() method(ifpresent)toconvertittoa PyLongObject .
Raise OverflowError ifthevalueof objisoutofrangefora long long .
Returns -1onerror. Use PyErr_Occurred() todisambiguate.
Changedinversion3.8: Use __index__() ifavailable.
Changedinversion3.10: Thisfunctionwillnolongeruse __int__() .
longlong PyLong_AsLongLongAndOverflow (PyObject*obj,int*overflow )
Part of the Stable ABI .Return a C long long representation of obj. If objis not an instance of
PyLongObject ,firstcallits __index__() method(ifpresent)toconvertittoa PyLongObject .
Ifthevalueof objisgreaterthan LLONG_MAX orlessthan LLONG_MIN ,set*overflowto1or-1,respectively,
andreturn -1;otherwise,set *overflowto0. Ifanyotherexceptionoccursset *overflowto0andreturn -1as
usual.
Returns -1onerror. Use PyErr_Occurred() todisambiguate.
Addedinversion3.2.
Changedinversion3.8: Use __index__() ifavailable.
Changedinversion3.10: Thisfunctionwillnolongeruse __int__() .
8.2. Numeric Objects 123
The Python/C API, Release 3.13.0
Py_ssize_t PyLong_AsSsize_t (PyObject*pylong )
Part of the Stable ABI .Return a C Py_ssize_t representation of pylong.pylongmust be an instance of
PyLongObject .
Raise OverflowError ifthevalueof pylongisoutofrangefora Py_ssize_t .
Returns -1onerror. Use PyErr_Occurred() todisambiguate.
unsignedlong PyLong_AsUnsignedLong (PyObject*pylong )
Part of the StableABI .ReturnaC unsigned long representationof pylong.pylongmustbeaninstanceof
PyLongObject .
Raise OverflowError ifthevalueof pylongisoutofrangefora unsigned long .
Returns (unsigned long)-1 onerror. Use PyErr_Occurred() todisambiguate.
size_t PyLong_AsSize_t (PyObject*pylong )
Part of the Stable ABI .Return a C size_trepresentation of pylong.pylongmust be an instance of
PyLongObject .
Raise OverflowError ifthevalueof pylongisoutofrangefora size_t.
Returns (size_t)-1 onerror. Use PyErr_Occurred() todisambiguate.
unsignedlonglong PyLong_AsUnsignedLongLong (PyObject*pylong )
Part of the Stable ABI .Return a C unsigned long long representation of pylong.pylongmust be an
instanceof PyLongObject .
Raise OverflowError ifthevalueof pylongisoutofrangeforan unsigned long long .
Returns (unsigned long long)-1 onerror. Use PyErr_Occurred() todisambiguate.
Changedinversion3.1: Anegative pylongnowraises OverflowError ,notTypeError .
unsignedlong PyLong_AsUnsignedLongMask (PyObject*obj)
Part of the Stable ABI .Return a C unsigned long representation of obj. Ifobjis not an instance of
PyLongObject ,firstcallits __index__() method(ifpresent)toconvertittoa PyLongObject .
If the value of objis out of range for an unsigned long , return the reduction of that value modulo
ULONG_MAX + 1 .
Returns (unsigned long)-1 onerror. Use PyErr_Occurred() todisambiguate.
Changedinversion3.8: Use __index__() ifavailable.
Changedinversion3.10: Thisfunctionwillnolongeruse __int__() .
unsignedlonglong PyLong_AsUnsignedLongLongMask (PyObject*obj)
Part of the StableABI .ReturnaC unsigned long long representationof obj. Ifobjisnotaninstanceof
PyLongObject ,firstcallits __index__() method(ifpresent)toconvertittoa PyLongObject .
If the value of objis out of range for an unsigned long long , return the reduction of that value modulo
ULLONG_MAX + 1 .
Returns (unsigned long long)-1 onerror. Use PyErr_Occurred() todisambiguate.
Changedinversion3.8: Use __index__() ifavailable.
Changedinversion3.10: Thisfunctionwillnolongeruse __int__() .
double PyLong_AsDouble (PyObject*pylong )
Part of the Stable ABI .Return a C doublerepresentation of pylong.pylongmust be an instance of
PyLongObject .
Raise OverflowError ifthevalueof pylongisoutofrangefora double.
Returns -1.0onerror. Use PyErr_Occurred() todisambiguate.
124 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
void* PyLong_AsVoidPtr (PyObject*pylong )
Part of the StableABI .ConvertaPythoninteger pylongtoaC voidpointer. If pylongcannotbeconverted,
anOverflowError willberaised. Thisisonlyassuredtoproduceausable voidpointerforvaluescreated
withPyLong_FromVoidPtr() .
Returns NULLonerror. Use PyErr_Occurred() todisambiguate.
Py_ssize_t PyLong_AsNativeBytes (PyObject*pylong,void*buffer, Py_ssize_t n_bytes,intflags )
CopythePythonintegervalue pylongtoanative bufferofsize n_bytes. The flagscanbesetto -1tobehave
similarlytoaCcast,ortovaluesdocumentedbelowtocontrolthebehavior.
Returns -1withanexceptionraisedonerror. Thismayhappenif pylongcannotbeinterpretedasaninteger,
orifpylongwasnegativeandthe Py_ASNATIVEBYTES_REJECT_NEGATIVE flagwasset.
Otherwise,returnsthenumberofbytesrequiredtostorethevalue. Ifthisisequaltoorlessthan n_bytes,the
entirevaluewascopied. All n_bytesofthebufferarewritten: largebuffersarepaddedwithzeroes.
If the returned value is greater than than n_bytes, the value was truncated: as many of the lowest bits of the
valueascouldfitarewritten, andthehigherbitsareignored. ThismatchesthetypicalbehaviorofaC-style
downcast.
®Note
Overflowisnotconsideredanerror. Ifthereturnedvalueislargerthan n_bytes,mostsignificantbitswere
discarded.
0willneverbereturned.
Valuesarealwayscopiedastwo’s-complement.
Usageexample:
int32_t value;
Py_ssize_t bytes =PyLong_AsNativeBytes(pylong, &value, sizeof (value), -1);
if(bytes <0){
// Failed. A Python exception was set with the reason.
return NULL ;
}
else if(bytes <=(Py_ssize_t) sizeof (value)) {
// Success!
}
else {
// Overflow occurred, but 'value' contains the truncated
// lowest bits of pylong.
}
Passingzeroto n_byteswillreturnthesizeofabufferthatwouldbelargeenoughtoholdthevalue. Thismay
belargerthantechnicallynecessary,butnotunreasonablyso. If n_bytes=0,buffermaybe NULL.
®Note
Passing n_bytes=0tothisfunctionisnotanaccuratewaytodeterminethebitlengthofthevalue.
TogetattheentirePythonvalueofanunknownsize,thefunctioncanbecalledtwice: firsttodeterminethe
buffersize,thentofillit:
// Ask how much space we need.
Py_ssize_t expected =PyLong_AsNativeBytes(pylong, NULL ,0,-1);
if(expected <0){
(continuesonnextpage)
8.2. Numeric Objects 125
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
// Failed. A Python exception was set with the reason.
return NULL ;
}
assert(expected !=0); // Impossible per the API definition.
uint8_t *bignum =malloc(expected);
if(!bignum) {
PyErr_SetString(PyExc_MemoryError, "bignum malloc failed. ");
return NULL ;
}
// Safely get the entire value.
Py_ssize_t bytes =PyLong_AsNativeBytes(pylong, bignum, expected, -1);
if(bytes <0){// Exception has been set.
free(bignum);
return NULL ;
}
else if(bytes >expected) {// This should not be possible.
PyErr_SetString(PyExc_RuntimeError,
"Unexpected bignum truncation after a size check. ");
free(bignum);
return NULL ;
}
// The expected success given the above pre-check.
// ... use bignum ...
free(bignum);
flagsis either -1(Py_ASNATIVEBYTES_DEFAULTS ) to select defaults that behave most like a C cast, or a
combinationoftheotherflagsinthetablebelow. Notethat -1cannotbecombinedwithotherflags.
Currently, -1 corresponds to Py_ASNATIVEBYTES_NATIVE_ENDIAN |
Py_ASNATIVEBYTES_UNSIGNED_BUFFER .
Flag Value
Py_ASNATIVEBYTES_DEFAULTS-1
Py_ASNATIVEBYTES_BIG_ENDIAN0
Py_ASNATIVEBYTES_LITTLE_ENDIAN1
Py_ASNATIVEBYTES_NATIVE_ENDIAN3
Py_ASNATIVEBYTES_UNSIGNED_BUFFER4
Py_ASNATIVEBYTES_REJECT_NEGATIVE8
Py_ASNATIVEBYTES_ALLOW_INDEX16
Specifying Py_ASNATIVEBYTES_NATIVE_ENDIAN willoverrideanyotherendianflags. Passing 2isreserved.
By default, sufficient buffer will be requested to include a sign bit. For example, when converting 128 with
126 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
n_bytes=1,thefunctionwillreturn2(ormore)inordertostoreazerosignbit.
IfPy_ASNATIVEBYTES_UNSIGNED_BUFFER is specified, a zero sign bit will be omitted from size calcula-
tions. This allows, for example, 128 to fit in a single-byte buffer. If the destination buffer is later treated as
signed, a positive input value may become negative. Note that the flag does not affect handling of negative
values: forthose,spaceforasignbitisalwaysrequested.
Specifying Py_ASNATIVEBYTES_REJECT_NEGATIVE causes an exception to be set if pylongis negative.
Without this flag, negative values will be copied provided there is enough space for at least one sign bit, re-
gardlessofwhether Py_ASNATIVEBYTES_UNSIGNED_BUFFER wasspecified.
IfPy_ASNATIVEBYTES_ALLOW_INDEX is specified and a non-integer value is passed, its __index__()
methodwillbecalledfirst. ThismayresultinPythoncodeexecutingandotherthreadsbeingallowedtorun,
which could cause changes to other objects or values in use. When flagsis-1, this option is not set, and
non-integervalueswillraise TypeError .
®Note
Withthedefault flags(-1,orUNSIGNED_BUFFER without REJECT_NEGATIVE ),multiplePythoninte-
gerscanmaptoasinglevaluewithoutoverflow. Forexample,both 255and-1fitasingle-bytebufferand
setallitsbits. ThismatchestypicalCcastbehavior.
Addedinversion3.13.
PyObject*PyLong_GetInfo (void)
Part of the Stable ABI .On success, return a read only named tuple , that holds information about Python’s
internalrepresentationofintegers. See sys.int_info fordescriptionofindividualfields.
Onfailure,return NULLwithanexceptionset.
Addedinversion3.1.
intPyUnstable_Long_IsCompact (const PyLongObject *op)
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Return1if opiscompact,0otherwise.
Thisfunctionmakesitpossibleforperformance-criticalcodetoimplementa“fastpath”forsmallintegers. For
compactvaluesuse PyUnstable_Long_CompactValue() ;forothersfallbacktoa PyLong_As* function
orPyLong_AsNativeBytes() .
Thespeedupisexpectedtobenegligibleformostusers.
Exactlywhatvaluesareconsideredcompactisanimplementationdetailandissubjecttochange.
Addedinversion3.12.
Py_ssize_t PyUnstable_Long_CompactValue (const PyLongObject *op)
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Ifopiscompact,asdeterminedby PyUnstable_Long_IsCompact() ,returnitsvalue.
Otherwise,thereturnvalueisundefined.
Addedinversion3.12.
8.2. Numeric Objects 127
The Python/C API, Release 3.13.0
8.2.2Boolean Objects
BooleansinPythonareimplementedasasubclassofintegers. Thereareonlytwobooleans, Py_False andPy_True.
As such, the normal creation and deletion functions don’t apply to booleans. The following macros are available,
however.
PyTypeObject PyBool_Type
Part of the Stable ABI .This instance of PyTypeObject represents the Python boolean type; it is the same
objectas boolinthePythonlayer.
intPyBool_Check (PyObject*o)
Returntrueif oisoftype PyBool_Type . Thisfunctionalwayssucceeds.
PyObject*Py_False
ThePython Falseobject. Thisobjecthasnomethodsandis immortal.
Changedinversion3.12: Py_False isimmortal.
PyObject*Py_True
ThePython Trueobject. Thisobjecthasnomethodsandis immortal.
Changedinversion3.12: Py_Trueisimmortal.
Py_RETURN_FALSE
Return Py_False fromafunction.
Py_RETURN_TRUE
Return Py_Truefromafunction.
PyObject*PyBool_FromLong (longv )
Return value: New reference. Part of the StableABI .Return Py_TrueorPy_False ,dependingonthetruth
valueof v.
8.2.3Floating-Point Objects
typePyFloatObject
Thissubtypeof PyObject representsaPythonfloating-pointobject.
PyTypeObject PyFloat_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythonfloating-pointtype. Thisisthe
sameobjectas floatinthePythonlayer.
intPyFloat_Check (PyObject*p)
Return true if its argument is a PyFloatObject or a subtype of PyFloatObject . This function always
succeeds.
intPyFloat_CheckExact (PyObject*p)
Returntrueifitsargumentisa PyFloatObject ,butnotasubtypeof PyFloatObject . Thisfunctionalways
succeeds.
PyObject*PyFloat_FromString (PyObject*str)
Return value: New reference. Part of the Stable ABI .Create a PyFloatObject object based on the string
valuein str,orNULLonfailure.
PyObject*PyFloat_FromDouble (doublev )
Return value: New reference. Part of the Stable ABI .Create a PyFloatObject object from v, orNULLon
failure.
double PyFloat_AsDouble (PyObject*pyfloat )
Part of the StableABI .ReturnaC doublerepresentationofthecontentsof pyfloat. IfpyfloatisnotaPython
floating-pointobjectbuthasa __float__() method, thismethodwillfirstbecalledtoconvert pyfloatinto
afloat. If __float__() isnotdefinedthenitfallsbackto __index__() . Thismethodreturns -1.0upon
failure,sooneshouldcall PyErr_Occurred() tocheckforerrors.
128 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Changedinversion3.8: Use __index__() ifavailable.
double PyFloat_AS_DOUBLE (PyObject*pyfloat )
ReturnaC doublerepresentationofthecontentsof pyfloat,butwithouterrorchecking.
PyObject*PyFloat_GetInfo (void)
Return value: New reference. Part of the StableABI .Returnastructseqinstancewhichcontainsinformation
about the precision, minimum and maximum values of a float. It’s a thin wrapper around the header file
float.h.
double PyFloat_GetMax ()
Part of the StableABI .Returnthemaximumrepresentablefinitefloat DBL_MAX asCdouble.
double PyFloat_GetMin ()
Part of the StableABI .Returntheminimumnormalizedpositivefloat DBL_MIN asCdouble.
Pack and Unpack functions
Thepackandunpackfunctionsprovideanefficientplatform-independentwaytostorefloating-pointvaluesasbyte
strings. ThePackroutinesproduceabytesstringfromaC double,andtheUnpackroutinesproduceaC double
fromsuchabytesstring. Thesuffix(2,4or8)specifiesthenumberofbytesinthebytesstring.
On platforms that appear to use IEEE 754 formats these functions work by copying bits. On other platforms, the
2-byteformatisidenticaltotheIEEE754binary16half-precisionformat,the4-byteformat(32-bit)isidenticalto
the IEEE 754 binary32 single precision format, and the 8-byte format to the IEEE 754 binary64 double precision
format, although the packing of INFs and NaNs (if such things exist on the platform) isn’t handled correctly, and
attemptingtounpackabytesstringcontaininganIEEEINForNaNwillraiseanexception.
Onnon-IEEEplatformswithmoreprecision,orlargerdynamicrange,thanIEEE754supports,notallvaluescanbe
packed;onnon-IEEEplatformswithlessprecision,orsmallerdynamicrange,notallvaluescanbeunpacked. What
happensinsuchcasesispartlyaccidental(alas).
Addedinversion3.11.
Pack functions
Thepackroutineswrite2,4or8bytes,startingat p.leisan intargument,non-zeroifyouwantthebytesstringin
little-endianformat(exponentlast,at p+1,p+3,orp+6 p+7),zeroifyouwantbig-endianformat(exponentfirst,at
p). The PY_BIG_ENDIAN constantcanbeusedtousethenativeendian: itisequalto 1onbigendianprocessor,or
0onlittleendianprocessor.
Returnvalue: 0ifallisOK, -1iferror(andanexceptionisset,mostlikely OverflowError ).
Therearetwoproblemsonnon-IEEEplatforms:
•Whatthisdoesisundefinedif xisaNaNorinfinity.
•-0.0and+0.0producethesamebytesstring.
intPyFloat_Pack2 (doublex,unsignedchar*p,intle )
PackaCdoubleastheIEEE754binary16half-precisionformat.
intPyFloat_Pack4 (doublex,unsignedchar*p,intle )
PackaCdoubleastheIEEE754binary32singleprecisionformat.
intPyFloat_Pack8 (doublex,unsignedchar*p,intle )
PackaCdoubleastheIEEE754binary64doubleprecisionformat.
Unpack functions
The unpack routines read 2, 4 or 8 bytes, starting at p.leis an intargument, non-zero if the bytes string is in
little-endian format (exponent last, at p+1,p+3orp+6andp+7), zero if big-endian (exponent first, at p). The
PY_BIG_ENDIAN constantcanbeusedtousethenativeendian: itisequalto 1onbigendianprocessor,or 0onlittle
endianprocessor.
8.2. Numeric Objects 129
The Python/C API, Release 3.13.0
Return value: The unpacked double. On error, this is -1.0andPyErr_Occurred() is true (and an exception is
set,mostlikely OverflowError ).
Notethatonanon-IEEEplatformthiswillrefusetounpackabytesstringthatrepresentsaNaNorinfinity.
double PyFloat_Unpack2 (constunsignedchar*p,intle )
UnpacktheIEEE754binary16half-precisionformatasaCdouble.
double PyFloat_Unpack4 (constunsignedchar*p,intle )
UnpacktheIEEE754binary32singleprecisionformatasaCdouble.
double PyFloat_Unpack8 (constunsignedchar*p,intle )
UnpacktheIEEE754binary64doubleprecisionformatasaCdouble.
8.2.4Complex Number Objects
Python’s complex number objects are implemented as two distinct types when viewed from the C API: one is the
PythonobjectexposedtoPythonprograms,andtheotherisaCstructurewhichrepresentstheactualcomplexnumber
value. TheAPIprovidesfunctionsforworkingwithboth.
Complex Numbers as C Structures
Notethatthefunctionswhichacceptthesestructuresasparametersandreturnthemasresultsdoso by valuerather
thandereferencingthemthroughpointers. ThisisconsistentthroughouttheAPI.
typePy_complex
The C structure which corresponds to the value portion of a Python complex number object. Most of the
functions for dealing with complex number objects use structures of this type as input or output values, as
appropriate.
double real
double imag
Thestructureisdefinedas:
typedef struct {
double real;
double imag;
}Py_complex;
Py_complex _Py_c_sum (Py_complex left,Py_complex right)
Returnthesumoftwocomplexnumbers,usingtheC Py_complex representation.
Py_complex _Py_c_diff (Py_complex left,Py_complex right)
Returnthedifferencebetweentwocomplexnumbers,usingtheC Py_complex representation.
Py_complex _Py_c_neg (Py_complex num)
Returnthenegationofthecomplexnumber num,usingtheC Py_complex representation.
Py_complex _Py_c_prod (Py_complex left,Py_complex right)
Returntheproductoftwocomplexnumbers,usingtheC Py_complex representation.
Py_complex _Py_c_quot (Py_complex dividend, Py_complex divisor )
Returnthequotientoftwocomplexnumbers,usingtheC Py_complex representation.
Ifdivisorisnull,thismethodreturnszeroandsets errnotoEDOM.
Py_complex _Py_c_pow (Py_complex num, Py_complex exp)
Returntheexponentiationof numbyexp,usingtheC Py_complex representation.
Ifnumisnulland expisnotapositiverealnumber,thismethodreturnszeroandsets errnotoEDOM.
130 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Complex Numbers as Python Objects
typePyComplexObject
Thissubtypeof PyObject representsaPythoncomplexnumberobject.
PyTypeObject PyComplex_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythoncomplexnumbertype. Itisthe
sameobjectas complexinthePythonlayer.
intPyComplex_Check (PyObject*p)
Returntrueifitsargumentisa PyComplexObject orasubtypeof PyComplexObject . Thisfunctionalways
succeeds.
intPyComplex_CheckExact (PyObject*p)
Returntrueifitsargumentisa PyComplexObject ,butnotasubtypeof PyComplexObject . Thisfunction
alwayssucceeds.
PyObject*PyComplex_FromCComplex (Py_complex v)
Return value: New reference. Create a new Python complex number object from a C Py_complex value.
Return NULLwithanexceptionsetonerror.
PyObject*PyComplex_FromDoubles (doublereal,doubleimag )
Return value: New reference. Part of the StableABI .Returnanew PyComplexObject objectfrom realand
imag. Return NULLwithanexceptionsetonerror.
double PyComplex_RealAsDouble (PyObject*op)
Part of the StableABI .Returntherealpartof opasaC double.
Ifopis not a Python complex number object but has a __complex__() method, this method will first be
calledtoconvert optoaPythoncomplexnumberobject. If __complex__() isnotdefinedthenitfallsback
tocall PyFloat_AsDouble() andreturnsitsresult.
Upon failure, this method returns -1.0with an exception set, so one should call PyErr_Occurred() to
checkforerrors.
Changedinversion3.13: Use __complex__() ifavailable.
double PyComplex_ImagAsDouble (PyObject*op)
Part of the StableABI .Returntheimaginarypartof opasaC double.
Ifopis not a Python complex number object but has a __complex__() method, this method will first be
calledtoconvert optoaPythoncomplexnumberobject. If __complex__() isnotdefinedthenitfallsback
tocall PyFloat_AsDouble() andreturns 0.0onsuccess.
Upon failure, this method returns -1.0with an exception set, so one should call PyErr_Occurred() to
checkforerrors.
Changedinversion3.13: Use __complex__() ifavailable.
Py_complex PyComplex_AsCComplex (PyObject*op)
Returnthe Py_complex valueofthecomplexnumber op.
Ifopis not a Python complex number object but has a __complex__() method, this method will first be
calledtoconvert optoaPythoncomplexnumberobject. If __complex__() isnotdefinedthenitfallsback
to__float__() . If__float__() isnotdefinedthenitfallsbackto __index__() .
Uponfailure,thismethodreturns Py_complex withrealsetto -1.0andwithanexceptionset,sooneshould
callPyErr_Occurred() tocheckforerrors.
Changedinversion3.8: Use __index__() ifavailable.
8.2. Numeric Objects 131
The Python/C API, Release 3.13.0
8.3Sequence Objects
Generic operations on sequence objects were discussed in the previous chapter; this section deals with the specific
kindsofsequenceobjectsthatareintrinsictothePythonlanguage.
8.3.1Bytes Objects
Thesefunctionsraise TypeError whenexpectingabytesparameterandcalledwithanon-bytesparameter.
typePyBytesObject
Thissubtypeof PyObject representsaPythonbytesobject.
PyTypeObject PyBytes_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythonbytestype;itisthesameobject
asbytesinthePythonlayer.
intPyBytes_Check (PyObject*o)
Returntrueiftheobject oisabytesobjectoraninstanceofasubtypeofthebytestype. Thisfunctionalways
succeeds.
intPyBytes_CheckExact (PyObject*o)
Returntrueiftheobject oisabytesobject,butnotaninstanceofasubtypeofthebytestype. Thisfunction
alwayssucceeds.
PyObject*PyBytes_FromString (constchar*v )
Return value: New reference. Part of the StableABI .Returnanewbytesobjectwithacopyofthestring vas
valueonsuccess,and NULLonfailure. Theparameter vmustnotbe NULL;itwillnotbechecked.
PyObject*PyBytes_FromStringAndSize (constchar*v, Py_ssize_t len)
Return value: New reference. Part of the Stable ABI .Return a new bytes object with a copy of the string v
as value and length lenon success, and NULLon failure. If visNULL, the contents of the bytes object are
uninitialized.
PyObject*PyBytes_FromFormat (constchar*format,... )
Return value: New reference. Part of the Stable ABI .Take a C printf() -style formatstring and a variable
numberofarguments,calculatethesizeoftheresultingPythonbytesobjectandreturnabytesobjectwiththe
valuesformattedintoit. ThevariableargumentsmustbeCtypesandmustcorrespondexactlytotheformat
charactersinthe formatstring. Thefollowingformatcharactersareallowed:
FormatCharacters Type Comment
%% n/a Theliteral%character.
%c int Asinglebyte,representedasaCint.
%d int Equivalentto printf("%d") .1
%u unsignedint Equivalentto printf("%u") .1
%ld long Equivalentto printf("%ld") .1
%lu unsignedlong Equivalentto printf("%lu") .1
%zd Py_ssize_t Equivalentto printf("%zd") .1
%zu size_t Equivalentto printf("%zu") .1
%i int Equivalentto printf("%i") .1
%x int Equivalentto printf("%x") .1
%s constchar* Anull-terminatedCcharacterarray.
%p constvoid* ThehexrepresentationofaCpointer. Mostlyequivalentto
printf("%p") exceptthatitisguaranteedtostartwiththe
literal 0xregardlessofwhattheplatform’s printfyields.
Anunrecognizedformatcharactercausesalltherestoftheformatstringtobecopiedas-istotheresultobject,
andanyextraargumentsdiscarded.
1Forintegerspecifiers(d,u,ld,lu,zd,zu,i,x): the0-conversionflaghaseffectevenwhenaprecisionisgiven.
132 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyBytes_FromFormatV (constchar*format,va_listvargs )
Return value: New reference. Part of the Stable ABI .Identical to PyBytes_FromFormat() except that it
takesexactlytwoarguments.
PyObject*PyBytes_FromObject (PyObject*o)
Return value: New reference. Part of the StableABI .Returnthebytesrepresentationofobject othatimplements
thebufferprotocol.
Py_ssize_t PyBytes_Size (PyObject*o)
Part of the StableABI .Returnthelengthofthebytesinbytesobject o.
Py_ssize_t PyBytes_GET_SIZE (PyObject*o)
Similarto PyBytes_Size() ,butwithouterrorchecking.
char* PyBytes_AsString (PyObject*o)
Part of the Stable ABI .Return a pointer to the contents of o. The pointer refers to the internal buffer of o,
which consists of len(o) + 1 bytes. The last byte in the buffer is always null, regardless of whether there
are any other null bytes. The data must not be modified in any way, unless the object was just created using
PyBytes_FromStringAndSize(NULL, size) . Itmustnotbedeallocated. If oisnotabytesobjectatall,
PyBytes_AsString() returns NULLandraises TypeError .
char* PyBytes_AS_STRING (PyObject*string )
Similarto PyBytes_AsString() ,butwithouterrorchecking.
intPyBytes_AsStringAndSize (PyObject*obj,char**buffer, Py_ssize_t *length )
Part of the StableABI .Returnthenull-terminatedcontentsoftheobject objthroughtheoutputvariables buffer
andlength. Returns 0onsuccess.
IflengthisNULL,thebytesobjectmaynotcontainembeddednullbytes;ifitdoes,thefunctionreturns -1and
aValueError israised.
The buffer refers to an internal buffer of obj, which includes an additional null byte at the end (not
counted in length). The data must not be modified in any way, unless the object was just created using
PyBytes_FromStringAndSize(NULL, size) . It must not be deallocated. If objis not a bytes object
atall, PyBytes_AsStringAndSize() returns -1andraises TypeError .
Changed in version 3.5: Previously, TypeError was raised when embedded null bytes were encountered in
thebytesobject.
voidPyBytes_Concat (PyObject**bytes, PyObject*newpart )
Part of the Stable ABI .Create a new bytes object in *bytescontaining the contents of newpartappended to
bytes;thecallerwillownthenewreference. Thereferencetotheoldvalueof byteswillbestolen. Ifthenew
objectcannotbecreated,theoldreferenceto byteswillstillbediscardedandthevalueof *byteswillbesetto
NULL;theappropriateexceptionwillbeset.
voidPyBytes_ConcatAndDel (PyObject**bytes, PyObject*newpart )
Part of the Stable ABI .Create a new bytes object in *bytescontaining the contents of newpartappended to
bytes. Thisversionreleasesthe strong reference tonewpart(i.e. decrementsitsreferencecount).
int_PyBytes_Resize (PyObject**bytes, Py_ssize_t newsize )
Resizeabytesobject. newsizewillbethenewlengthofthebytesobject. Youcanthinkofitascreatinganew
bytesobjectanddestroyingtheoldone,onlymoreefficiently. Passtheaddressofanexistingbytesobjectas
anlvalue(itmaybewritteninto),andthenewsizedesired. Onsuccess, *bytesholdstheresizedbytesobject
and0is returned; the address in *bytesmay differ from its input value. If the reallocation fails, the original
bytesobjectat *bytesisdeallocated, *bytesissetto NULL,MemoryError isset,and -1isreturned.
8.3.2Byte Array Objects
typePyByteArrayObject
Thissubtypeof PyObject representsaPythonbytearrayobject.
8.3. Sequence Objects 133
The Python/C API, Release 3.13.0
PyTypeObject PyByteArray_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythonbytearraytype;itisthesame
objectas bytearray inthePythonlayer.
Type check macros
intPyByteArray_Check (PyObject*o)
Returntrueiftheobject oisabytearrayobjectoraninstanceofasubtypeofthebytearraytype. Thisfunction
alwayssucceeds.
intPyByteArray_CheckExact (PyObject*o)
Returntrueiftheobject oisabytearrayobject, butnotaninstanceofasubtypeofthebytearraytype. This
functionalwayssucceeds.
Direct API functions
PyObject*PyByteArray_FromObject (PyObject*o)
Return value: New reference. Part of the Stable ABI .Return a new bytearray object from any object, o, that
implementsthe buffer protocol .
Onfailure,return NULLwithanexceptionset.
PyObject*PyByteArray_FromStringAndSize (constchar*string, Py_ssize_t len)
Return value: New reference. Part of the StableABI .Createanewbytearrayobjectfrom stringanditslength,
len.
Onfailure,return NULLwithanexceptionset.
PyObject*PyByteArray_Concat (PyObject*a,PyObject*b)
Return value: New reference. Part of the Stable ABI .Concat bytearrays aandband return a new bytearray
withtheresult.
Onfailure,return NULLwithanexceptionset.
Py_ssize_t PyByteArray_Size (PyObject*bytearray )
Part of the StableABI .Returnthesizeof bytearrayaftercheckingfora NULLpointer.
char* PyByteArray_AsString (PyObject*bytearray )
Part of the StableABI .Returnthecontentsof bytearrayasachararrayaftercheckingfora NULLpointer. The
returnedarrayalwayshasanextranullbyteappended.
intPyByteArray_Resize (PyObject*bytearray, Py_ssize_t len)
Part of the StableABI .Resizetheinternalbufferof bytearraytolen.
Macros
Thesemacrostradesafetyforspeedandtheydon’tcheckpointers.
char* PyByteArray_AS_STRING (PyObject*bytearray )
Similarto PyByteArray_AsString() ,butwithouterrorchecking.
Py_ssize_t PyByteArray_GET_SIZE (PyObject*bytearray )
Similarto PyByteArray_Size() ,butwithouterrorchecking.
8.3.3Unicode Objects and Codecs
Unicode Objects
Sincetheimplementationof PEP 393inPython3.3,Unicodeobjectsinternallyuseavarietyofrepresentations,in
ordertoallowhandlingthecompleterangeofUnicodecharacterswhilestayingmemoryefficient. Therearespecial
casesforstringswhereallcodepointsarebelow128,256,or65536;otherwise,codepointsmustbebelow1114112
(whichisthefullUnicoderange).
134 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
UTF-8representationiscreatedondemandandcachedintheUnicodeobject.
®Note
ThePy_UNICODE representationhasbeenremovedsincePython3.12withdeprecatedAPIs. See PEP 623for
moreinformation.
Unicode Type
ThesearethebasicUnicodeobjecttypesusedfortheUnicodeimplementationinPython:
typePy_UCS4
typePy_UCS2
typePy_UCS1
Part of the StableABI .Thesetypesaretypedefsforunsignedintegertypeswideenoughtocontaincharacters
of32bits,16bitsand8bits,respectively. WhendealingwithsingleUnicodecharacters,use Py_UCS4.
Addedinversion3.3.
typePy_UNICODE
Thisisatypedefof wchar_t,whichisa16-bittypeor32-bittypedependingontheplatform.
Changedinversion3.3: Inpreviousversions,thiswasa16-bittypeora32-bittypedependingonwhetheryou
selecteda“narrow”or“wide”UnicodeversionofPythonatbuildtime.
Deprecatedsinceversion3.13,willberemovedinversion3.15.
typePyASCIIObject
typePyCompactUnicodeObject
typePyUnicodeObject
Thesesubtypesof PyObject representaPythonUnicodeobject. Inalmostallcases, theyshouldn’tbeused
directly,sinceallAPIfunctionsthatdealwithUnicodeobjectstakeandreturn PyObject pointers.
Addedinversion3.3.
PyTypeObject PyUnicode_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythonUnicodetype. Itisexposedto
Pythoncodeas str.
ThefollowingAPIsareCmacrosandstaticinlinedfunctionsforfastchecksandaccesstointernalread-onlydataof
Unicodeobjects:
intPyUnicode_Check (PyObject*obj)
Return true if the object objis a Unicode object or an instance of a Unicode subtype. This function always
succeeds.
intPyUnicode_CheckExact (PyObject*obj)
Return true if the object objis a Unicode object, but not an instance of a subtype. This function always
succeeds.
intPyUnicode_READY (PyObject*unicode )
Returns 0. ThisAPIiskeptonlyforbackwardcompatibility.
Addedinversion3.3.
Deprecatedsinceversion3.10: ThisAPIdoesnothingsincePython3.12.
Py_ssize_t PyUnicode_GET_LENGTH (PyObject*unicode )
ReturnthelengthoftheUnicodestring,incodepoints. unicodehastobeaUnicodeobjectinthe“canonical”
representation(notchecked).
Addedinversion3.3.
8.3. Sequence Objects 135
The Python/C API, Release 3.13.0
Py_UCS1*PyUnicode_1BYTE_DATA (PyObject*unicode )
Py_UCS2*PyUnicode_2BYTE_DATA (PyObject*unicode )
Py_UCS4*PyUnicode_4BYTE_DATA (PyObject*unicode )
Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 integer types for direct char-
acter access. No checks are performed if the canonical representation has the correct character size; use
PyUnicode_KIND() toselecttherightfunction.
Addedinversion3.3.
PyUnicode_1BYTE_KIND
PyUnicode_2BYTE_KIND
PyUnicode_4BYTE_KIND
Returnvaluesofthe PyUnicode_KIND() macro.
Addedinversion3.3.
Changedinversion3.12: PyUnicode_WCHAR_KIND hasbeenremoved.
intPyUnicode_KIND (PyObject*unicode )
Return one of the PyUnicode kind constants (see above) that indicate how many bytes per character this
Unicodeobjectusestostoreitsdata. unicodehastobeaUnicodeobjectinthe“canonical”representation(not
checked).
Addedinversion3.3.
void* PyUnicode_DATA (PyObject*unicode )
ReturnavoidpointertotherawUnicodebuffer. unicodehastobeaUnicodeobjectinthe“canonical”repre-
sentation(notchecked).
Addedinversion3.3.
voidPyUnicode_WRITE (intkind,void*data, Py_ssize_t index, Py_UCS4value )
Write into a canonical representation data(as obtained with PyUnicode_DATA() ). This function performs
nosanitychecks,andisintendedforusageinloops. Thecallershouldcachethe kindvalueand datapointer
asobtainedfromothercalls. indexistheindexinthestring(startsat0)and valueisthenewcodepointvalue
whichshouldbewrittentothatlocation.
Addedinversion3.3.
Py_UCS4 PyUnicode_READ (intkind,void*data, Py_ssize_t index )
Readacodepointfromacanonicalrepresentation data(asobtainedwith PyUnicode_DATA() ). Nochecks
orreadycallsareperformed.
Addedinversion3.3.
Py_UCS4 PyUnicode_READ_CHAR (PyObject*unicode, Py_ssize_t index )
ReadacharacterfromaUnicodeobject unicode,whichmustbeinthe“canonical”representation. Thisisless
efficientthan PyUnicode_READ() ifyoudomultipleconsecutivereads.
Addedinversion3.3.
Py_UCS4 PyUnicode_MAX_CHAR_VALUE (PyObject*unicode )
Returnthemaximumcodepointthatissuitableforcreatinganotherstringbasedon unicode, whichmustbe
in the “canonical” representation. This is always an approximation but more efficient than iterating over the
string.
Addedinversion3.3.
intPyUnicode_IsIdentifier (PyObject*unicode )
Part of the StableABI .Return 1ifthestringisavalididentifieraccordingtothelanguagedefinition,section
identifiers. Return 0otherwise.
Changedinversion3.9: Thefunctiondoesnotcall Py_FatalError() anymoreifthestringisnotready.
136 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Unicode Character Properties
Unicodeprovidesmanydifferentcharacterproperties. Themostoftenneededonesareavailablethroughthesemacros
whicharemappedtoCfunctionsdependingonthePythonconfiguration.
intPy_UNICODE_ISSPACE (Py_UCS4ch)
Return 1or0dependingonwhether chisawhitespacecharacter.
intPy_UNICODE_ISLOWER (Py_UCS4ch)
Return 1or0dependingonwhether chisalowercasecharacter.
intPy_UNICODE_ISUPPER (Py_UCS4ch)
Return 1or0dependingonwhether chisanuppercasecharacter.
intPy_UNICODE_ISTITLE (Py_UCS4ch)
Return 1or0dependingonwhether chisatitlecasecharacter.
intPy_UNICODE_ISLINEBREAK (Py_UCS4ch)
Return 1or0dependingonwhether chisalinebreakcharacter.
intPy_UNICODE_ISDECIMAL (Py_UCS4ch)
Return 1or0dependingonwhether chisadecimalcharacter.
intPy_UNICODE_ISDIGIT (Py_UCS4ch)
Return 1or0dependingonwhether chisadigitcharacter.
intPy_UNICODE_ISNUMERIC (Py_UCS4ch)
Return 1or0dependingonwhether chisanumericcharacter.
intPy_UNICODE_ISALPHA (Py_UCS4ch)
Return 1or0dependingonwhether chisanalphabeticcharacter.
intPy_UNICODE_ISALNUM (Py_UCS4ch)
Return 1or0dependingonwhether chisanalphanumericcharacter.
intPy_UNICODE_ISPRINTABLE (Py_UCS4ch)
Return 1or0dependingonwhether chisaprintablecharacter. Nonprintablecharactersarethosecharacters
definedintheUnicodecharacterdatabaseas“Other”or“Separator”,exceptingtheASCIIspace(0x20)which
isconsideredprintable. (Notethatprintablecharactersinthiscontextarethosewhichshouldnotbeescaped
when repr()isinvokedonastring. Ithasnobearingonthehandlingofstringswrittento sys.stdout or
sys.stderr .)
TheseAPIscanbeusedforfastdirectcharacterconversions:
Py_UCS4 Py_UNICODE_TOLOWER (Py_UCS4ch)
Returnthecharacter chconvertedtolowercase.
Py_UCS4 Py_UNICODE_TOUPPER (Py_UCS4ch)
Returnthecharacter chconvertedtouppercase.
Py_UCS4 Py_UNICODE_TOTITLE (Py_UCS4ch)
Returnthecharacter chconvertedtotitlecase.
intPy_UNICODE_TODECIMAL (Py_UCS4ch)
Returnthecharacter chconvertedtoadecimalpositiveinteger. Return -1ifthisisnotpossible. Thisfunction
doesnotraiseexceptions.
intPy_UNICODE_TODIGIT (Py_UCS4ch)
Returnthecharacter chconvertedtoasingledigitinteger. Return -1ifthisisnotpossible. Thisfunctiondoes
notraiseexceptions.
8.3. Sequence Objects 137
The Python/C API, Release 3.13.0
double Py_UNICODE_TONUMERIC (Py_UCS4ch)
Returnthecharacter chconvertedtoadouble. Return -1.0ifthisisnotpossible. Thisfunctiondoesnotraise
exceptions.
TheseAPIscanbeusedtoworkwithsurrogates:
intPy_UNICODE_IS_SURROGATE (Py_UCS4ch)
Checkif chisasurrogate( 0xD800 <= ch <= 0xDFFF ).
intPy_UNICODE_IS_HIGH_SURROGATE (Py_UCS4ch)
Checkif chisahighsurrogate( 0xD800 <= ch <= 0xDBFF ).
intPy_UNICODE_IS_LOW_SURROGATE (Py_UCS4ch)
Checkif chisalowsurrogate( 0xDC00 <= ch <= 0xDFFF ).
Py_UCS4 Py_UNICODE_JOIN_SURROGATES (Py_UCS4high,Py_UCS4low)
Jointwosurrogatecodepointsandreturnasingle Py_UCS4value. highandlowarerespectivelytheleading
andtrailingsurrogatesinasurrogatepair. highmustbeintherange[0xD800; 0xDBFF]and lowmustbein
therange[0xDC00;0xDFFF].
Creating and accessing Unicode strings
TocreateUnicodeobjectsandaccesstheirbasicsequenceproperties,usetheseAPIs:
PyObject*PyUnicode_New (Py_ssize_t size,Py_UCS4maxchar )
Return value: New reference. CreateanewUnicodeobject. maxcharshouldbethetruemaximumcodepoint
tobeplacedinthestring. Asanapproximation,itcanberoundeduptothenearestvalueinthesequence127,
255,65535,1114111.
This is the recommended way to allocate a new Unicode object. Objects created using this function are not
resizable.
Onerror,setanexceptionandreturn NULL.
Addedinversion3.3.
PyObject*PyUnicode_FromKindAndData (intkind,constvoid*buffer, Py_ssize_t size)
Return value: New reference. Create a new Unicode object with the given kind(possible values are
PyUnicode_1BYTE_KIND etc., as returned by PyUnicode_KIND() ). The buffermust point to an array
ofsizeunitsof1,2or4bytespercharacter,asgivenbythekind.
Ifnecessary,theinput bufferiscopiedandtransformedintothecanonicalrepresentation. Forexample,ifthe
bufferisaUCS4string( PyUnicode_4BYTE_KIND )anditconsistsonlyofcodepointsintheUCS1range,it
willbetransformedintoUCS1( PyUnicode_1BYTE_KIND ).
Addedinversion3.3.
PyObject*PyUnicode_FromStringAndSize (constchar*str, Py_ssize_t size)
Return value: New reference. Part of the Stable ABI .Create a Unicode object from the char buffer str. The
byteswillbeinterpretedasbeingUTF-8encoded. Thebufferiscopiedintothenewobject. Thereturnvalue
mightbeasharedobject,i.e. modificationofthedataisnotallowed.
Thisfunctionraises SystemError when:
•size<0,
•strisNULLandsize>0
Changedinversion3.12: str==NULLwithsize>0isnotallowedanymore.
PyObject*PyUnicode_FromString (constchar*str )
Return value: New reference. Part of the Stable ABI .Create a Unicode object from a UTF-8 encoded null-
terminatedcharbuffer str.
138 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyUnicode_FromFormat (constchar*format,... )
Return value: New reference. Part of the Stable ABI .Take a C printf() -style formatstring and a variable
number of arguments, calculate the size of the resulting Python Unicode string and return a string with the
valuesformattedintoit. ThevariableargumentsmustbeCtypesandmustcorrespondexactlytotheformat
charactersinthe formatASCII-encodedstring.
Aconversionspecifiercontainstwoormorecharactersandhasthefollowingcomponents,whichmustoccur
inthisorder:
1.The'%'character,whichmarksthestartofthespecifier.
2.Conversionflags(optional),whichaffecttheresultofsomeconversiontypes.
3.Minimum field width (optional). If specified as an '*'(asterisk), the actual width is given in the next
argument, which must be of type int, and the object to convert comes after the minimum field width
andoptionalprecision.
4.Precision (optional), given as a '.'(dot) followed by the precision. If specified as '*'(an asterisk),
theactualprecisionisgiveninthenextargument,whichmustbeoftype int,andthevaluetoconvert
comesaftertheprecision.
5.Lengthmodifier(optional).
6.Conversiontype.
Theconversionflagcharactersare:
FlagMeaning
0Theconversionwillbezeropaddedfornumericvalues.
-Theconvertedvalueisleftadjusted(overridesthe 0flagifbotharegiven).
The length modifiers for following integer conversions ( d,i,o,u,x, orX) specify the type of the argument
(intbydefault):
Modifier Types
l longorunsigned long
ll long long orunsigned long long
j intmax_t oruintmax_t
z size_torssize_t
t ptrdiff_t
The length modifier lfor following conversions sorVspecify that the type of the argument is const
wchar_t* .
Theconversionspecifiersare:
8.3. Sequence Objects 139
The Python/C API, Release 3.13.0
Con-
version
Speci-
fierType Comment
% n/a Theliteral %character.
d,iSpecified by the
lengthmodifierThedecimalrepresentationofasignedCinteger.
u Specified by the
lengthmodifierThedecimalrepresentationofanunsignedCinteger.
o Specified by the
lengthmodifierTheoctalrepresentationofanunsignedCinteger.
x Specified by the
lengthmodifierThehexadecimalrepresentationofanunsignedCinteger(lowercase).
X Specified by the
lengthmodifierThehexadecimalrepresentationofanunsignedCinteger(uppercase).
c int Asinglecharacter.
s const char* or
const wchar_t*Anull-terminatedCcharacterarray.
p const void* The hex representation of a C pointer. Mostly equivalent to
printf("%p") exceptthatitisguaranteedtostartwiththeliteral 0x
regardlessofwhattheplatform’s printfyields.
A PyObject * Theresultofcalling ascii().
U PyObject * AUnicodeobject.
V PyObject *,
const char* or
const wchar_t*AUnicodeobject(whichmaybe NULL)andanull-terminatedCchar-
acter array as a second parameter (which will be used, if the first pa-
rameteris NULL).
S PyObject * Theresultofcalling PyObject_Str() .
R PyObject * Theresultofcalling PyObject_Repr() .
T PyObject * Get the fully qualified name of an object type; call
PyType_GetFullyQualifiedName() .
#T PyObject * Similarto Tformat,butuseacolon( :) asseparatorbetweenthemodule
nameandthequalifiedname.
N PyTypeObject *Get the fully qualified name of a type; call
PyType_GetFullyQualifiedName() .
#N PyTypeObject *Similarto Nformat,butuseacolon( :) asseparatorbetweenthemodule
nameandthequalifiedname.
®Note
Thewidthformatterunitisnumberofcharactersratherthanbytes. Theprecisionformatterunitisnumber
of bytes or wchar_titems (if the length modifier lis used) for "%s"and"%V"(if the PyObject*
argumentis NULL),andanumberofcharactersfor "%A","%U","%S","%R"and"%V"(ifthe PyObject*
argumentisnot NULL).
®Note
UnliketoC printf() the0flaghaseffectevenwhenaprecisionisgivenforintegerconversions( d,i,u,
o,x,orX).
Changedinversion3.2: Supportfor "%lld"and"%llu"added.
Changedinversion3.3: Supportfor "%li","%lli"and"%zi"added.
Changed in version 3.4: Support width and precision formatter for "%s","%A","%U","%V","%S","%R"
140 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
added.
Changed in version 3.12: Support for conversion specifiers oandX. Support for length modifiers jandt.
Lengthmodifiersarenowappliedtoallintegerconversions. Lengthmodifier lisnowappliedtoconversion
specifiers sandV.Supportforvariablewidthandprecision *. Supportforflag -.
Anunrecognizedformatcharacternowsetsa SystemError . Inpreviousversionsitcausedalltherestofthe
formatstringtobecopiedas-istotheresultstring,andanyextraargumentsdiscarded.
Changedinversion3.13: Supportfor %T,%#T,%Nand%#Nformatsadded.
PyObject*PyUnicode_FromFormatV (constchar*format,va_listvargs )
Return value: New reference. Part of the StableABI .Identicalto PyUnicode_FromFormat() exceptthatit
takesexactlytwoarguments.
PyObject*PyUnicode_FromObject (PyObject*obj)
Return value: New reference. Part of the Stable ABI .Copy an instance of a Unicode subtype to a new true
Unicodeobjectifnecessary. If objisalreadyatrueUnicodeobject(notasubtype),returnanew strong reference
totheobject.
ObjectsotherthanUnicodeoritssubtypeswillcausea TypeError .
PyObject*PyUnicode_FromEncodedObject (PyObject*obj,constchar*encoding,constchar*errors )
Return value: New reference. Part of the StableABI .Decodeanencodedobject objtoaUnicodeobject.
bytes,bytearray and other bytes-like objects are decoded according to the given encodingand using the
error handling defined by errors. Both can be NULLto have the interface use the default values (see Built-in
Codecsfordetails).
Allotherobjects,includingUnicodeobjects,causea TypeError tobeset.
TheAPIreturns NULLiftherewasanerror. Thecallerisresponsiblefordecref’ingthereturnedobjects.
Py_ssize_t PyUnicode_GetLength (PyObject*unicode )
Part of the StableABI since version 3.7. ReturnthelengthoftheUnicodeobject,incodepoints.
Onerror,setanexceptionandreturn -1.
Addedinversion3.3.
Py_ssize_t PyUnicode_CopyCharacters (PyObject*to,Py_ssize_t to_start, PyObject*from, Py_ssize_t
from_start, Py_ssize_t how_many )
Copy characters from one Unicode object into another. This function performs character conversion when
necessaryandfallsbackto memcpy() ifpossible. Returns -1andsetsanexceptiononerror,otherwisereturns
thenumberofcopiedcharacters.
Addedinversion3.3.
Py_ssize_t PyUnicode_Fill (PyObject*unicode, Py_ssize_t start,Py_ssize_t length, Py_UCS4fill_char )
Fillastringwithacharacter: write fill_charintounicode[start:start+length] .
Failif fill_charisbiggerthanthestringmaximumcharacter,orifthestringhasmorethan1reference.
Returnthenumberofwrittencharacter,orreturn -1andraiseanexceptiononerror.
Addedinversion3.3.
intPyUnicode_WriteChar (PyObject*unicode, Py_ssize_t index, Py_UCS4character )
Part of the Stable ABI since version 3.7. Write a character to a string. The string must have been created
through PyUnicode_New() . Since Unicode strings are supposed to be immutable, the string must not be
shared,orhavebeenhashedyet.
Thisfunctionchecksthat unicodeisaUnicodeobject,thattheindexisnotoutofbounds,andthattheobject
canbemodifiedsafely(i.e. thatititsreferencecountisone).
Return 0onsuccess, -1onerrorwithanexceptionset.
Addedinversion3.3.
8.3. Sequence Objects 141
The Python/C API, Release 3.13.0
Py_UCS4 PyUnicode_ReadChar (PyObject*unicode, Py_ssize_t index )
Part of the StableABI since version 3.7. Readacharacterfromastring. Thisfunctionchecksthat unicodeisa
Unicodeobjectandtheindexisnotoutofbounds,incontrastto PyUnicode_READ_CHAR() ,whichperforms
noerrorchecking.
Returncharacteronsuccess, -1onerrorwithanexceptionset.
Addedinversion3.3.
PyObject*PyUnicode_Substring (PyObject*unicode, Py_ssize_t start,Py_ssize_t end)
Return value: New reference. Part of the Stable ABI since version 3.7. Return a substring of unicode, from
character index start(included) to character index end(excluded). Negative indices are not supported. On
error,setanexceptionandreturn NULL.
Addedinversion3.3.
Py_UCS4*PyUnicode_AsUCS4 (PyObject*unicode, Py_UCS4*buffer, Py_ssize_t buflen,intcopy_null )
Part of the StableABI since version 3.7. Copythestring unicodeintoaUCS4buffer,includinganullcharacter,
ifcopy_nullis set. Returns NULLand sets an exception on error (in particular, a SystemError ifbuflenis
smallerthanthelengthof unicode).bufferisreturnedonsuccess.
Addedinversion3.3.
Py_UCS4*PyUnicode_AsUCS4Copy (PyObject*unicode )
Part of the StableABI since version 3.7. Copythestring unicodeintoanewUCS4bufferthatisallocatedusing
PyMem_Malloc() . Ifthisfails, NULLisreturnedwitha MemoryError set. Thereturnedbufferalwayshas
anextranullcodepointappended.
Addedinversion3.3.
Locale Encoding
Thecurrentlocaleencodingcanbeusedtodecodetextfromtheoperatingsystem.
PyObject*PyUnicode_DecodeLocaleAndSize (constchar*str, Py_ssize_t length,constchar*errors )
Return value: New reference. Part of the StableABI since version 3.7. DecodeastringfromUTF-8onAndroid
and VxWorks, or from the current locale encoding on other platforms. The supported error handlers are
"strict" and"surrogateescape" (PEP 383). The decoder uses "strict" error handler if errorsis
NULL.strmustendwithanullcharacterbutcannotcontainembeddednullcharacters.
UsePyUnicode_DecodeFSDefaultAndSize() todecodeastringfromthe filesystem encoding and error
handler.
ThisfunctionignoresthePythonUTF-8Mode.
µSee also
ThePy_DecodeLocale() function.
Addedinversion3.3.
Changedinversion3.7: Thefunctionnowalsousesthecurrentlocaleencodingforthe surrogateescape
errorhandler, exceptonAndroid. Previously, Py_DecodeLocale() wasusedforthe surrogateescape ,
andthecurrentlocaleencodingwasusedfor strict.
PyObject*PyUnicode_DecodeLocale (constchar*str,constchar*errors )
Return value: New reference. Part of the Stable ABI since version 3.7. Similar to
PyUnicode_DecodeLocaleAndSize() ,butcomputethestringlengthusing strlen() .
Addedinversion3.3.
142 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyUnicode_EncodeLocale (PyObject*unicode,constchar*errors )
Return value: New reference. Part of the Stable ABI since version 3.7. Encode a Unicode object to UTF-8
onAndroidandVxWorks,ortothecurrentlocaleencodingonotherplatforms. Thesupportederrorhandlers
are"strict" and"surrogateescape" (PEP 383). The encoder uses "strict" error handler if errors
isNULL.Returna bytesobject. unicodecannotcontainembeddednullcharacters.
UsePyUnicode_EncodeFSDefault() toencodeastringtothe filesystem encoding and error handler .
ThisfunctionignoresthePythonUTF-8Mode.
µSee also
ThePy_EncodeLocale() function.
Addedinversion3.3.
Changedinversion3.7: Thefunctionnowalsousesthecurrentlocaleencodingforthe surrogateescape
errorhandler, exceptonAndroid. Previously, Py_EncodeLocale() wasusedforthe surrogateescape ,
andthecurrentlocaleencodingwasusedfor strict.
File System Encoding
Functionsencodingtoanddecodingfromthe filesystem encoding and error handler (PEP 383andPEP 529).
To encode file names to bytesduring argument parsing, the "O&"converter should be used, passing
PyUnicode_FSConverter() astheconversionfunction:
intPyUnicode_FSConverter (PyObject*obj,void*result )
Part of the Stable ABI .ParseTuple converter: encode strobjects – obtained directly or through the os.
PathLike interface–to bytesusing PyUnicode_EncodeFSDefault() ;bytesobjectsareoutputas-is.
resultmustbea PyBytesObject *whichmustbereleasedwhenitisnolongerused.
Addedinversion3.1.
Changedinversion3.6: Acceptsa path-like object .
To decode file names to strduring argument parsing, the "O&"converter should be used, passing
PyUnicode_FSDecoder() astheconversionfunction:
intPyUnicode_FSDecoder (PyObject*obj,void*result )
Part of the Stable ABI .ParseTuple converter: decode bytesobjects – obtained either directly or indirectly
throughthe os.PathLike interface–to strusing PyUnicode_DecodeFSDefaultAndSize() ;strob-
jects are output as-is. resultmust be a PyUnicodeObject *which must be released when it is no longer
used.
Addedinversion3.2.
Changedinversion3.6: Acceptsa path-like object .
PyObject*PyUnicode_DecodeFSDefaultAndSize (constchar*str, Py_ssize_t size)
Return value: New reference. Part of the StableABI .Decodeastringfromthe filesystem encoding and error
handler.
Ifyouneedtodecodeastringfromthecurrentlocaleencoding,use PyUnicode_DecodeLocaleAndSize() .
µSee also
ThePy_DecodeLocale() function.
Changedinversion3.6: The filesystem error handler isnowused.
8.3. Sequence Objects 143
The Python/C API, Release 3.13.0
PyObject*PyUnicode_DecodeFSDefault (constchar*str )
Return value: New reference. Part of the Stable ABI .Decode a null-terminated string from the filesystem
encoding and error handler .
Ifthestringlengthisknown,use PyUnicode_DecodeFSDefaultAndSize() .
Changedinversion3.6: The filesystem error handler isnowused.
PyObject*PyUnicode_EncodeFSDefault (PyObject*unicode )
Return value: New reference. Part of the StableABI .EncodeaUnicodeobjecttothe filesystem encoding and
error handler ,andreturn bytes. Notethattheresulting bytesobjectcancontainnullbytes.
Ifyouneedtoencodeastringtothecurrentlocaleencoding,use PyUnicode_EncodeLocale() .
µSee also
ThePy_EncodeLocale() function.
Addedinversion3.2.
Changedinversion3.6: The filesystem error handler isnowused.
wchar_t Support
wchar_tsupportforplatformswhichsupportit:
PyObject*PyUnicode_FromWideChar (constwchar_t*wstr, Py_ssize_t size)
Return value: New reference. Part of the StableABI .CreateaUnicodeobjectfromthe wchar_tbuffer wstrof
thegiven size. Passing -1asthe sizeindicatesthatthefunctionmustitselfcomputethelength,using wcslen() .
Return NULLonfailure.
Py_ssize_t PyUnicode_AsWideChar (PyObject*unicode,wchar_t*wstr, Py_ssize_t size)
Part of the StableABI .CopytheUnicodeobjectcontentsintothe wchar_tbuffer wstr. Atmost sizewchar_t
charactersarecopied(excludingapossiblytrailingnullterminationcharacter). Returnthenumberof wchar_t
characterscopiedor -1incaseofanerror.
When wstrisNULL,insteadreturnthe sizethatwouldberequiredtostoreallof unicodeincludingaterminating
null.
Notethattheresulting wchar_t* stringmayormaynotbenull-terminated. Itistheresponsibilityofthecaller
tomakesurethatthe wchar_t* stringisnull-terminatedincasethisisrequiredbytheapplication. Also,note
that the wchar_t* string might contain null characters, which would cause the string to be truncated when
usedwithmostCfunctions.
wchar_t* PyUnicode_AsWideCharString (PyObject*unicode, Py_ssize_t *size)
Part of the Stable ABI since version 3.7. Convert the Unicode object to a wide character string. The output
string always ends with a null character. If sizeis not NULL, write the number of wide characters (excluding
the trailing null termination character) into *size. Note that the resulting wchar_tstring might contain null
characters,whichwouldcausethestringtobetruncatedwhenusedwithmostCfunctions. If sizeisNULLand
thewchar_t* stringcontainsnullcharactersa ValueError israised.
Returnsabufferallocatedby PyMem_New (usePyMem_Free() tofreeit)onsuccess. Onerror,returns NULL
and*sizeisundefined. Raisesa MemoryError ifmemoryallocationisfailed.
Addedinversion3.2.
Changedinversion3.7: Raisesa ValueError ifsizeisNULLandthe wchar_t* stringcontainsnullcharacters.
144 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Built-in Codecs
Pythonprovidesasetofbuilt-incodecswhicharewritteninCforspeed. Allofthesecodecsaredirectlyusablevia
thefollowingfunctions.
ManyofthefollowingAPIstaketwoargumentsencodinganderrors,andtheyhavethesamesemanticsastheones
ofthebuilt-in str()stringobjectconstructor.
Setting encoding to NULLcauses the default encoding to be used which is UTF-8. The file system calls should
usePyUnicode_FSConverter() for encoding file names. This uses the filesystem encoding and error handler
internally.
Error handling is set by errors which may also be set to NULLmeaning to use the default handling defined for the
codec. Defaulterrorhandlingforallbuilt-incodecsis“strict”( ValueError israised).
Thecodecsalluseasimilarinterface. Onlydeviationsfromthefollowinggenericonesaredocumentedforsimplicity.
Generic Codecs
ThesearethegenericcodecAPIs:
PyObject*PyUnicode_Decode (constchar*str, Py_ssize_t size,constchar*encoding,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
encoded string str.encodinganderrorshave the same meaning as the parameters of the same name in the
str()built-infunction. ThecodectobeusedislookedupusingthePythoncodecregistry. Return NULLif
anexceptionwasraisedbythecodec.
PyObject*PyUnicode_AsEncodedString (PyObject*unicode,constchar*encoding,constchar*errors )
Return value: New reference. Part of the StableABI .EncodeaUnicodeobjectandreturntheresultasPython
bytesobject. encodinganderrorshavethesamemeaningastheparametersofthesamenameintheUnicode
encode() method. The codec to be used is looked up using the Python codec registry. Return NULLif an
exceptionwasraisedbythecodec.
UTF-8 Codecs
ThesearetheUTF-8codecAPIs:
PyObject*PyUnicode_DecodeUTF8 (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
UTF-8encodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_DecodeUTF8Stateful (constchar*str, Py_ssize_t size,constchar*errors, Py_ssize_t
*consumed )
Return value: New reference. Part of the Stable ABI .Ifconsumed isNULL, behave like
PyUnicode_DecodeUTF8() . Ifconsumedis not NULL, trailing incomplete UTF-8 byte sequences will not
betreatedasanerror. Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecodedwill
bestoredin consumed.
PyObject*PyUnicode_AsUTF8String (PyObject*unicode )
Return value: New reference. Part of the Stable ABI .Encode a Unicode object using UTF-8 and return the
resultasPythonbytesobject. Errorhandlingis“strict”. Return NULLifanexceptionwasraisedbythecodec.
Thefunctionfailsifthestringcontainssurrogatecodepoints( U+D800-U+DFFF).
constchar* PyUnicode_AsUTF8AndSize (PyObject*unicode, Py_ssize_t *size)
Part of the StableABI since version 3.10. ReturnapointertotheUTF-8encodingoftheUnicodeobject,and
storethesizeoftheencodedrepresentation(inbytes)in size. The sizeargumentcanbe NULL;inthiscaseno
sizewillbestored. Thereturnedbufferalwayshasanextranullbyteappended(notincludedin size),regardless
ofwhetherthereareanyothernullcodepoints.
Onerror,setanexception,set sizeto-1(ifit’snotNULL)andreturn NULL.
Thefunctionfailsifthestringcontainssurrogatecodepoints( U+D800-U+DFFF).
8.3. Sequence Objects 145
The Python/C API, Release 3.13.0
This caches the UTF-8 representation of the string in the Unicode object, and subsequent calls will return a
pointertothesamebuffer. Thecallerisnotresponsiblefordeallocatingthebuffer. Thebufferisdeallocated
andpointerstoitbecomeinvalidwhentheUnicodeobjectisgarbagecollected.
Addedinversion3.3.
Changedinversion3.7: Thereturntypeisnow const char * ratherof char *.
Changedinversion3.10: Thisfunctionisapartofthe limited API .
constchar* PyUnicode_AsUTF8 (PyObject*unicode )
AsPyUnicode_AsUTF8AndSize() ,butdoesnotstorethesize.
Addedinversion3.3.
Changedinversion3.7: Thereturntypeisnow const char * ratherof char *.
UTF-32 Codecs
ThesearetheUTF-32codecAPIs:
PyObject*PyUnicode_DecodeUTF32 (constchar*str, Py_ssize_t size,constchar*errors,int*byteorder )
Return value: New reference. Part of the StableABI .Decode sizebytesfromaUTF-32encodedbufferstring
and return the corresponding Unicode object. errors(if non- NULL) defines the error handling. It defaults to
“strict”.
Ifbyteorderisnon- NULL,thedecoderstartsdecodingusingthegivenbyteorder:
*byteorder ==-1:little endian
*byteorder ==0:native order
*byteorder ==1:big endian
If*byteorder iszero, andthefirstfourbytesoftheinputdataareabyteordermark(BOM),thedecoder
switchestothisbyteorderandtheBOMisnotcopiedintotheresultingUnicodestring. If *byteorder is-1
or1,anybyteordermarkiscopiedtotheoutput.
Aftercompletion, *byteorder issettothecurrentbyteorderattheendofinputdata.
IfbyteorderisNULL,thecodecstartsinnativeordermode.
Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_DecodeUTF32Stateful (constchar*str, Py_ssize_t size,constchar*errors,int
*byteorder, Py_ssize_t *consumed )
Return value: New reference. Part of the Stable ABI .Ifconsumed isNULL, behave like
PyUnicode_DecodeUTF32() . Ifconsumedisnot NULL,PyUnicode_DecodeUTF32Stateful() willnot
treattrailingincompleteUTF-32bytesequences(suchasanumberofbytesnotdivisiblebyfour)asanerror.
Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecodedwillbestoredin consumed.
PyObject*PyUnicode_AsUTF32String (PyObject*unicode )
Return value: New reference. Part of the StableABI .ReturnaPythonbytestringusingtheUTF-32encoding
innativebyteorder. ThestringalwaysstartswithaBOMmark. Errorhandlingis“strict”. Return NULLifan
exceptionwasraisedbythecodec.
UTF-16 Codecs
ThesearetheUTF-16codecAPIs:
PyObject*PyUnicode_DecodeUTF16 (constchar*str, Py_ssize_t size,constchar*errors,int*byteorder )
Return value: New reference. Part of the StableABI .Decode sizebytesfromaUTF-16encodedbufferstring
and return the corresponding Unicode object. errors(if non- NULL) defines the error handling. It defaults to
“strict”.
Ifbyteorderisnon- NULL,thedecoderstartsdecodingusingthegivenbyteorder:
146 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
*byteorder ==-1:little endian
*byteorder ==0:native order
*byteorder ==1:big endian
If*byteorder is zero, and the first two bytes of the input data are a byte order mark (BOM), the decoder
switches to this byte order and the BOM is not copied into the resulting Unicode string. If *byteorder is
-1or1, any byte order mark is copied to the output (where it will result in either a \ufeffor a\ufffe
character).
Aftercompletion, *byteorder issettothecurrentbyteorderattheendofinputdata.
IfbyteorderisNULL,thecodecstartsinnativeordermode.
Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_DecodeUTF16Stateful (constchar*str, Py_ssize_t size,constchar*errors,int
*byteorder, Py_ssize_t *consumed )
Return value: New reference. Part of the Stable ABI .Ifconsumed isNULL, behave like
PyUnicode_DecodeUTF16() . Ifconsumedisnot NULL,PyUnicode_DecodeUTF16Stateful() willnot
treattrailingincompleteUTF-16bytesequences(suchasanoddnumberofbytesorasplitsurrogatepair)as
anerror. Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecodedwillbestoredin
consumed.
PyObject*PyUnicode_AsUTF16String (PyObject*unicode )
Return value: New reference. Part of the StableABI .ReturnaPythonbytestringusingtheUTF-16encoding
innativebyteorder. ThestringalwaysstartswithaBOMmark. Errorhandlingis“strict”. Return NULLifan
exceptionwasraisedbythecodec.
UTF-7 Codecs
ThesearetheUTF-7codecAPIs:
PyObject*PyUnicode_DecodeUTF7 (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
UTF-7encodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_DecodeUTF7Stateful (constchar*str, Py_ssize_t size,constchar*errors, Py_ssize_t
*consumed )
Return value: New reference. Part of the Stable ABI .Ifconsumed isNULL, behave like
PyUnicode_DecodeUTF7() . Ifconsumedis not NULL, trailing incomplete UTF-7 base-64 sections will
notbetreatedasanerror. Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecoded
willbestoredin consumed.
Unicode-Escape Codecs
Thesearethe“UnicodeEscape”codecAPIs:
PyObject*PyUnicode_DecodeUnicodeEscape (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
Unicode-Escapeencodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_AsUnicodeEscapeString (PyObject*unicode )
Return value: New reference. Part of the Stable ABI .Encode a Unicode object using Unicode-Escape and
return the result as a bytes object. Error handling is “strict”. Return NULLif an exception was raised by the
codec.
8.3. Sequence Objects 147
The Python/C API, Release 3.13.0
Raw-Unicode-Escape Codecs
Thesearethe“RawUnicodeEscape”codecAPIs:
PyObject*PyUnicode_DecodeRawUnicodeEscape (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
Raw-Unicode-Escapeencodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_AsRawUnicodeEscapeString (PyObject*unicode )
Return value: New reference. Part of the Stable ABI .Encode a Unicode object using Raw-Unicode-Escape
andreturntheresultasabytesobject. Errorhandlingis“strict”. Return NULLifanexceptionwasraisedby
thecodec.
Latin-1 Codecs
ThesearetheLatin-1codecAPIs: Latin-1correspondstothefirst256Unicodeordinalsandonlytheseareaccepted
bythecodecsduringencoding.
PyObject*PyUnicode_DecodeLatin1 (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
Latin-1encodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_AsLatin1String (PyObject*unicode )
Return value: New reference. Part of the Stable ABI .Encode a Unicode object using Latin-1 and return the
resultasPythonbytesobject. Errorhandlingis“strict”. Return NULLifanexceptionwasraisedbythecodec.
ASCII Codecs
ThesearetheASCIIcodecAPIs. Only7-bitASCIIdataisaccepted. Allothercodesgenerateerrors.
PyObject*PyUnicode_DecodeASCII (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
ASCIIencodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_AsASCIIString (PyObject*unicode )
Return value: New reference. Part of the Stable ABI .Encode a Unicode object using ASCII and return the
resultasPythonbytesobject. Errorhandlingis“strict”. Return NULLifanexceptionwasraisedbythecodec.
Character Map Codecs
Thiscodecisspecialinthatitcanbeusedtoimplementmanydifferentcodecs(andthisisinfactwhatwasdoneto
obtainmostofthestandardcodecsincludedinthe encodings package). Thecodecusesmappingstoencodeand
decodecharacters. Themappingobjectsprovidedmustsupportthe __getitem__() mappinginterface;dictionaries
andsequencesworkwell.
ThesearethemappingcodecAPIs:
PyObject*PyUnicode_DecodeCharmap (constchar*str, Py_ssize_t length, PyObject*mapping,constchar
*errors )
Return value: New reference. Part of the Stable ABI .Create a Unicode object by decoding sizebytes of the
encodedstring strusingthegiven mappingobject. Return NULLifanexceptionwasraisedbythecodec.
IfmappingisNULL,Latin-1decodingwillbeapplied. Else mappingmustmapbytesordinals(integersinthe
range from 0 to 255) to Unicode strings, integers (which are then interpreted as Unicode ordinals) or None.
Unmappeddatabytes–oneswhichcausea LookupError ,aswellasoneswhichgetmappedto None,0xFFFE
or'\ufffe' ,aretreatedasundefinedmappingsandcauseanerror.
PyObject*PyUnicode_AsCharmapString (PyObject*unicode, PyObject*mapping )
Return value: New reference. Part of the StableABI .EncodeaUnicodeobjectusingthegiven mappingobject
andreturntheresultasabytesobject. Errorhandlingis“strict”. Return NULLifanexceptionwasraisedby
thecodec.
148 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
ThemappingobjectmustmapUnicodeordinalintegerstobytesobjects, integersintherangefrom0to255
orNone. Unmappedcharacter ordinals (oneswhich cause a LookupError ) as wellas mapped to Noneare
treatedas“undefinedmapping”andcauseanerror.
ThefollowingcodecAPIisspecialinthatmapsUnicodetoUnicode.
PyObject*PyUnicode_Translate (PyObject*unicode, PyObject*table,constchar*errors )
Return value: New reference. Part of the StableABI .Translateastringbyapplyingacharactermappingtable
toitandreturntheresultingUnicodeobject. Return NULLifanexceptionwasraisedbythecodec.
ThemappingtablemustmapUnicodeordinalintegerstoUnicodeordinalintegersor None(causingdeletion
ofthecharacter).
Mappingtablesneedonlyprovidethe __getitem__() interface;dictionariesandsequencesworkwell. Un-
mappedcharacterordinals(oneswhichcausea LookupError )areleftuntouchedandarecopiedas-is.
errorshastheusualmeaningforcodecs. Itmaybe NULLwhichindicatestousethedefaulterrorhandling.
MBCS codecs for Windows
ThesearetheMBCScodecAPIs. TheyarecurrentlyonlyavailableonWindowsandusetheWin32MBCSconverters
toimplementtheconversions. NotethatMBCS(orDBCS)isaclassofencodings,notjustone. Thetargetencoding
isdefinedbytheusersettingsonthemachinerunningthecodec.
PyObject*PyUnicode_DecodeMBCS (constchar*str, Py_ssize_t size,constchar*errors )
Return value: New reference. Part of the Stable ABI on Windows since version 3.7. Create a Unicode object
bydecoding sizebytesoftheMBCSencodedstring str. Return NULLifanexceptionwasraisedbythecodec.
PyObject*PyUnicode_DecodeMBCSStateful (constchar*str, Py_ssize_t size,constchar*errors, Py_ssize_t
*consumed )
Return value: New reference. Part of the StableABI on Windows since version 3.7. IfconsumedisNULL,behave
likePyUnicode_DecodeMBCS() . Ifconsumedis not NULL,PyUnicode_DecodeMBCSStateful() will
notdecodetrailingleadbyteandthenumberofbytesthathavebeendecodedwillbestoredin consumed.
PyObject*PyUnicode_AsMBCSString (PyObject*unicode )
Return value: New reference. Part of the StableABI on Windows since version 3.7. EncodeaUnicodeobject
using MBCS and return the result as Python bytes object. Error handling is “strict”. Return NULLif an
exceptionwasraisedbythecodec.
PyObject*PyUnicode_EncodeCodePage (intcode_page, PyObject*unicode,constchar*errors )
Return value: New reference. Part of the StableABI on Windows since version 3.7. EncodetheUnicodeobject
usingthespecifiedcodepageandreturnaPythonbytesobject. Return NULLifanexceptionwasraisedbythe
codec. Use CP_ACPcodepagetogettheMBCSencoder.
Addedinversion3.3.
Methods & Slots
Methods and Slot Functions
ThefollowingAPIsarecapableofhandlingUnicodeobjectsandstringsoninput(werefertothemasstringsinthe
descriptions)andreturnUnicodeobjectsorintegersasappropriate.
Theyallreturn NULLor-1ifanexceptionoccurs.
PyObject*PyUnicode_Concat (PyObject*left, PyObject*right )
Return value: New reference. Part of the StableABI .ConcattwostringsgivinganewUnicodestring.
PyObject*PyUnicode_Split (PyObject*unicode, PyObject*sep, Py_ssize_t maxsplit )
Return value: New reference. Part of the Stable ABI .Split a string giving a list of Unicode strings. If sepis
NULL, splitting will be done at all whitespace substrings. Otherwise, splits occur at the given separator. At
mostmaxsplitsplitswillbedone. Ifnegative,nolimitisset. Separatorsarenotincludedintheresultinglist.
8.3. Sequence Objects 149
The Python/C API, Release 3.13.0
PyObject*PyUnicode_Splitlines (PyObject*unicode,intkeepends )
Return value: New reference. Part of the StableABI .Splita Unicodestring atline breaks, returning a list of
Unicodestrings. CRLFisconsideredtobeonelinebreak. If keependsis0,theLinebreakcharactersarenot
includedintheresultingstrings.
PyObject*PyUnicode_Join (PyObject*separator, PyObject*seq)
Return value: New reference. Part of the StableABI .Joinasequenceofstringsusingthegiven separatorand
returntheresultingUnicodestring.
Py_ssize_t PyUnicode_Tailmatch (PyObject*unicode, PyObject*substr, Py_ssize_t start,Py_ssize_t end,int
direction )
Part of the StableABI .Return 1ifsubstrmatches unicode[start:end] atthegiventailend( direction==
-1meanstodoaprefixmatch, direction==1asuffixmatch), 0otherwise. Return -1ifanerroroccurred.
Py_ssize_t PyUnicode_Find (PyObject*unicode, PyObject*substr, Py_ssize_t start,Py_ssize_t end,intdirection )
Part of the StableABI .Returnthefirstpositionof substrinunicode[start:end] usingthegiven direction
(direction==1meanstodoaforwardsearch, direction==-1abackwardsearch). Thereturnvalueistheindex
ofthefirstmatch;avalueof -1indicatesthatnomatchwasfound,and -2indicatesthatanerroroccurredand
anexceptionhasbeenset.
Py_ssize_t PyUnicode_FindChar (PyObject*unicode, Py_UCS4ch,Py_ssize_t start,Py_ssize_t end,int
direction )
Part of theStableABI since version 3.7. Returnthefirstpositionofthecharacter chinunicode[start:end]
usingthegiven direction(direction==1meanstodoaforwardsearch, direction==-1abackwardsearch). The
returnvalueistheindexofthefirstmatch;avalueof -1indicatesthatnomatchwasfound,and -2indicates
thatanerroroccurredandanexceptionhasbeenset.
Addedinversion3.3.
Changedinversion3.7: startandendarenowadjustedtobehavelike unicode[start:end] .
Py_ssize_t PyUnicode_Count (PyObject*unicode, PyObject*substr, Py_ssize_t start,Py_ssize_t end)
Part of the Stable ABI .Return the number of non-overlapping occurrences of substrin
unicode[start:end] . Return -1ifanerroroccurred.
PyObject*PyUnicode_Replace (PyObject*unicode, PyObject*substr, PyObject*replstr, Py_ssize_t maxcount )
Return value: New reference. Part of the StableABI .Replaceatmost maxcountoccurrencesof substrinunicode
withreplstrandreturntheresultingUnicodeobject. maxcount==-1meansreplacealloccurrences.
intPyUnicode_Compare (PyObject*left, PyObject*right )
Part of the StableABI .Comparetwostringsandreturn -1,0,1forlessthan,equal,andgreaterthan,respec-
tively.
Thisfunctionreturns -1uponfailure,sooneshouldcall PyErr_Occurred() tocheckforerrors.
intPyUnicode_EqualToUTF8AndSize (PyObject*unicode,constchar*string, Py_ssize_t size)
Part of the StableABI since version 3.13. CompareaUnicodeobjectwithacharbufferwhichisinterpreted
asbeingUTF-8orASCIIencodedandreturntrue( 1)iftheyareequal,orfalse( 0)otherwise. IftheUnicode
object contains surrogate code points ( U+D800-U+DFFF) or the C string is not valid UTF-8, false ( 0) is
returned.
Thisfunctiondoesnotraiseexceptions.
Addedinversion3.13.
intPyUnicode_EqualToUTF8 (PyObject*unicode,constchar*string )
Part of the Stable ABI since version 3.13. Similar to PyUnicode_EqualToUTF8AndSize() , but compute
stringlengthusing strlen() . IftheUnicodeobjectcontainsnullcharacters,false( 0)isreturned.
Addedinversion3.13.
150 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
intPyUnicode_CompareWithASCIIString (PyObject*unicode,constchar*string )
Part of the StableABI .CompareaUnicodeobject, unicode,with stringandreturn -1,0,1forlessthan,equal,
and greater than, respectively. It is best to pass only ASCII-encoded strings, but the function interprets the
inputstringasISO-8859-1ifitcontainsnon-ASCIIcharacters.
Thisfunctiondoesnotraiseexceptions.
PyObject*PyUnicode_RichCompare (PyObject*left, PyObject*right,intop )
Return value: New reference. Part of the StableABI .RichcomparetwoUnicodestringsandreturnoneofthe
following:
•NULLincaseanexceptionwasraised
•Py_TrueorPy_False forsuccessfulcomparisons
•Py_NotImplemented incasethetypecombinationisunknown
Possiblevaluesfor oparePy_GT,Py_GE,Py_EQ,Py_NE,Py_LT,and Py_LE.
PyObject*PyUnicode_Format (PyObject*format, PyObject*args )
Return value: New reference. Part of the StableABI .Returnanewstringobjectfrom formatandargs;thisis
analogousto format % args .
intPyUnicode_Contains (PyObject*unicode, PyObject*substr )
Part of the StableABI .Checkwhether substriscontainedin unicodeandreturntrueorfalseaccordingly.
substrhastocoercetoaoneelementUnicodestring. -1isreturnediftherewasanerror.
voidPyUnicode_InternInPlace (PyObject**p_unicode )
Part of the Stable ABI .Intern the argument *p_unicode in place. The argument must be the address of a
pointer variable pointing to a Python Unicode string object. If there is an existing interned string that is the
sameas *p_unicode ,itsets *p_unicode toit(releasingthereferencetotheoldstringobjectandcreating
anew strong reference totheinternedstringobject),otherwiseitleaves *p_unicode aloneandinternsit.
(Clarification: even though there is a lot of talk about references, think of this function as reference-neutral.
Youmustowntheobjectyoupassin;afterthecallyounolongerownthepassed-inreference,butyounewly
owntheresult.)
Thisfunctionneverraisesanexception. Onerror,itleavesitsargumentunchangedwithoutinterningit.
Instancesofsubclassesof strmaynotbeinterned,thatis, PyUnicode_CheckExact (*p_unicode )must
betrue. Ifitisnot,then–aswithanyothererror–theargumentisleftunchanged.
Notethatinternedstringsarenot“immortal”. Youmustkeepareferencetotheresulttobenefitfrominterning.
PyObject*PyUnicode_InternFromString (constchar*str )
Return value: New reference. Part of the Stable ABI .A combination of PyUnicode_FromString() and
PyUnicode_InternInPlace() ,meantforstaticallyallocatedstrings.
Return a new (“owned”)referenceto eithera new Unicodestring objectthathas beeninterned, oran earlier
internedstringobjectwiththesamevalue.
Python may keep a reference to the result, or make it immortal, preventing it from being garbage-collected
promptly. For interning an unbounded number of different strings, such as ones coming from user input,
prefercalling PyUnicode_FromString() andPyUnicode_InternInPlace() directly.
CPython implementation detail: Stringsinternedthiswayaremade immortal.
8.3.4Tuple Objects
typePyTupleObject
Thissubtypeof PyObject representsaPythontupleobject.
8.3. Sequence Objects 151
The Python/C API, Release 3.13.0
PyTypeObject PyTuple_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythontupletype;itisthesameobject
astupleinthePythonlayer.
intPyTuple_Check (PyObject*p)
Returntrueif pisatupleobjectoraninstanceofasubtypeofthetupletype. Thisfunctionalwayssucceeds.
intPyTuple_CheckExact (PyObject*p)
Return true if pis a tuple object, but not an instance of a subtype of the tuple type. This function always
succeeds.
PyObject*PyTuple_New (Py_ssize_t len)
Return value: New reference. Part of the Stable ABI .Return a new tuple object of size len, orNULLwith an
exceptionsetonfailure.
PyObject*PyTuple_Pack (Py_ssize_t n,...)
Return value: New reference. Part of the Stable ABI .Return a new tuple object of size n, orNULLwith an
exceptionsetonfailure. Thetuplevaluesareinitializedtothesubsequent nCargumentspointingtoPython
objects. PyTuple_Pack(2, a, b) isequivalentto Py_BuildValue("(OO)", a, b) .
Py_ssize_t PyTuple_Size (PyObject*p)
Part of the StableABI .Takeapointertoatupleobject,andreturnthesizeofthattuple. Onerror,return -1
andwithanexceptionset.
Py_ssize_t PyTuple_GET_SIZE (PyObject*p)
Like PyTuple_Size() ,butwithouterrorchecking.
PyObject*PyTuple_GetItem (PyObject*p,Py_ssize_t pos)
Return value: Borrowed reference. Part of the StableABI .Returntheobjectatposition posinthetuplepointed
tobyp. Ifposisnegativeoroutofbounds,return NULLandsetan IndexError exception.
Thereturnedreferenceisborrowedfromthetuple p(thatis: itisonlyvalidaslongasyouholdareferenceto
p). Togeta strong reference ,use Py_NewRef(PyTuple_GetItem(...)) orPySequence_GetItem() .
PyObject*PyTuple_GET_ITEM (PyObject*p,Py_ssize_t pos)
Return value: Borrowed reference. Like PyTuple_GetItem() ,butdoesnocheckingofitsarguments.
PyObject*PyTuple_GetSlice (PyObject*p,Py_ssize_t low,Py_ssize_t high)
Return value: New reference. Part of the StableABI .Returnthesliceofthetuplepointedtoby pbetween low
andhigh,orNULLwithanexceptionsetonfailure.
This is the equivalent of the Python expression p[low:high] . Indexing from the end of the tuple is not
supported.
intPyTuple_SetItem (PyObject*p,Py_ssize_t pos,PyObject*o)
Part of the StableABI .Insertareferencetoobject oatposition posofthetuplepointedtoby p. Return 0on
success. If posisoutofbounds,return -1andsetan IndexError exception.
®Note
Thisfunction“steals”areferenceto oanddiscardsareferencetoanitemalreadyinthetupleattheaffected
position.
voidPyTuple_SET_ITEM (PyObject*p,Py_ssize_t pos,PyObject*o)
Like PyTuple_SetItem() ,butdoesnoerrorchecking,andshould onlybeusedtofillinbrandnewtuples.
BoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeor with assertions .
152 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
®Note
Thisfunction“steals”areferenceto o,and,unlike PyTuple_SetItem() ,does notdiscardareferenceto
anyitemthatisbeingreplaced;anyreferenceinthetupleatposition poswillbeleaked.
int_PyTuple_Resize (PyObject**p,Py_ssize_t newsize )
Canbeusedtoresizeatuple. newsizewillbethenewlengthofthetuple. Becausetuplesare supposedtobe
immutable, this should only be used if there is only one reference to the object. Do notuse this if the tuple
mayalreadybeknowntosomeotherpartofthecode. Thetuplewillalwaysgroworshrinkattheend. Think
ofthisasdestroyingtheoldtupleandcreatinganewone,onlymoreefficiently. Returns 0onsuccess. Client
codeshouldneverassumethattheresultingvalueof *pwillbethesameasbeforecallingthisfunction. Ifthe
objectreferencedby *pisreplaced,theoriginal *pisdestroyed. Onfailure,returns -1andsets *ptoNULL,
andraises MemoryError orSystemError .
8.3.5Struct Sequence Objects
Struct sequence objects are the C equivalent of namedtuple() objects, i.e. a sequence whose items can also be
accessedthroughattributes. Tocreateastructsequence,youfirsthavetocreateaspecificstructsequencetype.
PyTypeObject *PyStructSequence_NewType (PyStructSequence_Desc *desc )
Return value: New reference. Part of the StableABI .Createanewstructsequencetypefromthedatain desc,
describedbelow. Instancesoftheresultingtypecanbecreatedwith PyStructSequence_New() .
Return NULLwithanexceptionsetonfailure.
voidPyStructSequence_InitType (PyTypeObject *type, PyStructSequence_Desc *desc )
Initializesastructsequencetype typefromdescinplace.
intPyStructSequence_InitType2 (PyTypeObject *type, PyStructSequence_Desc *desc )
Like PyStructSequence_InitType() ,butreturns 0onsuccessand -1withanexceptionsetonfailure.
Addedinversion3.4.
typePyStructSequence_Desc
Part of the Stable ABI (including all members). Contains the meta information of a struct sequence type to
create.
constchar* name
Fullyqualified nameof the type; null-terminatedUTF-8 encoded. The namemust contain themodule
name.
constchar* doc
Pointertodocstringforthetypeor NULLtoomit.
PyStructSequence_Field *fields
Pointerto NULL-terminatedarraywithfieldnamesofthenewtype.
intn_in_sequence
NumberoffieldsvisibletothePythonside(ifusedastuple).
typePyStructSequence_Field
Part of the Stable ABI (including all members). Describes a field of a struct sequence. As a struct se-
quence is modeled as a tuple, all fields are typed as PyObject *. The index in the fieldsarray of the
PyStructSequence_Desc determineswhichfieldofthestructsequenceisdescribed.
constchar* name
Nameforthefieldor NULLtoendthelistofnamedfields,setto PyStructSequence_UnnamedField
toleaveunnamed.
8.3. Sequence Objects 153
The Python/C API, Release 3.13.0
constchar* doc
Fielddocstringor NULLtoomit.
constchar*const PyStructSequence_UnnamedField
Part of the StableABI since version 3.11. Specialvalueforafieldnametoleaveitunnamed.
Changedinversion3.9: Thetypewaschangedfrom char *.
PyObject*PyStructSequence_New (PyTypeObject *type )
Return value: New reference. Part of the StableABI .Createsaninstanceof type,whichmusthavebeencreated
withPyStructSequence_NewType() .
Return NULLwithanexceptionsetonfailure.
PyObject*PyStructSequence_GetItem (PyObject*p,Py_ssize_t pos)
Return value: Borrowed reference. Part of the Stable ABI .Return the object at position posin the struct
sequencepointedtoby p.
BoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeor with assertions .
PyObject*PyStructSequence_GET_ITEM (PyObject*p,Py_ssize_t pos)
Return value: Borrowed reference. Aliasto PyStructSequence_GetItem() .
Changedinversion3.13: Nowimplementedasanaliasto PyStructSequence_GetItem() .
voidPyStructSequence_SetItem (PyObject*p,Py_ssize_t pos,PyObject*o)
Part of the Stable ABI .Sets the field at index posof the struct sequence pto value o. Like
PyTuple_SET_ITEM() ,thisshouldonlybeusedtofillinbrandnewinstances.
BoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeor with assertions .
®Note
Thisfunction“steals”areferenceto o.
voidPyStructSequence_SET_ITEM (PyObject*p,Py_ssize_t *pos, PyObject*o)
Aliasto PyStructSequence_SetItem() .
Changedinversion3.13: Nowimplementedasanaliasto PyStructSequence_SetItem() .
8.3.6List Objects
typePyListObject
Thissubtypeof PyObject representsaPythonlistobject.
PyTypeObject PyList_Type
Part of the Stable ABI .This instance of PyTypeObject represents the Python list type. This is the same
objectas listinthePythonlayer.
intPyList_Check (PyObject*p)
Returntrueif pisalistobjectoraninstanceofasubtypeofthelisttype. Thisfunctionalwayssucceeds.
intPyList_CheckExact (PyObject*p)
Returntrueif pisalistobject,butnotaninstanceofasubtypeofthelisttype. Thisfunctionalwayssucceeds.
PyObject*PyList_New (Py_ssize_t len)
Return value: New reference. Part of the Stable ABI .Return a new list of length lenon success, or NULLon
failure.
154 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
®Note
Iflenisgreaterthanzero,thereturnedlistobject’sitemsaresetto NULL.ThusyoucannotuseabstractAPI
functionssuchas PySequence_SetItem() orexposetheobjecttoPythoncodebeforesettingallitems
toarealobjectwith PyList_SetItem() orPyList_SET_ITEM() . ThefollowingAPIsaresafeAPIs
beforethelistisfullyinitialized: PyList_SetItem() andPyList_SET_ITEM() .
Py_ssize_t PyList_Size (PyObject*list)
Part of the Stable ABI .Return the length of the list object in list; this is equivalent to len(list) on a list
object.
Py_ssize_t PyList_GET_SIZE (PyObject*list)
Similarto PyList_Size() ,butwithouterrorchecking.
PyObject*PyList_GetItemRef (PyObject*list,Py_ssize_t index )
Return value: New reference. Part of the StableABI since version 3.13. Returntheobjectatposition indexin
thelistpointedtoby list. Thepositionmustbenon-negative;indexingfromtheendofthelistisnotsupported.
Ifindexisoutofbounds( <0 or >=len(list) ),return NULLandsetan IndexError exception.
Addedinversion3.13.
PyObject*PyList_GetItem (PyObject*list,Py_ssize_t index )
Return value: Borrowed reference. Part of the StableABI .Like PyList_GetItemRef() ,butreturnsa bor-
rowed reference insteadofa strong reference .
PyObject*PyList_GET_ITEM (PyObject*list,Py_ssize_t i)
Return value: Borrowed reference. Similarto PyList_GetItem() ,butwithouterrorchecking.
intPyList_SetItem (PyObject*list,Py_ssize_t index, PyObject*item )
Part of the StableABI .Settheitematindex indexinlistto item. Return 0onsuccess. If indexisoutofbounds,
return -1andsetan IndexError exception.
®Note
Thisfunction“steals”areferenceto itemanddiscardsareferencetoanitemalreadyinthelistattheaffected
position.
voidPyList_SET_ITEM (PyObject*list,Py_ssize_t i,PyObject*o)
Macro form of PyList_SetItem() without error checking. This is normally only used to fill in new lists
wherethereisnopreviouscontent.
BoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeor with assertions .
®Note
Thismacro“steals”areferenceto item,and,unlike PyList_SetItem() ,does notdiscardareferenceto
anyitemthatisbeingreplaced;anyreferencein listatposition iwillbeleaked.
intPyList_Insert (PyObject*list,Py_ssize_t index, PyObject*item )
Part of the StableABI .Inserttheitem itemintolist listinfrontofindex index. Return 0ifsuccessful;return
-1andsetanexceptionifunsuccessful. Analogousto list.insert(index, item) .
intPyList_Append (PyObject*list,PyObject*item )
Part of the StableABI .Appendtheobject itemattheendoflist list. Return 0ifsuccessful;return -1andset
anexceptionifunsuccessful. Analogousto list.append(item) .
8.3. Sequence Objects 155
The Python/C API, Release 3.13.0
PyObject*PyList_GetSlice (PyObject*list,Py_ssize_t low,Py_ssize_t high)
Return value: New reference. Part of the StableABI .Returnalistoftheobjectsin listcontainingtheobjects
between low andhigh. Return NULLand set an exception if unsuccessful. Analogous to list[low:high] .
Indexingfromtheendofthelistisnotsupported.
intPyList_SetSlice (PyObject*list,Py_ssize_t low,Py_ssize_t high,PyObject*itemlist )
Part of the Stable ABI .Set the slice of listbetween lowandhighto the contents of itemlist. Analogous to
list[low:high] = itemlist . The itemlistmaybe NULL,indicatingtheassignmentofanemptylist(slice
deletion). Return 0onsuccess, -1onfailure. Indexingfromtheendofthelistisnotsupported.
intPyList_Extend (PyObject*list,PyObject*iterable )
Extend listwiththecontentsof iterable. Thisisthesameas PyList_SetSlice(list, PY_SSIZE_T_MAX,
PY_SSIZE_T_MAX, iterable) andanalogousto list.extend(iterable) orlist += iterable .
Raiseanexceptionandreturn -1iflistisnota listobject. Return0onsuccess.
Addedinversion3.13.
intPyList_Clear (PyObject*list)
Removeallitemsfrom list. Thisisthesameas PyList_SetSlice(list, 0, PY_SSIZE_T_MAX, NULL)
andanalogousto list.clear() ordel list[:] .
Raiseanexceptionandreturn -1iflistisnota listobject. Return0onsuccess.
Addedinversion3.13.
intPyList_Sort (PyObject*list)
Part of the StableABI .Sorttheitemsof listinplace. Return 0onsuccess, -1onfailure. Thisisequivalentto
list.sort() .
intPyList_Reverse (PyObject*list)
Part of the Stable ABI .Reverse the items of listin place. Return 0on success, -1on failure. This is the
equivalentof list.reverse() .
PyObject*PyList_AsTuple (PyObject*list)
Return value: New reference. Part of the StableABI .Returnanewtupleobjectcontainingthecontentsof list;
equivalentto tuple(list) .
8.4Container Objects
8.4.1Dictionary Objects
typePyDictObject
Thissubtypeof PyObject representsaPythondictionaryobject.
PyTypeObject PyDict_Type
Part of the Stable ABI .This instance of PyTypeObject represents the Python dictionary type. This is the
sameobjectas dictinthePythonlayer.
intPyDict_Check (PyObject*p)
Returntrueif pisadictobjectoraninstanceofasubtypeofthedicttype. Thisfunctionalwayssucceeds.
intPyDict_CheckExact (PyObject*p)
Returntrueif pisadictobject,butnotaninstanceofasubtypeofthedicttype. Thisfunctionalwayssucceeds.
PyObject*PyDict_New ()
Return value: New reference. Part of the StableABI .Returnanewemptydictionary,or NULLonfailure.
PyObject*PyDictProxy_New (PyObject*mapping )
Return value: New reference. Part of the Stable ABI .Return a types.MappingProxyType object for a
mappingwhichenforcesread-onlybehavior. Thisisnormallyusedtocreateaviewtopreventmodificationof
thedictionaryfornon-dynamicclasstypes.
156 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
voidPyDict_Clear (PyObject*p)
Part of the StableABI .Emptyanexistingdictionaryofallkey-valuepairs.
intPyDict_Contains (PyObject*p,PyObject*key)
Part of the Stable ABI .Determine if dictionary pcontains key. If an item in pis matches key, return 1,
otherwisereturn 0. Onerror,return -1. ThisisequivalenttothePythonexpression key in p .
intPyDict_ContainsString (PyObject*p,constchar*key )
This is the same as PyDict_Contains() , butkeyis specified as a const char* UTF-8 encoded bytes
string,ratherthana PyObject *.
Addedinversion3.13.
PyObject*PyDict_Copy (PyObject*p)
Return value: New reference. Part of the StableABI .Returnanewdictionarythatcontainsthesamekey-value
pairsas p.
intPyDict_SetItem (PyObject*p,PyObject*key, PyObject*val)
Part of the Stable ABI .Insert valinto the dictionary pwith a key of key.keymust be hashable; if it isn’t,
TypeError willberaised. Return 0onsuccessor -1onfailure. Thisfunction does notstealareferenceto
val.
intPyDict_SetItemString (PyObject*p,constchar*key, PyObject*val)
Part of the Stable ABI .This is the same as PyDict_SetItem() , butkeyis specified as a const char*
UTF-8encodedbytesstring,ratherthana PyObject *.
intPyDict_DelItem (PyObject*p,PyObject*key)
Part of the Stable ABI .Remove the entry in dictionary pwith key key.keymust be hashable; if it isn’t,
TypeError is raised. If keyis not in the dictionary, KeyError is raised. Return 0on success or -1on
failure.
intPyDict_DelItemString (PyObject*p,constchar*key )
Part of the Stable ABI .This is the same as PyDict_DelItem() , butkeyis specified as a const char*
UTF-8encodedbytesstring,ratherthana PyObject *.
intPyDict_GetItemRef (PyObject*p,PyObject*key, PyObject**result )
Part of the StableABI since version 3.13. Returnanew strong reference totheobjectfromdictionary pwhich
hasakey key:
•Ifthekeyispresent,set *resulttoanew strong reference tothevalueandreturn 1.
•Ifthekeyismissing,set *resulttoNULLandreturn 0.
•Onerror,raiseanexceptionandreturn -1.
Addedinversion3.13.
Seealsothe PyObject_GetItem() function.
PyObject*PyDict_GetItem (PyObject*p,PyObject*key)
Return value: Borrowed reference. Part of the Stable ABI .Return a borrowed reference to the object from
dictionary pwhichhasakey key. Return NULLifthekey keyismissing withoutsettinganexception.
®Note
Exceptions that occur while this calls __hash__() and__eq__() methods are silently ignored. Prefer
thePyDict_GetItemWithError() functioninstead.
Changed in version 3.10: Calling this API without GILheld had been allowed for historical reason. It is no
longerallowed.
8.4. Container Objects 157
The Python/C API, Release 3.13.0
PyObject*PyDict_GetItemWithError (PyObject*p,PyObject*key)
Return value: Borrowed reference. Part of the Stable ABI .Variant of PyDict_GetItem() that does not
suppress exceptions. Return NULL withan exceptionsetifan exception occurred. Return NULL withoutan
exceptionsetifthekeywasn’tpresent.
PyObject*PyDict_GetItemString (PyObject*p,constchar*key )
Return value: Borrowed reference. Part of the StableABI .Thisisthesameas PyDict_GetItem() ,butkey
isspecifiedasa const char* UTF-8encodedbytesstring,ratherthana PyObject *.
®Note
Exceptions that occur while this calls __hash__() and__eq__() methods or while creating the tem-
porary strobject are silently ignored. Prefer using the PyDict_GetItemWithError() function with
yourown PyUnicode_FromString() keyinstead.
intPyDict_GetItemStringRef (PyObject*p,constchar*key, PyObject**result )
Part of the Stable ABI since version 3.13. Similar than PyDict_GetItemRef() , butkeyis specified as a
const char* UTF-8encodedbytesstring,ratherthana PyObject *.
Addedinversion3.13.
PyObject*PyDict_SetDefault (PyObject*p,PyObject*key, PyObject*defaultobj )
Return value: Borrowed reference. ThisisthesameasthePython-level dict.setdefault() . Ifpresent,it
returns the value corresponding to keyfrom the dictionary p. If the key is not in the dict, it is inserted with
value defaultobjanddefaultobjisreturned. Thisfunctionevaluatesthehashfunctionof keyonlyonce,instead
ofevaluatingitindependentlyforthelookupandtheinsertion.
Addedinversion3.4.
intPyDict_SetDefaultRef (PyObject*p,PyObject*key, PyObject*default_value, PyObject**result )
Inserts default_value intothedictionary pwithakeyof keyifthekeyisnotalreadypresentinthedictionary. If
resultisnot NULL,then *resultissettoa strong reference toeither default_value ,ifthekeywasnotpresent,orthe
existingvalue,if keywasalreadypresentinthedictionary. Returns 1ifthekeywaspresentand default_value
wasnotinserted, or 0ifthekeywasnotpresentand default_value wasinserted. Onfailure, returns -1, sets
anexception,andsets *resulttoNULL.
For clarity: if you have a strong reference to default_value before calling this function, then after it returns,
you hold a strong reference to both default_value and*result(if it’s not NULL). These may refer to the same
object: inthatcaseyouholdtwoseparatereferencestoit.
Addedinversion3.13.
intPyDict_Pop (PyObject*p,PyObject*key, PyObject**result )
Remove keyfrom dictionary pand optionally return the removed value. Do not raise KeyError if the key
missing.
•Ifthekeyispresent,set *resulttoanewreferencetotheremovedvalueif resultisnot NULL,andreturn
1.
•Ifthekeyismissing,set *resulttoNULLifresultisnot NULL,andreturn 0.
•Onerror,raiseanexceptionandreturn -1.
Thisissimilarto dict.pop() ,butwithoutthedefaultvalueandnotraising KeyError ifthekeymissing.
Addedinversion3.13.
intPyDict_PopString (PyObject*p,constchar*key, PyObject**result )
Similarto PyDict_Pop() ,butkeyisspecifiedasa const char* UTF-8encodedbytesstring,ratherthan
aPyObject *.
Addedinversion3.13.
158 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyDict_Items (PyObject*p)
Return value: New reference. Part of the StableABI .Returna PyListObject containingalltheitemsfrom
thedictionary.
PyObject*PyDict_Keys (PyObject*p)
Return value: New reference. Part of the Stable ABI .Return a PyListObject containing all the keys from
thedictionary.
PyObject*PyDict_Values (PyObject*p)
Return value: New reference. Part of the StableABI .Returna PyListObject containingallthevaluesfrom
thedictionary p.
Py_ssize_t PyDict_Size (PyObject*p)
Part of the Stable ABI .Return the number of items in the dictionary. This is equivalent to len(p)on a
dictionary.
intPyDict_Next (PyObject*p,Py_ssize_t *ppos, PyObject**pkey, PyObject**pvalue )
Part of the Stable ABI .Iterate over all key-value pairs in the dictionary p. The Py_ssize_t referred to by
pposmustbeinitializedto 0priortothefirstcalltothisfunctiontostarttheiteration;thefunctionreturnstrue
for each pair in the dictionary, and false once all pairs have been reported. The parameters pkeyandpvalue
shouldeitherpointto PyObject *variablesthatwillbefilledinwitheachkeyandvalue,respectively,ormay
beNULL.Anyreferencesreturnedthroughthemareborrowed. pposshouldnotbealteredduringiteration. Its
valuerepresentsoffsetswithintheinternaldictionarystructure,andsincethestructureissparse,theoffsetsare
notconsecutive.
Forexample:
PyObject *key, *value;
Py_ssize_t pos =0;
while (PyDict_Next(self ->dict, &pos, &key, &value)) {
/* do something interesting with the values... */
...
}
The dictionary pshould not be mutated during iteration. It is safe to modify the values of the keys as you
iterateoverthedictionary,butonlysolongasthesetofkeysdoesnotchange. Forexample:
PyObject *key, *value;
Py_ssize_t pos =0;
while (PyDict_Next(self ->dict, &pos, &key, &value)) {
long i=PyLong_AsLong(value);
if(i==-1&&PyErr_Occurred()) {
return -1;
}
PyObject *o=PyLong_FromLong(i +1);
if(o==NULL )
return -1;
if(PyDict_SetItem(self ->dict, key, o)<0){
Py_DECREF(o);
return -1;
}
Py_DECREF(o);
}
The function is not thread-safe in the free-threaded build without external synchronization. You can use
Py_BEGIN_CRITICAL_SECTION tolockthedictionarywhileiteratingoverit:
8.4. Container Objects 159
The Python/C API, Release 3.13.0
Py_BEGIN_CRITICAL_SECTION(self ->dict);
while (PyDict_Next(self ->dict, &pos, &key, &value)) {
...
}
Py_END_CRITICAL_SECTION();
intPyDict_Merge (PyObject*a,PyObject*b,intoverride )
Part of the Stable ABI .Iterate over mapping object badding key-value pairs to dictionary a.bmay be a
dictionary, or any object supporting PyMapping_Keys() andPyObject_GetItem() . Ifoverrideis true,
existingpairsin awillbereplacedifamatchingkeyisfoundin b,otherwisepairswillonlybeaddedifthere
isnotamatchingkeyin a. Return 0onsuccessor -1ifanexceptionwasraised.
intPyDict_Update (PyObject*a,PyObject*b)
Part of the StableABI .Thisisthesameas PyDict_Merge(a, b, 1) inC,andissimilarto a.update(b)
inPythonexceptthat PyDict_Update() doesn’tfallbacktotheiteratingoverasequenceofkeyvaluepairs
ifthesecondargumenthasno“keys”attribute. Return 0onsuccessor -1ifanexceptionwasraised.
intPyDict_MergeFromSeq2 (PyObject*a,PyObject*seq2,intoverride )
Part of the StableABI .Updateormergeintodictionary a,fromthekey-valuepairsin seq2.seq2mustbean
iterableobjectproducingiterableobjectsoflength2,viewedaskey-valuepairs. Incaseofduplicatekeys,the
lastwinsif overrideistrue,elsethefirstwins. Return 0onsuccessor -1ifanexceptionwasraised. Equivalent
Python(exceptforthereturnvalue):
def PyDict_MergeFromSeq2(a, seq2, override) :
for key, value inseq2 :
ifoverride orkey not ina:
a[key] =value
intPyDict_AddWatcher (PyDict_WatchCallback callback )
Register callbackasadictionarywatcher. Returnanon-negativeintegeridwhichmustbepassedtofuturecalls
toPyDict_Watch() . Incaseoferror(e.g. nomorewatcherIDsavailable),return -1andsetanexception.
Addedinversion3.12.
intPyDict_ClearWatcher (intwatcher_id )
Clearwatcheridentifiedby watcher_id previouslyreturnedfrom PyDict_AddWatcher() . Return 0onsuc-
cess, -1onerror(e.g. ifthegiven watcher_id wasneverregistered.)
Addedinversion3.12.
intPyDict_Watch (intwatcher_id, PyObject*dict)
Markdictionary dictaswatched. Thecallbackgranted watcher_id byPyDict_AddWatcher() willbecalled
when dictismodifiedordeallocated. Return 0onsuccessor -1onerror.
Addedinversion3.12.
intPyDict_Unwatch (intwatcher_id, PyObject*dict)
Markdictionary dictasnolongerwatched. Thecallbackgranted watcher_id byPyDict_AddWatcher() will
nolongerbecalledwhen dictismodifiedordeallocated. Thedictmustpreviouslyhavebeenwatchedbythis
watcher. Return 0onsuccessor -1onerror.
Addedinversion3.12.
typePyDict_WatchEvent
Enumeration of possible dictionary watcher events: PyDict_EVENT_ADDED ,PyDict_EVENT_MODIFIED ,
PyDict_EVENT_DELETED , PyDict_EVENT_CLONED , PyDict_EVENT_CLEARED ,or
PyDict_EVENT_DEALLOCATED .
Addedinversion3.12.
160 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
typedefint(* PyDict_WatchCallback )(PyDict_WatchEvent event, PyObject*dict, PyObject*key, PyObject
*new_value)
Typeofadictwatchercallbackfunction.
IfeventisPyDict_EVENT_CLEARED orPyDict_EVENT_DEALLOCATED , both keyandnew_value will be
NULL. IfeventisPyDict_EVENT_ADDED orPyDict_EVENT_MODIFIED ,new_value will be the new value
forkey. IfeventisPyDict_EVENT_DELETED ,keyisbeingdeletedfromthedictionaryand new_value willbe
NULL.
PyDict_EVENT_CLONED occurswhen dictwaspreviouslyemptyandanotherdictismergedintoit. Tomain-
tainefficiencyofthisoperation,per-key PyDict_EVENT_ADDED eventsarenotissuedinthiscase;insteada
single PyDict_EVENT_CLONED isissued,and keywillbethesourcedictionary.
Thecallbackmayinspectbutmustnotmodify dict;doingsocouldhaveunpredictableeffects,includinginfinite
recursion. DonottriggerPythoncodeexecutioninthecallback,asitcouldmodifythedictasasideeffect.
IfeventisPyDict_EVENT_DEALLOCATED ,takinganewreferenceinthecallbacktotheabout-to-be-destroyed
dictionarywillresurrectitandpreventitfrombeingfreedatthistime. Whentheresurrectedobjectisdestroyed
later,anywatchercallbacksactiveatthattimewillbecalledagain.
Callbacksoccurbeforethenotifiedmodificationto dicttakesplace,sothepriorstateof dictcanbeinspected.
If the callback sets an exception, it must return -1; this exception will be printed as an unraisable exception
using PyErr_WriteUnraisable() . Otherwiseitshouldreturn 0.
Theremayalreadybeapendingexceptionsetonentrytothecallback. Inthiscase,thecallbackshouldreturn 0
withthesameexceptionstillset. ThismeansthecallbackmaynotcallanyotherAPIthatcansetanexception
unlessitsavesandclearstheexceptionstatefirst,andrestoresitbeforereturning.
Addedinversion3.12.
8.4.2Set Objects
This section details the public API for setandfrozenset objects. Any functionality not listed be-
low is best accessed using either the abstract object protocol (including PyObject_CallMethod() ,
PyObject_RichCompareBool() ,PyObject_Hash() ,PyObject_Repr() ,PyObject_IsTrue() ,
PyObject_Print() ,and PyObject_GetIter() )ortheabstractnumberprotocol(including PyNumber_And() ,
PyNumber_Subtract() , PyNumber_Or() , PyNumber_Xor() , PyNumber_InPlaceAnd() ,
PyNumber_InPlaceSubtract() ,PyNumber_InPlaceOr() ,and PyNumber_InPlaceXor() ).
typePySetObject
This subtype of PyObject is used to hold the internal data for both setandfrozenset objects. It is like
aPyDictObject inthatitisafixedsizeforsmallsets(muchliketuplestorage)andwillpointtoaseparate,
variablesizedblockofmemoryformediumandlargesizedsets(muchlikeliststorage). Noneofthefieldsof
thisstructureshouldbeconsideredpublicandallaresubjecttochange. Allaccessshouldbedonethroughthe
documentedAPIratherthanbymanipulatingthevaluesinthestructure.
PyTypeObject PySet_Type
Part of the StableABI .Thisisaninstanceof PyTypeObject representingthePython settype.
PyTypeObject PyFrozenSet_Type
Part of the StableABI .Thisisaninstanceof PyTypeObject representingthePython frozenset type.
ThefollowingtypecheckmacrosworkonpointerstoanyPythonobject. Likewise,theconstructorfunctionswork
withanyiterablePythonobject.
intPySet_Check (PyObject*p)
Returntrueif pisasetobjectoraninstanceofasubtype. Thisfunctionalwayssucceeds.
intPyFrozenSet_Check (PyObject*p)
Returntrueif pisafrozenset objectoraninstanceofasubtype. Thisfunctionalwayssucceeds.
8.4. Container Objects 161
The Python/C API, Release 3.13.0
intPyAnySet_Check (PyObject*p)
Return true if pis asetobject, a frozenset object, or an instance of a subtype. This function always
succeeds.
intPySet_CheckExact (PyObject*p)
Returntrueif pisasetobjectbutnotaninstanceofasubtype. Thisfunctionalwayssucceeds.
Addedinversion3.10.
intPyAnySet_CheckExact (PyObject*p)
Returntrueif pisasetobjectora frozenset objectbutnotaninstanceofasubtype. Thisfunctionalways
succeeds.
intPyFrozenSet_CheckExact (PyObject*p)
Returntrueif pisafrozenset objectbutnotaninstanceofasubtype. Thisfunctionalwayssucceeds.
PyObject*PySet_New (PyObject*iterable )
Return value: New reference. Part of the Stable ABI .Return a new setcontaining objects returned by the
iterable. The iterablemay be NULLto create a new empty set. Return the new set on success or NULLon
failure. Raise TypeError ifiterableis not actually iterable. The constructor is also useful for copying a set
(c=set(s) ).
PyObject*PyFrozenSet_New (PyObject*iterable )
Return value: New reference. Part of the Stable ABI .Return a new frozenset containing objects returned
bythe iterable. The iterablemaybe NULLtocreateanewemptyfrozenset. Returnthenewsetonsuccessor
NULLonfailure. Raise TypeError ifiterableisnotactuallyiterable.
Thefollowingfunctionsandmacrosareavailableforinstancesof setorfrozenset orinstancesoftheirsubtypes.
Py_ssize_t PySet_Size (PyObject*anyset )
Part of the StableABI .Returnthelengthofa setorfrozenset object. Equivalentto len(anyset) . Raises
aSystemError ifanysetisnota set,frozenset ,oraninstanceofasubtype.
Py_ssize_t PySet_GET_SIZE (PyObject*anyset )
Macroformof PySet_Size() withouterrorchecking.
intPySet_Contains (PyObject*anyset, PyObject*key)
Part of the Stable ABI .Return 1if found, 0if not found, and -1if an error is encountered. Unlike the
Python __contains__() method,thisfunctiondoesnotautomaticallyconvertunhashablesetsintotempo-
rary frozensets. Raise a TypeError if the keyis unhashable. Raise SystemError ifanysetis not a set,
frozenset ,oraninstanceofasubtype.
intPySet_Add (PyObject*set,PyObject*key)
Part of the Stable ABI .Addkeyto a setinstance. Also works with frozenset instances (like
PyTuple_SetItem() it can be used to fill in the values of brand new frozensets before they are exposed
to other code). Return 0on success or -1on failure. Raise a TypeError if the keyis unhashable. Raise
aMemoryError if there is no room to grow. Raise a SystemError ifsetis not an instance of setor its
subtype.
Thefollowingfunctionsareavailableforinstancesof setoritssubtypesbutnotforinstancesof frozenset orits
subtypes.
intPySet_Discard (PyObject*set,PyObject*key)
Part of the StableABI .Return 1iffoundandremoved, 0ifnotfound(noactiontaken),and -1ifanerroris
encountered. Doesnotraise KeyError formissingkeys. Raisea TypeError ifthe keyisunhashable. Unlike
thePython discard() method,thisfunctiondoesnotautomaticallyconvertunhashablesetsintotemporary
frozensets. Raise SystemError ifsetisnotaninstanceof setoritssubtype.
PyObject*PySet_Pop (PyObject*set)
Return value: New reference. Part of the StableABI .Returnanewreferencetoanarbitraryobjectinthe set,
and removes the object from the set. Return NULLon failure. Raise KeyError if the set is empty. Raise a
SystemError ifsetisnotaninstanceof setoritssubtype.
162 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
intPySet_Clear (PyObject*set)
Part of the Stable ABI .Empty an existing set of all elements. Return 0on success. Return -1and raise
SystemError ifsetisnotaninstanceof setoritssubtype.
8.5Function Objects
8.5.1Function Objects
ThereareafewfunctionsspecifictoPythonfunctions.
typePyFunctionObject
TheCstructureusedforfunctions.
PyTypeObject PyFunction_Type
Thisisaninstanceof PyTypeObject andrepresentsthePythonfunctiontype. ItisexposedtoPythonpro-
grammersas types.FunctionType .
intPyFunction_Check (PyObject*o)
Returntrueif oisafunctionobject(hastype PyFunction_Type ). Theparametermustnotbe NULL.This
functionalwayssucceeds.
PyObject*PyFunction_New (PyObject*code, PyObject*globals )
Return value: New reference. Returnanewfunctionobjectassociatedwiththecodeobject code.globalsmust
beadictionarywiththeglobalvariablesaccessibletothefunction.
Thefunction’sdocstringandnameareretrievedfromthecodeobject. __module__ isretrievedfrom globals.
The argument defaults, annotations and closure are set to NULL.__qualname__ is set to the same value as
thecodeobject’s co_qualname field.
PyObject*PyFunction_NewWithQualName (PyObject*code, PyObject*globals, PyObject*qualname )
Return value: New reference. AsPyFunction_New() , but also allows setting the function object’s
__qualname__ attribute. qualnameshould be a unicode object or NULL; ifNULL, the __qualname__ at-
tributeissettothesamevalueasthecodeobject’s co_qualname field.
Addedinversion3.3.
PyObject*PyFunction_GetCode (PyObject*op)
Return value: Borrowed reference. Returnthecodeobjectassociatedwiththefunctionobject op.
PyObject*PyFunction_GetGlobals (PyObject*op)
Return value: Borrowed reference. Returntheglobalsdictionaryassociatedwiththefunctionobject op.
PyObject*PyFunction_GetModule (PyObject*op)
Return value: Borrowed reference. Returna borrowed reference tothe __module__ attributeofthefunction
object op. Itcanbe NULL.
Thisisnormallya stringcontainingthemodulename,butcanbesettoanyotherobjectbyPythoncode.
PyObject*PyFunction_GetDefaults (PyObject*op)
Return value: Borrowed reference. Returntheargumentdefaultvaluesofthefunctionobject op. Thiscanbe
atupleofargumentsor NULL.
intPyFunction_SetDefaults (PyObject*op,PyObject*defaults )
Settheargumentdefaultvaluesforthefunctionobject op.defaultsmustbe Py_Noneoratuple.
Raises SystemError andreturns -1onfailure.
voidPyFunction_SetVectorcall (PyFunctionObject *func, vectorcallfunc vectorcall )
Setthevectorcallfieldofagivenfunctionobject func.
Warning: extensionsusingthisAPImustpreservethebehavioroftheunaltered(default)vectorcallfunction!
Addedinversion3.12.
8.5. Function Objects 163
The Python/C API, Release 3.13.0
PyObject*PyFunction_GetClosure (PyObject*op)
Return value: Borrowed reference. Returntheclosureassociatedwiththefunctionobject op. Thiscanbe NULL
oratupleofcellobjects.
intPyFunction_SetClosure (PyObject*op,PyObject*closure )
Settheclosureassociatedwiththefunctionobject op.closuremustbe Py_Noneoratupleofcellobjects.
Raises SystemError andreturns -1onfailure.
PyObject*PyFunction_GetAnnotations (PyObject*op)
Return value: Borrowed reference. Return the annotations of the function object op. This can be a mutable
dictionaryor NULL.
intPyFunction_SetAnnotations (PyObject*op,PyObject*annotations )
Settheannotationsforthefunctionobject op.annotations mustbeadictionaryor Py_None.
Raises SystemError andreturns -1onfailure.
intPyFunction_AddWatcher (PyFunction_WatchCallback callback )
Register callbackas a function watcher for the current interpreter. Return an ID which may be passed to
PyFunction_ClearWatcher() . Incaseoferror(e.g. nomorewatcherIDsavailable),return -1andsetan
exception.
Addedinversion3.12.
intPyFunction_ClearWatcher (intwatcher_id )
Clearwatcheridentifiedby watcher_id previouslyreturnedfrom PyFunction_AddWatcher() forthecur-
rent interpreter. Return 0on success, or -1and set an exception on error (e.g. if the given watcher_id was
neverregistered.)
Addedinversion3.12.
typePyFunction_WatchEvent
Enumeration of possible function watcher events: - PyFunction_EVENT_CREATE
- PyFunction_EVENT_DESTROY - PyFunction_EVENT_MODIFY_CODE -
PyFunction_EVENT_MODIFY_DEFAULTS -PyFunction_EVENT_MODIFY_KWDEFAULTS
Addedinversion3.12.
typedefint(* PyFunction_WatchCallback )(PyFunction_WatchEvent event, PyFunctionObject *func, PyObject
*new_value)
Typeofafunctionwatchercallbackfunction.
IfeventisPyFunction_EVENT_CREATE orPyFunction_EVENT_DESTROY thennew_value willbe NULL.
Otherwise, new_value willholda borrowed reference tothenewvaluethatisabouttobestoredin funcforthe
attributethatisbeingmodified.
Thecallbackmayinspectbutmustnotmodify func;doingsocouldhaveunpredictableeffects,includinginfinite
recursion.
IfeventisPyFunction_EVENT_CREATE , then the callback is invoked after funchas been fully initialized.
Otherwise,thecallbackisinvokedbeforethemodificationto functakesplace,sothepriorstateof funccanbe
inspected. Theruntimeispermittedtooptimizeawaythecreationoffunctionobjectswhenpossible. Insuch
cases no event will be emitted. Although this creates the possibility of an observable difference of runtime
behavior depending on optimization decisions, it does not change the semantics of the Python code being
executed.
IfeventisPyFunction_EVENT_DESTROY , Taking a reference in the callback to the about-to-be-destroyed
functionwillresurrectit,preventingitfrombeingfreedatthistime. Whentheresurrectedobjectisdestroyed
later,anywatchercallbacksactiveatthattimewillbecalledagain.
If the callback sets an exception, it must return -1; this exception will be printed as an unraisable exception
using PyErr_WriteUnraisable() . Otherwiseitshouldreturn 0.
164 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Theremayalreadybeapendingexceptionsetonentrytothecallback. Inthiscase,thecallbackshouldreturn 0
withthesameexceptionstillset. ThismeansthecallbackmaynotcallanyotherAPIthatcansetanexception
unlessitsavesandclearstheexceptionstatefirst,andrestoresitbeforereturning.
Addedinversion3.12.
8.5.2Instance Method Objects
Aninstancemethodisawrapperfora PyCFunction andthenewwaytobinda PyCFunction toaclassobject. It
replacestheformercall PyMethod_New(func, NULL, class) .
PyTypeObject PyInstanceMethod_Type
This instance of PyTypeObject represents the Python instance method type. It is not exposed to Python
programs.
intPyInstanceMethod_Check (PyObject*o)
Returntrueif oisaninstancemethodobject(hastype PyInstanceMethod_Type ). Theparametermustnot
beNULL.Thisfunctionalwayssucceeds.
PyObject*PyInstanceMethod_New (PyObject*func )
Return value: New reference. Returnanewinstancemethodobject,with funcbeinganycallableobject. func
isthefunctionthatwillbecalledwhentheinstancemethodiscalled.
PyObject*PyInstanceMethod_Function (PyObject*im)
Return value: Borrowed reference. Returnthefunctionobjectassociatedwiththeinstancemethod im.
PyObject*PyInstanceMethod_GET_FUNCTION (PyObject*im)
Return value: Borrowed reference. Macroversionof PyInstanceMethod_Function() whichavoidserror
checking.
8.5.3Method Objects
Methods are bound function objects. Methods are always bound to an instance of a user-defined class. Unbound
methods(methodsboundtoaclassobject)arenolongeravailable.
PyTypeObject PyMethod_Type
Thisinstanceof PyTypeObject representsthePythonmethodtype. ThisisexposedtoPythonprogramsas
types.MethodType .
intPyMethod_Check (PyObject*o)
Return true if ois a method object (has type PyMethod_Type ). The parameter must not be NULL. This
functionalwayssucceeds.
PyObject*PyMethod_New (PyObject*func, PyObject*self)
Return value: New reference. Return a new method object, with funcbeing any callable object and selfthe
instancethemethodshouldbebound. funcisthefunctionthatwillbecalledwhenthemethodiscalled. self
mustnotbe NULL.
PyObject*PyMethod_Function (PyObject*meth )
Return value: Borrowed reference. Returnthefunctionobjectassociatedwiththemethod meth.
PyObject*PyMethod_GET_FUNCTION (PyObject*meth )
Return value: Borrowed reference. Macroversionof PyMethod_Function() whichavoidserrorchecking.
PyObject*PyMethod_Self (PyObject*meth )
Return value: Borrowed reference. Returntheinstanceassociatedwiththemethod meth.
PyObject*PyMethod_GET_SELF (PyObject*meth )
Return value: Borrowed reference. Macroversionof PyMethod_Self() whichavoidserrorchecking.
8.5. Function Objects 165
The Python/C API, Release 3.13.0
8.5.4Cell Objects
“Cell”objectsareusedtoimplementvariablesreferencedbymultiplescopes. Foreachsuchvariable,acellobjectis
createdtostorethevalue;thelocalvariablesofeachstackframethatreferencesthevaluecontainsareferencetothe
cellsfromouterscopeswhichalsousethatvariable. Whenthevalueisaccessed,thevaluecontainedinthecellisused
insteadofthecellobjectitself. Thisde-referencingofthecellobjectrequiressupportfromthegeneratedbyte-code;
thesearenotautomaticallyde-referencedwhenaccessed. Cellobjectsarenotlikelytobeusefulelsewhere.
typePyCellObject
TheCstructureusedforcellobjects.
PyTypeObject PyCell_Type
Thetypeobjectcorrespondingtocellobjects.
intPyCell_Check (PyObject*ob)
Returntrueif obisacellobject; obmustnotbe NULL.Thisfunctionalwayssucceeds.
PyObject*PyCell_New (PyObject*ob)
Return value: New reference. Createandreturnanewcellobjectcontainingthevalue ob. Theparametermay
beNULL.
PyObject*PyCell_Get (PyObject*cell)
Return value: New reference. Returnthecontentsofthecell cell,whichcanbe NULL.Ifcellisnotacellobject,
returns NULLwithanexceptionset.
PyObject*PyCell_GET (PyObject*cell)
Return value: Borrowed reference. Return the contents of the cell cell, but without checking that cellis non-
NULLandacellobject.
intPyCell_Set (PyObject*cell, PyObject*value )
Setthecontentsofthecellobject celltovalue. Thisreleasesthereferencetoanycurrentcontentofthecell.
valuemaybe NULL.cellmustbenon- NULL.
Onsuccess,return 0. Ifcellisnotacellobject,setanexceptionandreturn -1.
voidPyCell_SET (PyObject*cell, PyObject*value )
Sets the value of the cell object celltovalue. No reference counts are adjusted, and no checks are made for
safety; cellmustbenon- NULLandmustbeacellobject.
8.5.5Code Objects
Codeobjectsarealow-leveldetailoftheCPythonimplementation. Eachonerepresentsachunkofexecutablecode
thathasn’tyetbeenboundintoafunction.
typePyCodeObject
The C structure oftheobjects used to describecodeobjects. Thefields ofthistype aresubject to changeat
anytime.
PyTypeObject PyCode_Type
Thisisaninstanceof PyTypeObject representingthePythoncodeobject.
intPyCode_Check (PyObject*co)
Returntrueif coisacodeobject. Thisfunctionalwayssucceeds.
Py_ssize_t PyCode_GetNumFree (PyCodeObject *co)
Returnthenumberof free (closure) variables inacodeobject.
intPyUnstable_Code_GetFirstFree (PyCodeObject *co)
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
166 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Returnthepositionofthefirst free (closure) variable inacodeobject.
Changedinversion3.13: Renamedfrom PyCode_GetFirstFree aspartof Unstable C API .Theoldname
isdeprecated,butwillremainavailableuntilthesignaturechangesagain.
PyCodeObject *PyUnstable_Code_New (intargcount,intkwonlyargcount,intnlocals,intstacksize,intflags,
PyObject*code, PyObject*consts, PyObject*names, PyObject
*varnames, PyObject*freevars, PyObject*cellvars, PyObject*filename,
PyObject*name, PyObject*qualname,intfirstlineno, PyObject
*linetable, PyObject*exceptiontable )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Return a new code object. If you need a dummy code object to create a frame, use PyCode_NewEmpty()
instead.
Sincethedefinitionofthebytecodechangesoften,calling PyUnstable_Code_New() directlycanbindyou
toaprecisePythonversion.
The many arguments of this function are inter-dependent in complex ways, meaning that subtle changes to
valuesarelikelytoresultinincorrectexecutionorVMcrashes. Usethisfunctiononlywithextremecare.
Changedinversion3.11: Added qualname andexceptiontable parameters.
Changedinversion3.12: Renamedfrom PyCode_New aspartof Unstable C API .Theoldnameisdeprecated,
butwillremainavailableuntilthesignaturechangesagain.
PyCodeObject *PyUnstable_Code_NewWithPosOnlyArgs (intargcount,intposonlyargcount,int
kwonlyargcount,intnlocals,intstacksize,intflags,
PyObject*code, PyObject*consts, PyObject
*names, PyObject*varnames, PyObject*freevars,
PyObject*cellvars, PyObject*filename, PyObject
*name, PyObject*qualname,intfirstlineno,
PyObject*linetable, PyObject*exceptiontable )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Similar to PyUnstable_Code_New() , but with an extra “posonlyargcount” for positional-only arguments.
Thesamecaveatsthatapplyto PyUnstable_Code_New alsoapplytothisfunction.
Addedinversion3.8: as PyCode_NewWithPosOnlyArgs
Changedinversion3.11: Added qualname andexceptiontable parameters.
Changedinversion3.12: Renamedto PyUnstable_Code_NewWithPosOnlyArgs . Theoldnameisdep-
recated,butwillremainavailableuntilthesignaturechangesagain.
PyCodeObject *PyCode_NewEmpty (constchar*filename,constchar*funcname,intfirstlineno )
Return value: New reference. Returnanewemptycodeobjectwiththespecifiedfilename,functionname,and
firstlinenumber. Theresultingcodeobjectwillraisean Exception ifexecuted.
intPyCode_Addr2Line (PyCodeObject *co,intbyte_offset )
Returnthelinenumberoftheinstructionthatoccursonorbefore byte_offset andendsafterit. Ifyoujust
needthelinenumberofaframe,use PyFrame_GetLineNumber() instead.
Forefficientlyiteratingoverthelinenumbersinacodeobject,use the API described in PEP 626 .
8.5. Function Objects 167
The Python/C API, Release 3.13.0
intPyCode_Addr2Location (PyObject*co,intbyte_offset,int*start_line,int*start_column,int*end_line,int
*end_column )
Setsthepassed intpointerstothesourcecodelineandcolumnnumbersfortheinstructionat byte_offset .
Setsthevalueto 0wheninformationisnotavailableforanyparticularelement.
Returns 1ifthefunctionsucceedsand0otherwise.
Addedinversion3.11.
PyObject*PyCode_GetCode (PyCodeObject *co)
Equivalent to the Python code getattr(co, 'co_code') . Returns a strong reference to a
PyBytesObject representingthebytecodeinacodeobject. Onerror, NULLisreturnedandanexceptionis
raised.
This PyBytesObject may be created on-demand by the interpreter and does not necessarily represent the
bytecodeactuallyexecutedbyCPython. Theprimaryusecaseforthisfunctionisdebuggersandprofilers.
Addedinversion3.11.
PyObject*PyCode_GetVarnames (PyCodeObject *co)
Equivalent to the Python code getattr(co, 'co_varnames') . Returns a new reference to a
PyTupleObject containingthenamesofthelocalvariables. Onerror, NULLisreturnedandanexceptionis
raised.
Addedinversion3.11.
PyObject*PyCode_GetCellvars (PyCodeObject *co)
Equivalent to the Python code getattr(co, 'co_cellvars') . Returns a new reference to a
PyTupleObject containing the names of the local variables that are referenced by nested functions. On
error, NULLisreturnedandanexceptionisraised.
Addedinversion3.11.
PyObject*PyCode_GetFreevars (PyCodeObject *co)
Equivalent to the Python code getattr(co, 'co_freevars') . Returns a new reference to a
PyTupleObject containing the names of the free (closure) variables . On error, NULLis returned and an
exceptionisraised.
Addedinversion3.11.
intPyCode_AddWatcher (PyCode_WatchCallback callback )
Register callbackas a code object watcher for the current interpreter. Return an ID which may be passed
toPyCode_ClearWatcher() . In case of error (e.g. no more watcher IDs available), return -1and set an
exception.
Addedinversion3.12.
intPyCode_ClearWatcher (intwatcher_id )
Clear watcher identified by watcher_id previously returned from PyCode_AddWatcher() for the current
interpreter. Return 0onsuccess,or -1andsetanexceptiononerror(e.g. ifthegiven watcher_id wasnever
registered.)
Addedinversion3.12.
typePyCodeEvent
Enumeration of possible code object watcher events: - PY_CODE_EVENT_CREATE -
PY_CODE_EVENT_DESTROY
Addedinversion3.12.
typedefint(* PyCode_WatchCallback )(PyCodeEvent event, PyCodeObject *co)
Typeofacodeobjectwatchercallbackfunction.
IfeventisPY_CODE_EVENT_CREATE ,thenthecallbackisinvokedafter cohasbeenfullyinitialized. Other-
wise,thecallbackisinvokedbeforethedestructionof cotakesplace,sothepriorstateof cocanbeinspected.
168 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
IfeventisPY_CODE_EVENT_DESTROY ,takingareferenceinthecallbacktotheabout-to-be-destroyedcode
objectwillresurrectitandpreventitfrombeingfreedatthistime. Whentheresurrectedobjectisdestroyed
later,anywatchercallbacksactiveatthattimewillbecalledagain.
Users of this API should not rely on internal runtime implementation details. Such details may include, but
are not limited to, the exact order and timing of creation and destruction of code objects. While changes in
thesedetailsmayresultindifferencesobservablebywatchers(includingwhetheracallbackisinvokedornot),
itdoesnotchangethesemanticsofthePythoncodebeingexecuted.
If the callback sets an exception, it must return -1; this exception will be printed as an unraisable exception
using PyErr_WriteUnraisable() . Otherwiseitshouldreturn 0.
Theremayalreadybeapendingexceptionsetonentrytothecallback. Inthiscase,thecallbackshouldreturn 0
withthesameexceptionstillset. ThismeansthecallbackmaynotcallanyotherAPIthatcansetanexception
unlessitsavesandclearstheexceptionstatefirst,andrestoresitbeforereturning.
Addedinversion3.12.
8.5.6Extra information
Tosupportlow-levelextensionstoframeevaluation,suchasexternaljust-in-timecompilers, itispossibletoattach
arbitraryextradatatocodeobjects.
These functions are part of the unstable C API tier: this functionality is a CPython implementation detail, and the
APImaychangewithoutdeprecationwarnings.
Py_ssize_t PyUnstable_Eval_RequestCodeExtraIndex (freefuncfree)
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Returnanewanopaqueindexvalueusedtoaddingdatatocodeobjects.
You generally call this function once (per interpreter) and use the result with PyCode_GetExtra and
PyCode_SetExtra tomanipulatedataonindividualcodeobjects.
Iffreeisnot NULL:whenacodeobjectisdeallocated, freewillbecalledonnon- NULLdatastoredunderthe
newindex. Use Py_DecRef() whenstoring PyObject .
Addedinversion3.6: as _PyEval_RequestCodeExtraIndex
Changed in version 3.12: Renamed to PyUnstable_Eval_RequestCodeExtraIndex . The old private
nameisdeprecated,butwillbeavailableuntiltheAPIchanges.
intPyUnstable_Code_GetExtra (PyObject*code, Py_ssize_t index,void**extra )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Setextratotheextradatastoredunderthegivenindex. Return0onsuccess. Setanexceptionandreturn-1
onfailure.
Ifnodatawassetundertheindex,set extratoNULLandreturn0withoutsettinganexception.
Addedinversion3.6: as _PyCode_GetExtra
Changedinversion3.12: Renamedto PyUnstable_Code_GetExtra . Theoldprivatenameisdeprecated,
butwillbeavailableuntiltheAPIchanges.
8.5. Function Objects 169
The Python/C API, Release 3.13.0
intPyUnstable_Code_SetExtra (PyObject*code, Py_ssize_t index,void*extra )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Settheextradatastoredunderthegivenindexto extra. Return0onsuccess. Setanexceptionandreturn-1
onfailure.
Addedinversion3.6: as _PyCode_SetExtra
Changedinversion3.12: Renamedto PyUnstable_Code_SetExtra . Theoldprivatenameisdeprecated,
butwillbeavailableuntiltheAPIchanges.
8.6Other Objects
8.6.1File Objects
These APIs are a minimal emulation of the Python 2 C API for built-in file objects, which used to rely on the
buffered I/O ( FILE*) support from the C standard library. In Python 3, files and streams use the new iomodule,
whichdefinesseverallayersoverthelow-levelunbufferedI/Ooftheoperatingsystem. Thefunctionsdescribedbelow
are convenience C wrappers over these new APIs, and meant mostly for internal error reporting in the interpreter;
third-partycodeisadvisedtoaccessthe ioAPIsinstead.
PyObject*PyFile_FromFd (intfd,constchar*name,constchar*mode,intbuffering,constchar*encoding,const
char*errors,constchar*newline,intclosefd )
Return value: New reference. Part of the StableABI .CreateaPythonfileobjectfromthefiledescriptorofan
already opened file fd. The arguments name,encoding,errorsandnewlinecan be NULLto use the defaults;
bufferingcan be -1to use the default. nameis ignored and kept for backward compatibility. Return NULL
onfailure. Foramorecomprehensivedescriptionofthearguments,pleaserefertothe io.open() function
documentation.
ÁWarning
SincePythonstreamshavetheirownbufferinglayer,mixingthemwithOS-levelfiledescriptorscanpro-
ducevariousissues(suchasunexpectedorderingofdata).
Changedinversion3.2: Ignore nameattribute.
intPyObject_AsFileDescriptor (PyObject*p)
Part of the Stable ABI .Return the file descriptor associated with pas an int. If the object is an integer, its
valueisreturned. Ifnot,theobject’s fileno() methodiscalledifitexists;themethodmustreturnaninteger,
whichisreturnedasthefiledescriptorvalue. Setsanexceptionandreturns -1onfailure.
PyObject*PyFile_GetLine (PyObject*p,intn )
Return value: New reference. Part of the Stable ABI .Equivalent to p.readline([n]) , this function reads
onelinefromtheobject p.pmaybeafileobjectoranyobjectwitha readline() method. If nis0,exactly
onelineisread,regardlessofthelengthoftheline. If nisgreaterthan 0, nomorethan nbyteswillberead
fromthefile;apartiallinecanbereturned. Inbothcases,anemptystringisreturnediftheendofthefileis
reachedimmediately. If nislessthan 0,however,onelineisreadregardlessoflength,but EOFError israised
iftheendofthefileisreachedimmediately.
intPyFile_SetOpenCodeHook (Py_OpenCodeHookFunction handler )
Overridesthenormalbehaviorof io.open_code() topassitsparameterthroughtheprovidedhandler.
Thehandlerisafunctionoftype:
170 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
typedef PyObject*(*Py_OpenCodeHookFunction )(PyObject*,void*)
Equivalent of PyObject *(*)( PyObject *path, void *userData) , where pathis guaranteed
tobe PyUnicodeObject .
TheuserDatapointer is passed into the hook function. Since hook functions may be called from different
runtimes,thispointershouldnotreferdirectlytoPythonstate.
Asthishookisintentionallyusedduringimport,avoidimportingnewmodulesduringitsexecutionunlessthey
areknowntobefrozenoravailablein sys.modules .
Onceahookhasbeenset,itcannotberemovedorreplaced,andlatercallsto PyFile_SetOpenCodeHook()
willfail. Onfailure,thefunctionreturns-1andsetsanexceptioniftheinterpreterhasbeeninitialized.
Thisfunctionissafetocallbefore Py_Initialize() .
Raisesanauditingevent setopencodehook withnoarguments.
Addedinversion3.8.
intPyFile_WriteObject (PyObject*obj, PyObject*p,intflags )
Part of the StableABI .Writeobject objtofileobject p. Theonlysupportedflagfor flagsisPy_PRINT_RAW ;
ifgiven,the str()oftheobjectiswritteninsteadofthe repr(). Return 0onsuccessor -1onfailure;the
appropriateexceptionwillbeset.
intPyFile_WriteString (constchar*s, PyObject*p)
Part of the Stable ABI .Write string sto file object p. Return 0on success or -1on failure; the appropriate
exceptionwillbeset.
8.6.2Module Objects
PyTypeObject PyModule_Type
Part of the StableABI .Thisinstanceof PyTypeObject representsthePythonmoduletype. Thisisexposed
toPythonprogramsas types.ModuleType .
intPyModule_Check (PyObject*p)
Returntrueif pisamoduleobject,orasubtypeofamoduleobject. Thisfunctionalwayssucceeds.
intPyModule_CheckExact (PyObject*p)
Returntrueif pisamoduleobject,butnotasubtypeof PyModule_Type . Thisfunctionalwayssucceeds.
PyObject*PyModule_NewObject (PyObject*name )
Return value: New reference. Part of the Stable ABI since version 3.7. Return a new module object with
module.__name__ set to name. The module’s __name__ ,__doc__,__package__ and__loader__
attributes are filled in (all but __name__ are set to None). The caller is responsible for setting a __file__
attribute.
Return NULLwithanexceptionsetonerror.
Addedinversion3.3.
Changedinversion3.4: __package__ and__loader__ arenowsetto None.
PyObject*PyModule_New (constchar*name )
Return value: New reference. Part of the StableABI .Similarto PyModule_NewObject() ,butthenameisa
UTF-8encodedstringinsteadofaUnicodeobject.
PyObject*PyModule_GetDict (PyObject*module )
Return value: Borrowed reference. Part of the StableABI .Returnthedictionaryobjectthatimplements mod-
ule’s namespace; this object is the same as the __dict__ attribute of the module object. If moduleis not a
moduleobject(orasubtypeofamoduleobject), SystemError israisedand NULLisreturned.
Itisrecommendedextensionsuseother PyModule_* andPyObject_* functionsratherthandirectlymanip-
ulateamodule’s __dict__ .
8.6. Other Objects 171
The Python/C API, Release 3.13.0
PyObject*PyModule_GetNameObject (PyObject*module )
Return value: New reference. Part of the Stable ABI since version 3.7. Return module’s__name__ value. If
themoduledoesnotprovideone,orifitisnotastring, SystemError israisedand NULLisreturned.
Addedinversion3.3.
constchar* PyModule_GetName (PyObject*module )
Part of the StableABI .Similarto PyModule_GetNameObject() butreturnthenameencodedto 'utf-8'.
void* PyModule_GetState (PyObject*module )
Part of the StableABI .Returnthe“state”ofthemodule,thatis,apointertotheblockofmemoryallocatedat
modulecreationtime,or NULL.See PyModuleDef.m_size .
PyModuleDef *PyModule_GetDef (PyObject*module )
Part of the StableABI .Returnapointertothe PyModuleDef structfromwhichthemodulewascreated,or
NULLifthemodulewasn’tcreatedfromadefinition.
PyObject*PyModule_GetFilenameObject (PyObject*module )
Return value: New reference. Part of the Stable ABI .Return the name of the file from which modulewas
loadedusing module’s__file__ attribute. Ifthisisnotdefined, orifitisnotastring, raise SystemError
andreturn NULL;otherwisereturnareferencetoaUnicodeobject.
Addedinversion3.2.
constchar* PyModule_GetFilename (PyObject*module )
Part of the Stable ABI .Similar to PyModule_GetFilenameObject() but return the filename encoded to
‘utf-8’.
Deprecatedsinceversion3.2: PyModule_GetFilename() raises UnicodeEncodeError onunencodable
filenames,use PyModule_GetFilenameObject() instead.
Initializing C modules
Modulesobjectsareusuallycreatedfromextensionmodules(sharedlibrarieswhichexportaninitializationfunction),
or compiled-in modules (where the initialization function is added using PyImport_AppendInittab() ). See
buildingorextending-with-embeddingfordetails.
The initialization function can either pass a module definition instance to PyModule_Create() , and return the
resultingmoduleobject,orrequest“multi-phaseinitialization”byreturningthedefinitionstructitself.
typePyModuleDef
Part of the Stable ABI (including all members). The module definition struct, which holds all information
neededtocreateamoduleobject. Thereisusuallyonlyonestaticallyinitializedvariableofthistypeforeach
module.
PyModuleDef_Base m_base
Alwaysinitializethismemberto PyModuleDef_HEAD_INIT .
constchar* m_name
Nameforthenewmodule.
constchar* m_doc
Docstringforthemodule;usuallyadocstringvariablecreatedwith PyDoc_STRVAR isused.
Py_ssize_t m_size
Module state may be kept in a per-module memory area that can be retrieved with
PyModule_GetState() , rather than in static globals. This makes modules safe for use in mul-
tiplesub-interpreters.
Thismemoryareaisallocatedbasedon m_sizeonmodulecreation,andfreedwhenthemoduleobjectis
deallocated,afterthe m_freefunctionhasbeencalled,ifpresent.
Setting m_sizeto-1means that the module does not support sub-interpreters, because it has global
state.
172 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Settingittoanon-negativevaluemeansthatthemodulecanbere-initializedandspecifiestheadditional
amountofmemoryitrequiresforitsstate. Non-negative m_sizeisrequiredformulti-phaseinitializa-
tion.
SeePEP 3121 formoredetails.
PyMethodDef *m_methods
Apointertoatableofmodule-levelfunctions,describedby PyMethodDef values. Canbe NULLifno
functionsarepresent.
PyModuleDef_Slot *m_slots
Anarrayofslotdefinitionsformulti-phaseinitialization,terminatedbya {0, NULL} entry. Whenusing
single-phaseinitialization, m_slotsmustbe NULL.
Changedinversion3.5: Priortoversion3.5,thismemberwasalwayssetto NULL,andwasdefinedas:
inquiry m_reload
traverseproc m_traverse
AtraversalfunctiontocallduringGCtraversalofthemoduleobject,or NULLifnotneeded.
This function is not called if the module state was requested but is not allocated yet. This is the case
immediately after the module is created and before the module is executed ( Py_mod_exec function).
Moreprecisely,thisfunctionisnotcalledif m_sizeisgreaterthan0andthemodulestate(asreturned
byPyModule_GetState() )isNULL.
Changedinversion3.9: Nolongercalledbeforethemodulestateisallocated.
inquiry m_clear
AclearfunctiontocallduringGCclearingofthemoduleobject,or NULLifnotneeded.
This function is not called if the module state was requested but is not allocated yet. This is the case
immediately after the module is created and before the module is executed ( Py_mod_exec function).
Moreprecisely,thisfunctionisnotcalledif m_sizeisgreaterthan0andthemodulestate(asreturned
byPyModule_GetState() )isNULL.
Like PyTypeObject.tp_clear ,thisfunctionisnot alwayscalledbeforeamoduleisdeallocated. For
example, when reference counting is enough to determine that an object is no longer used, the cyclic
garbagecollectorisnotinvolvedand m_freeiscalleddirectly.
Changedinversion3.9: Nolongercalledbeforethemodulestateisallocated.
freefunc m_free
Afunctiontocallduringdeallocationofthemoduleobject,or NULLifnotneeded.
This function is not called if the module state was requested but is not allocated yet. This is the case
immediately after the module is created and before the module is executed ( Py_mod_exec function).
Moreprecisely,thisfunctionisnotcalledif m_sizeisgreaterthan0andthemodulestate(asreturned
byPyModule_GetState() )isNULL.
Changedinversion3.9: Nolongercalledbeforethemodulestateisallocated.
Single-phase initialization
The module initialization function may create and return the module object directly. This is referred to as “single-
phaseinitialization”,andusesoneofthefollowingtwomodulecreationfunctions:
PyObject*PyModule_Create (PyModuleDef *def)
Return value: New reference. Create a new module object, given the definition in def. This behaves like
PyModule_Create2() withmodule_api_version setto PYTHON_API_VERSION .
PyObject*PyModule_Create2 (PyModuleDef *def,intmodule_api_version )
Return value: New reference. Part of the Stable ABI .Create a new module object, given the definition in
def,assumingtheAPIversion module_api_version . Ifthatversiondoesnotmatchtheversionoftherunning
interpreter,a RuntimeWarning isemitted.
8.6. Other Objects 173
The Python/C API, Release 3.13.0
Return NULLwithanexceptionsetonerror.
®Note
Mostusesofthisfunctionshouldbeusing PyModule_Create() instead;onlyusethisifyouaresureyou
needit.
Before it is returned from in the initialization function, the resulting module object is typically populated using
functionslike PyModule_AddObjectRef() .
Multi-phase initialization
Analternatewaytospecifyextensionsistorequest“multi-phaseinitialization”. Extensionmodulescreatedthisway
behave more like Python modules: the initialization is split between the creation phase , when the module object is
created,andthe execution phase ,whenitispopulated. Thedistinctionissimilartothe __new__() and__init__()
methodsofclasses.
Unlike modules created using single-phase initialization, these modules are not singletons: if the sys.modules entry
isremovedandthemoduleisre-imported,anewmoduleobjectiscreated,andtheoldmoduleissubjecttonormal
garbagecollection–aswithPythonmodules. Bydefault,multiplemodulescreatedfromthesamedefinitionshould
beindependent: changestooneshouldnotaffecttheothers. Thismeansthatallstateshouldbespecifictothemodule
object (using e.g. using PyModule_GetState() ), or its contents (such as the module’s __dict__ or individual
classescreatedwith PyType_FromSpec() ).
Allmodulescreatedusingmulti-phaseinitializationareexpectedtosupport sub-interpreters . Makingsuremultiple
modulesareindependentistypicallyenoughtoachievethis.
To request multi-phase initialization, the initialization function (PyInit_modulename) returns a PyModuleDef in-
stance with non-empty m_slots. Before it is returned, the PyModuleDef instance must be initialized with the
followingfunction:
PyObject*PyModuleDef_Init (PyModuleDef *def)
Return value: Borrowed reference. Part of the Stable ABI since version 3.5. Ensures a module definition is a
properlyinitializedPythonobjectthatcorrectlyreportsitstypeandreferencecount.
Returns defcastto PyObject* ,orNULLifanerroroccurred.
Addedinversion3.5.
Them_slotsmemberofthemoduledefinitionmustpointtoanarrayof PyModuleDef_Slot structures:
typePyModuleDef_Slot
intslot
AslotID,chosenfromtheavailablevaluesexplainedbelow.
void* value
Valueoftheslot,whosemeaningdependsontheslotID.
Addedinversion3.5.
Them_slotsarraymustbeterminatedbyaslotwithid0.
Theavailableslottypesare:
Py_mod_create
Specifiesafunctionthatiscalledtocreatethemoduleobjectitself. The valuepointerofthisslotmustpoint
toafunctionofthesignature:
PyObject*create_module (PyObject*spec, PyModuleDef *def)
The function receives a ModuleSpec instance, as defined in PEP 451, and the module definition. It should
returnanewmoduleobject,orsetanerrorandreturn NULL.
174 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Thisfunctionshouldbekeptminimal. Inparticular,itshouldnotcallarbitraryPythoncode,astryingtoimport
thesamemoduleagainmayresultinaninfiniteloop.
Multiple Py_mod_create slotsmaynotbespecifiedinonemoduledefinition.
IfPy_mod_create is not specified, the import machinery will create a normal module object using
PyModule_New() . The name is taken from spec, not the definition, to allow extension modules to dynami-
cally adjust to their place in the module hierarchy and be imported under different names through symlinks,
allwhilesharingasinglemoduledefinition.
Thereisnorequirementforthereturnedobjecttobeaninstanceof PyModule_Type . Anytypecanbeused,
aslongasitsupportssettingandgettingimport-relatedattributes. However,only PyModule_Type instances
maybereturnedifthe PyModuleDef hasnon- NULL m_traverse ,m_clear,m_free;non-zero m_size;or
slotsotherthan Py_mod_create .
Py_mod_exec
Specifiesafunctionthatiscalledto executethemodule. ThisisequivalenttoexecutingthecodeofaPython
module: typically,thisfunctionaddsclassesandconstantstothemodule. Thesignatureofthefunctionis:
intexec_module (PyObject*module )
Ifmultiple Py_mod_exec slotsarespecified,theyareprocessedintheordertheyappearinthe m_slotsarray.
Py_mod_multiple_interpreters
Specifiesoneofthefollowingvalues:
Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED
Themoduledoesnotsupportbeingimportedinsubinterpreters.
Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED
Themodulesupportsbeingimportedinsubinterpreters,butonlywhentheysharethemaininterpreter’s
GIL.(Seeisolating-extensions-howto.)
Py_MOD_PER_INTERPRETER_GIL_SUPPORTED
The module supports being imported in subinterpreters, even when they have their own GIL. (See
isolating-extensions-howto.)
Thisslotdetermineswhetherornotimportingthismoduleinasubinterpreterwillfail.
Multiple Py_mod_multiple_interpreters slotsmaynotbespecifiedinonemoduledefinition.
IfPy_mod_multiple_interpreters is not specified, the import machinery defaults to
Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED .
Addedinversion3.12.
Py_mod_gil
Specifiesoneofthefollowingvalues:
Py_MOD_GIL_USED
The module depends on the presence of the global interpreter lock (GIL), and may access global state
withoutsynchronization.
Py_MOD_GIL_NOT_USED
ThemoduleissafetorunwithoutanactiveGIL.
ThisslotisignoredbyPythonbuildsnotconfiguredwith --disable-gil . Otherwise,itdetermineswhether
ornotimportingthismodulewillcausetheGILtobeautomaticallyenabled. Seewhatsnew313-free-threaded-
cpythonformoredetail.
Multiple Py_mod_gil slotsmaynotbespecifiedinonemoduledefinition.
IfPy_mod_gil isnotspecified,theimportmachinerydefaultsto Py_MOD_GIL_USED .
Addedinversion3.13.
SeePEP 489formoredetailsonmulti-phaseinitialization.
8.6. Other Objects 175
The Python/C API, Release 3.13.0
Low-level module creation functions
The following functions are called under the hood when using multi-phase initialization. They can be used di-
rectly, for examplewhen creating moduleobjects dynamically. Note thatboth PyModule_FromDefAndSpec and
PyModule_ExecDef mustbecalledtofullyinitializeamodule.
PyObject*PyModule_FromDefAndSpec (PyModuleDef *def,PyObject*spec )
Return value: New reference. Create a new module object, given the definition in defand the
ModuleSpec spec. This behaves like PyModule_FromDefAndSpec2() withmodule_api_version set to
PYTHON_API_VERSION .
Addedinversion3.5.
PyObject*PyModule_FromDefAndSpec2 (PyModuleDef *def,PyObject*spec,intmodule_api_version )
Return value: New reference. Part of the StableABI since version 3.7. Createanewmoduleobject,giventhe
definitionin defandtheModuleSpec spec,assumingtheAPIversion module_api_version . Ifthatversiondoes
notmatchtheversionoftherunninginterpreter,a RuntimeWarning isemitted.
Return NULLwithanexceptionsetonerror.
®Note
Mostusesofthisfunctionshouldbeusing PyModule_FromDefAndSpec() instead;onlyusethisifyou
aresureyouneedit.
Addedinversion3.5.
intPyModule_ExecDef (PyObject*module, PyModuleDef *def)
Part of the StableABI since version 3.7. Processanyexecutionslots( Py_mod_exec )givenin def.
Addedinversion3.5.
intPyModule_SetDocString (PyObject*module,constchar*docstring )
Part of the Stable ABI since version 3.7. Set the docstring for moduletodocstring. This function is
called automatically when creating a module from PyModuleDef , using either PyModule_Create or
PyModule_FromDefAndSpec .
Addedinversion3.5.
intPyModule_AddFunctions (PyObject*module, PyMethodDef *functions )
Part of theStableABI since version 3.7. Addthefunctionsfromthe NULLterminated functionsarrayto module.
Refertothe PyMethodDef documentationfordetailsonindividualentries(duetothelackofasharedmodule
namespace, module level “functions” implemented in C typically receive the module as their first parameter,
making them similar to instance methods on Python classes). This function is called automatically when
creatingamodulefrom PyModuleDef ,usingeither PyModule_Create orPyModule_FromDefAndSpec .
Addedinversion3.5.
Support functions
Themoduleinitializationfunction(ifusingsinglephaseinitialization)orafunctioncalledfromamoduleexecution
slot(ifusingmulti-phaseinitialization),canusethefollowingfunctionstohelpinitializethemodulestate:
intPyModule_AddObjectRef (PyObject*module,constchar*name, PyObject*value )
Part of the Stable ABI since version 3.10. Add an object to moduleasname. This is a convenience function
whichcanbeusedfromthemodule’sinitializationfunction.
Onsuccess,return 0. Onerror,raiseanexceptionandreturn -1.
Return -1ifvalueisNULL.Itmustbecalledwithanexceptionraisedinthiscase.
Exampleusage:
176 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
static int
add_spam (PyObject *module, int value)
{
PyObject *obj =PyLong_FromLong(value);
if(obj ==NULL ){
return -1;
}
int res =PyModule_AddObjectRef(module, "spam ",obj);
Py_DECREF(obj);
return res;
}
Theexamplecanalsobewrittenwithoutcheckingexplicitlyif objisNULL:
static int
add_spam (PyObject *module, int value)
{
PyObject *obj =PyLong_FromLong(value);
int res =PyModule_AddObjectRef(module, "spam ",obj);
Py_XDECREF(obj);
return res;
}
Notethat Py_XDECREF() shouldbeusedinsteadof Py_DECREF() inthiscase,since objcanbe NULL.
The number of different namestrings passed to this function should be kept small, usually by
only using statically allocated strings as name. For names that aren’t known at compile time, pre-
fer calling PyUnicode_FromString() andPyObject_SetAttr() directly. For more details, see
PyUnicode_InternFromString() ,whichmaybeusedinternallytocreateakeyobject.
Addedinversion3.10.
intPyModule_Add (PyObject*module,constchar*name, PyObject*value )
Part of the StableABI since version 3.13. Similarto PyModule_AddObjectRef() ,but“steals”areference
tovalue. Itcanbecalledwitharesultoffunctionthatreturnsanewreferencewithoutbotheringtocheckits
resultorevensavingittoavariable.
Exampleusage:
if(PyModule_Add(module, "spam ",PyBytes_FromString(value)) <0){
goto error;
}
Addedinversion3.13.
intPyModule_AddObject (PyObject*module,constchar*name, PyObject*value )
Part of the Stable ABI .Similar to PyModule_AddObjectRef() , but steals a reference to valueon success
(ifitreturns 0).
The new PyModule_Add() orPyModule_AddObjectRef() functions are recommended, since it is easy
tointroducereferenceleaksbymisusingthe PyModule_AddObject() function.
®Note
Unlikeotherfunctionsthatstealreferences, PyModule_AddObject() onlyreleasesthereferenceto value
on success .
Thismeansthatitsreturnvaluemustbechecked,andcallingcodemust Py_XDECREF() valuemanually
onerror.
8.6. Other Objects 177
The Python/C API, Release 3.13.0
Exampleusage:
PyObject *obj =PyBytes_FromString(value);
if(PyModule_AddObject(module, "spam ",obj) <0){
// If 'obj' is not NULL and PyModule_AddObject() failed,
// 'obj' strong reference must be deleted with Py_XDECREF().
// If 'obj' is NULL, Py_XDECREF() does nothing.
Py_XDECREF(obj);
goto error;
}
// PyModule_AddObject() stole a reference to obj:
// Py_XDECREF(obj) is not needed here.
Deprecatedsinceversion3.13: PyModule_AddObject() issoft deprecated .
intPyModule_AddIntConstant (PyObject*module,constchar*name,longvalue )
Part of the Stable ABI .Add an integer constant to moduleasname. This convenience function can be used
fromthemodule’sinitializationfunction. Return -1withanexceptionsetonerror, 0onsuccess.
Thisisaconveniencefunctionthatcalls PyLong_FromLong() andPyModule_AddObjectRef() ;seetheir
documentationfordetails.
intPyModule_AddStringConstant (PyObject*module,constchar*name,constchar*value )
Part of the StableABI .Addastringconstantto moduleasname. Thisconveniencefunctioncanbeusedfrom
themodule’sinitializationfunction. Thestring valuemustbe NULL-terminated. Return -1withanexception
setonerror, 0onsuccess.
This is a convenience function that calls PyUnicode_InternFromString() and
PyModule_AddObjectRef() ;seetheirdocumentationfordetails.
PyModule_AddIntMacro (module,macro )
Add an int constant to module. The name and the value are taken from macro. For example
PyModule_AddIntMacro(module, AF_INET) addstheintconstant AF_INETwiththevalueof AF_INET
tomodule. Return -1withanexceptionsetonerror, 0onsuccess.
PyModule_AddStringMacro (module,macro )
Addastringconstantto module.
intPyModule_AddType (PyObject*module, PyTypeObject *type )
Part of the StableABI since version 3.10. Addatypeobjectto module. Thetypeobjectisfinalizedbycalling
internally PyType_Ready() . Thenameofthetypeobjectistakenfromthelastcomponentof tp_nameafter
dot. Return -1withanexceptionsetonerror, 0onsuccess.
Addedinversion3.9.
intPyUnstable_Module_SetGIL (PyObject*module,void*gil )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Indicate that moduledoes or does not support running without the global interpreter lock (GIL), using one
ofthevaluesfrom Py_mod_gil . Itmustbecalledduring module’sinitializationfunction. Ifthisfunctionis
not called during module initialization, the import machinery assumes the module does not support running
without the GIL. This function is only available in Python builds configured with --disable-gil . Return
-1withanexceptionsetonerror, 0onsuccess.
Addedinversion3.13.
178 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
Module lookup
Single-phaseinitializationcreatessingletonmodulesthatcanbelookedupinthecontextofthecurrentinterpreter.
Thisallowsthemoduleobjecttoberetrievedlaterwithonlyareferencetothemoduledefinition.
Thesefunctionswillnotworkonmodulescreatedusingmulti-phaseinitialization,sincemultiplesuchmodulescan
becreatedfromasingledefinition.
PyObject*PyState_FindModule (PyModuleDef *def)
Return value: Borrowed reference. Part of the StableABI .Returnsthemoduleobjectthatwascreatedfrom def
for the current interpreter. This method requires that the module object has been attached to the interpreter
statewith PyState_AddModule() beforehand. Incasethecorrespondingmoduleobjectisnotfoundorhas
notbeenattachedtotheinterpreterstateyet,itreturns NULL.
intPyState_AddModule (PyObject*module, PyModuleDef *def)
Part of the StableABI since version 3.3. Attachesthemoduleobjectpassedtothefunctiontotheinterpreter
state. Thisallowsthemoduleobjecttobeaccessiblevia PyState_FindModule() .
Onlyeffectiveonmodulescreatedusingsingle-phaseinitialization.
Python calls PyState_AddModule automatically after importing a module, so it is unnecessary (but harm-
less) to call it from module initialization code. An explicit call is needed only if the module’s own init code
subsequentlycalls PyState_FindModule . Thefunctionismainlyintendedforimplementingalternativeim-
portmechanisms(eitherbycallingitdirectly,orbyreferringtoitsimplementationfordetailsoftherequired
stateupdates).
ThecallermustholdtheGIL.
Return -1withanexceptionsetonerror, 0onsuccess.
Addedinversion3.3.
intPyState_RemoveModule (PyModuleDef *def)
Part of the Stable ABI since version 3.3. Removes the module object created from deffrom the interpreter
state. Return -1withanexceptionsetonerror, 0onsuccess.
ThecallermustholdtheGIL.
Addedinversion3.3.
8.6.3Iterator Objects
Pythonprovidestwogeneral-purposeiteratorobjects. Thefirst,asequenceiterator,workswithanarbitrarysequence
supportingthe __getitem__() method. Thesecondworkswithacallableobjectandasentinelvalue,callingthe
callableforeachiteminthesequence,andendingtheiterationwhenthesentinelvalueisreturned.
PyTypeObject PySeqIter_Type
Part of the StableABI .Typeobjectforiteratorobjectsreturnedby PySeqIter_New() andtheone-argument
formofthe iter()built-infunctionforbuilt-insequencetypes.
intPySeqIter_Check (PyObject*op)
Returntrueifthetypeof opisPySeqIter_Type . Thisfunctionalwayssucceeds.
PyObject*PySeqIter_New (PyObject*seq)
Return value: New reference. Part of the Stable ABI .Return an iterator that works with a general sequence
object, seq. Theiterationendswhenthesequenceraises IndexError forthesubscriptingoperation.
PyTypeObject PyCallIter_Type
Part of theStableABI .Typeobjectforiteratorobjectsreturnedby PyCallIter_New() andthetwo-argument
formofthe iter()built-infunction.
intPyCallIter_Check (PyObject*op)
Returntrueifthetypeof opisPyCallIter_Type . Thisfunctionalwayssucceeds.
8.6. Other Objects 179
The Python/C API, Release 3.13.0
PyObject*PyCallIter_New (PyObject*callable, PyObject*sentinel )
Return value: New reference. Part of the StableABI .Returnanewiterator. Thefirstparameter, callable,can
beanyPythoncallableobjectthatcanbecalledwithnoparameters;eachcalltoitshouldreturnthenextitem
intheiteration. When callablereturnsavalueequalto sentinel,theiterationwillbeterminated.
8.6.4Descriptor Objects
“Descriptors”areobjectsthatdescribesomeattributeofanobject. Theyarefoundinthedictionaryoftypeobjects.
PyTypeObject PyProperty_Type
Part of the StableABI .Thetypeobjectforthebuilt-indescriptortypes.
PyObject*PyDescr_NewGetSet (PyTypeObject *type,struct PyGetSetDef *getset )
Return value: New reference. Part of the StableABI .
PyObject*PyDescr_NewMember (PyTypeObject *type,struct PyMemberDef *meth )
Return value: New reference. Part of the StableABI .
PyObject*PyDescr_NewMethod (PyTypeObject *type,struct PyMethodDef *meth )
Return value: New reference. Part of the StableABI .
PyObject*PyDescr_NewWrapper (PyTypeObject *type,structwrapperbase*wrapper,void*wrapped )
Return value: New reference.
PyObject*PyDescr_NewClassMethod (PyTypeObject *type, PyMethodDef *method )
Return value: New reference. Part of the StableABI .
intPyDescr_IsData (PyObject*descr )
Returnnon-zeroifthedescriptorobjects descrdescribesadataattribute,or 0ifitdescribesamethod. descr
mustbeadescriptorobject;thereisnoerrorchecking.
PyObject*PyWrapper_New (PyObject*,PyObject*)
Return value: New reference. Part of the StableABI .
8.6.5Slice Objects
PyTypeObject PySlice_Type
Part of the StableABI .Thetypeobjectforsliceobjects. Thisisthesameas sliceinthePythonlayer.
intPySlice_Check (PyObject*ob)
Returntrueif obisasliceobject; obmustnotbe NULL.Thisfunctionalwayssucceeds.
PyObject*PySlice_New (PyObject*start, PyObject*stop, PyObject*step )
Return value: New reference. Part of the StableABI .Returnanewsliceobjectwiththegivenvalues. The start,
stop, andstepparameters are used as the values of the slice object attributes of the same names. Any of the
valuesmaybe NULL,inwhichcasethe Nonewillbeusedforthecorrespondingattribute.
Return NULLwithanexceptionsetifthenewobjectcouldnotbeallocated.
intPySlice_GetIndices (PyObject*slice, Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t
*step )
Part of the StableABI .Retrievethestart,stopandstepindicesfromthesliceobject slice,assumingasequence
oflength length. Treatsindicesgreaterthan lengthaserrors.
Returns 0onsuccessand -1onerrorwithnoexceptionset(unlessoneoftheindiceswasnot Noneandfailed
tobeconvertedtoaninteger,inwhichcase -1isreturnedwithanexceptionset).
Youprobablydonotwanttousethisfunction.
Changedinversion3.2: Theparametertypeforthe sliceparameterwas PySliceObject* before.
180 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
intPySlice_GetIndicesEx (PyObject*slice, Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t
*step, Py_ssize_t *slicelength )
Part of the StableABI .Usablereplacementfor PySlice_GetIndices() . Retrievethestart,stop,andstep
indices from the slice object sliceassuming a sequence of length length, and store the length of the slice in
slicelength. Outofboundsindicesareclippedinamannerconsistentwiththehandlingofnormalslices.
Return 0onsuccessand -1onerrorwithanexceptionset.
®Note
Thisfunctionisconsiderednotsafeforresizablesequences. Itsinvocationshouldbereplacedbyacombi-
nationof PySlice_Unpack() andPySlice_AdjustIndices() where
if(PySlice_GetIndicesEx(slice, length, &start, &stop, &step, &slicelength)
,→<0){
// return error
}
isreplacedby
if(PySlice_Unpack(slice, &start, &stop, &step) <0){
// return error
}
slicelength =PySlice_AdjustIndices(length, &start, &stop, step);
Changedinversion3.2: Theparametertypeforthe sliceparameterwas PySliceObject* before.
Changed in version 3.6.1: If Py_LIMITED_API is not set or set to the value between 0x03050400 and
0x03060000 (not including) or 0x03060100 or higher PySlice_GetIndicesEx() is implemented as a
macro using PySlice_Unpack() andPySlice_AdjustIndices() . Arguments start,stopandstepare
evaluatedmorethanonce.
Deprecated since version 3.6.1: If Py_LIMITED_API is set to the value less than 0x03050400 or between
0x03060000 and0x03060100 (notincluding) PySlice_GetIndicesEx() isadeprecatedfunction.
intPySlice_Unpack (PyObject*slice, Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step )
Part of the StableABI since version 3.7. Extractthestart,stopandstepdatamembersfromasliceobjectasC
integers. Silentlyreducevalueslargerthan PY_SSIZE_T_MAX toPY_SSIZE_T_MAX ,silentlyboostthestart
andstopvalueslessthan PY_SSIZE_T_MIN toPY_SSIZE_T_MIN ,andsilentlyboostthestepvalueslessthan
-PY_SSIZE_T_MAX to-PY_SSIZE_T_MAX .
Return -1withanexceptionsetonerror, 0onsuccess.
Addedinversion3.6.1.
Py_ssize_t PySlice_AdjustIndices (Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t step)
Part of the Stable ABI since version 3.7. Adjust start/end slice indices assuming a sequence of the specified
length. Outofboundsindicesareclippedinamannerconsistentwiththehandlingofnormalslices.
Returnthelengthoftheslice. Alwayssuccessful. Doesn’tcallPythoncode.
Addedinversion3.6.1.
Ellipsis Object
PyObject*Py_Ellipsis
ThePython Ellipsis object. Thisobjecthasnomethods. Like Py_None,itisan immortalsingletonobject.
Changedinversion3.12: Py_Ellipsis isimmortal.
8.6. Other Objects 181
The Python/C API, Release 3.13.0
8.6.6MemoryView objects
Amemoryview objectexposestheClevel buffer interface asaPythonobjectwhichcanthenbepassedaroundlike
anyotherobject.
PyObject*PyMemoryView_FromObject (PyObject*obj)
Return value: New reference. Part of the Stable ABI .Create a memoryview object from an object that pro-
videsthebufferinterface. If objsupportswritablebufferexports, thememoryviewobjectwillberead/write,
otherwiseitmaybeeitherread-onlyorread/writeatthediscretionoftheexporter.
PyBUF_READ
Flagtorequestareadonlybuffer.
PyBUF_WRITE
Flagtorequestawritablebuffer.
PyObject*PyMemoryView_FromMemory (char*mem, Py_ssize_t size,intflags )
Return value: New reference. Part of the StableABI since version 3.7. Createamemoryviewobjectusing mem
astheunderlyingbuffer. flagscanbeoneof PyBUF_READ orPyBUF_WRITE .
Addedinversion3.3.
PyObject*PyMemoryView_FromBuffer (const Py_buffer*view )
Return value: New reference. Part of the StableABI since version 3.11. Createamemoryviewobjectwrapping
the given buffer structure view. For simple byte buffers, PyMemoryView_FromMemory() is the preferred
function.
PyObject*PyMemoryView_GetContiguous (PyObject*obj,intbuffertype,charorder )
Return value: New reference. Part of the Stable ABI .Create a memoryview object to a contiguous chunk of
memory(ineither‘C’or‘F’ortran order)fromanobjectthatdefinesthebufferinterface. Ifmemoryiscontigu-
ous,thememoryviewobjectpointstotheoriginalmemory. Otherwise,acopyismadeandthememoryview
pointstoanewbytesobject.
buffertypecanbeoneof PyBUF_READ orPyBUF_WRITE .
intPyMemoryView_Check (PyObject*obj)
Return true if the object objis a memoryview object. It is not currently allowed to create subclasses of
memoryview . Thisfunctionalwayssucceeds.
Py_buffer*PyMemoryView_GET_BUFFER (PyObject*mview )
Return a pointer to the memoryview’s private copy of the exporter’s buffer. mview mustbe a memoryview
instance;thismacrodoesn’tcheckitstype,youmustdoityourselforyouwillriskcrashes.
PyObject*PyMemoryView_GET_BASE (PyObject*mview )
Returneitherapointertotheexportingobjectthatthememoryviewisbasedonor NULLifthememoryviewhas
beencreatedbyoneofthefunctions PyMemoryView_FromMemory() orPyMemoryView_FromBuffer() .
mview mustbeamemoryviewinstance.
8.6.7Weak Reference Objects
Pythonsupports weak references asfirst-classobjects. Therearetwospecificobjecttypeswhichdirectlyimplement
weakreferences. Thefirstisasimplereferenceobject,andthesecondactsasaproxyfortheoriginalobjectasmuch
asitcan.
intPyWeakref_Check (PyObject*ob)
Returnnon-zeroif obiseitherareferenceorproxyobject. Thisfunctionalwayssucceeds.
intPyWeakref_CheckRef (PyObject*ob)
Returnnon-zeroif obisareferenceobject. Thisfunctionalwayssucceeds.
intPyWeakref_CheckProxy (PyObject*ob)
Returnnon-zeroif obisaproxyobject. Thisfunctionalwayssucceeds.
182 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyWeakref_NewRef (PyObject*ob,PyObject*callback )
Return value: New reference. Part of the Stable ABI .Return a weak reference object for the object ob. This
will always return a new reference, but is not guaranteed to create a new object; an existing reference object
maybereturned. Thesecondparameter, callback,canbeacallableobjectthatreceivesnotificationwhen obis
garbagecollected;itshouldacceptasingleparameter,whichwillbetheweakreferenceobjectitself. callback
mayalsobe NoneorNULL.Ifobisnotaweaklyreferenceableobject,orif callbackisnotcallable, None,or
NULL,thiswillreturn NULLandraise TypeError .
PyObject*PyWeakref_NewProxy (PyObject*ob,PyObject*callback )
Return value: New reference. Part of the StableABI .Returnaweakreferenceproxyobjectfortheobject ob.
Thiswillalwaysreturnanewreference,butisnotguaranteedtocreateanewobject;anexistingproxyobject
maybereturned. Thesecondparameter, callback,canbeacallableobjectthatreceivesnotificationwhen obis
garbagecollected;itshouldacceptasingleparameter,whichwillbetheweakreferenceobjectitself. callback
mayalsobe NoneorNULL.Ifobisnotaweaklyreferenceableobject,orif callbackisnotcallable, None,or
NULL,thiswillreturn NULLandraise TypeError .
intPyWeakref_GetRef (PyObject*ref,PyObject**pobj )
Part of the StableABI since version 3.13. Geta strong reference tothereferencedobjectfromaweakreference,
ref,into *pobj.
•Onsuccess,set *pobjtoanew strong reference tothereferencedobjectandreturn1.
•Ifthereferenceisdead,set *pobjtoNULLandreturn0.
•Onerror,raiseanexceptionandreturn-1.
Addedinversion3.13.
PyObject*PyWeakref_GetObject (PyObject*ref)
Return value: Borrowed reference. Part of the StableABI .Returna borrowed reference tothereferencedobject
fromaweakreference, ref. Ifthereferentisnolongerlive,returns Py_None.
®Note
This function returns a borrowed reference to the referenced object. This means that you should always
callPy_INCREF() ontheobjectexceptwhenitcannotbedestroyedbeforethelastusageoftheborrowed
reference.
Deprecatedsinceversion3.13,willberemovedinversion3.15: Use PyWeakref_GetRef() instead.
PyObject*PyWeakref_GET_OBJECT (PyObject*ref)
Return value: Borrowed reference. Similarto PyWeakref_GetObject() ,butdoesnoerrorchecking.
Deprecatedsinceversion3.13,willberemovedinversion3.15: Use PyWeakref_GetRef() instead.
voidPyObject_ClearWeakRefs (PyObject*object )
Part of the StableABI .Thisfunctioniscalledbythe tp_dealloc handlertoclearweakreferences.
Thisiteratesthroughtheweakreferencesfor objectandcallscallbacksforthosereferenceswhichhaveone. It
returnswhenallcallbackshavebeenattempted.
voidPyUnstable_Object_ClearWeakRefsNoCallbacks (PyObject*object )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Clearstheweakrefsfor objectwithoutcallingthecallbacks.
8.6. Other Objects 183
The Python/C API, Release 3.13.0
Thisfunctioniscalledbythe tp_dealloc handlerfortypeswithfinalizers(i.e., __del__() ). Thehandler
forthoseobjectsfirstcalls PyObject_ClearWeakRefs() toclearweakrefsandcalltheircallbacks,thenthe
finalizer,andfinallythisfunctiontoclearanyweakrefsthatmayhavebeencreatedbythefinalizer.
Inmostcircumstances,it’smoreappropriatetouse PyObject_ClearWeakRefs() toclearweakrefsinstead
ofthisfunction.
Addedinversion3.13.
8.6.8Capsules
Refertousing-capsulesformoreinformationonusingtheseobjects.
Addedinversion3.1.
typePyCapsule
This subtype of PyObject represents an opaque value, useful for C extension modules who need to pass an
opaquevalue(asa void*pointer)throughPythoncodetootherCcode. ItisoftenusedtomakeaCfunction
pointer defined in one module available to other modules, so the regular import mechanism can be used to
accessCAPIsdefinedindynamicallyloadedmodules.
typePyCapsule_Destructor
Part of the StableABI .Thetypeofadestructorcallbackforacapsule. Definedas:
typedef void (*PyCapsule_Destructor)(PyObject *);
SeePyCapsule_New() forthesemanticsofPyCapsule_Destructorcallbacks.
intPyCapsule_CheckExact (PyObject*p)
Returntrueifitsargumentisa PyCapsule . Thisfunctionalwayssucceeds.
PyObject*PyCapsule_New (void*pointer,constchar*name, PyCapsule_Destructor destructor )
Return value: New reference. Part of the Stable ABI .Create a PyCapsule encapsulating the pointer. The
pointerargumentmaynotbe NULL.
Onfailure,setanexceptionandreturn NULL.
Thenamestringmayeitherbe NULLorapointertoavalidCstring. Ifnon- NULL,thisstringmustoutlivethe
capsule. (Thoughitispermittedtofreeitinsidethe destructor.)
Ifthe destructorargumentisnot NULL,itwillbecalledwiththecapsuleasitsargumentwhenitisdestroyed.
If this capsule will be stored as an attribute of a module, the nameshould be specified as modulename.
attributename . Thiswillenableothermodulestoimportthecapsuleusing PyCapsule_Import() .
void* PyCapsule_GetPointer (PyObject*capsule,constchar*name )
Part of the StableABI .Retrievethe pointerstoredinthecapsule. Onfailure,setanexceptionandreturn NULL.
Thenameparametermustcompareexactlytothenamestoredinthecapsule. Ifthenamestoredinthecapsule
isNULL, thenamepassed in must also be NULL. Python uses the C function strcmp() to compare capsule
names.
PyCapsule_Destructor PyCapsule_GetDestructor (PyObject*capsule )
Part of the Stable ABI .Return the current destructor stored in the capsule. On failure, set an exception and
return NULL.
Itislegalforacapsuletohavea NULLdestructor. Thismakesa NULLreturncodesomewhatambiguous;use
PyCapsule_IsValid() orPyErr_Occurred() todisambiguate.
void* PyCapsule_GetContext (PyObject*capsule )
Part of the StableABI .Returnthecurrentcontextstoredinthecapsule. Onfailure,setanexceptionandreturn
NULL.
It is legal for a capsule to have a NULLcontext. This makes a NULLreturn code somewhat ambiguous; use
PyCapsule_IsValid() orPyErr_Occurred() todisambiguate.
184 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
constchar* PyCapsule_GetName (PyObject*capsule )
Part of the StableABI .Returnthecurrentnamestoredinthecapsule. Onfailure,setanexceptionandreturn
NULL.
It is legal for a capsule to have a NULLname. This makes a NULLreturn code somewhat ambiguous; use
PyCapsule_IsValid() orPyErr_Occurred() todisambiguate.
void* PyCapsule_Import (constchar*name,intno_block )
Part of theStableABI .ImportapointertoaCobjectfromacapsuleattributeinamodule. The nameparameter
shouldspecifythefullnametotheattribute,asin module.attribute . The namestoredinthecapsulemust
matchthisstringexactly.
Returnthecapsule’sinternal pointeronsuccess. Onfailure,setanexceptionandreturn NULL.
Changedinversion3.3: no_blockhasnoeffectanymore.
intPyCapsule_IsValid (PyObject*capsule,constchar*name )
Part of the Stable ABI .Determines whether or not capsuleis a valid capsule. A valid capsule is non- NULL,
passes PyCapsule_CheckExact() ,hasanon- NULLpointerstoredinit,anditsinternalnamematchesthe
nameparameter. (See PyCapsule_GetPointer() forinformationonhowcapsulenamesarecompared.)
In other words, if PyCapsule_IsValid() returns a true value, calls to any of the accessors (any function
startingwith PyCapsule_Get )areguaranteedtosucceed.
Returnanonzerovalueiftheobjectisvalidandmatchesthenamepassedin. Return 0otherwise. Thisfunction
willnotfail.
intPyCapsule_SetContext (PyObject*capsule,void*context )
Part of the StableABI .Setthecontextpointerinside capsuletocontext.
Return 0onsuccess. Returnnonzeroandsetanexceptiononfailure.
intPyCapsule_SetDestructor (PyObject*capsule, PyCapsule_Destructor destructor )
Part of the StableABI .Setthedestructorinside capsuletodestructor.
Return 0onsuccess. Returnnonzeroandsetanexceptiononfailure.
intPyCapsule_SetName (PyObject*capsule,constchar*name )
Part of the StableABI .Setthenameinside capsuletoname. Ifnon- NULL,thenamemustoutlivethecapsule.
Iftheprevious namestoredinthecapsulewasnot NULL,noattemptismadetofreeit.
Return 0onsuccess. Returnnonzeroandsetanexceptiononfailure.
intPyCapsule_SetPointer (PyObject*capsule,void*pointer )
Part of the StableABI .Setthevoidpointerinside capsuletopointer. Thepointermaynotbe NULL.
Return 0onsuccess. Returnnonzeroandsetanexceptiononfailure.
8.6.9Frame Objects
typePyFrameObject
Part of the LimitedAPI (as an opaque struct). TheCstructureoftheobjectsusedtodescribeframeobjects.
Therearenopublicmembersinthisstructure.
Changed in version 3.11: The members of this structure were removed from the public C API. Refer to the
What’sNewentryfordetails.
ThePyEval_GetFrame() andPyThreadState_GetFrame() functionscanbeusedtogetaframeobject.
Seealso Reflection.
PyTypeObject PyFrame_Type
Thetypeofframeobjects. Itisthesameobjectas types.FrameType inthePythonlayer.
Changedinversion3.11: Previously,thistypewasonlyavailableafterincluding <frameobject.h> .
8.6. Other Objects 185
The Python/C API, Release 3.13.0
intPyFrame_Check (PyObject*obj)
Returnnon-zeroif objisaframeobject.
Changedinversion3.11: Previously,thisfunctionwasonlyavailableafterincluding <frameobject.h> .
PyFrameObject *PyFrame_GetBack (PyFrameObject *frame )
Return value: New reference. Getthe framenextouterframe.
Returna strong reference ,orNULLifframehasnoouterframe.
Addedinversion3.9.
PyObject*PyFrame_GetBuiltins (PyFrameObject *frame )
Return value: New reference. Getthe frame’sf_builtins attribute.
Returna strong reference . Theresultcannotbe NULL.
Addedinversion3.11.
PyCodeObject *PyFrame_GetCode (PyFrameObject *frame )
Return value: New reference. Part of the StableABI since version 3.10. Getthe framecode.
Returna strong reference .
Theresult(framecode)cannotbe NULL.
Addedinversion3.9.
PyObject*PyFrame_GetGenerator (PyFrameObject *frame )
Return value: New reference. Getthegenerator,coroutine,orasyncgeneratorthatownsthisframe,or NULLif
thisframeisnotownedbyagenerator. Doesnotraiseanexception,evenifthereturnvalueis NULL.
Returna strong reference ,orNULL.
Addedinversion3.11.
PyObject*PyFrame_GetGlobals (PyFrameObject *frame )
Return value: New reference. Getthe frame’sf_globals attribute.
Returna strong reference . Theresultcannotbe NULL.
Addedinversion3.11.
intPyFrame_GetLasti (PyFrameObject *frame )
Getthe frame’sf_lastiattribute.
Returns-1if frame.f_lasti isNone.
Addedinversion3.11.
PyObject*PyFrame_GetVar (PyFrameObject *frame, PyObject*name )
Return value: New reference. Getthevariable nameofframe.
•Returna strong reference tothevariablevalueonsuccess.
•Raise NameError andreturn NULLifthevariabledoesnotexist.
•Raiseanexceptionandreturn NULLonerror.
nametypemustbea str.
Addedinversion3.12.
PyObject*PyFrame_GetVarString (PyFrameObject *frame,constchar*name )
Return value: New reference. Similarto PyFrame_GetVar() ,butthevariablenameisaCstringencodedin
UTF-8.
Addedinversion3.12.
186 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
PyObject*PyFrame_GetLocals (PyFrameObject *frame )
Return value: New reference. Getthe frame’sf_locals attribute. Iftheframereferstoan optimized scope ,
thisreturnsawrite-throughproxyobjectthatallowsmodifyingthelocals. Inallothercases(classes,modules,
exec(),eval())itreturnsthemappingrepresentingtheframelocalsdirectly(asdescribedfor locals() ).
Returna strong reference .
Addedinversion3.11.
Changedinversion3.13: Aspartof PEP 667,returnaproxyobjectforoptimizedscopes.
intPyFrame_GetLineNumber (PyFrameObject *frame )
Part of the StableABI since version 3.10. Returnthelinenumberthat frameiscurrentlyexecuting.
Internal Frames
Unlessusing PEP 523,youwillnotneedthis.
struct _PyInterpreterFrame
Theinterpreter’sinternalframerepresentation.
Addedinversion3.11.
PyObject*PyUnstable_InterpreterFrame_GetCode (struct _PyInterpreterFrame *frame );
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Returna strong reference tothecodeobjectfortheframe.
Addedinversion3.12.
intPyUnstable_InterpreterFrame_GetLasti (struct _PyInterpreterFrame *frame );
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Returnthebyteoffsetintothelastexecutedinstruction.
Addedinversion3.12.
intPyUnstable_InterpreterFrame_GetLine (struct _PyInterpreterFrame *frame );
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Returnthecurrentlyexecutinglinenumber,or-1ifthereisnolinenumber.
Addedinversion3.12.
8.6.10 Generator Objects
GeneratorobjectsarewhatPythonusestoimplementgeneratoriterators. Theyarenormallycreatedbyiteratingover
afunctionthatyieldsvalues,ratherthanexplicitlycalling PyGen_New() orPyGen_NewWithQualName() .
8.6. Other Objects 187
The Python/C API, Release 3.13.0
typePyGenObject
TheCstructureusedforgeneratorobjects.
PyTypeObject PyGen_Type
Thetypeobjectcorrespondingtogeneratorobjects.
intPyGen_Check (PyObject*ob)
Returntrueif obisageneratorobject; obmustnotbe NULL.Thisfunctionalwayssucceeds.
intPyGen_CheckExact (PyObject*ob)
Returntrueif ob’stypeis PyGen_Type ;obmustnotbe NULL.Thisfunctionalwayssucceeds.
PyObject*PyGen_New (PyFrameObject *frame )
Return value: New reference. Createandreturnanewgeneratorobjectbasedonthe frameobject. Areference
toframeisstolenbythisfunction. Theargumentmustnotbe NULL.
PyObject*PyGen_NewWithQualName (PyFrameObject *frame, PyObject*name, PyObject*qualname )
Return value: New reference. Create and return a new generator object based on the frameobject, with
__name__ and__qualname__ set to nameandqualname. A reference to frameis stolen by this function.
Theframeargumentmustnotbe NULL.
8.6.11 Coroutine Objects
Addedinversion3.5.
Coroutineobjectsarewhatfunctionsdeclaredwithan asynckeywordreturn.
typePyCoroObject
TheCstructureusedforcoroutineobjects.
PyTypeObject PyCoro_Type
Thetypeobjectcorrespondingtocoroutineobjects.
intPyCoro_CheckExact (PyObject*ob)
Returntrueif ob’stypeis PyCoro_Type ;obmustnotbe NULL.Thisfunctionalwayssucceeds.
PyObject*PyCoro_New (PyFrameObject *frame, PyObject*name, PyObject*qualname )
Return value: New reference. Create and return a new coroutine object based on the frameobject, with
__name__ and__qualname__ set to nameandqualname. A reference to frameis stolen by this function.
Theframeargumentmustnotbe NULL.
8.6.12 Context Variables Objects
Addedinversion3.7.
Changedinversion3.7.1:
®Note
InPython3.7.1thesignaturesofallcontextvariablesCAPIswere changedtouse PyObject pointersinstead
ofPyContext ,PyContextVar ,and PyContextToken ,e.g.:
// in 3.7.0:
PyContext *PyContext_New (void );
// in 3.7.1+:
PyObject *PyContext_New (void );
Seebpo-34762 formoredetails.
ThissectiondetailsthepublicCAPIforthe contextvars module.
188 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
typePyContext
TheCstructureusedtorepresenta contextvars.Context object.
typePyContextVar
TheCstructureusedtorepresenta contextvars.ContextVar object.
typePyContextToken
TheCstructureusedtorepresenta contextvars.Token object.
PyTypeObject PyContext_Type
Thetypeobjectrepresentingthe contexttype.
PyTypeObject PyContextVar_Type
Thetypeobjectrepresentingthe context variable type.
PyTypeObject PyContextToken_Type
Thetypeobjectrepresentingthe context variable token type.
Type-checkmacros:
intPyContext_CheckExact (PyObject*o)
Returntrueif oisoftype PyContext_Type .omustnotbe NULL.Thisfunctionalwayssucceeds.
intPyContextVar_CheckExact (PyObject*o)
Returntrueif oisoftype PyContextVar_Type .omustnotbe NULL.Thisfunctionalwayssucceeds.
intPyContextToken_CheckExact (PyObject*o)
Returntrueif oisoftype PyContextToken_Type .omustnotbe NULL.Thisfunctionalwayssucceeds.
Contextobjectmanagementfunctions:
PyObject*PyContext_New (void)
Return value: New reference. Createanewemptycontextobject. Returns NULLifanerrorhasoccurred.
PyObject*PyContext_Copy (PyObject*ctx)
Return value: New reference. Createashallowcopyofthepassed ctxcontextobject. Returns NULLifanerror
hasoccurred.
PyObject*PyContext_CopyCurrent (void)
Return value: New reference. Create a shallow copy of the current thread context. Returns NULLif an error
hasoccurred.
intPyContext_Enter (PyObject*ctx)
Setctxasthecurrentcontextforthecurrentthread. Returns 0onsuccess,and -1onerror.
intPyContext_Exit (PyObject*ctx)
Deactivatethe ctxcontextandrestorethepreviouscontextasthecurrentcontextforthecurrentthread. Returns
0onsuccess,and -1onerror.
Contextvariablefunctions:
PyObject*PyContextVar_New (constchar*name, PyObject*def)
Return value: New reference. Createanew ContextVar object. The nameparameterisusedforintrospection
anddebugpurposes. The defparameterspecifiesadefaultvalueforthecontextvariable,or NULLfornodefault.
Ifanerrorhasoccurred,thisfunctionreturns NULL.
intPyContextVar_Get (PyObject*var,PyObject*default_value, PyObject**value )
Get the value of a context variable. Returns -1if an error has occurred during lookup, and 0if no error
occurred,whetherornotavaluewasfound.
Ifthecontextvariablewasfound, valuewillbeapointertoit. Ifthecontextvariablewas notfound, valuewill
pointto:
•default_value ,ifnot NULL;
8.6. Other Objects 189
The Python/C API, Release 3.13.0
•thedefaultvalueof var,ifnot NULL;
•NULL
Exceptfor NULL,thefunctionreturnsanewreference.
PyObject*PyContextVar_Set (PyObject*var,PyObject*value )
Return value: New reference. Setthevalueof vartovalueinthecurrentcontext. Returnsanewtokenobject
forthischange,or NULLifanerrorhasoccurred.
intPyContextVar_Reset (PyObject*var,PyObject*token )
Reset the state of the varcontext variable to that it was in before PyContextVar_Set() that returned the
tokenwascalled. Thisfunctionreturns 0onsuccessand -1onerror.
8.6.13 DateTime Objects
Variousdateandtimeobjectsaresuppliedbythe datetime module. Beforeusinganyofthesefunctions,theheader
filedatetime.h must be included in your source (note that this is not included by Python.h ), and the macro
PyDateTime_IMPORT must be invoked, usually as part of the module initialisation function. The macro puts a
pointertoaCstructureintoastaticvariable, PyDateTimeAPI ,thatisusedbythefollowingmacros.
typePyDateTime_Date
Thissubtypeof PyObject representsaPythondateobject.
typePyDateTime_DateTime
Thissubtypeof PyObject representsaPythondatetimeobject.
typePyDateTime_Time
Thissubtypeof PyObject representsaPythontimeobject.
typePyDateTime_Delta
Thissubtypeof PyObject representsthedifferencebetweentwodatetimevalues.
PyTypeObject PyDateTime_DateType
This instance of PyTypeObject represents the Python date type; it is the same object as datetime.date
inthePythonlayer.
PyTypeObject PyDateTime_DateTimeType
This instance of PyTypeObject represents the Python datetime type; it is the same object as datetime.
datetime inthePythonlayer.
PyTypeObject PyDateTime_TimeType
Thisinstanceof PyTypeObject representsthePythontimetype; itisthesameobjectas datetime.time
inthePythonlayer.
PyTypeObject PyDateTime_DeltaType
Thisinstanceof PyTypeObject representsPythontypeforthedifferencebetweentwodatetimevalues;itis
thesameobjectas datetime.timedelta inthePythonlayer.
PyTypeObject PyDateTime_TZInfoType
Thisinstanceof PyTypeObject representsthePythontimezoneinfotype;itisthesameobjectas datetime.
tzinfointhePythonlayer.
MacroforaccesstotheUTCsingleton:
PyObject*PyDateTime_TimeZone_UTC
ReturnsthetimezonesingletonrepresentingUTC,thesameobjectas datetime.timezone.utc .
Addedinversion3.7.
Type-checkmacros:
190 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
intPyDate_Check (PyObject*ob)
Returntrueif obisoftype PyDateTime_DateType orasubtypeof PyDateTime_DateType .obmustnot
beNULL.Thisfunctionalwayssucceeds.
intPyDate_CheckExact (PyObject*ob)
Returntrueif obisoftype PyDateTime_DateType .obmustnotbe NULL.Thisfunctionalwayssucceeds.
intPyDateTime_Check (PyObject*ob)
Return true if obis of type PyDateTime_DateTimeType or a subtype of PyDateTime_DateTimeType .
obmustnotbe NULL.Thisfunctionalwayssucceeds.
intPyDateTime_CheckExact (PyObject*ob)
Returntrueif obisoftype PyDateTime_DateTimeType .obmustnotbe NULL.Thisfunctionalwayssuc-
ceeds.
intPyTime_Check (PyObject*ob)
Returntrueif obisoftype PyDateTime_TimeType orasubtypeof PyDateTime_TimeType .obmustnot
beNULL.Thisfunctionalwayssucceeds.
intPyTime_CheckExact (PyObject*ob)
Returntrueif obisoftype PyDateTime_TimeType .obmustnotbe NULL.Thisfunctionalwayssucceeds.
intPyDelta_Check (PyObject*ob)
Returntrueif obisoftype PyDateTime_DeltaType orasubtypeof PyDateTime_DeltaType .obmust
notbe NULL.Thisfunctionalwayssucceeds.
intPyDelta_CheckExact (PyObject*ob)
Returntrueif obisoftype PyDateTime_DeltaType .obmustnotbe NULL.Thisfunctionalwayssucceeds.
intPyTZInfo_Check (PyObject*ob)
Returntrueif obisoftype PyDateTime_TZInfoType orasubtypeof PyDateTime_TZInfoType .obmust
notbe NULL.Thisfunctionalwayssucceeds.
intPyTZInfo_CheckExact (PyObject*ob)
Returntrueif obisoftype PyDateTime_TZInfoType .obmustnotbe NULL.Thisfunctionalwayssucceeds.
Macrostocreateobjects:
PyObject*PyDate_FromDate (intyear,intmonth,intday )
Return value: New reference. Returna datetime.date objectwiththespecifiedyear,monthandday.
PyObject*PyDateTime_FromDateAndTime (intyear,intmonth,intday,inthour,intminute,intsecond,int
usecond )
Return value: New reference. Returna datetime.datetime objectwiththespecifiedyear,month,day,hour,
minute,secondandmicrosecond.
PyObject*PyDateTime_FromDateAndTimeAndFold (intyear,intmonth,intday,inthour,intminute,int
second,intusecond,intfold )
Return value: New reference. Returna datetime.datetime objectwiththespecifiedyear,month,day,hour,
minute,second,microsecondandfold.
Addedinversion3.6.
PyObject*PyTime_FromTime (inthour,intminute,intsecond,intusecond )
Return value: New reference. Return a datetime.time object with the specified hour, minute, second and
microsecond.
PyObject*PyTime_FromTimeAndFold (inthour,intminute,intsecond,intusecond,intfold )
Return value: New reference. Return a datetime.time object with the specified hour, minute, second,
microsecondandfold.
Addedinversion3.6.
8.6. Other Objects 191
The Python/C API, Release 3.13.0
PyObject*PyDelta_FromDSU (intdays,intseconds,intuseconds )
Return value: New reference. Returna datetime.timedelta objectrepresentingthegivennumberofdays,
seconds and microseconds. Normalization is performed so that the resulting number of microseconds and
secondslieintherangesdocumentedfor datetime.timedelta objects.
PyObject*PyTimeZone_FromOffset (PyObject*offset )
Return value: New reference. Returna datetime.timezone objectwithanunnamedfixedoffsetrepresented
bythe offsetargument.
Addedinversion3.7.
PyObject*PyTimeZone_FromOffsetAndName (PyObject*offset, PyObject*name )
Return value: New reference. Return a datetime.timezone object with a fixed offset represented by the
offsetargumentandwithtzname name.
Addedinversion3.7.
Macros to extract fields from date objects. The argument must be an instance of PyDateTime_Date , including
subclasses(suchas PyDateTime_DateTime ). Theargumentmustnotbe NULL,andthetypeisnotchecked:
intPyDateTime_GET_YEAR (PyDateTime_Date *o)
Returntheyear,asapositiveint.
intPyDateTime_GET_MONTH (PyDateTime_Date *o)
Returnthemonth,asanintfrom1through12.
intPyDateTime_GET_DAY (PyDateTime_Date *o)
Returntheday,asanintfrom1through31.
Macros to extract fields from datetime objects. The argument must be an instance of PyDateTime_DateTime ,
includingsubclasses. Theargumentmustnotbe NULL,andthetypeisnotchecked:
intPyDateTime_DATE_GET_HOUR (PyDateTime_DateTime *o)
Returnthehour,asanintfrom0through23.
intPyDateTime_DATE_GET_MINUTE (PyDateTime_DateTime *o)
Returntheminute,asanintfrom0through59.
intPyDateTime_DATE_GET_SECOND (PyDateTime_DateTime *o)
Returnthesecond,asanintfrom0through59.
intPyDateTime_DATE_GET_MICROSECOND (PyDateTime_DateTime *o)
Returnthemicrosecond,asanintfrom0through999999.
intPyDateTime_DATE_GET_FOLD (PyDateTime_DateTime *o)
Returnthefold,asanintfrom0through1.
Addedinversion3.6.
PyObject*PyDateTime_DATE_GET_TZINFO (PyDateTime_DateTime *o)
Returnthetzinfo(whichmaybe None).
Addedinversion3.10.
Macros to extract fields from time objects. The argument must be an instance of PyDateTime_Time , including
subclasses. Theargumentmustnotbe NULL,andthetypeisnotchecked:
intPyDateTime_TIME_GET_HOUR (PyDateTime_Time *o)
Returnthehour,asanintfrom0through23.
intPyDateTime_TIME_GET_MINUTE (PyDateTime_Time *o)
Returntheminute,asanintfrom0through59.
intPyDateTime_TIME_GET_SECOND (PyDateTime_Time *o)
Returnthesecond,asanintfrom0through59.
192 Chapter 8. Concrete Objects Layer
The Python/C API, Release 3.13.0
intPyDateTime_TIME_GET_MICROSECOND (PyDateTime_Time *o)
Returnthemicrosecond,asanintfrom0through999999.
intPyDateTime_TIME_GET_FOLD (PyDateTime_Time *o)
Returnthefold,asanintfrom0through1.
Addedinversion3.6.
PyObject*PyDateTime_TIME_GET_TZINFO (PyDateTime_Time *o)
Returnthetzinfo(whichmaybe None).
Addedinversion3.10.
Macros to extract fields from time delta objects. The argument must be an instance of PyDateTime_Delta , in-
cludingsubclasses. Theargumentmustnotbe NULL,andthetypeisnotchecked:
intPyDateTime_DELTA_GET_DAYS (PyDateTime_Delta *o)
Returnthenumberofdays,asanintfrom-999999999to999999999.
Addedinversion3.3.
intPyDateTime_DELTA_GET_SECONDS (PyDateTime_Delta *o)
Returnthenumberofseconds,asanintfrom0through86399.
Addedinversion3.3.
intPyDateTime_DELTA_GET_MICROSECONDS (PyDateTime_Delta *o)
Returnthenumberofmicroseconds,asanintfrom0through999999.
Addedinversion3.3.
MacrosfortheconvenienceofmodulesimplementingtheDBAPI:
PyObject*PyDateTime_FromTimestamp (PyObject*args )
Return value: New reference. Createandreturnanew datetime.datetime objectgivenanargumenttuple
suitableforpassingto datetime.datetime.fromtimestamp() .
PyObject*PyDate_FromTimestamp (PyObject*args )
Return value: New reference. Createandreturnanew datetime.date objectgivenanargumenttuplesuitable
forpassingto datetime.date.fromtimestamp() .
8.6.14 Objects for Type Hinting
Various built-in types for type hinting are provided. Currently, two types exist – GenericAlias and Union. Only
GenericAlias isexposedtoC.
PyObject*Py_GenericAlias (PyObject*origin, PyObject*args )
Part of the Stable ABI since version 3.9. Create a GenericAlias object. Equivalent to calling the Python
class types.GenericAlias . The originandargsarguments set the GenericAlias ‘s__origin__ and
__args__ attributesrespectively. originshouldbea PyTypeObject *,andargscanbea PyTupleObject *
orany PyObject* . Ifargspassedisnotatuple,a1-tupleisautomaticallyconstructedand __args__ isset
to(args,). Minimal checking is done for the arguments, so the function will succeed even if originis not
atype. The GenericAlias ‘s__parameters__ attributeisconstructedlazilyfrom __args__ . Onfailure,
anexceptionisraisedand NULLisreturned.
Here’sanexampleofhowtomakeanextensiontypegeneric:
...
static PyMethodDef my_obj_methods[] ={
// Other methods.
...
{"__class_getitem__ ",Py_GenericAlias, METH_O |METH_CLASS, "See PEP 585 "}
...
}
8.6. Other Objects 193
The Python/C API, Release 3.13.0
µSee also
Thedatamodelmethod __class_getitem__() .
Addedinversion3.9.
PyTypeObject Py_GenericAliasType
Part of the StableABI since version 3.9. TheCtypeoftheobjectreturnedby Py_GenericAlias() . Equiv-
alentto types.GenericAlias inPython.
Addedinversion3.9.
194 Chapter 8. Concrete Objects Layer
CHAPTER
NINE
INITIALIZATION, FINALIZATION, AND THREADS
SeePython Initialization Configuration fordetailsonhowtoconfiguretheinterpreterpriortoinitialization.
9.1Before Python Initialization
In an application embedding Python, the Py_Initialize() function must be called before using any other
Python/CAPIfunctions;withtheexceptionofafewfunctionsandthe global configuration variables .
ThefollowingfunctionscanbesafelycalledbeforePythonisinitialized:
•Functionsthatinitializetheinterpreter:
–Py_Initialize()
–Py_InitializeEx()
–Py_InitializeFromConfig()
–Py_BytesMain()
–Py_Main()
–theruntimepre-initializationfunctionscoveredin Python Initialization Configuration
•Configurationfunctions:
–PyImport_AppendInittab()
–PyImport_ExtendInittab()
–PyInitFrozenExtensions()
–PyMem_SetAllocator()
–PyMem_SetupDebugHooks()
–PyObject_SetArenaAllocator()
–Py_SetProgramName()
–Py_SetPythonHome()
–PySys_ResetWarnOptions()
–theconfigurationfunctionscoveredin Python Initialization Configuration
•Informativefunctions:
–Py_IsInitialized()
–PyMem_GetAllocator()
–PyObject_GetArenaAllocator()
–Py_GetBuildInfo()
–Py_GetCompiler()
195
The Python/C API, Release 3.13.0
–Py_GetCopyright()
–Py_GetPlatform()
–Py_GetVersion()
–Py_IsInitialized()
•Utilities:
–Py_DecodeLocale()
–thestatusreportingandutilityfunctionscoveredin Python Initialization Configuration
•Memoryallocators:
–PyMem_RawMalloc()
–PyMem_RawRealloc()
–PyMem_RawCalloc()
–PyMem_RawFree()
•Synchronization:
–PyMutex_Lock()
–PyMutex_Unlock()
®Note
Despite their apparent similarity to some of the functions listed above, the following functions should not be
calledbeforetheinterpreterhasbeeninitialized: Py_EncodeLocale() ,Py_GetPath() ,Py_GetPrefix() ,
Py_GetExecPrefix() ,Py_GetProgramFullPath() ,Py_GetPythonHome() ,Py_GetProgramName() ,
PyEval_InitThreads() ,and Py_RunMain() .
9.2Global configuration variables
Pythonhasvariablesfortheglobalconfigurationtocontroldifferentfeaturesandoptions. Bydefault,theseflagsare
controlledbycommandlineoptions.
Whenaflagissetbyanoption,thevalueoftheflagisthenumberoftimesthattheoptionwasset. Forexample, -b
setsPy_BytesWarningFlag to1and -bbsetsPy_BytesWarningFlag to2.
intPy_BytesWarningFlag
This API is kept for backward compatibility: setting PyConfig.bytes_warning should be used instead,
seePython Initialization Configuration .
Issueawarningwhencomparing bytesorbytearray withstrorbyteswithint. Issueanerrorifgreater
orequalto 2.
Setbythe -boption.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_DebugFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.parser_debug shouldbeusedinstead,see
Python Initialization Configuration .
Turnonparserdebuggingoutput(forexpertonly,dependingoncompilationoptions).
Setbythe -doptionandthe PYTHONDEBUG environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
196 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
intPy_DontWriteBytecodeFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.write_bytecode shouldbeusedinstead,
seePython Initialization Configuration .
Ifsettonon-zero,Pythonwon’ttrytowrite .pycfilesontheimportofsourcemodules.
Setbythe -Boptionandthe PYTHONDONTWRITEBYTECODE environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_FrozenFlag
This API is kept for backward compatibility: setting PyConfig.pathconfig_warnings should be used
instead,see Python Initialization Configuration .
Suppresserrormessageswhencalculatingthemodulesearchpathin Py_GetPath() .
Privateflagusedby _freeze_module andfrozenmain programs.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_HashRandomizationFlag
This API is kept for backward compatibility: setting PyConfig.hash_seed and PyConfig.
use_hash_seed shouldbeusedinstead,see Python Initialization Configuration .
Setto 1ifthe PYTHONHASHSEED environmentvariableissettoanon-emptystring.
Iftheflagisnon-zero,readthe PYTHONHASHSEED environmentvariabletoinitializethesecrethashseed.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_IgnoreEnvironmentFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.use_environment shouldbeusedinstead,
seePython Initialization Configuration .
Ignoreall PYTHON*environmentvariables,e.g. PYTHONPATH andPYTHONHOME ,thatmightbeset.
Setbythe -Eand-Ioptions.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_InspectFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.inspect shouldbeusedinstead,see Python
Initialization Configuration .
Whenascriptispassedasfirstargumentorthe -coptionisused,enterinteractivemodeafterexecutingthe
scriptorthecommand,evenwhen sys.stdin doesnotappeartobeaterminal.
Setbythe -ioptionandthe PYTHONINSPECT environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_InteractiveFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.interactive shouldbeusedinstead, see
Python Initialization Configuration .
Setbythe -ioption.
Deprecatedsinceversion3.12.
intPy_IsolatedFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.isolated shouldbeusedinstead,see Python
Initialization Configuration .
RunPythoninisolatedmode. Inisolatedmode sys.path containsneitherthescript’sdirectorynortheuser’s
site-packagesdirectory.
Setbythe -Ioption.
Addedinversion3.4.
9.2. Global configuration variables 197
The Python/C API, Release 3.13.0
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_LegacyWindowsFSEncodingFlag
This API is kept for backward compatibility: setting PyPreConfig.legacy_windows_fs_encoding
shouldbeusedinstead,see Python Initialization Configuration .
If the flag is non-zero, use the mbcsencoding with replaceerror handler, instead of the UTF-8 encoding
withsurrogatepass errorhandler,forthe filesystem encoding and error handler .
Setto 1ifthe PYTHONLEGACYWINDOWSFSENCODING environmentvariableissettoanon-emptystring.
SeePEP 529formoredetails.
Availability: Windows.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_LegacyWindowsStdioFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.legacy_windows_stdio shouldbeused
instead,see Python Initialization Configuration .
Iftheflagisnon-zero,use io.FileIO insteadof io._WindowsConsoleIO forsysstandardstreams.
Setto 1ifthe PYTHONLEGACYWINDOWSSTDIO environmentvariableissettoanon-emptystring.
SeePEP 528formoredetails.
Availability: Windows.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_NoSiteFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.site_import shouldbeusedinstead, see
Python Initialization Configuration .
Disable the import of the module siteand the site-dependent manipulations of sys.path that it entails.
Alsodisablethesemanipulationsif siteisexplicitlyimportedlater(call site.main() ifyouwantthemto
betriggered).
Setbythe -Soption.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_NoUserSiteDirectory
This API is kept for backward compatibility: setting PyConfig.user_site_directory should be used
instead,see Python Initialization Configuration .
Don’taddthe user site-packages directory tosys.path .
Setbythe -sand-Ioptions,andthe PYTHONNOUSERSITE environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_OptimizeFlag
This API is kept for backward compatibility: setting PyConfig.optimization_level should be used
instead,see Python Initialization Configuration .
Setbythe -Ooptionandthe PYTHONOPTIMIZE environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_QuietFlag
This API is kept for backward compatibility: setting PyConfig.quiet should be used instead, see Python
Initialization Configuration .
Don’tdisplaythecopyrightandversionmessagesevenininteractivemode.
Setbythe -qoption.
Addedinversion3.2.
198 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_UnbufferedStdioFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.buffered_stdio shouldbeusedinstead,
seePython Initialization Configuration .
Forcethestdoutandstderrstreamstobeunbuffered.
Setbythe -uoptionandthe PYTHONUNBUFFERED environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
intPy_VerboseFlag
ThisAPIiskeptforbackwardcompatibility: setting PyConfig.verbose shouldbeusedinstead,see Python
Initialization Configuration .
Printamessageeachtimeamoduleisinitialized,showingtheplace(filenameorbuilt-inmodule)fromwhich
it is loaded. If greater or equal to 2, print a message for each file that is checked for when searching for a
module. Alsoprovidesinformationonmodulecleanupatexit.
Setbythe -voptionandthe PYTHONVERBOSE environmentvariable.
Deprecatedsinceversion3.12,willberemovedinversion3.14.
9.3Initializing and finalizing the interpreter
voidPy_Initialize ()
Part of the StableABI .InitializethePythoninterpreter. InanapplicationembeddingPython, thisshouldbe
calledbeforeusinganyotherPython/CAPIfunctions;see Before Python Initialization forthefewexceptions.
Thisinitializesthetableofloadedmodules( sys.modules ),andcreatesthefundamentalmodules builtins ,
__main__ andsys. Italsoinitializesthemodulesearchpath( sys.path ). Itdoesnotset sys.argv ;usethe
Python Initialization Configuration APIforthat. Thisisano-opwhencalledforasecondtime(withoutcalling
Py_FinalizeEx() first). Thereisnoreturnvalue;itisafatalerroriftheinitializationfails.
UsePy_InitializeFromConfig() tocustomizethe Python Initialization Configuration .
®Note
On Windows, changes the console mode from O_TEXTtoO_BINARY , which will also affect non-Python
usesoftheconsoleusingtheCRuntime.
voidPy_InitializeEx (intinitsigs )
Part of the Stable ABI .This function works like Py_Initialize() ifinitsigsis1. Ifinitsigsis0, it skips
initializationregistrationofsignalhandlers,whichmaybeusefulwhenCPythonisembeddedaspartofalarger
application.
UsePy_InitializeFromConfig() tocustomizethe Python Initialization Configuration .
PyStatus Py_InitializeFromConfig (const PyConfig*config )
InitializePythonfrom configconfiguration,asdescribedin Initialization with PyConfig .
Seethe Python Initialization Configuration sectionfordetailsonpre-initializingtheinterpreter,populatingthe
runtimeconfigurationstructure,andqueryingthereturnedstatusstructure.
intPy_IsInitialized ()
Part of the StableABI .Returntrue(nonzero)whenthePythoninterpreterhasbeeninitialized,false(zero)if
not. After Py_FinalizeEx() iscalled,thisreturnsfalseuntil Py_Initialize() iscalledagain.
9.3. Initializing and finalizing the interpreter 199
The Python/C API, Release 3.13.0
intPy_IsFinalizing ()
Part of the Stable ABI since version 3.13. Return true (non-zero) if the main Python interpreter is shutting
down. Returnfalse(zero)otherwise.
Addedinversion3.13.
intPy_FinalizeEx ()
Part of the Stable ABI since version 3.6. Undo all initializations made by Py_Initialize() and subse-
quent use of Python/C API functions, and destroy all sub-interpreters (see Py_NewInterpreter() be-
low) that were created and not yet destroyed since the last call to Py_Initialize() . Ideally, this frees
allmemoryallocatedbythePythoninterpreter. Thisisano-opwhencalledforasecondtime(withoutcalling
Py_Initialize() againfirst).
Sincethisisthereverseof Py_Initialize() ,itshouldbecalledinthesamethreadwiththesameinterpreter
active. Thatmeansthemainthreadandthemaininterpreter. Thisshouldneverbecalledwhile Py_RunMain()
isrunning.
Normallythereturnvalueis 0. Iftherewereerrorsduringfinalization(flushingbuffereddata), -1isreturned.
This function is provided for a number of reasons. An embedding application might want to restart Python
without having to restart the application itself. An application that has loaded the Python interpreter from a
dynamicallyloadablelibrary(orDLL)mightwanttofreeallmemoryallocatedbyPythonbeforeunloadingthe
DLL.Duringahuntformemoryleaksinanapplicationadevelopermightwanttofreeallmemoryallocated
byPythonbeforeexitingfromtheapplication.
Bugs and caveats: The destruction of modules and objects in modules is done in random order; this may
causedestructors( __del__() methods)tofailwhentheydependonotherobjects(evenfunctions)ormod-
ules. DynamicallyloadedextensionmodulesloadedbyPythonarenotunloaded. Smallamountsofmemory
allocatedbythePythoninterpretermaynotbefreed(ifyoufindaleak,pleasereportit). Memorytiedupin
circular references between objects is not freed. Some memory allocated by extension modules may not be
freed. Someextensionsmaynotworkproperlyiftheirinitializationroutineiscalledmorethanonce;thiscan
happenifanapplicationcalls Py_Initialize() andPy_FinalizeEx() morethanonce.
Raisesanauditingevent cpython._PySys_ClearAuditHooks withnoarguments.
Addedinversion3.6.
voidPy_Finalize ()
Part of the Stable ABI .This is a backwards-compatible version of Py_FinalizeEx() that disregards the
returnvalue.
intPy_BytesMain (intargc,char**argv )
Part of the StableABI since version 3.8. Similarto Py_Main() butargvisanarrayofbytesstrings,allowing
thecallingapplicationtodelegatethetextdecodingsteptotheCPythonruntime.
Addedinversion3.8.
intPy_Main (intargc,wchar_t**argv )
Part of the Stable ABI .The main program for the standard interpreter, encapsulating a full initializa-
tion/finalization cycle, as well as additional behaviour to implement reading configurations settings from the
environmentandcommandline,andthenexecuting __main__ inaccordancewithusing-on-cmdline.
This is made available for programs which wish to support the full CPython command line interface, rather
thanjustembeddingaPythonruntimeinalargerapplication.
TheargcandargvparametersaresimilartothosewhicharepassedtoaCprogram’s main()function,except
thatthe argventriesarefirstconvertedto wchar_tusing Py_DecodeLocale() . Itisalsoimportanttonote
that the argument list entries may be modified to point to strings other than those passed in (however, the
contentsofthestringspointedtobytheargumentlistarenotmodified).
Thereturnvaluewillbe 0iftheinterpreterexitsnormally(i.e.,withoutanexception), 1iftheinterpreterexits
duetoanexception,or 2iftheargumentlistdoesnotrepresentavalidPythoncommandline.
Notethatifanotherwiseunhandled SystemExit israised,thisfunctionwillnotreturn 1,butexittheprocess,
aslongas Py_InspectFlag isnotset. If Py_InspectFlag isset, executionwilldropintotheinteractive
200 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
Python prompt, at which point a second otherwise unhandled SystemExit will still exit the process, while
anyothermeansofexitingwillsetthereturnvalueasdescribedabove.
In terms of the CPython runtime configuration APIs documented in the runtime configuration section (and
withoutaccountingforerrorhandling), Py_Mainisapproximatelyequivalentto:
PyConfig config;
PyConfig_InitPythonConfig( &config);
PyConfig_SetArgv( &config, argc, argv);
Py_InitializeFromConfig( &config);
PyConfig_Clear( &config);
Py_RunMain();
In normal usage, an embedding application will call this function insteadof calling Py_Initialize() ,
Py_InitializeEx() orPy_InitializeFromConfig() directly, and all settings will be applied as de-
scribed elsewhere in this documentation. If this function is instead called aftera preceding runtime initial-
ization API call, then exactly which environmental and command line configuration settings will be updated
isversiondependent(asitdependsonwhichsettingscorrectlysupportbeingmodifiedaftertheyhavealready
beensetoncewhentheruntimewasfirstinitialized).
intPy_RunMain (void)
ExecutesthemainmoduleinafullyconfiguredCPythonruntime.
Executesthecommand( PyConfig.run_command ),thescript( PyConfig.run_filename )orthemodule
(PyConfig.run_module )specifiedonthecommandlineorintheconfiguration. Ifnoneofthesevaluesare
set,runstheinteractivePythonprompt(REPL)usingthe __main__ module’sglobalnamespace.
IfPyConfig.inspect isnotset(thedefault),thereturnvaluewillbe 0iftheinterpreterexitsnormally(that
is, withoutraisinganexception), or 1iftheinterpreterexitsduetoanexception. Ifanotherwiseunhandled
SystemExit israised,thefunctionwillimmediatelyexittheprocessinsteadofreturning 1.
IfPyConfig.inspect isset(suchaswhenthe -ioptionisused),ratherthanreturningwhentheinterpreter
exits, execution will instead resume in an interactive Python prompt (REPL) using the __main__ module’s
global namespace. If the interpreter exited with an exception, it is immediately raised in the REPL session.
Thefunctionreturnvalueisthendeterminedbythewaythe REPL session terminates: returning 0ifthesession
terminateswithoutraisinganunhandledexception,exitingimmediatelyforanunhandled SystemExit ,and
returning 1foranyotherunhandledexception.
This function always finalizes the Python interpreter regardless of whether it returns a value or immediately
exitstheprocessduetoanunhandled SystemExit exception.
SeePython Configuration for an example of a customized Python that always runs in isolated mode using
Py_RunMain() .
9.4Process-wide parameters
voidPy_SetProgramName (constwchar_t*name )
Part of the Stable ABI .This API is kept for backward compatibility: setting PyConfig.program_name
shouldbeusedinstead,see Python Initialization Configuration .
This function should be called before Py_Initialize() is called for the first time, if it is called at all. It
tellstheinterpreterthevalueofthe argv[0]argumenttothe main()functionoftheprogram(convertedto
widecharacters). Thisisusedby Py_GetPath() andsomeotherfunctionsbelowtofindthePythonrun-time
librariesrelativetotheinterpreterexecutable. Thedefaultvalueis 'python' . Theargumentshouldpointto
azero-terminatedwidecharacterstringinstaticstoragewhosecontentswillnotchangeforthedurationofthe
program’sexecution. NocodeinthePythoninterpreterwillchangethecontentsofthisstorage.
UsePy_DecodeLocale() todecodeabytesstringtogeta wchar_*string.
Deprecatedsinceversion3.11.
9.4. Process-wide parameters 201
The Python/C API, Release 3.13.0
wchar_t* Py_GetProgramName ()
Part of the Stable ABI .Return the program name set with PyConfig.program_name , or the default. The
returnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue.
Thisfunctionshouldnotbecalledbefore Py_Initialize() ,otherwiseitreturns NULL.
Changedinversion3.10: Itnowreturns NULLifcalledbefore Py_Initialize() .
Deprecatedsinceversion3.13,willberemovedinversion3.15: Get sys.executable instead.
wchar_t* Py_GetPrefix ()
Part of theStableABI .Returnthe prefixforinstalledplatform-independentfiles. Thisisderivedthroughanum-
berofcomplicatedrulesfromtheprogramnamesetwith PyConfig.program_name andsomeenvironment
variables;forexample,iftheprogramnameis '/usr/local/bin/python' ,theprefixis '/usr/local' .
The returned string points into static storage; the caller should not modify its value. This corresponds to the
prefixvariable in the top-level Makefile and the --prefix argument to the configure script at build
time. The value is available to Python code as sys.base_prefix . It is only useful on Unix. See also the
nextfunction.
Thisfunctionshouldnotbecalledbefore Py_Initialize() ,otherwiseitreturns NULL.
Changedinversion3.10: Itnowreturns NULLifcalledbefore Py_Initialize() .
Deprecated since version 3.13, will be removed in version 3.15: Get sys.base_prefix instead, or sys.
prefixifvirtualenvironmentsneedtobehandled.
wchar_t* Py_GetExecPrefix ()
Part of the Stable ABI .Return the exec-prefix for installed platform- dependent files. This is derived through
a number of complicated rules from the program name set with PyConfig.program_name and some en-
vironment variables; for example, if the program name is '/usr/local/bin/python' , the exec-prefix is
'/usr/local' . The returned string points into static storage; the caller should not modify its value. This
correspondstothe exec_prefix variableinthetop-level Makefile andthe --exec-prefix argumentto
theconfigure scriptatbuildtime. ThevalueisavailabletoPythoncodeas sys.base_exec_prefix . It
isonlyusefulonUnix.
Background: The exec-prefix differs from the prefix when platform dependent files (such as executables and
sharedlibraries)areinstalledinadifferentdirectorytree. Inatypicalinstallation,platformdependentfilesmay
beinstalledinthe /usr/local/plat subtreewhileplatformindependentmaybeinstalledin /usr/local .
Generallyspeaking,aplatformisacombinationofhardwareandsoftwarefamilies,e.g. Sparcmachinesrun-
ningtheSolaris2.xoperatingsystemareconsideredthesameplatform,butIntelmachinesrunningSolaris2.x
areanotherplatform,andIntelmachinesrunningLinuxareyetanotherplatform. Differentmajorrevisionsof
thesameoperatingsystemgenerallyalsoformdifferentplatforms. Non-Unixoperatingsystemsareadifferent
story;theinstallationstrategiesonthosesystemsaresodifferentthattheprefixandexec-prefixaremeaning-
less,andsettotheemptystring. NotethatcompiledPythonbytecodefilesareplatformindependent(butnot
independentfromthePythonversionbywhichtheywerecompiled!).
Systemadministratorswillknowhowtoconfigurethe mountorautomount programstoshare /usr/local
betweenplatformswhilehaving /usr/local/plat beadifferentfilesystemforeachplatform.
Thisfunctionshouldnotbecalledbefore Py_Initialize() ,otherwiseitreturns NULL.
Changedinversion3.10: Itnowreturns NULLifcalledbefore Py_Initialize() .
Deprecated since version 3.13, will be removed in version 3.15: Get sys.base_exec_prefix instead, or
sys.exec_prefix ifvirtualenvironmentsneedtobehandled.
wchar_t* Py_GetProgramFullPath ()
Part of theStableABI .ReturnthefullprogramnameofthePythonexecutable;thisiscomputedasaside-effect
ofderivingthedefaultmodulesearchpathfromtheprogramname(setby PyConfig.program_name ). The
returnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. ThevalueisavailabletoPython
codeas sys.executable .
Thisfunctionshouldnotbecalledbefore Py_Initialize() ,otherwiseitreturns NULL.
Changedinversion3.10: Itnowreturns NULLifcalledbefore Py_Initialize() .
202 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
Deprecatedsinceversion3.13,willberemovedinversion3.15: Get sys.executable instead.
wchar_t* Py_GetPath ()
Part of the StableABI .Returnthedefaultmodulesearchpath;thisiscomputedfromtheprogramname(set
byPyConfig.program_name )andsomeenvironmentvariables. Thereturnedstringconsistsofaseriesof
directory names separated by a platform dependent delimiter character. The delimiter character is ':'on
UnixandmacOS, ';'onWindows. Thereturnedstringpointsintostaticstorage;thecallershouldnotmodify
its value. The list sys.path is initialized with this value on interpreter startup; it can be (and usually is)
modifiedlatertochangethesearchpathforloadingmodules.
Thisfunctionshouldnotbecalledbefore Py_Initialize() ,otherwiseitreturns NULL.
Changedinversion3.10: Itnowreturns NULLifcalledbefore Py_Initialize() .
Deprecatedsinceversion3.13,willberemovedinversion3.15: Get sys.path instead.
constchar* Py_GetVersion ()
Part of the StableABI .ReturntheversionofthisPythoninterpreter. Thisisastringthatlookssomethinglike
"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \n[GCC 4.2.3] "
Thefirstword(uptothefirstspacecharacter)isthecurrentPythonversion;thefirstcharactersarethemajor
and minor version separated by a period. The returned string points into static storage; the caller should not
modifyitsvalue. ThevalueisavailabletoPythoncodeas sys.version .
Seealsothe Py_Version constant.
constchar* Py_GetPlatform ()
Part of the StableABI .Returntheplatformidentifierforthecurrentplatform. OnUnix,thisisformedfrom
the“official”nameoftheoperatingsystem, convertedtolowercase, followedbythemajorrevisionnumber;
e.g.,forSolaris2.x,whichisalsoknownasSunOS5.x,thevalueis 'sunos5' . OnmacOS,itis 'darwin' .
OnWindows,itis 'win'. Thereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue.
ThevalueisavailabletoPythoncodeas sys.platform .
constchar* Py_GetCopyright ()
Part of the StableABI .ReturntheofficialcopyrightstringforthecurrentPythonversion,forexample
'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'
Thereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. Thevalueisavailableto
Pythoncodeas sys.copyright .
constchar* Py_GetCompiler ()
Part of the StableABI .ReturnanindicationofthecompilerusedtobuildthecurrentPythonversion,insquare
brackets,forexample:
"[GCC 2.7.2.2] "
Thereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. Thevalueisavailableto
Pythoncodeaspartofthevariable sys.version .
constchar* Py_GetBuildInfo ()
Part of the StableABI .Returninformationaboutthesequencenumberandbuilddateandtimeofthecurrent
Pythoninterpreterinstance,forexample
"#67, Aug 1 1997, 22:34:28 "
Thereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. Thevalueisavailableto
Pythoncodeaspartofthevariable sys.version .
voidPySys_SetArgvEx (intargc,wchar_t**argv,intupdatepath )
Part of the StableABI .ThisAPIiskeptforbackwardcompatibility: setting PyConfig.argv ,PyConfig.
parse_argv andPyConfig.safe_path shouldbeusedinstead,see Python Initialization Configuration .
9.4. Process-wide parameters 203
The Python/C API, Release 3.13.0
Setsys.argv based on argcandargv. These parameters are similar to those passed to the program’s
main()function with the difference that the first entry should refer to the script file to be executed rather
than the executable hosting the Python interpreter. If there isn’t a script that will be run, the first entry in
argvcanbeanemptystring. Ifthisfunctionfailstoinitialize sys.argv , afatalconditionissignalledusing
Py_FatalError() .
Ifupdatepath iszero,thisisallthefunctiondoes. If updatepath isnon-zero,thefunctionalsomodifies sys.
pathaccordingtothefollowingalgorithm:
•Ifthenameofanexistingscriptispassedin argv[0],theabsolutepathofthedirectorywherethescript
islocatedisprependedto sys.path .
•Otherwise (that is, if argcis0orargv[0]doesn’t point to an existing file name), an empty string is
prependedto sys.path ,whichisthesameasprependingthecurrentworkingdirectory( ".").
UsePy_DecodeLocale() todecodeabytesstringtogeta wchar_*string.
Seealso PyConfig.orig_argv andPyConfig.argv membersofthe Python Initialization Configuration .
®Note
ItisrecommendedthatapplicationsembeddingthePythoninterpreterforpurposesotherthanexecutinga
singlescriptpass 0asupdatepath ,andupdate sys.path themselvesifdesired. See CVE 2008-5983 .
Onversionsbefore3.1.3,youcanachievethesameeffectbymanuallypoppingthefirst sys.path element
afterhavingcalled PySys_SetArgv() ,forexampleusing:
PyRun_SimpleString( "import sys; sys.path.pop(0) \n");
Addedinversion3.1.3.
Deprecatedsinceversion3.11.
voidPySys_SetArgv (intargc,wchar_t**argv )
Part of theStableABI .ThisAPIiskeptforbackwardcompatibility: setting PyConfig.argv andPyConfig.
parse_argv shouldbeusedinstead,see Python Initialization Configuration .
Thisfunctionworkslike PySys_SetArgvEx() withupdatepath setto 1unlessthe pythoninterpreterwas
startedwiththe -I.
UsePy_DecodeLocale() todecodeabytesstringtogeta wchar_*string.
Seealso PyConfig.orig_argv andPyConfig.argv membersofthe Python Initialization Configuration .
Changedinversion3.4: The updatepath valuedependson -I.
Deprecatedsinceversion3.11.
voidPy_SetPythonHome (constwchar_t*home )
Part of the StableABI .ThisAPIiskeptforbackwardcompatibility: setting PyConfig.home shouldbeused
instead,see Python Initialization Configuration .
Set thedefault“home” directory, thatis, thelocationof thestandardPython libraries. See PYTHONHOME for
themeaningoftheargumentstring.
Theargumentshouldpointtoazero-terminatedcharacterstringinstaticstoragewhosecontentswillnotchange
forthedurationoftheprogram’sexecution. NocodeinthePythoninterpreterwillchangethecontentsofthis
storage.
UsePy_DecodeLocale() todecodeabytesstringtogeta wchar_*string.
Deprecatedsinceversion3.11.
204 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
wchar_t* Py_GetPythonHome ()
Part of the StableABI .Returnthedefault“home”,thatis,thevaluesetby PyConfig.home ,orthevalueof
thePYTHONHOME environmentvariableifitisset.
Thisfunctionshouldnotbecalledbefore Py_Initialize() ,otherwiseitreturns NULL.
Changedinversion3.10: Itnowreturns NULLifcalledbefore Py_Initialize() .
Deprecatedsinceversion3.13,willberemovedinversion3.15: Get PyConfig.home orPYTHONHOME envi-
ronmentvariableinstead.
9.5Thread State and the Global Interpreter Lock
ThePythoninterpreterisnotfullythread-safe. Inordertosupportmulti-threadedPythonprograms,there’saglobal
lock, called the global interpreter lock orGIL, that must be held by the current thread before it can safely access
Pythonobjects. Withoutthelock,eventhesimplestoperationscouldcauseproblemsinamulti-threadedprogram:
forexample,whentwothreadssimultaneouslyincrementthereferencecountofthesameobject,thereferencecount
couldendupbeingincrementedonlyonceinsteadoftwice.
Therefore,theruleexiststhatonlythethreadthathasacquiredthe GILmayoperateonPythonobjectsorcallPython/C
API functions. In order to emulate concurrency of execution, the interpreter regularly tries to switch threads (see
sys.setswitchinterval() ). The lock is also released around potentially blocking I/O operations like reading
orwritingafile,sothatotherPythonthreadscanruninthemeantime.
The Python interpreter keeps some thread-specific bookkeeping information inside a data structure called
PyThreadState . There’s also one global variable pointing to the current PyThreadState : it can be retrieved
using PyThreadState_Get() .
9.5.1Releasing the GIL from extension code
Mostextensioncodemanipulatingthe GILhasthefollowingsimplestructure:
Save the thread state inalocal variable.
Release the global interpreter lock.
... Dosome blocking I/Ooperation ...
Reacquire the global interpreter lock.
Restore the thread state from the local variable.
Thisissocommonthatapairofmacrosexiststosimplifyit:
Py_BEGIN_ALLOW_THREADS
... Dosome blocking I/Ooperation ...
Py_END_ALLOW_THREADS
The Py_BEGIN_ALLOW_THREADS macro opens a new block and declares a hidden local variable; the
Py_END_ALLOW_THREADS macroclosestheblock.
Theblockaboveexpandstothefollowingcode:
PyThreadState *_save;
_save =PyEval_SaveThread();
... Dosome blocking I/Ooperation ...
PyEval_RestoreThread(_save);
Here is how these functions work: the global interpreter lock is used to protect the pointer to the current thread
state. Whenreleasingthelockandsavingthethreadstate,thecurrentthreadstatepointermustberetrievedbefore
the lock is released (since another thread could immediately acquire the lock and store its own thread state in the
globalvariable). Conversely,whenacquiringthelockandrestoringthethreadstate,thelockmustbeacquiredbefore
storingthethreadstatepointer.
9.5. Thread State and the Global Interpreter Lock 205
The Python/C API, Release 3.13.0
®Note
CallingsystemI/OfunctionsisthemostcommonusecaseforreleasingtheGIL,butitcanalsobeusefulbefore
calling long-running computations which don’t need access to Python objects, such as compression or crypto-
graphicfunctionsoperatingovermemorybuffers. Forexample,thestandard zlibandhashlibmodulesrelease
theGILwhencompressingorhashingdata.
9.5.2Non-Python created threads
When threads are created using the dedicated Python APIs (such as the threading module), a thread state is
automaticallyassociatedtothemandthecodeshowedaboveisthereforecorrect. However,whenthreadsarecreated
fromC(forexamplebyathird-partylibrarywithitsownthreadmanagement),theydon’tholdtheGIL,noristhere
athreadstatestructureforthem.
IfyouneedtocallPythoncodefromthesethreads(oftenthiswillbepartofacallbackAPIprovidedbytheafore-
mentioned third-party library), you must first register these threads with the interpreter by creating a thread state
data structure, then acquiring the GIL, and finally storing their thread state pointer, before you can start using the
Python/C API. When you are done, you should reset the thread state pointer, release the GIL, and finally free the
threadstatedatastructure.
ThePyGILState_Ensure() andPyGILState_Release() functions do all of the above automatically. The
typicalidiomforcallingintoPythonfromaCthreadis:
PyGILState_STATE gstate;
gstate =PyGILState_Ensure();
/* Perform Python actions here. */
result =CallSomeFunction();
/* evaluate result or handle exception */
/* Release the thread. No Python API allowed beyond this point. */
PyGILState_Release(gstate);
Note that the PyGILState_* functions assume there is only one global interpreter (created automatically by
Py_Initialize() ). Python supports the creation of additional interpreters (using Py_NewInterpreter() ),
butmixingmultipleinterpretersandthe PyGILState_* APIisunsupported.
9.5.3Cautions about fork()
AnotherimportantthingtonoteaboutthreadsistheirbehaviourinthefaceoftheC fork()call. Onmostsystems
withfork(),afteraprocessforksonlythethreadthatissuedtheforkwillexist. Thishasaconcreteimpactbothon
howlocksmustbehandledandonallstoredstateinCPython’sruntime.
Thefactthatonlythe“current”threadremainsmeansanylocksheldbyotherthreadswillneverbereleased. Python
solves this for os.fork() by acquiring the locks it uses internally before the fork, and releasing them afterwards.
Inaddition,itresetsanylock-objectsinthechild. WhenextendingorembeddingPython,thereisnowaytoinform
Python of additional (non-Python) locks that need to be acquired before or reset after a fork. OS facilities such
aspthread_atfork() would need to be used to accomplish the same thing. Additionally, when extending or
embeddingPython,calling fork()directlyratherthanthrough os.fork() (andreturningtoorcallingintoPython)
may result in a deadlock by one of Python’s internal locks being held by a thread that is defunct after the fork.
PyOS_AfterFork_Child() triestoresetthenecessarylocks,butisnotalwaysableto.
The fact that all other threads go away also means that CPython’s runtime state there must be cleaned up properly,
which os.fork() does. Thismeansfinalizingallother PyThreadState objectsbelongingtothecurrentinterpreter
andallother PyInterpreterState objects. Duetothisandthespecialnatureofthe “main” interpreter ,fork()
shouldonlybecalledinthatinterpreter’s“main”thread,wheretheCPythonglobalruntimewasoriginallyinitialized.
Theonlyexceptionisif exec()willbecalledimmediatelyafter.
206 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
9.5.4High-level API
These are the most commonly used types and functions when writing C extension code, or when embedding the
Pythoninterpreter:
typePyInterpreterState
Part of the LimitedAPI (as an opaque struct). Thisdatastructurerepresentsthestatesharedbyanumberof
cooperating threads. Threads belonging to the same interpreter share their module administration and a few
otherinternalitems. Therearenopublicmembersinthisstructure.
Threadsbelongingtodifferentinterpretersinitiallysharenothing,exceptprocessstatelikeavailablememory,
openfiledescriptorsandsuch. Theglobalinterpreterlockisalsosharedbyallthreads,regardlessoftowhich
interpretertheybelong.
typePyThreadState
Part of the LimitedAPI (as an opaque struct). Thisdatastructurerepresentsthestateofasinglethread. The
onlypublicdatamemberis:
PyInterpreterState *interp
Thisthread’sinterpreterstate.
voidPyEval_InitThreads ()
Part of the StableABI .Deprecatedfunctionwhichdoesnothing.
InPython3.6andolder,thisfunctioncreatedtheGILifitdidn’texist.
Changedinversion3.9: Thefunctionnowdoesnothing.
Changedinversion3.7: Thisfunctionisnowcalledby Py_Initialize() ,soyoudon’thavetocallityourself
anymore.
Changedinversion3.2: Thisfunctioncannotbecalledbefore Py_Initialize() anymore.
Deprecatedsinceversion3.9.
PyThreadState *PyEval_SaveThread ()
Part of the StableABI .Releasetheglobalinterpreterlock(ifithasbeencreated)andresetthethreadstateto
NULL,returningthepreviousthreadstate(whichisnot NULL).Ifthelockhasbeencreated,thecurrentthread
musthaveacquiredit.
voidPyEval_RestoreThread (PyThreadState *tstate )
Part of the StableABI .Acquiretheglobalinterpreterlock(ifithasbeencreated)andsetthethreadstateto
tstate, which must not be NULL. If the lock has been created, the current thread must not have acquired it,
otherwisedeadlockensues.
®Note
Calling this function from a thread when the runtime is finalizing will terminate the thread, even if the
thread was not created by Python. You can use Py_IsFinalizing() orsys.is_finalizing() to
check if the interpreter is in process of being finalized before calling this function to avoid unwanted
termination.
PyThreadState *PyThreadState_Get ()
Part of the Stable ABI .Return the current thread state. The global interpreter lock must be held. When the
currentthreadstateis NULL,thisissuesafatalerror(sothatthecallerneedn’tcheckfor NULL).
Seealso PyThreadState_GetUnchecked() .
PyThreadState *PyThreadState_GetUnchecked ()
Similar to PyThreadState_Get() , but don’t kill the process with a fatal error if it is NULL. The caller is
responsibletocheckiftheresultisNULL.
Added in version 3.13: In Python 3.5 to 3.12, the function was private and known as
_PyThreadState_UncheckedGet() .
9.5. Thread State and the Global Interpreter Lock 207
The Python/C API, Release 3.13.0
PyThreadState *PyThreadState_Swap (PyThreadState *tstate )
Part of the StableABI .Swapthecurrentthreadstatewiththethreadstategivenbytheargument tstate,which
maybe NULL.Theglobalinterpreterlockmustbeheldandisnotreleased.
Thefollowingfunctionsusethread-localstorage,andarenotcompatiblewithsub-interpreters:
PyGILState_STATE PyGILState_Ensure ()
Part of the Stable ABI .Ensure that the current thread is ready to call the Python C API regardless of the
current state of Python, or of the global interpreter lock. This may be called as many times as desired by
a thread as long as each call is matched with a call to PyGILState_Release() . In general, other thread-
related APIs may be used between PyGILState_Ensure() andPyGILState_Release() calls as long
as the thread state is restored to its previous state before the Release(). For example, normal usage of the
Py_BEGIN_ALLOW_THREADS andPy_END_ALLOW_THREADS macrosisacceptable.
The return value is an opaque “handle” to the thread state when PyGILState_Ensure() was called, and
mustbepassedto PyGILState_Release() toensurePythonisleftinthesamestate. Eventhoughrecursive
callsareallowed,thesehandles cannotbeshared-eachuniquecallto PyGILState_Ensure() mustsavethe
handleforitscallto PyGILState_Release() .
When the function returns, the current thread will hold the GIL and be able to call arbitrary Python code.
Failureisafatalerror.
®Note
Calling this function from a thread when the runtime is finalizing will terminate the thread, even if the
thread was not created by Python. You can use Py_IsFinalizing() orsys.is_finalizing() to
check if the interpreter is in process of being finalized before calling this function to avoid unwanted
termination.
voidPyGILState_Release (PyGILState_STATE )
Part of theStableABI .Releaseanyresourcespreviouslyacquired. Afterthiscall,Python’sstatewillbethesame
asitwaspriortothecorresponding PyGILState_Ensure() call(butgenerallythisstatewillbeunknownto
thecaller,hencetheuseoftheGILStateAPI).
Everycallto PyGILState_Ensure() mustbematchedbyacallto PyGILState_Release() onthesame
thread.
PyThreadState *PyGILState_GetThisThreadState ()
Part of the Stable ABI .Get the current thread state for this thread. May return NULLif no GILState API
has been used on the current thread. Note that the main thread always has such a thread-state, even if no
auto-thread-statecallhasbeenmadeonthemainthread. Thisismainlyahelper/diagnosticfunction.
intPyGILState_Check ()
Return 1ifthecurrentthreadisholdingtheGILand 0otherwise. Thisfunctioncanbecalledfromanythread
atanytime. OnlyifithashaditsPythonthreadstateinitializedandcurrentlyisholdingtheGILwillitreturn
1. This is mainly a helper/diagnostic function. It can be useful for example in callback contexts or memory
allocationfunctionswhenknowingthattheGILislockedcanallowthecallertoperformsensitiveactionsor
otherwisebehavedifferently.
Addedinversion3.4.
Thefollowingmacrosarenormallyusedwithoutatrailingsemicolon; lookforexampleusageinthePythonsource
distribution.
Py_BEGIN_ALLOW_THREADS
Part of the Stable ABI .This macro expands to { PyThreadState *_save; _save =
PyEval_SaveThread(); . Note that it contains an opening brace; it must be matched with a follow-
ingPy_END_ALLOW_THREADS macro. Seeaboveforfurtherdiscussionofthismacro.
208 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
Py_END_ALLOW_THREADS
Part of the StableABI .Thismacroexpandsto PyEval_RestoreThread(_save); } . Notethatitcontains
aclosingbrace;itmustbematchedwithanearlier Py_BEGIN_ALLOW_THREADS macro. Seeaboveforfurther
discussionofthismacro.
Py_BLOCK_THREADS
Part of the Stable ABI .This macro expands to PyEval_RestoreThread(_save); : it is equivalent to
Py_END_ALLOW_THREADS withouttheclosingbrace.
Py_UNBLOCK_THREADS
Part of the Stable ABI .This macro expands to _save = PyEval_SaveThread(); : it is equivalent to
Py_BEGIN_ALLOW_THREADS withouttheopeningbraceandvariabledeclaration.
9.5.5Low-level API
Allofthefollowingfunctionsmustbecalledafter Py_Initialize() .
Changedinversion3.7: Py_Initialize() nowinitializesthe GIL.
PyInterpreterState *PyInterpreterState_New ()
Part of the StableABI .Createanewinterpreterstateobject. Theglobalinterpreterlockneednotbeheld,but
maybeheldifitisnecessarytoserializecallstothisfunction.
Raisesanauditingevent cpython.PyInterpreterState_New withnoarguments.
voidPyInterpreterState_Clear (PyInterpreterState *interp )
Part of the StableABI .Resetallinformationinaninterpreterstateobject. Theglobalinterpreterlockmustbe
held.
Raisesanauditingevent cpython.PyInterpreterState_Clear withnoarguments.
voidPyInterpreterState_Delete (PyInterpreterState *interp )
Part of the StableABI .Destroyaninterpreterstateobject. Theglobalinterpreterlockneednotbeheld. The
interpreterstatemusthavebeenresetwithapreviouscallto PyInterpreterState_Clear() .
PyThreadState *PyThreadState_New (PyInterpreterState *interp )
Part of the StableABI .Createanewthreadstateobjectbelongingtothegiveninterpreterobject. Theglobal
interpreterlockneednotbeheld,butmaybeheldifitisnecessarytoserializecallstothisfunction.
voidPyThreadState_Clear (PyThreadState *tstate )
Part of the StableABI .Resetallinformationinathreadstateobject. Theglobalinterpreterlockmustbeheld.
Changedinversion3.9: Thisfunctionnowcallsthe PyThreadState.on_delete callback. Previously,that
happenedin PyThreadState_Delete() .
voidPyThreadState_Delete (PyThreadState *tstate )
Part of the StableABI .Destroyathreadstateobject. Theglobalinterpreterlockneednotbeheld. Thethread
statemusthavebeenresetwithapreviouscallto PyThreadState_Clear() .
voidPyThreadState_DeleteCurrent (void)
Destroy the current thread state and release the global interpreter lock. Like PyThreadState_Delete() ,
the global interpreter lock must be held. The thread state must have been reset with a previous call to
PyThreadState_Clear() .
PyFrameObject *PyThreadState_GetFrame (PyThreadState *tstate )
Part of the StableABI since version 3.10. GetthecurrentframeofthePythonthreadstate tstate.
Returna strong reference . Return NULLifnoframeiscurrentlyexecuting.
Seealso PyEval_GetFrame() .
tstatemustnotbe NULL.
Addedinversion3.9.
9.5. Thread State and the Global Interpreter Lock 209
The Python/C API, Release 3.13.0
uint64_t PyThreadState_GetID (PyThreadState *tstate )
Part of the StableABI since version 3.10. GettheuniquethreadstateidentifierofthePythonthreadstate tstate.
tstatemustnotbe NULL.
Addedinversion3.9.
PyInterpreterState *PyThreadState_GetInterpreter (PyThreadState *tstate )
Part of the StableABI since version 3.10. GettheinterpreterofthePythonthreadstate tstate.
tstatemustnotbe NULL.
Addedinversion3.9.
voidPyThreadState_EnterTracing (PyThreadState *tstate )
SuspendtracingandprofilinginthePythonthreadstate tstate.
Resumethemusingthe PyThreadState_LeaveTracing() function.
Addedinversion3.11.
voidPyThreadState_LeaveTracing (PyThreadState *tstate )
Resume tracing and profiling in the Python thread state tstatesuspended by the
PyThreadState_EnterTracing() function.
Seealso PyEval_SetTrace() andPyEval_SetProfile() functions.
Addedinversion3.11.
PyInterpreterState *PyInterpreterState_Get (void)
Part of the StableABI since version 3.9. Getthecurrentinterpreter.
IssueafatalerroriftherenocurrentPythonthreadstateornocurrentinterpreter. ItcannotreturnNULL.
ThecallermustholdtheGIL.
Addedinversion3.9.
int64_t PyInterpreterState_GetID (PyInterpreterState *interp )
Part of the StableABI since version 3.7. Returntheinterpreter’suniqueID.Iftherewasanyerrorindoingso
then-1isreturnedandanerrorisset.
ThecallermustholdtheGIL.
Addedinversion3.7.
PyObject*PyInterpreterState_GetDict (PyInterpreterState *interp )
Part of the StableABI since version 3.8. Returnadictionaryinwhichinterpreter-specificdatamaybestored.
If this function returns NULLthen no exception has been raised and the caller should assume no interpreter-
specificdictisavailable.
This is not a replacement for PyModule_GetState() , which extensions should use to store interpreter-
specificstateinformation.
Addedinversion3.8.
typedef PyObject*(*_PyFrameEvalFunction )(PyThreadState *tstate, _PyInterpreterFrame *frame,int
throwflag)
Typeofaframeevaluationfunction.
Thethrowflagparameter is used by the throw()method of generators: if non-zero, handle the current ex-
ception.
Changedinversion3.9: Thefunctionnowtakesa tstateparameter.
Changed in version 3.11: The frameparameter changed from PyFrameObject* to
_PyInterpreterFrame* .
210 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
_PyFrameEvalFunction _PyInterpreterState_GetEvalFrameFunc (PyInterpreterState *interp )
Gettheframeevaluationfunction.
Seethe PEP 523“AddingaframeevaluationAPItoCPython”.
Addedinversion3.9.
void_PyInterpreterState_SetEvalFrameFunc (PyInterpreterState *interp, _PyFrameEvalFunction
eval_frame )
Settheframeevaluationfunction.
Seethe PEP 523“AddingaframeevaluationAPItoCPython”.
Addedinversion3.9.
PyObject*PyThreadState_GetDict ()
Return value: Borrowed reference. Part of the Stable ABI .Return a dictionary in which extensions can store
thread-specificstateinformation. Eachextensionshoulduseauniquekeytousetostorestateinthedictionary.
It is okay to call this function when no current thread state is available. If this function returns NULL, no
exceptionhasbeenraisedandthecallershouldassumenocurrentthreadstateisavailable.
intPyThreadState_SetAsyncExc (unsignedlongid, PyObject*exc)
Part of the Stable ABI .Asynchronously raise an exception in a thread. The idargument is the thread id of
the target thread; excis the exception object to be raised. This function does not steal any references to exc.
Topreventnaivemisuse,youmustwriteyourownCextensiontocallthis. MustbecalledwiththeGILheld.
Returnsthenumberofthreadstatesmodified;thisisnormallyone,butwillbezeroifthethreadidisn’tfound.
IfexcisNULL,thependingexception(ifany)forthethreadiscleared. Thisraisesnoexceptions.
Changedinversion3.7: Thetypeofthe idparameterchangedfrom longtounsigned long .
voidPyEval_AcquireThread (PyThreadState *tstate )
Part of the StableABI .Acquiretheglobalinterpreterlockandsetthecurrentthreadstateto tstate,whichmust
notbe NULL.Thelockmusthavebeencreatedearlier. Ifthisthreadalreadyhasthelock,deadlockensues.
®Note
Calling this function from a thread when the runtime is finalizing will terminate the thread, even if the
thread was not created by Python. You can use Py_IsFinalizing() orsys.is_finalizing() to
check if the interpreter is in process of being finalized before calling this function to avoid unwanted
termination.
Changed in version 3.8: Updated to be consistent with PyEval_RestoreThread() ,
Py_END_ALLOW_THREADS() , and PyGILState_Ensure() , and terminate the current thread if called
whiletheinterpreterisfinalizing.
PyEval_RestoreThread() isahigher-levelfunctionwhichisalwaysavailable(evenwhenthreadshavenot
beeninitialized).
voidPyEval_ReleaseThread (PyThreadState *tstate )
Part of the StableABI .Resetthecurrentthreadstateto NULLandreleasetheglobalinterpreterlock. Thelock
musthavebeencreatedearlierandmustbe heldbythecurrentthread. The tstateargument, whichmustnot
beNULL,isonlyusedtocheckthatitrepresentsthecurrentthreadstate—ifitisn’t,afatalerrorisreported.
PyEval_SaveThread() is a higher-level function which is always available (even when threads have not
beeninitialized).
9.6Sub-interpreter support
Whileinmostuses,youwillonlyembedasinglePythoninterpreter,therearecaseswhereyouneedtocreateseveral
independentinterpretersinthesameprocessandperhapseveninthesamethread. Sub-interpretersallowyoutodo
that.
9.6. Sub-interpreter support 211
The Python/C API, Release 3.13.0
The“main”interpreteristhefirstonecreatedwhentheruntimeinitializes. ItisusuallytheonlyPythoninterpreterina
process. Unlikesub-interpreters,themaininterpreterhasuniqueprocess-globalresponsibilitieslikesignalhandling.
It is also responsible for execution during runtime initialization and is usually the active interpreter during runtime
finalization. The PyInterpreterState_Main() functionreturnsapointertoitsstate.
Youcanswitchbetweensub-interpretersusingthe PyThreadState_Swap() function. Youcancreateanddestroy
themusingthefollowingfunctions:
typePyInterpreterConfig
Structure containing most parameters to configure a sub-interpreter. Its values are used only in
Py_NewInterpreterFromConfig() andnevermodifiedbytheruntime.
Addedinversion3.12.
Structurefields:
intuse_main_obmalloc
Ifthisis 0thenthesub-interpreterwilluseitsown“object”allocatorstate. Otherwiseitwilluse(share)
themaininterpreter’s.
Ifthisis 0thencheck_multi_interp_extensions mustbe 1(non-zero). Ifthisis 1thengilmust
notbe PyInterpreterConfig_OWN_GIL .
intallow_fork
Ifthisis 0thentheruntimewillnotsupportforkingtheprocessinanythreadwherethesub-interpreter
iscurrentlyactive. Otherwiseforkisunrestricted.
Notethatthe subprocess modulestillworkswhenforkisdisallowed.
intallow_exec
Ifthisis 0thentheruntimewillnotsupportreplacingthecurrentprocessviaexec(e.g. os.execv() )
inanythreadwherethesub-interpreteriscurrentlyactive. Otherwiseexecisunrestricted.
Notethatthe subprocess modulestillworkswhenexecisdisallowed.
intallow_threads
If this is 0then the sub-interpreter’s threading module won’t create threads. Otherwise threads are
allowed.
intallow_daemon_threads
Ifthisis 0thenthesub-interpreter’s threading modulewon’tcreatedaemonthreads. Otherwisedaemon
threadsareallowed(aslongas allow_threads isnon-zero).
intcheck_multi_interp_extensions
If this is 0then all extension modules may be imported, including legacy (single-phase init) modules,
in any thread where the sub-interpreter is currently active. Otherwise only multi-phase init extension
modules(see PEP 489)maybeimported. (Alsosee Py_mod_multiple_interpreters .)
Thismustbe 1(non-zero)if use_main_obmalloc is0.
intgil
ThisdeterminestheoperationoftheGILforthesub-interpreter. Itmaybeoneofthefollowing:
PyInterpreterConfig_DEFAULT_GIL
Usethedefaultselection( PyInterpreterConfig_SHARED_GIL ).
PyInterpreterConfig_SHARED_GIL
Use(share)themaininterpreter’sGIL.
PyInterpreterConfig_OWN_GIL
Usethesub-interpreter’sownGIL.
If this is PyInterpreterConfig_OWN_GIL thenPyInterpreterConfig.use_main_obmalloc
mustbe 0.
212 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
PyStatus Py_NewInterpreterFromConfig (PyThreadState **tstate_p,const PyInterpreterConfig *config )
Create a new sub-interpreter. This is an (almost) totally separate environment for the execution of Python
code. Inparticular,thenewinterpreterhasseparate,independentversionsofallimportedmodules,including
thefundamentalmodules builtins ,__main__ andsys. Thetableofloadedmodules( sys.modules )and
the module search path ( sys.path ) are also separate. The new environment has no sys.argv variable. It
has new standard I/O stream file objects sys.stdin ,sys.stdout andsys.stderr (however these refer
tothesameunderlyingfiledescriptors).
Thegiven configcontrolstheoptionswithwhichtheinterpreterisinitialized.
Uponsuccess, tstate_pwillbesettothefirstthreadstatecreatedinthenewsub-interpreter. Thisthreadstate
is made in the current thread state. Note that no actual thread is created; see the discussion of thread states
below. Ifcreationofthenewinterpreterisunsuccessful, tstate_pissetto NULL;noexceptionissetsincethe
exceptionstateisstoredinthecurrentthreadstateandtheremaynotbeacurrentthreadstate.
Like all other Python/C API functions, the global interpreter lock must be held before calling this function
andisstillheldwhenitreturns. Likewiseacurrentthreadstatemustbesetonentry. Onsuccess,thereturned
threadstatewillbesetascurrent. Ifthesub-interpreteriscreatedwithitsownGILthentheGILofthecalling
interpreterwillbereleased. Whenthefunctionreturns, thenewinterpreter’sGILwillbeheldbythecurrent
threadandthepreviouslyinterpreter’sGILwillremainreleasedhere.
Addedinversion3.12.
Sub-interpretersaremosteffectivewhenisolatedfromeachother,withcertainfunctionalityrestricted:
PyInterpreterConfig config ={
.use_main_obmalloc =0,
.allow_fork =0,
.allow_exec =0,
.allow_threads =1,
.allow_daemon_threads =0,
.check_multi_interp_extensions =1,
.gil =PyInterpreterConfig_OWN_GIL,
};
PyThreadState *tstate =Py_NewInterpreterFromConfig( &config);
Notethattheconfigisusedonlybrieflyanddoesnotgetmodified. Duringinitializationtheconfig’svaluesare
convertedintovarious PyInterpreterState values. Aread-onlycopyoftheconfigmaybestoredinternally
onthe PyInterpreterState .
Extensionmodulesaresharedbetween(sub-)interpretersasfollows:
•Formodulesusingmulti-phaseinitialization,e.g. PyModule_FromDefAndSpec() ,aseparatemodule
objectiscreatedandinitializedforeachinterpreter. OnlyC-levelstaticandglobalvariablesareshared
betweenthesemoduleobjects.
•Formodulesusingsingle-phaseinitialization,e.g. PyModule_Create() ,thefirsttimeaparticularex-
tensionisimported,itisinitializednormally,anda(shallow)copyofitsmodule’sdictionaryissquirreled
away. Whenthesameextensionisimportedbyanother(sub-)interpreter,anewmoduleisinitializedand
filledwiththecontentsofthiscopy;theextension’s initfunctionisnotcalled. Objectsinthemodule’s
dictionarythusendupsharedacross(sub-)interpreters,whichmightcauseunwantedbehavior(see Bugs
and caveats below).
Note that this is different from what happens when an extension is imported after the interpreter has
beencompletelyre-initializedbycalling Py_FinalizeEx() andPy_Initialize() ;inthatcase,the
extension’s initmodule function iscalledagain. Aswithmulti-phaseinitialization,thismeansthatonly
C-levelstaticandglobalvariablesaresharedbetweenthesemodules.
PyThreadState *Py_NewInterpreter (void)
Part of the Stable ABI .Create a new sub-interpreter. This is essentially just a wrapper around
Py_NewInterpreterFromConfig() with a config that preserves the existing behavior. The result is an
unisolatedsub-interpreterthatsharesthemaininterpreter’sGIL,allowsfork/exec,allowsdaemonthreads,and
allowssingle-phaseinitmodules.
9.6. Sub-interpreter support 213
The Python/C API, Release 3.13.0
voidPy_EndInterpreter (PyThreadState *tstate )
Part of the StableABI .Destroythe(sub-)interpreterrepresentedbythegiventhreadstate. Thegiventhread
state must be the current thread state. See the discussion of thread states below. When the call returns,
the current thread state is NULL. All thread states associated with this interpreter are destroyed. The global
interpreterlockusedbythetargetinterpretermustbeheldbeforecallingthisfunction. NoGILisheldwhen
itreturns.
Py_FinalizeEx() willdestroyallsub-interpretersthathaven’tbeenexplicitlydestroyedatthatpoint.
9.6.1A Per-Interpreter GIL
Using Py_NewInterpreterFromConfig() youcancreateasub-interpreterthatiscompletelyisolatedfromother
interpreters, including having its own GIL. The most important benefit of this isolation is that such an interpreter
canexecutePythoncodewithoutbeingblockedbyotherinterpretersorblockinganyothers. ThusasinglePython
processcantrulytakeadvantageofmultipleCPUcoreswhenrunningPythoncode. Theisolationalsoencouragesa
differentapproachtoconcurrencythanthatofjustusingthreads. (See PEP 554.)
Using an isolated interpreter requires vigilance in preserving that isolation. That especially means not sharing any
objects or mutable state without guarantees about thread-safety. Even objects that are otherwise immutable (e.g.
None,(1, 5)) can’t normally be shared because of the refcount. One simple but less-efficient approach around
thisisto usea globallockaroundalluse ofsomestate(orobject). Alternately, effectivelyimmutableobjects(like
integersorstrings)canbemadesafeinspiteoftheirrefcountsbymakingthem immortal. Infact,thishasbeendone
forthebuiltinsingletons,smallintegers,andanumberofotherbuiltinobjects.
If you preserve isolation then you will have access to proper multi-core computing without the complications that
come with free-threading. Failure to preserve isolation will expose you to the full consequences of free-threading,
includingracesandhard-to-debugcrashes.
Asidefromthat,oneofthemainchallengesofusingmultipleisolatedinterpretersishowtocommunicatebetween
them safely (not break isolation) and efficiently. The runtime and stdlib do not provide any standard approach to
thisyet. Afuturestdlibmodulewouldhelpmitigatetheeffortofpreservingisolationandexposeeffectivetoolsfor
communicating(andsharing)databetweeninterpreters.
Addedinversion3.12.
9.6.2Bugs and caveats
Because sub-interpreters (and the main interpreter) are part of the same process, the insulation between them isn’t
perfect—forexample,usinglow-levelfileoperationslike os.close() theycan(accidentallyormaliciously)affect
eachother’sopenfiles. Becauseofthewayextensionsaresharedbetween(sub-)interpreters,someextensionsmaynot
workproperly;thisisespeciallylikelywhenusingsingle-phaseinitializationor(static)globalvariables. Itispossible
toinsertobjectscreatedinonesub-interpreterintoanamespaceofanother(sub-)interpreter;thisshouldbeavoided
ifpossible.
Special care should be taken to avoid sharing user-defined functions, methods, instances or classes between sub-
interpreters,sinceimportoperationsexecutedbysuchobjectsmayaffectthewrong(sub-)interpreter’sdictionaryof
loadedmodules. Itisequallyimportanttoavoidsharingobjectsfromwhichtheabovearereachable.
Alsonotethatcombiningthisfunctionalitywith PyGILState_* APIsisdelicate,becausetheseAPIsassumeabijec-
tionbetweenPythonthreadstatesandOS-levelthreads,anassumptionbrokenbythepresenceofsub-interpreters. It
ishighlyrecommendedthatyoudon’tswitchsub-interpretersbetweenapairofmatching PyGILState_Ensure()
andPyGILState_Release() calls. Furthermore, extensions(suchas ctypes)usingtheseAPIsto allowcalling
ofPythoncodefromnon-Pythoncreatedthreadswillprobablybebrokenwhenusingsub-interpreters.
9.7Asynchronous Notifications
Amechanismisprovidedtomakeasynchronousnotificationstothemaininterpreterthread. Thesenotificationstake
theformofafunctionpointerandavoidpointerargument.
214 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
intPy_AddPendingCall (int(*func)(void*),void*arg )
Part of the Stable ABI .Schedule a function to be called from the main interpreter thread. On success, 0is
returnedand funcisqueuedforbeingcalledinthemainthread. Onfailure, -1isreturnedwithoutsettingany
exception.
Whensuccessfullyqueued, funcwillbe eventuallycalledfromthemaininterpreterthreadwiththeargument
arg. ItwillbecalledasynchronouslywithrespecttonormallyrunningPythoncode,butwithboththesecon-
ditionsmet:
•onabytecodeboundary;
•withthemainthreadholdingthe global interpreter lock (funccanthereforeusethefullCAPI).
funcmust return 0on success, or -1on failure with an exception set. funcwon’t be interrupted to perform
another asynchronous notification recursively, but it can still be interrupted to switch threads if the global
interpreterlockisreleased.
Thisfunctiondoesn’tneedacurrentthreadstatetorun,anditdoesn’tneedtheglobalinterpreterlock.
To call this function in a subinterpreter, the caller must hold the GIL. Otherwise, the function funccan be
scheduledtobecalledfromthewronginterpreter.
ÁWarning
This is a low-level function, only useful for very special cases. There is no guarantee that funcwill be
calledasquickaspossible. Ifthemainthreadisbusyexecutingasystemcall, funcwon’tbecalledbefore
the system call returns. This function is generally notsuitable for calling Python code from arbitrary C
threads. Instead,usethe PyGILState API .
Addedinversion3.1.
Changedinversion3.9: Ifthisfunctioniscalledinasubinterpreter,thefunction funcisnowscheduledtobe
calledfromthesubinterpreter,ratherthanbeingcalledfromthemaininterpreter. Eachsubinterpreternowhas
itsownlistofscheduledcalls.
9.8Profiling and Tracing
ThePythoninterpreterprovidessomelow-levelsupportforattachingprofilingandexecutiontracingfacilities. These
areusedforprofiling,debugging,andcoverageanalysistools.
This C interface allows the profiling or tracing code to avoid the overhead of calling through Python-level callable
objects,makingadirectCfunctioncallinstead. Theessentialattributesofthefacilityhavenotchanged;theinterface
allowstracefunctionstobeinstalledper-thread,andthebasiceventsreportedtothetracefunctionarethesameas
hadbeenreportedtothePython-leveltracefunctionsinpreviousversions.
typedefint(* Py_tracefunc )(PyObject*obj, PyFrameObject *frame,intwhat, PyObject*arg)
The type of the trace function registered using PyEval_SetProfile() andPyEval_SetTrace() .
The first parameter is the object passed to the registration function as obj,frameis the frame ob-
ject to which the event pertains, whatis one of the constants PyTrace_CALL ,PyTrace_EXCEPTION ,
PyTrace_LINE ,PyTrace_RETURN ,PyTrace_C_CALL ,PyTrace_C_EXCEPTION ,PyTrace_C_RETURN ,
orPyTrace_OPCODE ,andargdependsonthevalueof what:
9.8. Profiling and Tracing 215
The Python/C API, Release 3.13.0
Valueof what Meaningof arg
PyTrace_CALL Always Py_None.
PyTrace_EXCEPTION Exceptioninformationasreturnedby sys.exc_info() .
PyTrace_LINE Always Py_None.
PyTrace_RETURN Valuebeingreturnedtothecaller,or NULLifcausedbyanexception.
PyTrace_C_CALL Functionobjectbeingcalled.
PyTrace_C_EXCEPTION Functionobjectbeingcalled.
PyTrace_C_RETURN Functionobjectbeingcalled.
PyTrace_OPCODE Always Py_None.
intPyTrace_CALL
The value of the whatparameter to a Py_tracefunc function when a new call to a function or method is
beingreported,oranewentryintoagenerator. Notethatthecreationoftheiteratorforageneratorfunction
isnotreportedasthereisnocontroltransfertothePythonbytecodeinthecorrespondingframe.
intPyTrace_EXCEPTION
The value of the whatparameter to a Py_tracefunc function when an exception has been raised. The
callback function is called with this value for whatwhen after any bytecode is processed after which the
exception becomes set within the frame being executed. The effect of this is that as exception propagation
causesthePythonstacktounwind,thecallbackiscalleduponreturntoeachframeastheexceptionpropagates.
Onlytracefunctionsreceivestheseevents;theyarenotneededbytheprofiler.
intPyTrace_LINE
The value passed as the whatparameter to a Py_tracefunc function (but not a profiling function) when a
line-numbereventisbeingreported. Itmaybedisabledforaframebysetting f_trace_lines to0onthat
frame.
intPyTrace_RETURN
Thevalueforthe whatparameterto Py_tracefunc functionswhenacallisabouttoreturn.
intPyTrace_C_CALL
Thevalueforthe whatparameterto Py_tracefunc functionswhenaCfunctionisabouttobecalled.
intPyTrace_C_EXCEPTION
Thevalueforthe whatparameterto Py_tracefunc functionswhenaCfunctionhasraisedanexception.
intPyTrace_C_RETURN
Thevalueforthe whatparameterto Py_tracefunc functionswhenaCfunctionhasreturned.
intPyTrace_OPCODE
The valueforthe whatparameterto Py_tracefunc functions(butnotprofiling functions)whena newop-
code is about to be executed. This event is not emitted by default: it must be explicitly requested by setting
f_trace_opcodes to1ontheframe.
voidPyEval_SetProfile (Py_tracefunc func,PyObject*obj)
Set the profiler function to func. The objparameter is passed to the function as its first parameter, and may
be any Python object, or NULL. If the profile function needs to maintain state, using a different value for obj
for each thread provides a convenient and thread-safe place to store it. The profile function is called for all
monitoredeventsexcept PyTrace_LINE PyTrace_OPCODE andPyTrace_EXCEPTION .
Seealsothe sys.setprofile() function.
Thecallermustholdthe GIL.
voidPyEval_SetProfileAllThreads (Py_tracefunc func,PyObject*obj)
Like PyEval_SetProfile() but sets the profile function in all running threads belonging to the current
interpreterinsteadofthesettingitonlyonthecurrentthread.
Thecallermustholdthe GIL.
216 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
AsPyEval_SetProfile() ,thisfunctionignoresanyexceptionsraisedwhilesettingtheprofilefunctionsin
allthreads.
Addedinversion3.12.
voidPyEval_SetTrace (Py_tracefunc func,PyObject*obj)
Setthetracingfunctionto func. Thisissimilarto PyEval_SetProfile() ,exceptthetracingfunctiondoes
receiveline-numbereventsandper-opcodeevents,butdoesnotreceiveanyeventrelatedtoCfunctionobjects
beingcalled. Anytracefunctionregisteredusing PyEval_SetTrace() willnotreceive PyTrace_C_CALL ,
PyTrace_C_EXCEPTION orPyTrace_C_RETURN asavalueforthe whatparameter.
Seealsothe sys.settrace() function.
Thecallermustholdthe GIL.
voidPyEval_SetTraceAllThreads (Py_tracefunc func,PyObject*obj)
Like PyEval_SetTrace() butsetsthetracingfunctioninallrunningthreadsbelongingtothecurrentinter-
preterinsteadofthesettingitonlyonthecurrentthread.
Thecallermustholdthe GIL.
AsPyEval_SetTrace() ,thisfunctionignoresanyexceptionsraisedwhilesettingthetracefunctionsinall
threads.
Addedinversion3.12.
9.9Reference tracing
Addedinversion3.13.
typedefint(* PyRefTracer )(PyObject*,intevent,void*data)
Thetypeofthetracefunctionregisteredusing PyRefTracer_SetTracer() . ThefirstparameterisaPython
objectthathasbeenjustcreated(when eventissetto PyRefTracer_CREATE )orabouttobedestroyed(when
eventissetto PyRefTracer_DESTROY ).The dataargumentistheopaquepointerthatwasprovidedwhen
PyRefTracer_SetTracer() wascalled.
Addedinversion3.13.
intPyRefTracer_CREATE
Thevalueforthe eventparameterto PyRefTracer functionswhenaPythonobjecthasbeencreated.
intPyRefTracer_DESTROY
Thevalueforthe eventparameterto PyRefTracer functionswhenaPythonobjecthasbeendestroyed.
intPyRefTracer_SetTracer (PyRefTracer tracer,void*data )
Registerareferencetracerfunction. ThefunctionwillbecalledwhenanewPythonhasbeencreatedorwhen
anobjectisgoingtobedestroyed. If dataisprovideditmustbeanopaquepointerthatwillbeprovidedwhen
thetracerfunctioniscalled. Return 0onsuccess. Setanexceptionandreturn -1onerror.
Notthattracerfunctions must notcreatePythonobjectsinsideorotherwisethecallwillbere-entrant. The
tracer also must notclear any existing exception or set an exception. The GIL will be held every time the
tracerfunctioniscalled.
TheGILmustbeheldwhencallingthisfunction.
Addedinversion3.13.
PyRefTracer PyRefTracer_GetTracer (void**data )
Gettheregisteredreferencetracerfunctionandthevalueoftheopaquedatapointerthatwasregisteredwhen
PyRefTracer_SetTracer() wascalled. IfnotracerwasregisteredthisfunctionwillreturnNULLandwill
setthe datapointertoNULL.
TheGILmustbeheldwhencallingthisfunction.
Addedinversion3.13.
9.9. Reference tracing 217
The Python/C API, Release 3.13.0
9.10Advanced Debugger Support
Thesefunctionsareonlyintendedtobeusedbyadvanceddebuggingtools.
PyInterpreterState *PyInterpreterState_Head ()
Returntheinterpreterstateobjectattheheadofthelistofallsuchobjects.
PyInterpreterState *PyInterpreterState_Main ()
Returnthemaininterpreterstateobject.
PyInterpreterState *PyInterpreterState_Next (PyInterpreterState *interp )
Returnthenextinterpreterstateobjectafter interpfromthelistofallsuchobjects.
PyThreadState *PyInterpreterState_ThreadHead (PyInterpreterState *interp )
Return the pointer to the first PyThreadState object in the list of threads associated with the interpreter
interp.
PyThreadState *PyThreadState_Next (PyThreadState *tstate )
Return the next thread state object after tstatefrom the list of all such objects belonging to the same
PyInterpreterState object.
9.11Thread Local Storage Support
ThePythoninterpreterprovideslow-levelsupportforthread-localstorage(TLS)whichwrapstheunderlyingnative
TLS implementation to support the Python-level thread local storage API ( threading.local ). The CPython C
levelAPIsaresimilartothoseofferedbypthreadsandWindows: useathreadkeyandfunctionstoassociatea void*
valueperthread.
TheGILdoes notneedtobeheldwhencallingthesefunctions;theysupplytheirownlocking.
Note that Python.h does not include the declaration of the TLS APIs, you need to include pythread.h to use
thread-localstorage.
®Note
NoneoftheseAPIfunctionshandlememorymanagementonbehalfofthe void*values. Youneedtoallocate
anddeallocatethemyourself. Ifthe void*valueshappentobe PyObject *, thesefunctionsdon’tdorefcount
operationsonthemeither.
9.11.1 Thread Specific Storage (TSS) API
TSSAPIisintroducedtosupersedetheuseoftheexistingTLSAPIwithintheCPythoninterpreter. ThisAPIuses
anewtype Py_tss_t insteadof inttorepresentthreadkeys.
Addedinversion3.7.
µSee also
“ANewC-APIforThread-LocalStorageinCPython”( PEP 539)
typePy_tss_t
Thisdatastructurerepresentsthestateofathreadkey,thedefinitionofwhichmaydependontheunderlying
TLSimplementation,andithasaninternalfieldrepresentingthekey’sinitializationstate. Therearenopublic
membersinthisstructure.
When Py_LIMITED_API isnotdefined,staticallocationofthistypeby Py_tss_NEEDS_INIT isallowed.
218 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
Py_tss_NEEDS_INIT
This macro expands to the initializer for Py_tss_t variables. Note that this macro won’t be defined with
Py_LIMITED_API .
Dynamic Allocation
Dynamic allocation of the Py_tss_t , required in extension modules built with Py_LIMITED_API , where static
allocationofthistypeisnotpossibleduetoitsimplementationbeingopaqueatbuildtime.
Py_tss_t*PyThread_tss_alloc ()
Part of the Stable ABI since version 3.7. Return a value which is the same state as a value initialized with
Py_tss_NEEDS_INIT ,orNULLinthecaseofdynamicallocationfailure.
voidPyThread_tss_free (Py_tss_t*key)
Part of the StableABI since version 3.7. Freethegiven keyallocatedby PyThread_tss_alloc() ,afterfirst
calling PyThread_tss_delete() to ensure any associated thread locals have been unassigned. This is a
no-opifthe keyargumentis NULL.
®Note
Afreedkeybecomesadanglingpointer. Youshouldresetthekeyto NULL.
Methods
The parameter keyof these functions must not be NULL. Moreover, the behaviors of PyThread_tss_set()
and PyThread_tss_get() are undefined if the given Py_tss_t has not been initialized by
PyThread_tss_create() .
intPyThread_tss_is_created (Py_tss_t*key)
Part of the StableABI since version 3.7. Returnanon-zerovalueifthegiven Py_tss_t hasbeeninitialized
byPyThread_tss_create() .
intPyThread_tss_create (Py_tss_t*key)
Part of the Stable ABI since version 3.7. Return a zero value on successful initialization of a TSS key. The
behaviorisundefinedifthevaluepointedtobythe keyargumentisnotinitializedby Py_tss_NEEDS_INIT .
Thisfunctioncanbecalledrepeatedlyonthesamekey–callingitonanalreadyinitializedkeyisano-opand
immediatelyreturnssuccess.
voidPyThread_tss_delete (Py_tss_t*key)
Part of the StableABI since version 3.7. DestroyaTSSkeytoforgetthevaluesassociatedwiththekeyacross
all threads, and change the key’s initialization state to uninitialized. A destroyed key is able to be initialized
againby PyThread_tss_create() . Thisfunctioncanbecalledrepeatedlyonthesamekey–callingiton
analreadydestroyedkeyisano-op.
intPyThread_tss_set (Py_tss_t*key,void*value )
Part of the StableABI since version 3.7. Returnazerovaluetoindicatesuccessfullyassociatinga void*value
withaTSSkeyinthecurrentthread. Eachthreadhasadistinctmappingofthekeytoa void*value.
void* PyThread_tss_get (Py_tss_t*key)
Part of the Stable ABI since version 3.7. Return the void*value associated with a TSS key in the current
thread. Thisreturns NULLifnovalueisassociatedwiththekeyinthecurrentthread.
9.11.2 Thread Local Storage (TLS) API
Deprecatedsinceversion3.7: ThisAPIissupersededby Thread Specific Storage (TSS) API .
9.11. Thread Local Storage Support 219
The Python/C API, Release 3.13.0
®Note
ThisversionoftheAPIdoesnotsupportplatformswherethenativeTLSkeyisdefinedinawaythatcannotbe
safelycastto int. Onsuchplatforms, PyThread_create_key() willreturnimmediatelywithafailurestatus,
andtheotherTLSfunctionswillallbeno-opsonsuchplatforms.
Duetothecompatibilityproblemnotedabove,thisversionoftheAPIshouldnotbeusedinnewcode.
intPyThread_create_key ()
Part of the StableABI .
voidPyThread_delete_key (intkey )
Part of the StableABI .
intPyThread_set_key_value (intkey,void*value )
Part of the StableABI .
void* PyThread_get_key_value (intkey )
Part of the StableABI .
voidPyThread_delete_key_value (intkey )
Part of the StableABI .
voidPyThread_ReInitTLS ()
Part of the StableABI .
9.12Synchronization Primitives
TheC-APIprovidesabasicmutualexclusionlock.
typePyMutex
A mutual exclusion lock. The PyMutexshould be initialized to zero to represent the unlocked state. For
example:
PyMutex mutex ={0};
Instances of PyMutexshould not be copied or moved. Both the contents and address of a PyMutexare
meaningful,anditmustremainatafixed,writablelocationinmemory.
®Note
APyMutexcurrentlyoccupiesonebyte,butthesizeshouldbeconsideredunstable. Thesizemaychange
infuturePythonreleaseswithoutadeprecationperiod.
Addedinversion3.13.
voidPyMutex_Lock (PyMutex*m)
Lockmutex m. Ifanotherthreadhasalreadylockedit,thecallingthreadwillblockuntilthemutexisunlocked.
Whileblocked,thethreadwilltemporarilyreleasethe GILifitisheld.
Addedinversion3.13.
voidPyMutex_Unlock (PyMutex*m)
Unlockmutex m. Themutexmustbelocked—otherwise,thefunctionwillissueafatalerror.
Addedinversion3.13.
220 Chapter 9. Initialization, Finalization, and Threads
The Python/C API, Release 3.13.0
9.12.1 Python Critical Section API
ThecriticalsectionAPIprovidesadeadlockavoidancelayerontopofper-objectlocksfor free-threaded CPython.
They are intended to replace reliance on the global interpreter lock , and are no-ops in versions of Python with the
globalinterpreterlock.
Criticalsectionsavoiddeadlocksbyimplicitlysuspendingactivecriticalsectionsandreleasingthelocksduringcallsto
PyEval_SaveThread() . When PyEval_RestoreThread() iscalled,themostrecentcriticalsectionisresumed,
anditslocksreacquired. ThismeansthecriticalsectionAPIprovidesweakerguaranteesthantraditionallocks–they
areusefulbecausetheirbehaviorissimilartothe GIL.
ThefunctionsandstructsusedbythemacrosareexposedforcaseswhereCmacrosarenotavailable. Theyshould
onlybeusedasinthegivenmacroexpansions. Notethatthesizesandcontentsofthestructuresmaychangeinfuture
Pythonversions.
®Note
Operationsthatneedtolocktwoobjectsatoncemustuse Py_BEGIN_CRITICAL_SECTION2 . You cannotuse
nestedcriticalsectionstolockmorethanoneobjectatonce,becausetheinnercriticalsectionmaysuspendthe
outercriticalsections. ThisAPIdoesnotprovideawaytolockmorethantwoobjectsatonce.
Exampleusage:
static PyObject *
set_field (MyObject *self, PyObject *value)
{
Py_BEGIN_CRITICAL_SECTION(self);
Py_SETREF(self ->field, Py_XNewRef(value));
Py_END_CRITICAL_SECTION();
Py_RETURN_NONE;
}
In the above example, Py_SETREF calls Py_DECREF , which can call arbitrary code through an object’s dealloca-
tion function. The critical section API avoids potential deadlocks due to reentrancy and lock ordering by allow-
ing the runtime to temporarily suspend the critical section if the code triggered by the finalizer blocks and calls
PyEval_SaveThread() .
Py_BEGIN_CRITICAL_SECTION (op)
Acquirestheper-objectlockfortheobject opandbeginsacriticalsection.
Inthefree-threadedbuild,thismacroexpandsto:
{
PyCriticalSection _py_cs;
PyCriticalSection_Begin( &_py_cs, (PyObject *)(op))
Inthedefaultbuild,thismacroexpandsto {.
Addedinversion3.13.
Py_END_CRITICAL_SECTION ()
Endsthecriticalsectionandreleasestheper-objectlock.
Inthefree-threadedbuild,thismacroexpandsto:
PyCriticalSection_End( &_py_cs);
}
Inthedefaultbuild,thismacroexpandsto }.
Addedinversion3.13.
9.12. Synchronization Primitives 221
The Python/C API, Release 3.13.0
Py_BEGIN_CRITICAL_SECTION2 (a,b)
Acquirestheper-objectslocksfortheobjects aandbandbeginsacriticalsection. Thelocksareacquiredin
aconsistentorder(lowestaddressfirst)toavoidlockorderingdeadlocks.
Inthefree-threadedbuild,thismacroexpandsto:
{
PyCriticalSection2 _py_cs2;
PyCriticalSection_Begin2( &_py_cs2, (PyObject *)(a), (PyObject *)(b))
Inthedefaultbuild,thismacroexpandsto {.
Addedinversion3.13.
Py_END_CRITICAL_SECTION2 ()
Endsthecriticalsectionandreleasestheper-objectlocks.
Inthefree-threadedbuild,thismacroexpandsto:
PyCriticalSection_End2( &_py_cs2);
}
Inthedefaultbuild,thismacroexpandsto }.
Addedinversion3.13.
222 Chapter 9. Initialization, Finalization, and Threads
CHAPTER
TEN
PYTHON INITIALIZATION CONFIGURATION
Addedinversion3.8.
Pythoncanbeinitializedwith Py_InitializeFromConfig() andthe PyConfig structure. Itcanbepreinitialized
withPy_PreInitialize() andthe PyPreConfig structure.
Therearetwokindsofconfiguration:
•ThePython Configuration canbeusedtobuildacustomizedPythonwhichbehavesastheregularPython. For
example,environmentvariablesandcommandlineargumentsareusedtoconfigurePython.
•TheIsolated Configuration canbeusedtoembedPythonintoanapplication. ItisolatesPythonfromthesystem.
Forexample,environmentvariablesareignored,theLC_CTYPElocaleisleftunchangedandnosignalhandler
isregistered.
ThePy_RunMain() functioncanbeusedtowriteacustomizedPythonprogram.
Seealso Initialization, Finalization, and Threads .
µSee also
PEP 587“PythonInitializationConfiguration”.
10.1Example
ExampleofcustomizedPythonalwaysrunninginisolatedmode:
int main (int argc, char **argv)
{
PyStatus status;
PyConfig config;
PyConfig_InitPythonConfig( &config);
config.isolated =1;
/* Decode command line arguments.
Implicitly preinitialize Python (in isolated mode). */
status =PyConfig_SetBytesArgv( &config, argc, argv);
if(PyStatus_Exception(status)) {
goto exception;
}
status =Py_InitializeFromConfig( &config);
if(PyStatus_Exception(status)) {
goto exception;
}
PyConfig_Clear( &config);
(continuesonnextpage)
223
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
return Py_RunMain();
exception :
PyConfig_Clear( &config);
if(PyStatus_IsExit(status)) {
return status.exitcode;
}
/* Display the error message and exit the process with
non-zero exit code */
Py_ExitStatusException(status);
}
10.2PyWideStringList
typePyWideStringList
Listof wchar_t* strings.
Iflengthisnon-zero, itemsmustbenon- NULLandallstringsmustbenon- NULL.
Methods:
PyStatus PyWideStringList_Append (PyWideStringList *list,constwchar_t*item )
Append itemtolist.
Pythonmustbepreinitializedtocallthisfunction.
PyStatus PyWideStringList_Insert (PyWideStringList *list,Py_ssize_t index,constwchar_t*item )
Insert itemintolistatindex.
Ifindexisgreaterthanorequalto listlength,append itemtolist.
indexmustbegreaterthanorequalto 0.
Pythonmustbepreinitializedtocallthisfunction.
Structurefields:
Py_ssize_t length
Listlength.
wchar_t** items
Listitems.
10.3PyStatus
typePyStatus
Structuretostoreaninitializationfunctionstatus: success,errororexit.
Foranerror,itcanstoretheCfunctionnamewhichcreatedtheerror.
Structurefields:
intexitcode
Exitcode. Argumentpassedto exit().
constchar* err_msg
Errormessage.
224 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
constchar* func
Nameofthefunctionwhichcreatedanerror,canbe NULL.
Functionstocreateastatus:
PyStatus PyStatus_Ok (void)
Success.
PyStatus PyStatus_Error (constchar*err_msg )
Initializationerrorwithamessage.
err_msgmustnotbe NULL.
PyStatus PyStatus_NoMemory (void)
Memoryallocationfailure(outofmemory).
PyStatus PyStatus_Exit (intexitcode )
ExitPythonwiththespecifiedexitcode.
Functionstohandleastatus:
intPyStatus_Exception (PyStatusstatus )
Is the status an error or an exit? If true, the exception must be handled; by calling
Py_ExitStatusException() forexample.
intPyStatus_IsError (PyStatusstatus )
Istheresultanerror?
intPyStatus_IsExit (PyStatusstatus )
Istheresultanexit?
voidPy_ExitStatusException (PyStatusstatus )
Callexit(exitcode) ifstatusisanexit. Printtheerrormessageandexitwithanon-zeroexitcodeif
statusisanerror. Mustonlybecalledif PyStatus_Exception(status) isnon-zero.
®Note
Internally, Python uses macros which set PyStatus.func , whereas functions to create a status set functo
NULL.
Example:
PyStatus alloc (void **ptr, size_t size)
{
*ptr =PyMem_RawMalloc(size);
if(*ptr ==NULL ){
return PyStatus_NoMemory();
}
return PyStatus_Ok();
}
int main (int argc, char **argv)
{
void *ptr;
PyStatus status =alloc( &ptr, 16);
if(PyStatus_Exception(status)) {
Py_ExitStatusException(status);
}
PyMem_Free(ptr);
return 0;
}
10.3. PyStatus 225
The Python/C API, Release 3.13.0
10.4PyPreConfig
typePyPreConfig
StructureusedtopreinitializePython.
Functiontoinitializeapreconfiguration:
voidPyPreConfig_InitPythonConfig (PyPreConfig *preconfig )
Initializethepreconfigurationwith Python Configuration .
voidPyPreConfig_InitIsolatedConfig (PyPreConfig *preconfig )
Initializethepreconfigurationwith Isolated Configuration .
Structurefields:
intallocator
NameofthePythonmemoryallocators:
•PYMEM_ALLOCATOR_NOT_SET (0): don’tchangememoryallocators(usedefaults).
•PYMEM_ALLOCATOR_DEFAULT (1):default memory allocators .
•PYMEM_ALLOCATOR_DEBUG (2):default memory allocators withdebug hooks .
•PYMEM_ALLOCATOR_MALLOC (3): use malloc() oftheClibrary.
•PYMEM_ALLOCATOR_MALLOC_DEBUG (4): forceusageof malloc() withdebug hooks .
•PYMEM_ALLOCATOR_PYMALLOC (5):Python pymalloc memory allocator .
•PYMEM_ALLOCATOR_PYMALLOC_DEBUG (6):Python pymalloc memory allocator withdebug hooks .
•PYMEM_ALLOCATOR_MIMALLOC (6): use mimalloc ,afastmallocreplacement.
•PYMEM_ALLOCATOR_MIMALLOC_DEBUG (7): use mimalloc ,afastmallocreplacementwith debug
hooks.
PYMEM_ALLOCATOR_PYMALLOC andPYMEM_ALLOCATOR_PYMALLOC_DEBUG are not supported if
Pythonis configured using --without-pymalloc .
PYMEM_ALLOCATOR_MIMALLOC andPYMEM_ALLOCATOR_MIMALLOC_DEBUG are not supported if
Pythonis configured using --without-mimalloc oriftheunderlyingatomicsupportisn’tavail-
able.
SeeMemory Management .
Default: PYMEM_ALLOCATOR_NOT_SET .
intconfigure_locale
SettheLC_CTYPElocaletotheuserpreferredlocale.
Ifequalsto 0,setcoerce_c_locale andcoerce_c_locale_warn membersto 0.
Seethe locale encoding .
Default: 1inPythonconfig, 0inisolatedconfig.
intcoerce_c_locale
Ifequalsto 2,coercetheClocale.
Ifequalsto 1,readtheLC_CTYPElocaletodecideifitshouldbecoerced.
Seethe locale encoding .
Default: -1inPythonconfig, 0inisolatedconfig.
intcoerce_c_locale_warn
Ifnon-zero,emitawarningiftheClocaleiscoerced.
Default: -1inPythonconfig, 0inisolatedconfig.
226 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
intdev_mode
PythonDevelopmentMode: see PyConfig.dev_mode .
Default: -1inPythonmode, 0inisolatedmode.
intisolated
Isolatedmode: see PyConfig.isolated .
Default: 0inPythonmode, 1inisolatedmode.
intlegacy_windows_fs_encoding
Ifnon-zero:
•SetPyPreConfig.utf8_mode to0,
•SetPyConfig.filesystem_encoding to"mbcs",
•SetPyConfig.filesystem_errors to"replace" .
Initializedfromthe PYTHONLEGACYWINDOWSFSENCODING environmentvariablevalue.
OnlyavailableonWindows. #ifdef MS_WINDOWS macrocanbeusedforWindowsspecificcode.
Default: 0.
intparse_argv
If non-zero, Py_PreInitializeFromArgs() andPy_PreInitializeFromBytesArgs() parse
their argvargumentthesamewaytheregularPythonparsescommandlinearguments: seeCommand
LineArguments.
Default: 1inPythonconfig, 0inisolatedconfig.
intuse_environment
Useenvironmentvariables? See PyConfig.use_environment .
Default: 1inPythonconfigand 0inisolatedconfig.
intutf8_mode
Ifnon-zero,enablethePythonUTF-8Mode.
Setto 0or1bythe -X utf8commandlineoptionandthe PYTHONUTF8 environmentvariable.
Alsosetto 1ifthe LC_CTYPE localeis CorPOSIX.
Default: -1inPythonconfigand 0inisolatedconfig.
10.5Preinitialize Python with PyPreConfig
ThepreinitializationofPython:
•SetthePythonmemoryallocators( PyPreConfig.allocator )
•ConfiguretheLC_CTYPElocale( locale encoding )
•SetthePythonUTF-8Mode( PyPreConfig.utf8_mode )
Thecurrentpreconfiguration( PyPreConfig type)isstoredin _PyRuntime.preconfig .
FunctionstopreinitializePython:
PyStatus Py_PreInitialize (const PyPreConfig *preconfig )
PreinitializePythonfrom preconfigpreconfiguration.
preconfigmustnotbe NULL.
10.5. Preinitialize Python with PyPreConfig 227
The Python/C API, Release 3.13.0
PyStatus Py_PreInitializeFromBytesArgs (const PyPreConfig *preconfig,intargc,char*const*argv )
PreinitializePythonfrom preconfigpreconfiguration.
Parse argvcommandlinearguments(bytesstrings)if parse_argv ofpreconfigisnon-zero.
preconfigmustnotbe NULL.
PyStatus Py_PreInitializeFromArgs (const PyPreConfig *preconfig,intargc,wchar_t*const*argv )
PreinitializePythonfrom preconfigpreconfiguration.
Parse argvcommandlinearguments(widestrings)if parse_argv ofpreconfigisnon-zero.
preconfigmustnotbe NULL.
The caller is responsible to handle exceptions (error or exit) using PyStatus_Exception() and
Py_ExitStatusException() .
ForPython Configuration (PyPreConfig_InitPythonConfig() ), if Python is initialized with command line
arguments,thecommandlineargumentsmustalsobepassedtopreinitializePython,sincetheyhaveaneffectonthe
pre-configurationlikeencodings. Forexample,the -X utf8commandlineoptionenablesthePythonUTF-8Mode.
PyMem_SetAllocator() can be called after Py_PreInitialize() and before
Py_InitializeFromConfig() to install a custom memory allocator. It can be called before
Py_PreInitialize() ifPyPreConfig.allocator issetto PYMEM_ALLOCATOR_NOT_SET .
Pythonmemoryallocationfunctionslike PyMem_RawMalloc() mustnotbeusedbeforethePythonpreinitialization,
whereas calling directly malloc() andfree()is always safe. Py_DecodeLocale() must not be called before
thePythonpreinitialization.
ExampleusingthepreinitializationtoenablethePythonUTF-8Mode:
PyStatus status;
PyPreConfig preconfig;
PyPreConfig_InitPythonConfig( &preconfig);
preconfig.utf8_mode =1;
status =Py_PreInitialize( &preconfig);
if(PyStatus_Exception(status)) {
Py_ExitStatusException(status);
}
/* at this point, Python speaks UTF-8 */
Py_Initialize();
/* ... use Python API here ... */
Py_Finalize();
10.6PyConfig
typePyConfig
StructurecontainingmostparameterstoconfigurePython.
Whendone,the PyConfig_Clear() functionmustbeusedtoreleasetheconfigurationmemory.
Structuremethods:
voidPyConfig_InitPythonConfig (PyConfig*config )
Initializeconfigurationwiththe Python Configuration .
voidPyConfig_InitIsolatedConfig (PyConfig*config )
Initializeconfigurationwiththe Isolated Configuration .
228 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
PyStatus PyConfig_SetString (PyConfig*config,wchar_t*const*config_str,constwchar_t*str )
Copythewidecharacterstring strinto*config_str .
Preinitialize Python ifneeded.
PyStatus PyConfig_SetBytesString (PyConfig*config,wchar_t*const*config_str,constchar*str )
Decode strusing Py_DecodeLocale() andsettheresultinto *config_str .
Preinitialize Python ifneeded.
PyStatus PyConfig_SetArgv (PyConfig*config,intargc,wchar_t*const*argv )
Setcommandlinearguments( argvmemberof config)fromthe argvlistofwidecharacterstrings.
Preinitialize Python ifneeded.
PyStatus PyConfig_SetBytesArgv (PyConfig*config,intargc,char*const*argv )
Setcommandlinearguments( argvmemberof config)fromthe argvlistofbytesstrings. Decodebytes
using Py_DecodeLocale() .
Preinitialize Python ifneeded.
PyStatus PyConfig_SetWideStringList (PyConfig*config, PyWideStringList *list,Py_ssize_t length,
wchar_t**items )
Setthelistofwidestrings listtolengthanditems.
Preinitialize Python ifneeded.
PyStatus PyConfig_Read (PyConfig*config )
ReadallPythonconfiguration.
Fieldswhicharealreadyinitializedareleftunchanged.
Fieldsfor path configuration arenolongercalculatedormodifiedwhencallingthisfunction,asofPython
3.11.
The PyConfig_Read() function only parses PyConfig.argv arguments once: PyConfig.
parse_argv is set to 2after arguments are parsed. Since Python arguments are stripped from
PyConfig.argv ,parsingargumentstwicewouldparsetheapplicationoptionsasPythonoptions.
Preinitialize Python ifneeded.
Changed in version 3.10: The PyConfig.argv arguments are now only parsed once, PyConfig.
parse_argv is set to 2after arguments are parsed, and arguments are only parsed if PyConfig.
parse_argv equals 1.
Changed in version 3.11: PyConfig_Read() no longer calculates all paths, and so fields listed under
Python Path Configuration maynolongerbeupdateduntil Py_InitializeFromConfig() iscalled.
voidPyConfig_Clear (PyConfig*config )
Releaseconfigurationmemory.
Most PyConfig methods preinitialize Python ifneeded. Inthatcase,thePythonpreinitializationconfiguration
(PyPreConfig )inbasedonthe PyConfig . Ifconfigurationfieldswhichareincommonwith PyPreConfig
aretuned,theymustbesetbeforecallinga PyConfig method:
•PyConfig.dev_mode
•PyConfig.isolated
•PyConfig.parse_argv
•PyConfig.use_environment
Moreover,if PyConfig_SetArgv() orPyConfig_SetBytesArgv() isused,thismethodmustbecalled
before other methods, since the preinitialization configuration depends on command line arguments (if
parse_argv isnon-zero).
Thecallerofthesemethodsisresponsibletohandleexceptions(errororexit)using PyStatus_Exception()
andPy_ExitStatusException() .
10.6. PyConfig 229
The Python/C API, Release 3.13.0
Structurefields:
PyWideStringList argv
Setsys.argv commandlineargumentsbasedon argv. Theseparametersaresimilartothosepassed
totheprogram’s main()functionwiththedifferencethatthefirstentryshouldrefertothescriptfileto
beexecutedratherthantheexecutablehostingthePythoninterpreter. Ifthereisn’tascriptthatwillbe
run,thefirstentryin argvcanbeanemptystring.
Setparse_argv to1to parse argvthe same way the regular Python parses Python command line
argumentsandthentostripPythonargumentsfrom argv.
Ifargvisempty,anemptystringisaddedtoensurethat sys.argv alwaysexistsandisneverempty.
Default: NULL.
Seealsothe orig_argv member.
intsafe_path
Ifequalstozero, Py_RunMain() prependsapotentiallyunsafepathto sys.path atstartup:
•Ifargv[0]isequalto L"-m"(python -m module ),prependthecurrentworkingdirectory.
•If running a script ( python script.py ), prepend the script’s directory. If it’s a symbolic link,
resolvesymboliclinks.
•Otherwise ( python -c code andpython), prepend an empty string, which means the current
workingdirectory.
Setto 1bythe -Pcommandlineoptionandthe PYTHONSAFEPATH environmentvariable.
Default: 0inPythonconfig, 1inisolatedconfig.
Addedinversion3.11.
wchar_t* base_exec_prefix
sys.base_exec_prefix .
Default: NULL.
Partofthe Python Path Configuration output.
Seealso PyConfig.exec_prefix .
wchar_t* base_executable
Pythonbaseexecutable: sys._base_executable .
Setbythe __PYVENV_LAUNCHER__ environmentvariable.
Setfrom PyConfig.executable ifNULL.
Default: NULL.
Partofthe Python Path Configuration output.
Seealso PyConfig.executable .
wchar_t* base_prefix
sys.base_prefix .
Default: NULL.
Partofthe Python Path Configuration output.
Seealso PyConfig.prefix .
intbuffered_stdio
If equals to 0andconfigure_c_stdio is non-zero, disable buffering on the C streams stdout and
stderr.
Setto 0bythe -ucommandlineoptionandthe PYTHONUNBUFFERED environmentvariable.
230 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
stdinisalwaysopenedinbufferedmode.
Default: 1.
intbytes_warning
Ifequalsto 1,issueawarningwhencomparing bytesorbytearray withstr,orcomparing bytes
withint.
Ifequalorgreaterto 2,raisea BytesWarning exceptioninthesecases.
Incrementedbythe -bcommandlineoption.
Default: 0.
intwarn_default_encoding
Ifnon-zero,emita EncodingWarning warningwhen io.TextIOWrapper usesitsdefaultencoding.
Seeio-encoding-warningfordetails.
Default: 0.
Addedinversion3.10.
intcode_debug_ranges
Ifequalsto 0,disablestheinclusionoftheendlineandcolumnmappingsincodeobjects. Alsodisables
tracebackprintingcaretstospecificerrorlocations.
Setto 0bythe PYTHONNODEBUGRANGES environmentvariableandbythe -X no_debug_ranges com-
mandlineoption.
Default: 1.
Addedinversion3.11.
wchar_t* check_hash_pycs_mode
Control the validation behavior of hash-based .pycfiles: value of the --check-hash-based-pycs
commandlineoption.
Validvalues:
•L"always" : Hashthesourcefileforinvalidationregardlessofvalueofthe‘check_source’flag.
•L"never" : Assumethathash-basedpycsalwaysarevalid.
•L"default" : The‘check_source’flaginhash-basedpycsdeterminesinvalidation.
Default: L"default" .
Seealso PEP 552“Deterministicpycs”.
intconfigure_c_stdio
Ifnon-zero,configureCstandardstreams:
•OnWindows,setthebinarymode( O_BINARY )onstdin,stdoutandstderr.
•Ifbuffered_stdio equalszero,disablebufferingofstdin,stdoutandstderrstreams.
•Ifinteractive isnon-zero,enablestreambufferingonstdinandstdout(onlystdoutonWindows).
Default: 1inPythonconfig, 0inisolatedconfig.
intdev_mode
Ifnon-zero,enablethePythonDevelopmentMode.
Setto 1bythe -X devoptionandthe PYTHONDEVMODE environmentvariable.
Default: -1inPythonmode, 0inisolatedmode.
10.6. PyConfig 231
The Python/C API, Release 3.13.0
intdump_refs
DumpPythonreferences?
Ifnon-zero,dumpallobjectswhicharestillaliveatexit.
Setto 1bythe PYTHONDUMPREFS environmentvariable.
Needs a special build of Python with the Py_TRACE_REFS macro defined: see the configure
--with-trace-refs option .
Default: 0.
wchar_t* exec_prefix
The site-specific directory prefix where the platform-dependent Python files are installed: sys.
exec_prefix .
Default: NULL.
Partofthe Python Path Configuration output.
Seealso PyConfig.base_exec_prefix .
wchar_t* executable
TheabsolutepathoftheexecutablebinaryforthePythoninterpreter: sys.executable .
Default: NULL.
Partofthe Python Path Configuration output.
Seealso PyConfig.base_executable .
intfaulthandler
Enablefaulthandler?
Ifnon-zero,call faulthandler.enable() atstartup.
Setto 1by-X faulthandler andthe PYTHONFAULTHANDLER environmentvariable.
Default: -1inPythonmode, 0inisolatedmode.
wchar_t* filesystem_encoding
Filesystem encoding :sys.getfilesystemencoding() .
OnmacOS,AndroidandVxWorks: use "utf-8"bydefault.
On Windows: use "utf-8" by default, or "mbcs"iflegacy_windows_fs_encoding of
PyPreConfig isnon-zero.
Defaultencodingonotherplatforms:
•"utf-8"ifPyPreConfig.utf8_mode isnon-zero.
•"ascii" if Python detects that nl_langinfo(CODESET) announces the ASCII encoding,
whereasthe mbstowcs() functiondecodesfromadifferentencoding(usuallyLatin1).
•"utf-8"ifnl_langinfo(CODESET) returnsanemptystring.
•Otherwise,usethe locale encoding :nl_langinfo(CODESET) result.
AtPythonstartup,theencodingnameisnormalizedtothePythoncodecname. Forexample, "ANSI_X3.
4-1968"isreplacedwith "ascii".
Seealsothe filesystem_errors member.
wchar_t* filesystem_errors
Filesystem error handler :sys.getfilesystemencodeerrors() .
OnWindows: use "surrogatepass" bydefault,or "replace" iflegacy_windows_fs_encoding
ofPyPreConfig isnon-zero.
Onotherplatforms: use "surrogateescape" bydefault.
232 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
Supportederrorhandlers:
•"strict"
•"surrogateescape"
•"surrogatepass" (onlysupportedwiththeUTF-8encoding)
Seealsothe filesystem_encoding member.
unsignedlong hash_seed
intuse_hash_seed
Randomizedhashfunctionseed.
Ifuse_hash_seed iszero,aseedischosenrandomlyatPythonstartup,and hash_seed isignored.
Setbythe PYTHONHASHSEED environmentvariable.
Default use_hash_seed value: -1inPythonmode, 0inisolatedmode.
wchar_t* home
Set the default Python “home” directory, that is, the location of the standard Python libraries (see
PYTHONHOME ).
Setbythe PYTHONHOME environmentvariable.
Default: NULL.
Partofthe Python Path Configuration input.
intimport_time
Ifnon-zero,profileimporttime.
Setthe 1bythe -X importtime optionandthe PYTHONPROFILEIMPORTTIME environmentvariable.
Default: 0.
intinspect
Enterinteractivemodeafterexecutingascriptoracommand.
Ifgreaterthan 0,enableinspect: whenascriptispassedasfirstargumentorthe-coptionisused,enter
interactivemodeafterexecutingthescriptorthecommand,evenwhen sys.stdin doesnotappearto
beaterminal.
Incrementedbythe -icommandlineoption. Setto 1ifthe PYTHONINSPECT environmentvariableis
non-empty.
Default: 0.
intinstall_signal_handlers
InstallPythonsignalhandlers?
Default: 1inPythonmode, 0inisolatedmode.
intinteractive
Ifgreaterthan 0,enabletheinteractivemode(REPL).
Incrementedbythe -icommandlineoption.
Default: 0.
intint_max_str_digits
Configures the integer string conversion length limitation. An initial value of -1means the value
will be taken from the command line or environment or otherwise default to 4300 ( sys.int_info.
default_max_str_digits ). A value of 0disables the limitation. Values greater than zero but less
than 640 ( sys.int_info.str_digits_check_threshold ) are unsupported and will produce an
error.
10.6. PyConfig 233
The Python/C API, Release 3.13.0
Configured by the -X int_max_str_digits command line flag or the PYTHONINTMAXSTRDIGITS
environmentvariable.
Default: -1inPythonmode. 4300( sys.int_info.default_max_str_digits )inisolatedmode.
Addedinversion3.12.
intcpu_count
Ifthevalueof cpu_count isnot -1thenitwilloverridethereturnvaluesof os.cpu_count() ,os.
process_cpu_count() ,and multiprocessing.cpu_count() .
Configuredbythe -X cpu_count= n|default commandlineflagorthe PYTHON_CPU_COUNT envi-
ronmentvariable.
Default: -1.
Addedinversion3.13.
intisolated
Ifgreaterthan 0,enableisolatedmode:
•Setsafe_path to1: don’tprependapotentiallyunsafepathto sys.path atPythonstartup,such
asthecurrentdirectory,thescript’sdirectoryoranemptystring.
•Setuse_environment to0: ignore PYTHONenvironmentvariables.
•Setuser_site_directory to0: don’taddtheusersitedirectoryto sys.path .
•Python REPL doesn’t import readline nor enable default readline configuration on interactive
prompts.
Setto 1bythe -Icommandlineoption.
Default: 0inPythonmode, 1inisolatedmode.
Seealsothe Isolated Configuration andPyPreConfig.isolated .
intlegacy_windows_stdio
Ifnon-zero,use io.FileIO insteadof io._WindowsConsoleIO forsys.stdin ,sys.stdout and
sys.stderr .
Setto 1ifthe PYTHONLEGACYWINDOWSSTDIO environmentvariableissettoanon-emptystring.
OnlyavailableonWindows. #ifdef MS_WINDOWS macrocanbeusedforWindowsspecificcode.
Default: 0.
Seealsothe PEP 528(ChangeWindowsconsoleencodingtoUTF-8).
intmalloc_stats
Ifnon-zero,dumpstatisticson Python pymalloc memory allocator atexit.
Setto 1bythe PYTHONMALLOCSTATS environmentvariable.
TheoptionisignoredifPythonis configured using the --without-pymalloc option .
Default: 0.
wchar_t* platlibdir
Platformlibrarydirectoryname: sys.platlibdir .
Setbythe PYTHONPLATLIBDIR environmentvariable.
Default: value of the PLATLIBDIR macro which is set by the configure --with-platlibdir
option(default: "lib",or"DLLs"onWindows).
Partofthe Python Path Configuration input.
Addedinversion3.9.
234 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
Changedinversion3.11: ThismacroisnowusedonWindowstolocatethestandardlibraryextension
modules,typicallyunder DLLs. However,forcompatibility,notethatthisvalueisignoredforanynon-
standardlayouts,includingin-treebuildsandvirtualenvironments.
wchar_t* pythonpath_env
Modulesearchpaths( sys.path )asastringseparatedby DELIM(os.pathsep ).
Setbythe PYTHONPATH environmentvariable.
Default: NULL.
Partofthe Python Path Configuration input.
PyWideStringList module_search_paths
intmodule_search_paths_set
Modulesearchpaths: sys.path .
Ifmodule_search_paths_set is equal to 0,Py_InitializeFromConfig() will replace
module_search_paths andsets module_search_paths_set to1.
Default: emptylist( module_search_paths )and 0(module_search_paths_set ).
Partofthe Python Path Configuration output.
intoptimization_level
Compilationoptimizationlevel:
•0: Peepholeoptimizer,set __debug__ toTrue.
•1: Level0,removeassertions,set __debug__ toFalse.
•2: Level1,stripdocstrings.
Incrementedbythe -Ocommandlineoption. Settothe PYTHONOPTIMIZE environmentvariablevalue.
Default: 0.
PyWideStringList orig_argv
ThelistoftheoriginalcommandlineargumentspassedtothePythonexecutable: sys.orig_argv .
Iforig_argv listisemptyand argvisnotalistonlycontaininganemptystring, PyConfig_Read()
copies argvintoorig_argv beforemodifying argv(ifparse_argv isnon-zero).
Seealsothe argvmemberandthe Py_GetArgcArgv() function.
Default: emptylist.
Addedinversion3.10.
intparse_argv
Parsecommandlinearguments?
Ifequalsto 1, parse argvthesamewaytheregularPythonparsescommandlinearguments, andstrip
Pythonargumentsfrom argv.
The PyConfig_Read() function only parses PyConfig.argv arguments once: PyConfig.
parse_argv is set to 2after arguments are parsed. Since Python arguments are stripped from
PyConfig.argv ,parsingargumentstwicewouldparsetheapplicationoptionsasPythonoptions.
Default: 1inPythonmode, 0inisolatedmode.
Changed in version 3.10: The PyConfig.argv arguments are now only parsed if PyConfig.
parse_argv equalsto 1.
intparser_debug
Parser debug mode. If greater than 0, turn on parser debugging output (for expert only, depending on
compilationoptions).
Incrementedbythe -dcommandlineoption. Settothe PYTHONDEBUG environmentvariablevalue.
10.6. PyConfig 235
The Python/C API, Release 3.13.0
NeedsadebugbuildofPython(the Py_DEBUG macromustbedefined).
Default: 0.
intpathconfig_warnings
If non-zero, calculation of path configuration is allowed to log warnings into stderr. If equals to 0,
suppressthesewarnings.
Default: 1inPythonmode, 0inisolatedmode.
Partofthe Python Path Configuration input.
Changedinversion3.11: NowalsoappliesonWindows.
wchar_t* prefix
The site-specific directory prefix where the platform independent Python files are installed: sys.
prefix.
Default: NULL.
Partofthe Python Path Configuration output.
Seealso PyConfig.base_prefix .
wchar_t* program_name
Programnameusedtoinitialize executable andinearlyerrormessagesduringPythoninitialization.
•OnmacOS,use PYTHONEXECUTABLE environmentvariableifset.
•Ifthe WITH_NEXT_FRAMEWORK macroisdefined,use __PYVENV_LAUNCHER__ environmentvari-
ableifset.
•Useargv[0]ofargvifavailableandnon-empty.
•Otherwise,use L"python" onWindows,or L"python3" onotherplatforms.
Default: NULL.
Partofthe Python Path Configuration input.
wchar_t* pycache_prefix
Directorywherecached .pycfilesarewritten: sys.pycache_prefix .
Setbythe -X pycache_prefix=PATH commandlineoptionandthe PYTHONPYCACHEPREFIX envi-
ronmentvariable. Thecommand-lineoptiontakesprecedence.
IfNULL,sys.pycache_prefix issetto None.
Default: NULL.
intquiet
Quiet mode. If greater than 0, don’t display the copyright and version at Python startup in interactive
mode.
Incrementedbythe -qcommandlineoption.
Default: 0.
wchar_t* run_command
Valueofthe -ccommandlineoption.
Usedby Py_RunMain() .
Default: NULL.
wchar_t* run_filename
Filenamepassedonthecommandline: trailingcommandlineargumentwithout -cor-m. Itisusedby
thePy_RunMain() function.
Forexample,itissetto script.py bythe python3 script.py arg commandline.
236 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
Seealsothe PyConfig.skip_source_first_line option.
Default: NULL.
wchar_t* run_module
Valueofthe -mcommandlineoption.
Usedby Py_RunMain() .
Default: NULL.
wchar_t* run_presite
package.module pathtomodulethatshouldbeimportedbefore site.pyisrun.
Setbythe -X presite=package.module command-lineoptionandthe PYTHON_PRESITE environ-
mentvariable. Thecommand-lineoptiontakesprecedence.
NeedsadebugbuildofPython(the Py_DEBUG macromustbedefined).
Default: NULL.
intshow_ref_count
Showtotalreferencecountatexit(excluding immortalobjects)?
Setto 1by-X showrefcount commandlineoption.
NeedsadebugbuildofPython(the Py_REF_DEBUG macromustbedefined).
Default: 0.
intsite_import
Importthe sitemoduleatstartup?
Ifequaltozero,disabletheimportofthemodulesiteandthesite-dependentmanipulationsof sys.path
thatitentails.
Alsodisablethesemanipulationsifthe sitemoduleisexplicitlyimportedlater(call site.main() if
youwantthemtobetriggered).
Setto 0bythe -Scommandlineoption.
sys.flags.no_site issettotheinvertedvalueof site_import .
Default: 1.
intskip_source_first_line
Ifnon-zero,skipthefirstlineofthe PyConfig.run_filename source.
Itallowstheusageofnon-Unixformsof #!cmd. ThisisintendedforaDOSspecifichackonly.
Setto 1bythe -xcommandlineoption.
Default: 0.
wchar_t* stdio_encoding
wchar_t* stdio_errors
Encoding and encoding errors of sys.stdin ,sys.stdout andsys.stderr (butsys.stderr al-
waysuses "backslashreplace" errorhandler).
Usethe PYTHONIOENCODING environmentvariableifitisnon-empty.
Defaultencoding:
•"UTF-8"ifPyPreConfig.utf8_mode isnon-zero.
•Otherwise,usethe locale encoding .
Defaulterrorhandler:
•OnWindows: use "surrogateescape" .
10.6. PyConfig 237
The Python/C API, Release 3.13.0
•"surrogateescape" ifPyPreConfig.utf8_mode isnon-zero,oriftheLC_CTYPElocaleis
“C”or“POSIX”.
•"strict" otherwise.
Seealso PyConfig.legacy_windows_stdio .
inttracemalloc
Enabletracemalloc?
Ifnon-zero,call tracemalloc.start() atstartup.
Setby -X tracemalloc=N commandlineoptionandbythe PYTHONTRACEMALLOC environmentvari-
able.
Default: -1inPythonmode, 0inisolatedmode.
intperf_profiling
Enablecompatibilitymodewiththeperfprofiler?
Ifnon-zero,initializetheperftrampoline. Seeperf_profilingformoreinformation.
Set by -X perfcommand-line option and by the PYTHON_PERF_JIT_SUPPORT environment vari-
able for perf support with stack pointers and -X perf_jit command-line option and by the
PYTHON_PERF_JIT_SUPPORT environmentvariableforperfsupportwithDWARFJITinformation.
Default: -1.
Addedinversion3.12.
intuse_environment
Useenvironmentvariables?
Ifequalstozero,ignoretheenvironmentvariables.
Setto 0bythe -Eenvironmentvariable.
Default: 1inPythonconfigand 0inisolatedconfig.
intuser_site_directory
Ifnon-zero,addtheusersitedirectoryto sys.path .
Setto 0bythe -sand-Icommandlineoptions.
Setto 0bythe PYTHONNOUSERSITE environmentvariable.
Default: 1inPythonmode, 0inisolatedmode.
intverbose
Verbose mode. If greater than 0, print a message each time a module is imported, showing the place
(filenameorbuilt-inmodule)fromwhichitisloaded.
Ifgreaterthanorequalto 2,printamessageforeachfilethatischeckedforwhensearchingforamodule.
Alsoprovidesinformationonmodulecleanupatexit.
Incrementedbythe -vcommandlineoption.
Setbythe PYTHONVERBOSE environmentvariablevalue.
Default: 0.
PyWideStringList warnoptions
Options of the warnings module to build warnings filters, lowest to highest priority: sys.
warnoptions .
The warnings module adds sys.warnoptions in the reverse order: the last PyConfig.
warnoptions itembecomesthefirstitemof warnings.filters whichischeckedfirst(highestpri-
ority).
The-Wcommandlineoptionsaddsitsvalueto warnoptions ,itcanbeusedmultipletimes.
238 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
ThePYTHONWARNINGS environmentvariablecanalsobeusedtoaddwarningoptions. Multipleoptions
canbespecified,separatedbycommas( ,).
Default: emptylist.
intwrite_bytecode
Ifequalto 0,Pythonwon’ttrytowrite .pycfilesontheimportofsourcemodules.
Setto 0bythe -Bcommandlineoptionandthe PYTHONDONTWRITEBYTECODE environmentvariable.
sys.dont_write_bytecode isinitializedtotheinvertedvalueof write_bytecode .
Default: 1.
PyWideStringList xoptions
Valuesofthe -Xcommandlineoptions: sys._xoptions .
Default: emptylist.
Ifparse_argv is non-zero, argvarguments are parsed the same way the regular Python parses command line
arguments,andPythonargumentsarestrippedfrom argv.
Thexoptions optionsareparsedtosetotheroptions: seethe -Xcommandlineoption.
Changedinversion3.9: The show_alloc_count fieldhasbeenremoved.
10.7Initialization with PyConfig
Initializing the interpreter from a populated configuration struct is handled by calling
Py_InitializeFromConfig() .
The caller is responsible to handle exceptions (error or exit) using PyStatus_Exception() and
Py_ExitStatusException() .
IfPyImport_FrozenModules() ,PyImport_AppendInittab() orPyImport_ExtendInittab() areused,
they must be set or called after Python preinitialization and before the Python initialization. If Python is initial-
izedmultipletimes, PyImport_AppendInittab() orPyImport_ExtendInittab() mustbecalledbeforeeach
Pythoninitialization.
Thecurrentconfiguration( PyConfig type)isstoredin PyInterpreterState.config .
Examplesettingtheprogramname:
void init_python (void )
{
PyStatus status;
PyConfig config;
PyConfig_InitPythonConfig( &config);
/* Set the program name. Implicitly preinitialize Python. */
status =PyConfig_SetString( &config, &config.program_name,
L"/path/to/my_program ");
if(PyStatus_Exception(status)) {
goto exception;
}
status =Py_InitializeFromConfig( &config);
if(PyStatus_Exception(status)) {
goto exception;
}
PyConfig_Clear( &config);
return ;
(continuesonnextpage)
10.7. Initialization with PyConfig 239
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
exception :
PyConfig_Clear( &config);
Py_ExitStatusException(status);
}
Morecompleteexamplemodifyingthedefaultconfiguration,readtheconfiguration,andthenoverridesomeparam-
eters. Notethatsince3.11,manyparametersarenotcalculateduntilinitialization,andsovaluescannotbereadfrom
theconfigurationstructure. Anyvaluessetbeforeinitializeiscalledwillbeleftunchangedbyinitialization:
PyStatus init_python (const char *program_name)
{
PyStatus status;
PyConfig config;
PyConfig_InitPythonConfig( &config);
/* Set the program name before reading the configuration
(decode byte string from the locale encoding).
Implicitly preinitialize Python. */
status =PyConfig_SetBytesString( &config, &config.program_name,
program_name);
if(PyStatus_Exception(status)) {
goto done;
}
/* Read all configuration at once */
status =PyConfig_Read( &config);
if(PyStatus_Exception(status)) {
goto done;
}
/* Specify sys.path explicitly */
/* If you want to modify the default set of paths, finish
initialization first and then use PySys_GetObject("path") */
config.module_search_paths_set =1;
status =PyWideStringList_Append( &config.module_search_paths,
L"/path/to/stdlib ");
if(PyStatus_Exception(status)) {
goto done;
}
status =PyWideStringList_Append( &config.module_search_paths,
L"/path/to/more/modules ");
if(PyStatus_Exception(status)) {
goto done;
}
/* Override executable computed by PyConfig_Read() */
status =PyConfig_SetString( &config, &config.executable,
L"/path/to/my_executable ");
if(PyStatus_Exception(status)) {
goto done;
}
status =Py_InitializeFromConfig( &config);
(continuesonnextpage)
240 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
done :
PyConfig_Clear( &config);
return status;
}
10.8Isolated Configuration
PyPreConfig_InitIsolatedConfig() andPyConfig_InitIsolatedConfig() functionscreateaconfigu-
rationtoisolatePythonfromthesystem. Forexample,toembedPythonintoanapplication.
This configuration ignores global configuration variables, environment variables, command line arguments
(PyConfig.argv isnotparsed)andusersitedirectory. TheCstandardstreams(ex: stdout)andtheLC_CTYPE
localeareleftunchanged. Signalhandlersarenotinstalled.
Configurationfilesarestillusedwiththisconfigurationtodeterminepathsthatareunspecified. Ensure PyConfig.
homeisspecifiedtoavoidcomputingthedefaultpathconfiguration.
10.9Python Configuration
PyPreConfig_InitPythonConfig() andPyConfig_InitPythonConfig() functionscreateaconfiguration
tobuildacustomizedPythonwhichbehavesastheregularPython.
Environments variables and command line arguments are used to configure Python, whereas global configuration
variablesareignored.
This function enables C locale coercion ( PEP 538) and Python UTF-8 Mode ( PEP 540) depending on the
LC_CTYPElocale, PYTHONUTF8 andPYTHONCOERCECLOCALE environmentvariables.
10.10Python Path Configuration
PyConfig containsmultiplefieldsforthepathconfiguration:
•Pathconfigurationinputs:
–PyConfig.home
–PyConfig.platlibdir
–PyConfig.pathconfig_warnings
–PyConfig.program_name
–PyConfig.pythonpath_env
–currentworkingdirectory: togetabsolutepaths
–PATHenvironmentvariabletogettheprogramfullpath(from PyConfig.program_name )
–__PYVENV_LAUNCHER__ environmentvariable
–(Windowsonly)Applicationpathsintheregistryunder“SoftwarePythonPythonCoreX.YPythonPath”of
HKEY_CURRENT_USERandHKEY_LOCAL_MACHINE(whereX.YisthePythonversion).
•Pathconfigurationoutputfields:
–PyConfig.base_exec_prefix
–PyConfig.base_executable
–PyConfig.base_prefix
–PyConfig.exec_prefix
10.8. Isolated Configuration 241
The Python/C API, Release 3.13.0
–PyConfig.executable
–PyConfig.module_search_paths_set ,PyConfig.module_search_paths
–PyConfig.prefix
If at least one “output field” is not set, Python calculates the path configuration to fill unset
fields. If module_search_paths_set is equal to 0,module_search_paths is overridden and
module_search_paths_set issetto 1.
It is possible to completely ignore the function calculating the default path configuration by setting explic-
itly all path configuration output fields listed above. A string is considered as set even if it is non-empty.
module_search_paths is considered as set if module_search_paths_set is set to 1. In this case,
module_search_paths willbeusedwithoutmodification.
Setpathconfig_warnings to0tosuppresswarningswhencalculatingthepathconfiguration(Unixonly,Windows
doesnotloganywarning).
Ifbase_prefix orbase_exec_prefix fieldsarenotset,theyinherittheirvaluefrom prefixandexec_prefix
respectively.
Py_RunMain() andPy_Main() modify sys.path :
•Ifrun_filename issetandisadirectorywhichcontainsa __main__.py script,prepend run_filename
tosys.path .
•Ifisolated iszero:
–Ifrun_module isset,prependthecurrentdirectoryto sys.path . Donothingifthecurrentdirectory
cannotberead.
–Ifrun_filename isset,prependthedirectoryofthefilenameto sys.path .
–Otherwise,prependanemptystringto sys.path .
Ifsite_import is non-zero, sys.path can be modified by the sitemodule. If user_site_directory is
non-zeroandtheuser’ssite-packagedirectoryexists,the sitemoduleappendstheuser’ssite-packagedirectoryto
sys.path .
Thefollowingconfigurationfilesareusedbythepathconfiguration:
•pyvenv.cfg
•._pthfile(ex: python._pth )
•pybuilddir.txt (Unixonly)
Ifa._pthfileispresent:
•Setisolated to1.
•Setuse_environment to0.
•Setsite_import to0.
•Setsafe_path to1.
The__PYVENV_LAUNCHER__ environmentvariableisusedtoset PyConfig.base_executable .
10.11Py_GetArgcArgv()
voidPy_GetArgcArgv (int*argc,wchar_t***argv )
Gettheoriginalcommandlinearguments,beforePythonmodifiedthem.
Seealso PyConfig.orig_argv member.
242 Chapter 10. Python Initialization Configuration
The Python/C API, Release 3.13.0
10.12Multi-Phase Initialization Private Provisional API
ThissectionisaprivateprovisionalAPIintroducingmulti-phaseinitialization,thecorefeatureof PEP 432:
•“Core”initializationphase,“bareminimumPython”:
–Builtintypes;
–Builtinexceptions;
–Builtinandfrozenmodules;
–Thesysmoduleisonlypartiallyinitialized(ex: sys.path doesn’texistyet).
•“Main”initializationphase,Pythonisfullyinitialized:
–Installandconfigure importlib ;
–Applythe Path Configuration ;
–Installsignalhandlers;
–Finish sysmoduleinitialization(ex: create sys.stdout andsys.path );
–Enableoptionalfeatureslike faulthandler andtracemalloc ;
–Importthe sitemodule;
–etc.
PrivateprovisionalAPI:
•PyConfig._init_main : if set to 0,Py_InitializeFromConfig() stops at the “Core” initialization
phase.
PyStatus _Py_InitializeMain (void)
Movetothe“Main”initializationphase,finishthePythoninitialization.
Nomoduleisimportedduringthe“Core”phaseandthe importlib moduleisnotconfigured: the Path Configuration
is only applied during the “Main” phase. It may allow to customize Python in Python to override or tune the Path
Configuration ,maybeinstallacustom sys.meta_path importeroranimporthook,etc.
Itmaybecomepossibletocalculatethe Path Configuration inPython,aftertheCorephaseandbeforetheMainphase,
whichisoneofthe PEP 432motivation.
The “Core” phase is not properly defined: what should be and what should not be available at this phase is not
specifiedyet. TheAPIismarkedasprivateandprovisional: theAPIcanbemodifiedorevenberemovedanytime
untilaproperpublicAPIisdesigned.
ExamplerunningPythoncodebetween“Core”and“Main”initializationphases:
void init_python (void )
{
PyStatus status;
PyConfig config;
PyConfig_InitPythonConfig( &config);
config._init_main =0;
/* ... customize 'config' configuration ... */
status =Py_InitializeFromConfig( &config);
PyConfig_Clear( &config);
if(PyStatus_Exception(status)) {
Py_ExitStatusException(status);
}
(continuesonnextpage)
10.12. Multi-Phase Initialization Private Provisional API 243
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
/* Use sys.stderr because sys.stdout is only created
by _Py_InitializeMain() */
int res =PyRun_SimpleString(
"import sys; "
"print('Run Python code before _Py_InitializeMain', "
"file=sys.stderr) ");
if(res <0){
exit( 1);
}
/* ... put more configuration code here ... */
status =_Py_InitializeMain();
if(PyStatus_Exception(status)) {
Py_ExitStatusException(status);
}
}
244 Chapter 10. Python Initialization Configuration
CHAPTER
ELEVEN
MEMORY MANAGEMENT
11.1Overview
Memory management in Python involves a private heap containing all Python objects and data structures. The
managementofthisprivateheapisensuredinternallybythe Python memory manager . ThePythonmemorymanager
hasdifferentcomponentswhichdealwithvariousdynamicstoragemanagementaspects,likesharing,segmentation,
preallocationorcaching.
At the lowest level, a raw memory allocator ensures that there is enough room in the private heap for storing all
Python-related data by interacting with the memory manager of the operating system. On top of the raw memory
allocator, several object-specific allocators operate on the same heap and implement distinct memory management
policiesadaptedtothepeculiaritiesofeveryobjecttype. Forexample,integerobjectsaremanageddifferentlywithin
the heap than strings, tuples or dictionaries because integers imply different storage requirements and speed/space
tradeoffs. ThePythonmemorymanagerthusdelegatessomeoftheworktotheobject-specificallocators,butensures
thatthelatteroperatewithintheboundsoftheprivateheap.
ItisimportanttounderstandthatthemanagementofthePythonheapisperformedbytheinterpreteritselfandthat
theuserhasnocontroloverit,eveniftheyregularlymanipulateobjectpointerstomemoryblocksinsidethatheap.
The allocation of heap space for Python objects and other internal buffers is performed on demand by the Python
memorymanagerthroughthePython/CAPIfunctionslistedinthisdocument.
To avoid memory corruption, extension writers should never try to operate on Python objects with the functions
exported by the C library: malloc() ,calloc() ,realloc() andfree(). This will result in mixed calls be-
tween the C allocator and the Python memory manager with fatal consequences, because they implement different
algorithmsandoperateondifferentheaps. However,onemaysafelyallocateandreleasememoryblockswiththeC
libraryallocatorforindividualpurposes,asshowninthefollowingexample:
PyObject *res;
char *buf =(char *)malloc(BUFSIZ); /* for I/O */
if(buf ==NULL )
return PyErr_NoMemory();
...Do some I/Ooperation involving buf...
res =PyBytes_FromString(buf);
free(buf); /* malloc'ed */
return res;
In this example, the memory request for the I/O buffer is handled by the C library allocator. The Python memory
managerisinvolvedonlyintheallocationofthebytesobjectreturnedasaresult.
In most situations, however, it is recommended to allocate memory from the Python heap specifically because the
latterisundercontrolofthePythonmemorymanager. Forexample,thisisrequiredwhentheinterpreterisextended
with new object types written in C. Another reason for using the Python heap is the desire to informthe Python
memory manager about the memory needs of the extension module. Even when the requested memory is used
exclusively for internal, highly specific purposes, delegating all memory requests to the Python memory manager
causestheinterpretertohaveamoreaccurateimageofitsmemoryfootprintasawhole. Consequently,undercertain
circumstances, the Python memory manager may or may not trigger appropriate actions, like garbage collection,
245
The Python/C API, Release 3.13.0
memory compaction or other preventive procedures. Note that by using the C library allocator as shown in the
previousexample,theallocatedmemoryfortheI/ObufferescapescompletelythePythonmemorymanager.
µSee also
ThePYTHONMALLOC environmentvariablecanbeusedtoconfigurethememoryallocatorsusedbyPython.
ThePYTHONMALLOCSTATS environmentvariablecanbeusedtoprintstatisticsofthe pymalloc memory allocator
everytimeanewpymallocobjectarenaiscreated,andonshutdown.
11.2Allocator Domains
All allocating functions belong to one of three different “domains” (see also PyMemAllocatorDomain ). These
domainsrepresentdifferentallocationstrategiesandareoptimizedfordifferentpurposes. Thespecificdetailsonhow
everydomainallocatesmemoryorwhatinternalfunctionseachdomaincallsisconsideredanimplementationdetail,
but for debugging purposes a simplified table can be found at here. The APIs used to allocate and free a block of
memorymustbefromthesamedomain. Forexample, PyMem_Free() mustbeusedtofreememoryallocatedusing
PyMem_Malloc() .
Thethreeallocationdomainsare:
•Rawdomain: intendedforallocatingmemoryforgeneral-purposememorybufferswheretheallocation must
gotothesystemallocatororwheretheallocatorcanoperatewithoutthe GIL.Thememoryisrequesteddirectly
fromthesystem. See Raw Memory Interface .
•“Mem”domain: intendedforallocatingmemoryforPythonbuffersandgeneral-purposememorybufferswhere
theallocationmustbeperformedwiththe GILheld. ThememoryistakenfromthePythonprivateheap. See
Memory Interface .
•Object domain: intended for allocating memory for Python objects. The memory is taken from the Python
privateheap. See Object allocators .
®Note
Thefree-threaded build requires that only Python objects are allocated using the “object” domain and that all
Pythonobjectsareallocatedusingthatdomain. ThisdiffersfromthepriorPythonversions,wherethiswasonly
abestpracticeandnotahardrequirement.
Forexample,buffers(non-Pythonobjects)shouldbeallocatedusing PyMem_Malloc() ,PyMem_RawMalloc() ,
ormalloc() ,butnot PyObject_Malloc() .
SeeMemoryAllocationAPIs.
11.3Raw Memory Interface
Thefollowingfunctionsetsarewrapperstothesystemallocator. Thesefunctionsarethread-safe,the GILdoesnot
needtobeheld.
Thedefault raw memory allocator usesthefollowingfunctions: malloc() ,calloc() ,realloc() andfree();
callmalloc(1) (orcalloc(1, 1) )whenrequestingzerobytes.
Addedinversion3.4.
void* PyMem_RawMalloc (size_tn )
Part of the StableABI since version 3.13. Allocates nbytesandreturnsapointeroftype void*totheallocated
memory,or NULLiftherequestfails.
Requestingzerobytesreturnsadistinctnon- NULLpointerifpossible,asif PyMem_RawMalloc(1) hadbeen
calledinstead. Thememorywillnothavebeeninitializedinanyway.
246 Chapter 11. Memory Management
The Python/C API, Release 3.13.0
void* PyMem_RawCalloc (size_tnelem,size_telsize )
Part of theStableABI since version 3.13. Allocates nelemelementseachwhosesizeinbytesis elsizeandreturns
a pointer of type void*to the allocated memory, or NULLif the request fails. The memory is initialized to
zeros.
Requestingzeroelementsorelementsofsizezerobytesreturnsadistinctnon- NULLpointerifpossible,asif
PyMem_RawCalloc(1, 1) hadbeencalledinstead.
Addedinversion3.5.
void* PyMem_RawRealloc (void*p,size_tn )
Part of the StableABI since version 3.13. Resizesthememoryblockpointedtoby ptonbytes. Thecontents
willbeunchangedtotheminimumoftheoldandthenewsizes.
IfpisNULL,thecallisequivalentto PyMem_RawMalloc(n) ;elseif nisequaltozero,thememoryblockis
resizedbutisnotfreed,andthereturnedpointerisnon- NULL.
Unless pisNULL, it must have been returned by a previous call to PyMem_RawMalloc() ,
PyMem_RawRealloc() orPyMem_RawCalloc() .
Iftherequestfails, PyMem_RawRealloc() returns NULLandpremainsavalidpointertothepreviousmemory
area.
voidPyMem_RawFree (void*p )
Part of the Stable ABI since version 3.13. Frees the memory block pointed to by p, which must have been
returned by a previous call to PyMem_RawMalloc() ,PyMem_RawRealloc() orPyMem_RawCalloc() .
Otherwise,orif PyMem_RawFree(p) hasbeencalledbefore,undefinedbehavioroccurs.
IfpisNULL,nooperationisperformed.
11.4Memory Interface
Thefollowingfunctionsets,modeledaftertheANSICstandard,butspecifyingbehaviorwhenrequestingzerobytes,
areavailableforallocatingandreleasingmemoryfromthePythonheap.
Thedefault memory allocator usesthe pymalloc memory allocator .
ÁWarning
TheGILmustbeheldwhenusingthesefunctions.
Changedinversion3.6: Thedefaultallocatorisnowpymallocinsteadofsystem malloc() .
void* PyMem_Malloc (size_tn )
Part of the Stable ABI .Allocates nbytes and returns a pointer of type void*to the allocated memory, or
NULLiftherequestfails.
Requestingzerobytesreturnsadistinctnon- NULLpointerifpossible,asif PyMem_Malloc(1) hadbeencalled
instead. Thememorywillnothavebeeninitializedinanyway.
void* PyMem_Calloc (size_tnelem,size_telsize )
Part of the StableABI since version 3.7. Allocates nelemelementseachwhosesizeinbytesis elsizeandreturns
a pointer of type void*to the allocated memory, or NULLif the request fails. The memory is initialized to
zeros.
Requestingzeroelementsorelementsofsizezerobytesreturnsadistinctnon- NULLpointerifpossible,asif
PyMem_Calloc(1, 1) hadbeencalledinstead.
Addedinversion3.5.
11.4. Memory Interface 247
The Python/C API, Release 3.13.0
void* PyMem_Realloc (void*p,size_tn )
Part of the StableABI .Resizesthememoryblockpointedtoby ptonbytes. Thecontentswillbeunchanged
totheminimumoftheoldandthenewsizes.
IfpisNULL,thecallisequivalentto PyMem_Malloc(n) ;elseif nisequaltozero,thememoryblockisresized
butisnotfreed,andthereturnedpointerisnon- NULL.
Unless pisNULL,itmusthavebeenreturnedbyapreviouscallto PyMem_Malloc() ,PyMem_Realloc() or
PyMem_Calloc() .
Iftherequestfails, PyMem_Realloc() returns NULLandpremainsavalidpointertothepreviousmemory
area.
voidPyMem_Free (void*p )
Part of the StableABI .Freesthememoryblockpointedtoby p,whichmusthavebeenreturnedbyaprevious
call to PyMem_Malloc() ,PyMem_Realloc() orPyMem_Calloc() . Otherwise, or if PyMem_Free(p)
hasbeencalledbefore,undefinedbehavioroccurs.
IfpisNULL,nooperationisperformed.
Thefollowingtype-orientedmacrosareprovidedforconvenience. Notethat TYPEreferstoanyCtype.
PyMem_New (TYPE,n )
Sameas PyMem_Malloc() , butallocates (n * sizeof(TYPE)) bytesofmemory. Returnsapointercast
toTYPE*. Thememorywillnothavebeeninitializedinanyway.
PyMem_Resize (p,TYPE,n )
Same as PyMem_Realloc() , but the memory block is resized to (n * sizeof(TYPE)) bytes. Returns a
pointercastto TYPE*. Onreturn, pwillbeapointertothenewmemoryarea,or NULLintheeventoffailure.
This is a C preprocessor macro; pis always reassigned. Save the original value of pto avoid losing memory
whenhandlingerrors.
voidPyMem_Del (void*p )
Sameas PyMem_Free() .
Inaddition,thefollowingmacrosetsareprovidedforcallingthePythonmemoryallocatordirectly,withoutinvolving
theCAPIfunctionslistedabove. However,notethattheirusedoesnotpreservebinarycompatibilityacrossPython
versionsandisthereforedeprecatedinextensionmodules.
•PyMem_MALLOC(size)
•PyMem_NEW(type, size)
•PyMem_REALLOC(ptr, size)
•PyMem_RESIZE(ptr, type, size)
•PyMem_FREE(ptr)
•PyMem_DEL(ptr)
11.5Object allocators
Thefollowingfunctionsets,modeledaftertheANSICstandard,butspecifyingbehaviorwhenrequestingzerobytes,
areavailableforallocatingandreleasingmemoryfromthePythonheap.
®Note
There is no guarantee that the memory returned by these allocators can be successfully cast to a Python object
when intercepting the allocating functions in this domain by the methods described in the Customize Memory
Allocatorssection.
248 Chapter 11. Memory Management
The Python/C API, Release 3.13.0
Thedefault object allocator usesthe pymalloc memory allocator .
ÁWarning
TheGILmustbeheldwhenusingthesefunctions.
void* PyObject_Malloc (size_tn )
Part of the Stable ABI .Allocates nbytes and returns a pointer of type void*to the allocated memory, or
NULLiftherequestfails.
Requestingzerobytesreturnsadistinctnon- NULLpointerifpossible,asif PyObject_Malloc(1) hadbeen
calledinstead. Thememorywillnothavebeeninitializedinanyway.
void* PyObject_Calloc (size_tnelem,size_telsize )
Part of the StableABI since version 3.7. Allocates nelemelementseachwhosesizeinbytesis elsizeandreturns
a pointer of type void*to the allocated memory, or NULLif the request fails. The memory is initialized to
zeros.
Requestingzeroelementsorelementsofsizezerobytesreturnsadistinctnon- NULLpointerifpossible,asif
PyObject_Calloc(1, 1) hadbeencalledinstead.
Addedinversion3.5.
void* PyObject_Realloc (void*p,size_tn )
Part of the StableABI .Resizesthememoryblockpointedtoby ptonbytes. Thecontentswillbeunchanged
totheminimumoftheoldandthenewsizes.
IfpisNULL,thecallisequivalentto PyObject_Malloc(n) ;elseif nisequaltozero,thememoryblockis
resizedbutisnotfreed,andthereturnedpointerisnon- NULL.
Unless pisNULL, it must have been returned by a previous call to PyObject_Malloc() ,
PyObject_Realloc() orPyObject_Calloc() .
Iftherequestfails, PyObject_Realloc() returns NULLandpremainsavalidpointertothepreviousmemory
area.
voidPyObject_Free (void*p )
Part of the Stable ABI .Frees the memory block pointed to by p, which must have been returned by a pre-
vious call to PyObject_Malloc() ,PyObject_Realloc() orPyObject_Calloc() . Otherwise, or if
PyObject_Free(p) hasbeencalledbefore,undefinedbehavioroccurs.
IfpisNULL,nooperationisperformed.
11.6Default Memory Allocators
Defaultmemoryallocators:
Configuration Name PyMem_RawMalloc PyMem_Malloc PyOb-
ject_Malloc
Releasebuild "pymalloc" malloc pymalloc pymalloc
Debugbuild "pymalloc_debug" malloc+debug pymalloc +de-
bugpymalloc +de-
bug
Release build, without py-
malloc"malloc" malloc malloc malloc
Debug build, without py-
malloc"malloc_debug" malloc+debug malloc+debug malloc+debug
Legend:
11.6. Default Memory Allocators 249
The Python/C API, Release 3.13.0
•Name: valuefor PYTHONMALLOC environmentvariable.
•malloc: systemallocatorsfromthestandardClibrary,Cfunctions: malloc() ,calloc() ,realloc() and
free().
•pymalloc :pymalloc memory allocator .
•mimalloc :mimalloc memory allocator . Thepymallocallocatorwillbeusedifmimallocsupportisn’tavail-
able.
•“+debug”: with debug hooks on the Python memory allocators .
•“Debugbuild”: Pythonbuildindebugmode.
11.7Customize Memory Allocators
Addedinversion3.4.
typePyMemAllocatorEx
Structureusedtodescribeamemoryblockallocator. Thestructurehasthefollowingfields:
Field Meaning
void *ctx usercontextpassedasfirstargument
void* malloc(void *ctx, size_t size) allocateamemoryblock
void* calloc(void *ctx, size_t nelem, size_t
elsize)allocateamemoryblockinitializedwith
zeros
void* realloc(void *ctx, void *ptr, size_t
new_size)allocateorresizeamemoryblock
void free(void *ctx, void *ptr) freeamemoryblock
Changed in version 3.5: The PyMemAllocator structure was renamed to PyMemAllocatorEx and a new
callocfieldwasadded.
typePyMemAllocatorDomain
Enumusedtoidentifyanallocatordomain. Domains:
PYMEM_DOMAIN_RAW
Functions:
•PyMem_RawMalloc()
•PyMem_RawRealloc()
•PyMem_RawCalloc()
•PyMem_RawFree()
PYMEM_DOMAIN_MEM
Functions:
•PyMem_Malloc() ,
•PyMem_Realloc()
•PyMem_Calloc()
•PyMem_Free()
PYMEM_DOMAIN_OBJ
Functions:
•PyObject_Malloc()
•PyObject_Realloc()
250 Chapter 11. Memory Management
The Python/C API, Release 3.13.0
•PyObject_Calloc()
•PyObject_Free()
voidPyMem_GetAllocator (PyMemAllocatorDomain domain, PyMemAllocatorEx *allocator )
Getthememoryblockallocatorofthespecifieddomain.
voidPyMem_SetAllocator (PyMemAllocatorDomain domain, PyMemAllocatorEx *allocator )
Setthememoryblockallocatorofthespecifieddomain.
Thenewallocatormustreturnadistinctnon- NULLpointerwhenrequestingzerobytes.
Forthe PYMEM_DOMAIN_RAW domain,theallocatormustbethread-safe: the GILisnotheldwhentheallocator
iscalled.
For the remaining domains, the allocator must also be thread-safe: the allocator may be called in different
interpretersthatdonotsharea GIL.
If the new allocator is not a hook (does not call the previous allocator), the PyMem_SetupDebugHooks()
functionmustbecalledtoreinstallthedebughooksontoponthenewallocator.
Seealso PyPreConfig.allocator andPreinitialize Python with PyPreConfig .
ÁWarning
PyMem_SetAllocator() doeshavethefollowingcontract:
•Itcanbecalledafter Py_PreInitialize() andbefore Py_InitializeFromConfig() toin-
stallacustommemoryallocator. Therearenorestrictionsovertheinstalledallocatorotherthanthe
onesimposedbythedomain(forinstance,theRawDomainallowstheallocatortobecalledwithout
theGILheld). See the section on allocator domains formoreinformation.
•IfcalledafterPythonhasfinishinitializing(after Py_InitializeFromConfig() hasbeencalled)
the allocator mustwrap the existing allocator. Substituting the current allocator for some other
arbitraryoneis not supported .
Changedinversion3.12: Allallocatorsmustbethread-safe.
voidPyMem_SetupDebugHooks (void)
Setup debug hooks in the Python memory allocators todetectmemoryerrors.
11.8Debug hooks on the Python memory allocators
WhenPythonisbuiltindebugmode,the PyMem_SetupDebugHooks() functioniscalledatthe Python preinitial-
izationtosetupdebughooksonPythonmemoryallocatorstodetectmemoryerrors.
ThePYTHONMALLOC environmentvariablecanbeusedtoinstalldebughooksonaPythoncompiledinreleasemode
(ex:PYTHONMALLOC=debug ).
The PyMem_SetupDebugHooks() function can be used to set debug hooks after calling
PyMem_SetAllocator() .
These debug hooks fill dynamically allocated memory blocks with special, recognizable bit patterns. Newly
allocated memory is filled with the byte 0xCD(PYMEM_CLEANBYTE ), freed memory is filled with the byte
0xDD(PYMEM_DEADBYTE ). Memory blocks are surrounded by “forbidden bytes” filled with the byte 0xFD
(PYMEM_FORBIDDENBYTE ).Stringsofthesebytesareunlikelytobevalidaddresses,floats,orASCIIstrings.
Runtimechecks:
•DetectAPIviolations. Forexample, detectif PyObject_Free() iscalledonamemoryblockallocatedby
PyMem_Malloc() .
•Detectwritebeforethestartofthebuffer(bufferunderflow).
•Detectwriteaftertheendofthebuffer(bufferoverflow).
11.8. Debug hooks on the Python memory allocators 251
The Python/C API, Release 3.13.0
•Checkthatthe GILisheldwhenallocatorfunctionsof PYMEM_DOMAIN_OBJ (ex:PyObject_Malloc() )and
PYMEM_DOMAIN_MEM (ex:PyMem_Malloc() )domainsarecalled.
Onerror,thedebughooksusethe tracemalloc moduletogetthetracebackwhereamemoryblockwasallocated.
Thetracebackisonlydisplayedif tracemalloc istracingPythonmemoryallocationsandthememoryblockwas
traced.
LetS=sizeof(size_t) .2*Sbytesareaddedateachendofeachblockof Nbytesrequested. Thememorylayout
islikeso,whereprepresentstheaddressreturnedbyamalloc-likeorrealloc-likefunction( p[i:j]meanstheslice
of bytes from *(p+i)inclusive up to *(p+j)exclusive; note that the treatment of negative indices differs from a
Pythonslice):
p[-2*S:-S]
Numberofbytesoriginallyaskedfor. Thisisasize_t,big-endian(easiertoreadinamemorydump).
p[-S]
APIidentifier(ASCIIcharacter):
•'r'forPYMEM_DOMAIN_RAW .
•'m'forPYMEM_DOMAIN_MEM .
•'o'forPYMEM_DOMAIN_OBJ .
p[-S+1:0]
CopiesofPYMEM_FORBIDDENBYTE.Usedtocatchunder-writesandreads.
p[0:N]
The requested memory, filled with copies of PYMEM_CLEANBYTE, used to catch reference to uninitial-
izedmemory. Whenarealloc-likefunctioniscalledrequestingalargermemoryblock,thenewexcessbytes
are also filled with PYMEM_CLEANBYTE. When a free-like function is called, these are overwritten with
PYMEM_DEADBYTE,tocatchreferencetofreedmemory. Whenarealloc-likefunctioniscalledrequesting
asmallermemoryblock,theexcessoldbytesarealsofilledwithPYMEM_DEADBYTE.
p[N:N+S]
CopiesofPYMEM_FORBIDDENBYTE.Usedtocatchover-writesandreads.
p[N+S:N+2*S]
Onlyusedifthe PYMEM_DEBUG_SERIALNO macroisdefined(notdefinedbydefault).
Aserialnumber,incrementedby1oneachcalltoamalloc-likeorrealloc-likefunction. Big-endian size_t.
If“badmemory”isdetectedlater,theserialnumbergivesanexcellentwaytosetabreakpointonthenextrun,
tocapturetheinstantatwhichthisblockwaspassedout. Thestaticfunctionbumpserialno()inobmalloc.cis
theonlyplacetheserialnumberisincremented,andexistssoyoucansetsuchabreakpointeasily.
Arealloc-likeorfree-likefunctionfirstchecksthatthePYMEM_FORBIDDENBYTEbytesateachendareintact.
If they’ve been altered, diagnostic output is written to stderr, and the program is aborted via Py_FatalError(). The
othermainfailuremode isprovokinga memoryerrorwhena programreadsup oneofthespecial bitpatternsand
triestouseitasanaddress. Ifyougetinadebuggerthenandlookattheobject,you’relikelytoseethatit’sentirely
filled with PYMEM_DEADBYTE (meaning freed memory is getting used) or PYMEM_CLEANBYTE (meaning
uninitializedmemoryisgettingused).
Changed in version 3.6: The PyMem_SetupDebugHooks() function now also works on Python compiled in re-
lease mode. On error, the debug hooks now use tracemalloc to get the traceback where a memory block
was allocated. The debug hooks now also check if the GIL is held when functions of PYMEM_DOMAIN_OBJ and
PYMEM_DOMAIN_MEM domainsarecalled.
Changed in version 3.8: Byte patterns 0xCB(PYMEM_CLEANBYTE ),0xDB(PYMEM_DEADBYTE ) and 0xFB
(PYMEM_FORBIDDENBYTE ) have been replaced with 0xCD,0xDDand0xFDto use the same values than Windows
CRTdebug malloc() andfree().
252 Chapter 11. Memory Management
The Python/C API, Release 3.13.0
11.9The pymalloc allocator
Pythonhasa pymallocallocatoroptimizedforsmallobjects(smallerorequalto512bytes)withashortlifetime. It
uses memory mappings called “arenas” with a fixed size of either 256 KiB on 32-bit platforms or 1 MiB on 64-bit
platforms. Itfallsbackto PyMem_RawMalloc() andPyMem_RawRealloc() forallocationslargerthan512bytes.
pymallocis the default allocator of the PYMEM_DOMAIN_MEM (ex:PyMem_Malloc() ) and PYMEM_DOMAIN_OBJ
(ex:PyObject_Malloc() )domains.
Thearenaallocatorusesthefollowingfunctions:
•VirtualAlloc() andVirtualFree() onWindows,
•mmap()andmunmap() ifavailable,
•malloc() andfree()otherwise.
ThisallocatorisdisabledifPythonisconfiguredwiththe --without-pymalloc option. Itcanalsobedisabledat
runtimeusingthe PYTHONMALLOC environmentvariable(ex: PYTHONMALLOC=malloc ).
11.9.1 Customize pymalloc Arena Allocator
Addedinversion3.4.
typePyObjectArenaAllocator
Structureusedtodescribeanarenaallocator. Thestructurehasthreefields:
Field Meaning
void *ctx usercontextpassedasfirstargument
void* alloc(void *ctx, size_t size) allocateanarenaofsizebytes
void free(void *ctx, void *ptr, size_t size) freeanarena
voidPyObject_GetArenaAllocator (PyObjectArenaAllocator *allocator )
Getthearenaallocator.
voidPyObject_SetArenaAllocator (PyObjectArenaAllocator *allocator )
Setthearenaallocator.
11.10The mimalloc allocator
Addedinversion3.13.
Python supports the mimalloc allocator when the underlying platform support is available. mimalloc “is a general
purpose allocator with excellent performance characteristics. Initially developed by Daan Leijen for the runtime
systemsoftheKokaandLeanlanguages.”
11.11tracemalloc C API
Addedinversion3.7.
intPyTraceMalloc_Track (unsignedintdomain,uintptr_tptr,size_tsize )
Trackanallocatedmemoryblockinthe tracemalloc module.
Return 0onsuccess,return -1onerror(failedtoallocatememorytostorethetrace). Return -2iftracemalloc
isdisabled.
Ifmemoryblockisalreadytracked,updatetheexistingtrace.
11.9. The pymalloc allocator 253
The Python/C API, Release 3.13.0
intPyTraceMalloc_Untrack (unsignedintdomain,uintptr_tptr )
Untrackanallocatedmemoryblockinthe tracemalloc module. Donothingiftheblockwasnottracked.
Return -2iftracemallocisdisabled,otherwisereturn 0.
11.12Examples
Here is the example from section Overview, rewritten so that the I/O buffer is allocated from the Python heap by
usingthefirstfunctionset:
PyObject *res;
char *buf =(char *)PyMem_Malloc(BUFSIZ); /* for I/O */
if(buf ==NULL )
return PyErr_NoMemory();
/* ...Do some I/O operation involving buf... */
res =PyBytes_FromString(buf);
PyMem_Free(buf); /* allocated with PyMem_Malloc */
return res;
Thesamecodeusingthetype-orientedfunctionset:
PyObject *res;
char *buf =PyMem_New( char ,BUFSIZ); /* for I/O */
if(buf ==NULL )
return PyErr_NoMemory();
/* ...Do some I/O operation involving buf... */
res =PyBytes_FromString(buf);
PyMem_Del(buf); /* allocated with PyMem_New */
return res;
Notethatinthetwoexamplesabove,thebufferisalwaysmanipulatedviafunctionsbelongingtothesameset. Indeed,
it is required to use the same memory API family for a given memory block, so that the risk of mixing different
allocators is reduced to a minimum. The following code sequence contains two errors, one of which is labeled as
fatalbecauseitmixestwodifferentallocatorsoperatingondifferentheaps.
char *buf1 =PyMem_New( char ,BUFSIZ);
char *buf2 =(char *)malloc(BUFSIZ);
char *buf3 =(char *)PyMem_Malloc(BUFSIZ);
...
PyMem_Del(buf3); /* Wrong -- should be PyMem_Free() */
free(buf2); /* Right -- allocated via malloc() */
free(buf1); /* Fatal -- should be PyMem_Del() */
In addition to the functions aimed at handling raw memory blocks from the Python heap, objects in Python are
allocatedandreleasedwith PyObject_New ,PyObject_NewVar andPyObject_Del() .
ThesewillbeexplainedinthenextchapterondefiningandimplementingnewobjecttypesinC.
254 Chapter 11. Memory Management
CHAPTER
TWELVE
OBJECT IMPLEMENTATION SUPPORT
Thischapterdescribesthefunctions,types,andmacrosusedwhendefiningnewobjecttypes.
12.1Allocating Objects on the Heap
PyObject*_PyObject_New (PyTypeObject *type )
Return value: New reference.
PyVarObject *_PyObject_NewVar (PyTypeObject *type, Py_ssize_t size)
Return value: New reference.
PyObject*PyObject_Init (PyObject*op,PyTypeObject *type )
Return value: Borrowed reference. Part of the StableABI .Initializeanewlyallocatedobject opwithitstype
andinitialreference. Returnstheinitializedobject. Otherfieldsoftheobjectarenotaffected.
PyVarObject *PyObject_InitVar (PyVarObject *op,PyTypeObject *type, Py_ssize_t size)
Return value: Borrowed reference. Part of the StableABI .Thisdoeseverything PyObject_Init() does,and
alsoinitializesthelengthinformationforavariable-sizeobject.
PyObject_New (TYPE,typeobj )
Allocate a new Python object using the C structure type TYPEand the Python type object typeobj
(PyTypeObject* ). Fields not defined by the Python object header are not initialized. The caller will own
the only reference to the object (i.e. its reference count will be one). The size of the memory allocation is
determinedfromthe tp_basicsize fieldofthetypeobject.
PyObject_NewVar (TYPE,typeobj,size )
Allocate a new Python object using the C structure type TYPEand the Python type object typeobj
(PyTypeObject* ). FieldsnotdefinedbythePythonobjectheaderarenotinitialized. Theallocatedmemory
allows for the TYPEstructure plus size(Py_ssize_t ) fields of the size given by the tp_itemsize field of
typeobj. This is useful for implementing objects like tuples, which are able to determine their size at con-
struction time. Embedding the array of fields into the same allocation decreases the number of allocations,
improvingthememorymanagementefficiency.
voidPyObject_Del (void*op )
Releasesmemoryallocatedtoanobjectusing PyObject_New orPyObject_NewVar . Thisisnormallycalled
fromthe tp_dealloc handlerspecifiedintheobject’stype. Thefieldsoftheobjectshouldnotbeaccessed
afterthiscallasthememoryisnolongeravalidPythonobject.
PyObject _Py_NoneStruct
Object which is visible in Python as None. This should only be accessed using the Py_Nonemacro, which
evaluatestoapointertothisobject.
µSee also
PyModule_Create()
Toallocateandcreateextensionmodules.
255
The Python/C API, Release 3.13.0
12.2Common Object Structures
There are a large number of structures which are used in the definition of object types for Python. This section
describesthesestructuresandhowtheyareused.
12.2.1 Base object types and macros
AllPythonobjectsultimatelyshareasmallnumberoffieldsatthebeginningoftheobject’srepresentationinmemory.
Thesearerepresentedbythe PyObject andPyVarObject types,whicharedefined,inturn,bytheexpansionsof
somemacrosalsoused,whetherdirectlyorindirectly,inthedefinitionofallotherPythonobjects. Additionalmacros
canbefoundunder reference counting .
typePyObject
Part of the LimitedAPI . (Only some members are part of the stable ABI.) Allobjecttypesareextensionsofthis
type. ThisisatypewhichcontainstheinformationPythonneedstotreatapointertoanobjectasanobject. In
anormal“release”build,itcontainsonlytheobject’sreferencecountandapointertothecorrespondingtype
object. Nothingisactuallydeclaredtobea PyObject ,buteverypointertoaPythonobjectcanbecasttoa
PyObject *. Accesstothemembersmustbedonebyusingthemacros Py_REFCNT andPy_TYPE.
typePyVarObject
Part of the LimitedAPI . (Only some members are part of the stable ABI.) Thisisanextensionof PyObject
thataddsthe ob_sizefield. Thisisonlyusedforobjectsthathavesomenotionof length. Thistypedoesnot
often appear in the Python/C API. Access to the members must be done by using the macros Py_REFCNT ,
Py_TYPE,and Py_SIZE.
PyObject_HEAD
Thisisamacrousedwhendeclaringnewtypeswhichrepresentobjectswithoutavaryinglength. ThePyOb-
ject_HEADmacroexpandsto:
PyObject ob_base;
Seedocumentationof PyObject above.
PyObject_VAR_HEAD
Thisisamacrousedwhendeclaringnewtypeswhichrepresentobjectswithalengththatvariesfrominstance
toinstance. ThePyObject_VAR_HEADmacroexpandsto:
PyVarObject ob_base;
Seedocumentationof PyVarObject above.
intPy_Is (PyObject*x,PyObject*y)
Part of the StableABI since version 3.10. Testifthe xobjectisthe yobject,thesameas x is yinPython.
Addedinversion3.10.
intPy_IsNone (PyObject*x)
Part of the StableABI since version 3.10. Testifanobjectisthe Nonesingleton,thesameas x is None in
Python.
Addedinversion3.10.
intPy_IsTrue (PyObject*x)
Part of the StableABI since version 3.10. Testifanobjectisthe Truesingleton,thesameas x is True in
Python.
Addedinversion3.10.
intPy_IsFalse (PyObject*x)
Part of the StableABI since version 3.10. Testifanobjectisthe Falsesingleton,thesameas x is False
inPython.
Addedinversion3.10.
256 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
PyTypeObject *Py_TYPE (PyObject*o)
Return value: Borrowed reference. GetthetypeofthePythonobject o.
Returna borrowed reference .
Usethe Py_SET_TYPE() functiontosetanobjecttype.
Changedinversion3.11: Py_TYPE() ischangedtoaninlinestaticfunction. Theparametertypeisnolonger
const PyObject *.
intPy_IS_TYPE (PyObject*o,PyTypeObject *type )
Returnnon-zeroiftheobject otypeis type. Returnzerootherwise. Equivalentto: Py_TYPE(o) == type .
Addedinversion3.9.
voidPy_SET_TYPE (PyObject*o,PyTypeObject *type )
Settheobject otypeto type.
Addedinversion3.9.
Py_ssize_t Py_SIZE (PyVarObject *o)
GetthesizeofthePythonobject o.
Usethe Py_SET_SIZE() functiontosetanobjectsize.
Changedinversion3.11: Py_SIZE() ischangedtoaninlinestaticfunction. Theparametertypeisnolonger
const PyVarObject *.
voidPy_SET_SIZE (PyVarObject *o,Py_ssize_t size)
Settheobject osizeto size.
Addedinversion3.9.
PyObject_HEAD_INIT (type)
Thisisamacrowhichexpandstoinitializationvaluesforanew PyObject type. Thismacroexpandsto:
_PyObject_EXTRA_INIT
1,type,
PyVarObject_HEAD_INIT (type,size )
Thisisamacrowhichexpandstoinitializationvaluesforanew PyVarObject type,includingthe ob_size
field. Thismacroexpandsto:
_PyObject_EXTRA_INIT
1,type, size,
12.2.2 Implementing functions and methods
typePyCFunction
Part of the StableABI .TypeofthefunctionsusedtoimplementmostPythoncallablesinC.Functionsofthis
type take two PyObject *parameters and return one such value. If the return value is NULL, an exception
shallhavebeenset. Ifnot NULL,thereturnvalueisinterpretedasthereturnvalueofthefunctionasexposed
inPython. Thefunctionmustreturnanewreference.
Thefunctionsignatureis:
PyObject *PyCFunction (PyObject *self,
PyObject *args);
typePyCFunctionWithKeywords
Part of the Stable ABI .Type of the functions used to implement Python callables in C with signature
METH_VARARGS | METH_KEYWORDS .Thefunctionsignatureis:
12.2. Common Object Structures 257
The Python/C API, Release 3.13.0
PyObject *PyCFunctionWithKeywords (PyObject *self,
PyObject *args,
PyObject *kwargs);
typePyCFunctionFast
Part of the StableABI since version 3.13. TypeofthefunctionsusedtoimplementPythoncallablesinCwith
signature METH_FASTCALL .Thefunctionsignatureis:
PyObject *PyCFunctionFast (PyObject *self,
PyObject *const *args,
Py_ssize_t nargs);
typePyCFunctionFastWithKeywords
Part of the StableABI since version 3.13. TypeofthefunctionsusedtoimplementPythoncallablesinCwith
signature METH_FASTCALL | METH_KEYWORDS .Thefunctionsignatureis:
PyObject *PyCFunctionFastWithKeywords (PyObject *self,
PyObject *const *args,
Py_ssize_t nargs,
PyObject *kwnames);
typePyCMethod
Type of the functions used to implement Python callables in C with signature METH_METHOD |
METH_FASTCALL | METH_KEYWORDS .Thefunctionsignatureis:
PyObject *PyCMethod(PyObject *self,
PyTypeObject *defining_class,
PyObject *const *args,
Py_ssize_t nargs,
PyObject *kwnames)
Addedinversion3.9.
typePyMethodDef
Part of the StableABI (including all members). Structureusedtodescribeamethodofanextensiontype. This
structurehasfourfields:
constchar* ml_name
Nameofthemethod.
PyCFunction ml_meth
PointertotheCimplementation.
intml_flags
Flagsbitsindicatinghowthecallshouldbeconstructed.
constchar* ml_doc
Pointstothecontentsofthedocstring.
Theml_methisaCfunctionpointer. Thefunctionsmaybeofdifferenttypes,buttheyalwaysreturn PyObject *.
If the function is not of the PyCFunction , the compiler will require a cast in the method table. Even though
PyCFunction defines the first parameter as PyObject *, it is common that the method implementation uses the
specificCtypeofthe selfobject.
Theml_flags fieldisabitfieldwhichcanincludethefollowingflags. Theindividualflagsindicateeitheracalling
conventionorabindingconvention.
Therearethesecallingconventions:
258 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
METH_VARARGS
Thisisthetypicalcallingconvention,wherethemethodshavethetype PyCFunction . Thefunctionexpects
twoPyObject *values. The first one is the selfobject for methods; for module functions, it is the module
object. Thesecondparameter(oftencalled args)isatupleobjectrepresentingallarguments. Thisparameter
istypicallyprocessedusing PyArg_ParseTuple() orPyArg_UnpackTuple() .
METH_KEYWORDS
Can only be used in certain combinations with other flags: METH_VARARGS | METH_KEYWORDS ,
METH_FASTCALL | METH_KEYWORDS andMETH_METHOD | METH_FASTCALL | METH_KEYWORDS .
METH_VARARGS |METH_KEYWORDS
Methodswiththeseflagsmustbeoftype PyCFunctionWithKeywords . Thefunctionexpectsthreeparame-
ters:self,args,kwargswhere kwargsisadictionaryofallthekeywordargumentsorpossibly NULLifthereare
nokeywordarguments. Theparametersaretypicallyprocessedusing PyArg_ParseTupleAndKeywords() .
METH_FASTCALL
Fastcallingconventionsupportingonlypositionalarguments. Themethodshavethetype PyCFunctionFast .
Thefirstparameteris self,thesecondparameterisaCarrayof PyObject *valuesindicatingthearguments
andthethirdparameteristhenumberofarguments(thelengthofthearray).
Addedinversion3.7.
Changedinversion3.10: METH_FASTCALL isnowpartofthe stable ABI.
METH_FASTCALL |METH_KEYWORDS
Extension of METH_FASTCALL supporting also keyword arguments, with methods of type
PyCFunctionFastWithKeywords . Keyword arguments are passed the same way as in the vectorcall
protocol: there is an additional fourth PyObject *parameter which is a tuple representing the names of the
keyword arguments (which are guaranteed to be strings) or possibly NULLif there are no keywords. The
valuesofthekeywordargumentsarestoredinthe argsarray,afterthepositionalarguments.
Addedinversion3.7.
METH_METHOD
Can only be used in the combination with other flags: METH_METHOD | METH_FASTCALL |
METH_KEYWORDS .
METH_METHOD |METH_FASTCALL |METH_KEYWORDS
Extension of METH_FASTCALL | METH_KEYWORDS supporting the defining class , that is, the class that
containsthemethodinquestion. Thedefiningclassmightbeasuperclassof Py_TYPE(self) .
The method needs to be of type PyCMethod , the same as for METH_FASTCALL | METH_KEYWORDS with
defining_class argumentaddedafter self.
Addedinversion3.9.
METH_NOARGS
Methods without parameters don’t need to check whether arguments are given if they are listed with the
METH_NOARGS flag. Theyneedtobeoftype PyCFunction . Thefirstparameteristypicallynamed selfand
willholdareferencetothemoduleorobjectinstance. Inallcasesthesecondparameterwillbe NULL.
The function must have 2 parameters. Since the second parameter is unused, Py_UNUSED can be used to
preventacompilerwarning.
METH_O
Methods with a single object argument can be listed with the METH_Oflag, instead of invoking
PyArg_ParseTuple() witha "O"argument. They havethe type PyCFunction , with the selfparameter,
anda PyObject *parameterrepresentingthesingleargument.
Thesetwoconstantsarenotusedtoindicatethecallingconventionbutthebindingwhenusewithmethodsofclasses.
Thesemaynotbeusedforfunctionsdefinedformodules. Atmostoneoftheseflagsmaybesetforanygivenmethod.
12.2. Common Object Structures 259
The Python/C API, Release 3.13.0
METH_CLASS
The method will be passed the type object as the first parameter rather than an instance of the type. This is
usedtocreate class methods ,similartowhatiscreatedwhenusingthe classmethod() built-infunction.
METH_STATIC
The method will be passed NULLas the first parameter rather than an instance of the type. This is used to
create static methods ,similartowhatiscreatedwhenusingthe staticmethod() built-infunction.
Oneotherconstantcontrolswhetheramethodisloadedinplaceofanotherdefinitionwiththesamemethodname.
METH_COEXIST
The method will be loaded in place of existing definitions. Without METH_COEXIST , the default is to skip
repeated definitions. Since slot wrappers are loaded before the method table, the existence of a sq_contains
slot, for example, would generate a wrapped method named __contains__() and preclude the loading of
acorrespondingPyCFunctionwiththesamename. Withtheflagdefined,thePyCFunctionwillbeloadedin
placeofthewrapperobjectandwillco-existwiththeslot. ThisishelpfulbecausecallstoPyCFunctionsare
optimizedmorethanwrapperobjectcalls.
PyObject*PyCMethod_New (PyMethodDef *ml,PyObject*self, PyObject*module, PyTypeObject *cls)
Return value: New reference. Part of the StableABI since version 3.9. TurnmlintoaPython callableobject.
Thecallermustensurethat mloutlivesthe callable. Typically, mlisdefinedasastaticvariable.
Theselfparameterwillbepassedasthe selfargumenttotheCfunctionin ml->ml_meth wheninvoked. self
canbe NULL.
Thecallableobject’s __module__ attributecanbesetfromthegiven moduleargument. moduleshouldbea
Python string, which will be used as name of the module the function is defined in. If unavailable, it can be
setto NoneorNULL.
µSee also
function.__module__
Theclsparameterwillbepassedasthe defining_class argumenttotheCfunction. Mustbesetif METH_METHOD
isseton ml->ml_flags .
Addedinversion3.9.
PyObject*PyCFunction_NewEx (PyMethodDef *ml,PyObject*self, PyObject*module )
Return value: New reference. Part of the StableABI .Equivalentto PyCMethod_New(ml, self, module,
NULL).
PyObject*PyCFunction_New (PyMethodDef *ml,PyObject*self)
Return value: New reference. Part of the Stable ABI since version 3.4. Equivalent to PyCMethod_New(ml,
self, NULL, NULL) .
12.2.3 Accessing attributes of extension types
typePyMemberDef
Part of the StableABI (including all members). Structurewhichdescribesanattributeofatypewhichcorre-
spondstoaCstructmember. Whendefiningaclass,putaNULL-terminatedarrayofthesestructuresinthe
tp_members slot.
Itsfieldsare,inorder:
constchar* name
Nameofthemember. ANULLvaluemarkstheendofa PyMemberDef[] array.
Thestringshouldbestatic,nocopyismadeofit.
260 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
inttype
ThetypeofthememberintheCstruct. See Member types forthepossiblevalues.
Py_ssize_t offset
Theoffsetinbytesthatthememberislocatedonthetype’sobjectstruct.
intflags
Zeroormoreofthe Member flags ,combinedusingbitwiseOR.
constchar* doc
Thedocstring,orNULL.Thestringshouldbestatic,nocopyismadeofit. Typically,itisdefinedusing
PyDoc_STR .
By default (when flagsis0), members allow both read and write access. Use the Py_READONLY flag for
read-only access. Certain types, like Py_T_STRING , imply Py_READONLY . Only Py_T_OBJECT_EX (and
legacy T_OBJECT )memberscanbedeleted.
Forheap-allocatedtypes(createdusing PyType_FromSpec() orsimilar), PyMemberDef maycontainadef-
initionforthespecialmember "__vectorcalloffset__" ,correspondingto tp_vectorcall_offset in
typeobjects. Thesemustbedefinedwith Py_T_PYSSIZET andPy_READONLY ,forexample:
static PyMemberDef spam_type_members[] ={
{"__vectorcalloffset__ ",Py_T_PYSSIZET,
offsetof(Spam_object, vectorcall), Py_READONLY},
{NULL }/* Sentinel */
};
(Youmayneedto #include <stddef.h> foroffsetof() .)
The legacy offsets tp_dictoffset and tp_weaklistoffset can be defined similarly using
"__dictoffset__" and"__weaklistoffset__" members, but extensions are strongly encouraged to
usePy_TPFLAGS_MANAGED_DICT andPy_TPFLAGS_MANAGED_WEAKREF instead.
Changed in version 3.12: PyMemberDef is always available. Previously, it required including
"structmember.h" .
PyObject*PyMember_GetOne (constchar*obj_addr,struct PyMemberDef *m)
Part of the StableABI .Getanattributebelongingtotheobjectataddress obj_addr. Theattributeisdescribed
byPyMemberDef m. Returns NULLonerror.
Changed in version 3.12: PyMember_GetOne is always available. Previously, it required including
"structmember.h" .
intPyMember_SetOne (char*obj_addr,struct PyMemberDef *m,PyObject*o)
Part of the StableABI .Setanattributebelongingtotheobjectataddress obj_addrtoobject o. Theattribute
tosetisdescribedby PyMemberDef m. Returns 0ifsuccessfulandanegativevalueonfailure.
Changed in version 3.12: PyMember_SetOne is always available. Previously, it required including
"structmember.h" .
Member flags
Thefollowingflagscanbeusedwith PyMemberDef.flags :
Py_READONLY
Notwritable.
Py_AUDIT_READ
Emitan object.__getattr__ auditeventbeforereading.
Py_RELATIVE_OFFSET
Indicatesthatthe offsetofthis PyMemberDef entryindicatesanoffsetfromthesubclass-specificdata,rather
thanfrom PyObject .
12.2. Common Object Structures 261
The Python/C API, Release 3.13.0
Can only be used as part of Py_tp_members slotwhen creating a class using negative basicsize . It is
mandatoryinthatcase.
This flag is only used in PyType_Slot . When setting tp_members during class creation, Python clears it
andsets PyMemberDef.offset totheoffsetfromthe PyObject struct.
Changed in version 3.10: The RESTRICTED ,READ_RESTRICTED andWRITE_RESTRICTED macros available
with #include "structmember.h" are deprecated. READ_RESTRICTED andRESTRICTED are equivalent to
Py_AUDIT_READ ;WRITE_RESTRICTED doesnothing.
Changedinversion3.12: The READONLY macrowasrenamedto Py_READONLY .The PY_AUDIT_READ macrowas
renamed with the Py_prefix. The new names are now always available. Previously, these required #include
"structmember.h" . Theheaderisstillavailableanditprovidestheoldnames.
Member types
PyMemberDef.type can be one of the following macros corresponding to various C types. When the member is
accessedinPython,itwillbeconvertedtotheequivalentPythontype. WhenitissetfromPython,itwillbeconverted
backtotheCtype. Ifthatisnotpossible,anexceptionsuchas TypeError orValueError israised.
Unlessmarked(D),attributesdefinedthiswaycannotbedeletedusinge.g. delordelattr() .
262 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Macroname Ctype Pythontype
Py_T_BYTEchar int
Py_T_SHORTshort int
Py_T_INTint int
Py_T_LONGlong int
Py_T_LONGLONGlong long int
Py_T_UBYTEunsigned char int
Py_T_UINTunsigned int int
Py_T_USHORTunsigned short int
Py_T_ULONGunsigned long int
Py_T_ULONGLONGunsigned long long int
Py_T_PYSSIZETPy_ssize_t int
Py_T_FLOATfloat float
Py_T_DOUBLEdouble float
Py_T_BOOLchar(writtenas0or1) bool
Py_T_STRINGconst char* (*) str(RO)
Py_T_STRING_INPLACEconst char[] (*) str(RO)
Py_T_CHARchar(0-127) str(**)
Py_T_OBJECT_EXPyObject * object(D)
(*): Zero-terminated,UTF8-encodedCstring. With Py_T_STRING theCrepresentationisapointer;
withPy_T_STRING_INPLACE thestringisstoreddirectlyinthestructure.
12.2. Common Object Structures 263
The Python/C API, Release 3.13.0
(**): Stringoflength1. OnlyASCIIisaccepted.
(RO):Implies Py_READONLY .
(D): Can be deleted, in which case the pointer is set to NULL. Reading a NULLpointer raises
AttributeError .
Addedinversion3.12: Inpreviousversions,themacroswereonlyavailablewith #include "structmember.h"
and were named without the Py_prefix (e.g. as T_INT). The header is still available and contains the old names,
alongwiththefollowingdeprecatedtypes:
T_OBJECT
LikePy_T_OBJECT_EX ,butNULLisconvertedto None. ThisresultsinsurprisingbehaviorinPython: deleting
theattributeeffectivelysetsitto None.
T_NONE
Always None. Mustbeusedwith Py_READONLY .
Defining Getters and Setters
typePyGetSetDef
Part of the Stable ABI (including all members). Structure to define property-like access for a type. See also
descriptionofthe PyTypeObject.tp_getset slot.
constchar* name
attributename
getter get
Cfunctiontogettheattribute.
setter set
OptionalCfunctiontosetordeletetheattribute. If NULL,theattributeisread-only.
constchar* doc
optionaldocstring
void* closure
Optionaluserdatapointer,providingadditionaldataforgetterandsetter.
typedef PyObject*(*getter)(PyObject*,void*)
Part of the Stable ABI .Thegetfunction takes one PyObject *parameter (the instance) and a user data
pointer(theassociated closure):
Itshouldreturnanewreferenceonsuccessor NULLwithasetexceptiononfailure.
typedefint(* setter)(PyObject*,PyObject*,void*)
Part of the StableABI .setfunctionstaketwo PyObject *parameters(theinstanceandthevaluetobeset)
andauserdatapointer(theassociated closure):
Incasetheattributeshouldbedeletedthesecondparameteris NULL.Shouldreturn 0onsuccessor -1witha
setexceptiononfailure.
12.3Type Objects
Perhaps one of the most important structures of the Python object system is the structure that defines a new type:
thePyTypeObject structure. Typeobjectscanbehandledusinganyofthe PyObject_* orPyType_* functions,
butdonotoffermuchthat’sinterestingtomostPythonapplications. Theseobjectsarefundamentaltohowobjects
behave,sotheyareveryimportanttotheinterpreteritselfandtoanyextensionmodulethatimplementsnewtypes.
Typeobjectsarefairlylargecomparedtomostofthestandardtypes. Thereasonforthesizeisthateachtypeobject
stores a large number of values, mostly C function pointers, each of which implements a small part of the type’s
functionality. Thefieldsofthetypeobjectareexaminedindetailinthissection. Thefieldswillbedescribedinthe
orderinwhichtheyoccurinthestructure.
264 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Inadditiontothefollowingquickreference,the Examplessectionprovidesat-a-glanceinsightintothemeaningand
useof PyTypeObject .
12.3.1 Quick Reference
“tp slots”
PyTypeObjectSlotPage266,1Type specialmethods/attrs InfoPage266,2
OTDI
<R> tp_name constchar* __name__ XX
tp_basicsize Py_ssize_t XXX
tp_itemsize Py_ssize_t XX
tp_dealloc destructor XXX
tp_vectorcall_offset Py_ssize_t XX
(tp_getattr ) getattrfunc __getattribute__,__getattr__ G
(tp_setattr ) setattrfunc __setattr__,__delattr__ G
tp_as_async PyAsyncMethods * sub-slots %
tp_repr reprfunc __repr__ XXX
tp_as_number PyNumberMethods * sub-slots %
tp_as_sequence PySequenceMethods * sub-slots %
tp_as_mapping PyMappingMethods * sub-slots %
tp_hash hashfunc __hash__ XG
tp_call ternaryfunc __call__ XX
tp_str reprfunc __str__ XX
tp_getattro getattrofunc __getattribute__,__getattr__ XXG
tp_setattro setattrofunc __setattr__,__delattr__ XXG
tp_as_buffer PyBufferProcs * %
tp_flags unsignedlong XX?
tp_doc constchar* __doc__ XX
tp_traverse traverseproc XG
tp_clear inquiry XG
tp_richcompare richcmpfunc __lt__,__le__,__eq__,__ne__,
__gt__,__ge__XG
(tp_weaklistoffset ) Py_ssize_t X?
tp_iter getiterfunc __iter__ X
tp_iternext iternextfunc __next__ X
tp_methods PyMethodDef [] XX
tp_members PyMemberDef [] X
tp_getset PyGetSetDef [] XX
tp_base PyTypeObject * __base__ X
tp_dict PyObject * __dict__ ?
tp_descr_get descrgetfunc __get__ X
tp_descr_set descrsetfunc __set__,__delete__ X
(tp_dictoffset ) Py_ssize_t X?
tp_init initproc __init__ XXX
tp_alloc allocfunc X??
tp_new newfunc __new__ XX??
tp_free freefunc XX??
tp_is_gc inquiry XX
<tp_bases > PyObject * __bases__ ~
<tp_mro> PyObject * __mro__ ~
[tp_cache ] PyObject *
[tp_subclasses ] void* __subclasses__
[tp_weaklist ] PyObject *
(tp_del) destructor
[tp_version_tag ] unsignedint
continuesonnextpage
12.3. Type Objects 265
The Python/C API, Release 3.13.0
Table 1–continuedfrompreviouspage
PyTypeObjectSlot1Type specialmethods/attrs Info2
OTDI
tp_finalize destructor __del__ X
tp_vectorcall vectorcallfunc
[tp_watched ] unsignedchar
sub-slots
Slot Type specialmethods
am_await unaryfunc __await__
am_aiter unaryfunc __aiter__
am_anext unaryfunc __anext__
am_send sendfunc
nb_add binaryfunc __add____radd__
nb_inplace_add binaryfunc __iadd__
nb_subtract binaryfunc __sub____rsub__
nb_inplace_subtract binaryfunc __isub__
nb_multiply binaryfunc __mul____rmul__
nb_inplace_multiply binaryfunc __imul__
nb_remainder binaryfunc __mod____rmod__
nb_inplace_remainder binaryfunc __imod__
nb_divmod binaryfunc __divmod__ __rdiv-
mod__
nb_power ternaryfunc __pow____rpow__
nb_inplace_power ternaryfunc __ipow__
nb_negative unaryfunc __neg__
nb_positive unaryfunc __pos__
nb_absolute unaryfunc __abs__
nb_bool inquiry __bool__
nb_invert unaryfunc __invert__
nb_lshift binaryfunc __lshift____rlshift__
nb_inplace_lshift binaryfunc __ilshift__
nb_rshift binaryfunc __rshift__
__rrshift__
nb_inplace_rshift binaryfunc __irshift__
continuesonnextpage
1(): Aslotnameinparenthesesindicatesitis(effectively)deprecated.
<>: Namesinanglebracketsshouldbeinitiallysetto NULLandtreatedasread-only.
[]: Namesinsquarebracketsareforinternaluseonly.
<R>(asaprefix)meansthefieldisrequired(mustbenon- NULL).
2Columns:
“O”:seton PyBaseObject_Type
“T”:seton PyType_Type
“D”:default(ifslotissetto NULL)
X - PyType_Ready sets this value if it is NULL
~ - PyType_Ready always sets this value (it should be NULL)
? - PyType_Ready may set this value depending on other slots
Also see the inheritance column ("I").
“I”:inheritance
X - type slot is inherited via *PyType_Ready* if defined with a *NULL* value
% - the slots of the sub-struct are inherited individually
G - inherited, but only in combination with other slots; see the slot's description
? - it's complicated; see the slot's description
Notethatsomeslotsareeffectivelyinheritedthroughthenormalattributelookupchain.
266 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Table 2–continuedfrompreviouspage
Slot Type specialmethods
nb_and binaryfunc __and____rand__
nb_inplace_and binaryfunc __iand__
nb_xor binaryfunc __xor____rxor__
nb_inplace_xor binaryfunc __ixor__
nb_or binaryfunc __or____ror__
nb_inplace_or binaryfunc __ior__
nb_int unaryfunc __int__
nb_reserved void*
nb_float unaryfunc __float__
nb_floor_divide binaryfunc __floordiv__
nb_inplace_floor_divide binaryfunc __ifloordiv__
nb_true_divide binaryfunc __truediv__
nb_inplace_true_divide binaryfunc __itruediv__
nb_index unaryfunc __index__
nb_matrix_multiply binaryfunc __matmul__ __rmat-
mul__
nb_inplace_matrix_multiply binaryfunc __imatmul__
mp_length lenfunc __len__
mp_subscript binaryfunc __getitem__
mp_ass_subscript objobjargproc __setitem__,
__delitem__
sq_length lenfunc __len__
sq_concat binaryfunc __add__
sq_repeat ssizeargfunc __mul__
sq_item ssizeargfunc __getitem__
sq_ass_item ssizeobjargproc __setitem__
__delitem__
sq_contains objobjproc __contains__
sq_inplace_concat binaryfunc __iadd__
sq_inplace_repeat ssizeargfunc __imul__
bf_getbuffer getbufferproc()
bf_releasebuffer releasebufferproc()
12.3. Type Objects 267
The Python/C API, Release 3.13.0
slot typedefs
typedef ParameterTypes ReturnType
allocfunc
PyTypeObject *
Py_ssize_tPyObject *
destructor PyObject * void
freefunc void* void
traverseproc
PyObject *
visitproc
void*int
newfunc
PyObject *
PyObject *
PyObject *PyObject *
initproc
PyObject *
PyObject *
PyObject *int
reprfunc PyObject * PyObject *
getattrfunc
PyObject *
constchar*PyObject *
setattrfunc
PyObject *
constchar*
PyObject *int
getattrofunc
PyObject *
PyObject *PyObject *
setattrofunc
PyObject *
PyObject *
PyObject *int
descrgetfunc
PyObject *
PyObject *
PyObject *PyObject *
descrsetfunc
PyObject *
PyObject *
PyObject *int
hashfunc PyObject * Py_hash_t
richcmpfunc
PyObject *
PyObject *
intPyObject *
getiterfunc PyObject * PyObject *
iternextfunc PyObject * PyObject *
lenfunc PyObject * Py_ssize_t
getbufferproc
PyObject *
Py_buffer *
intint
releasebufferproc
PyObject *
Py_buffer *void
inquiry PyObject * int
unaryfunc
PyObject *PyObject *
binaryfunc
PyObject *
PyObject *PyObject *
ternaryfunc
PyObject *
PyObject *
PyObject *PyObject *
ssizeargfunc
PyObject *
Py_ssize_tPyObject *
ssizeobjargproc
PyObject *
Py_ssize_t
PyObject *int
objobjproc
PyObject *
PyObject *int
objobjargproc
PyObject *
PyObject *
PyObject *int268 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
SeeSlot Type typedefs belowformoredetail.
12.3.2 PyTypeObject Definition
The structure definition for PyTypeObject can be found in Include/object.h . For convenience of reference,
thisrepeatsthedefinitionfoundthere:
typedef struct _typeobject {
PyObject_VAR_HEAD
const char *tp_name; /* For printing, in format "<module>.<name>" */
Py_ssize_t tp_basicsize, tp_itemsize; /* For allocation */
/* Methods to implement standard operations */
destructor tp_dealloc;
Py_ssize_t tp_vectorcall_offset;
getattrfunc tp_getattr;
setattrfunc tp_setattr;
PyAsyncMethods *tp_as_async; /* formerly known as tp_compare (Python 2)
or tp_reserved (Python 3) */
reprfunc tp_repr;
/* Method suites for standard classes */
PyNumberMethods *tp_as_number;
PySequenceMethods *tp_as_sequence;
PyMappingMethods *tp_as_mapping;
/* More standard operations (here for binary compatibility) */
hashfunc tp_hash;
ternaryfunc tp_call;
reprfunc tp_str;
getattrofunc tp_getattro;
setattrofunc tp_setattro;
/* Functions to access object as input/output buffer */
PyBufferProcs *tp_as_buffer;
/* Flags to define presence of optional/expanded features */
unsigned long tp_flags;
const char *tp_doc; /* Documentation string */
/* Assigned meaning in release 2.0 */
/* call function for all accessible objects */
traverseproc tp_traverse;
/* delete references to contained objects */
inquiry tp_clear;
/* Assigned meaning in release 2.1 */
/* rich comparisons */
richcmpfunc tp_richcompare;
/* weak reference enabler */
Py_ssize_t tp_weaklistoffset;
(continuesonnextpage)
12.3. Type Objects 269
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
/* Iterators */
getiterfunc tp_iter;
iternextfunc tp_iternext;
/* Attribute descriptor and subclassing stuff */
struct PyMethodDef *tp_methods;
struct PyMemberDef *tp_members;
struct PyGetSetDef *tp_getset;
// Strong reference on a heap type, borrowed reference on a static type
struct _typeobject *tp_base;
PyObject *tp_dict;
descrgetfunc tp_descr_get;
descrsetfunc tp_descr_set;
Py_ssize_t tp_dictoffset;
initproc tp_init;
allocfunc tp_alloc;
newfunc tp_new;
freefunc tp_free; /* Low-level free-memory routine */
inquiry tp_is_gc; /* For PyObject_IS_GC */
PyObject *tp_bases;
PyObject *tp_mro; /* method resolution order */
PyObject *tp_cache;
PyObject *tp_subclasses;
PyObject *tp_weaklist;
destructor tp_del;
/* Type attribute cache version tag. Added in version 2.6 */
unsigned int tp_version_tag;
destructor tp_finalize;
vectorcallfunc tp_vectorcall;
/* bitset of which type-watchers care about this type */
unsigned char tp_watched;
}PyTypeObject;
12.3.3 PyObject Slots
Thetypeobjectstructureextendsthe PyVarObject structure. The ob_sizefieldisusedfordynamictypes(cre-
ated by type_new() , usually called from a class statement). Note that PyType_Type (the metatype) initializes
tp_itemsize ,whichmeansthatitsinstances(i.e. typeobjects) musthavethe ob_sizefield.
Py_ssize_t PyObject .ob_refcnt
Part of the StableABI .Thisisthetypeobject’sreferencecount,initializedto 1bythe PyObject_HEAD_INIT
macro. Notethatfor statically allocated type objects ,thetype’sinstances(objectswhose ob_typepointsback
to the type) do notcount as references. But for dynamically allocated type objects , the instances docount as
references.
Inheritance:
Thisfieldisnotinheritedbysubtypes.
PyTypeObject *PyObject .ob_type
Part of theStableABI .Thisisthetype’stype,inotherwordsitsmetatype. Itisinitializedbytheargumenttothe
PyObject_HEAD_INIT macro,anditsvalueshouldnormallybe &PyType_Type . However,fordynamically
loadableextensionmodulesthatmustbeusableonWindows(atleast),thecompilercomplainsthatthisisnot
a valid initializer. Therefore, the convention is to pass NULLto the PyObject_HEAD_INIT macro and to
270 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
initializethisfieldexplicitlyatthestartofthemodule’sinitializationfunction,beforedoinganythingelse. This
istypicallydonelikethis:
Foo_Type.ob_type =&PyType_Type;
This should be done before any instances of the type are created. PyType_Ready() checks if ob_typeis
NULL,andifso,initializesittothe ob_typefieldofthebaseclass. PyType_Ready() willnotchangethis
fieldifitisnon-zero.
Inheritance:
Thisfieldisinheritedbysubtypes.
12.3.4 PyVarObject Slots
Py_ssize_t PyVarObject .ob_size
Part of the StableABI .Forstatically allocated type objects ,thisshouldbeinitializedtozero. For dynamically
allocated type objects ,thisfieldhasaspecialinternalmeaning.
Inheritance:
Thisfieldisnotinheritedbysubtypes.
12.3.5 PyTypeObject Slots
Each slot has a section describing inheritance. If PyType_Ready() may set a value when the field is set to NULL
thentherewillalsobea“Default”section. (Notethatmanyfieldsseton PyBaseObject_Type andPyType_Type
effectivelyactasdefaults.)
constchar* PyTypeObject .tp_name
PointertoaNUL-terminatedstringcontainingthenameofthetype. Fortypesthatareaccessibleasmodule
globals,thestringshouldbethefullmodulename,followedbyadot,followedbythetypename; forbuilt-in
types, it should be just the type name. If the module is a submodule of a package, the full package name is
partofthefullmodulename. Forexample,atypenamed Tdefinedinmodule Minsubpackage Qinpackage
Pshouldhavethe tp_nameinitializer "P.Q.M.T" .
Fordynamically allocated type objects ,thisshouldjustbethetypename,andthemodulenameexplicitlystored
inthetypedictasthevalueforkey '__module__' .
Forstatically allocated type objects , thetp_namefield should contain a dot. Everything before the last dot
is made accessible as the __module__ attribute, and everything after the last dot is made accessible as the
__name__ attribute.
If no dot is present, the entire tp_name field is made accessible as the __name__ attribute, and the
__module__ attribute is undefined (unless explicitly set in the dictionary, as explained above). This means
your type will be impossible to pickle. Additionally, it will not be listed in module documentations created
withpydoc.
This field must not be NULL. It is the only required field in PyTypeObject() (other than potentially
tp_itemsize ).
Inheritance:
Thisfieldisnotinheritedbysubtypes.
Py_ssize_t PyTypeObject .tp_basicsize
Py_ssize_t PyTypeObject .tp_itemsize
Thesefieldsallowcalculatingthesizeinbytesofinstancesofthetype.
There are two kinds of types: types with fixed-length instances have a zero tp_itemsize field, types with
variable-length instances have a non-zero tp_itemsize field. For a type with fixed-length instances, all
instanceshavethesamesize,givenin tp_basicsize .
For a type with variable-length instances, the instances must have an ob_sizefield, and the instance size is
tp_basicsize plusNtimes tp_itemsize ,whereNisthe“length”oftheobject. ThevalueofNistypically
12.3. Type Objects 271
The Python/C API, Release 3.13.0
stored in the instance’s ob_sizefield. There are exceptions: for example, ints use a negative ob_sizeto
indicate a negative number, and N is abs(ob_size) there. Also, the presence of an ob_sizefield in the
instance layout doesn’t mean that the instance structure is variable-length (for example, the structure for the
listtypehasfixed-lengthinstances,yetthoseinstanceshaveameaningful ob_sizefield).
The basic size includes the fields in the instance declared by the macro PyObject_HEAD or
PyObject_VAR_HEAD (whichever is used to declare the instance struct) and this in turn includes the
_ob_prev and_ob_next fieldsiftheyarepresent. Thismeansthattheonlycorrectwaytogetaninitializer
forthe tp_basicsize istousethe sizeofoperatoronthestructusedtodeclaretheinstancelayout. The
basicsizedoesnotincludetheGCheadersize.
A note about alignment: if the variable items require a particular alignment, this should be taken
care of by the value of tp_basicsize . Example: suppose a type implements an array of double.
tp_itemsize issizeof(double) . It is the programmer’s responsibility that tp_basicsize is a mul-
tipleof sizeof(double) (assumingthisisthealignmentrequirementfor double).
Foranytypewithvariable-lengthinstances,thisfieldmustnotbe NULL.
Inheritance:
These fields are inherited separately by subtypes. If the base type has a non-zero tp_itemsize , it is gen-
erally not safe to set tp_itemsize to a different non-zero value in a subtype (though this depends on the
implementationofthebasetype).
destructor PyTypeObject .tp_dealloc
A pointer to the instance destructor function. This function must be defined unless the type guarantees that
its instances will never be deallocated (as is the case for the singletons NoneandEllipsis ). The function
signatureis:
void tp_dealloc (PyObject *self);
Thedestructorfunctioniscalledbythe Py_DECREF() andPy_XDECREF() macroswhenthenewreference
countiszero. Atthispoint, theinstanceisstillinexistence, buttherearenoreferencestoit. Thedestructor
function should free all references which the instance owns, free all memory buffers owned by the instance
(using the freeing function corresponding to the allocation function used to allocate the buffer), and call the
type’s tp_freefunction. Ifthetypeisnotsubtypable(doesn’thavethe Py_TPFLAGS_BASETYPE flagbitset),
itispermissibletocalltheobjectdeallocatordirectlyinsteadofvia tp_free. Theobjectdeallocatorshould
be the one used to allocate the instance; this is normally PyObject_Del() if the instance was allocated
using PyObject_New orPyObject_NewVar ,orPyObject_GC_Del() iftheinstancewasallocatedusing
PyObject_GC_New orPyObject_GC_NewVar .
Ifthetypesupportsgarbagecollection(hasthe Py_TPFLAGS_HAVE_GC flagbitset),thedestructorshouldcall
PyObject_GC_UnTrack() beforeclearinganymemberfields.
static void foo_dealloc (foo_object *self) {
PyObject_GC_UnTrack(self);
Py_CLEAR(self ->ref);
Py_TYPE(self) ->tp_free((PyObject *)self);
}
Finally, if the type is heap allocated ( Py_TPFLAGS_HEAPTYPE ), the deallocator should release the owned
referencetoitstypeobject(via Py_DECREF() )aftercallingthetypedeallocator. Inordertoavoiddangling
pointers,therecommendedwaytoachievethisis:
static void foo_dealloc (foo_object *self) {
PyTypeObject *tp=Py_TYPE(self);
// free references and buffers here
tp->tp_free(self);
Py_DECREF(tp);
}
272 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
ÁWarning
In a garbage collected Python, tp_dealloc may be called from any Python thread, not just the thread
whichcreatedtheobject(iftheobjectbecomespartofarefcountcycle,thatcyclemightbecollectedbya
garbagecollectiononanythread). ThisisnotaproblemforPythonAPIcalls, sincethethreadonwhich
tp_dealloc iscalledwillowntheGlobalInterpreterLock(GIL).However,iftheobjectbeingdestroyed
inturndestroysobjectsfromsomeotherCorC++library,careshouldbetakentoensurethatdestroying
thoseobjectsonthethreadwhichcalled tp_dealloc willnotviolateanyassumptionsofthelibrary.
Inheritance:
Thisfieldisinheritedbysubtypes.
Py_ssize_t PyTypeObject .tp_vectorcall_offset
Anoptionaloffsettoaper-instancefunctionthatimplementscallingtheobjectusingthe vectorcall protocol ,a
moreefficientalternativeofthesimpler tp_call.
Thisfieldisonlyusediftheflag Py_TPFLAGS_HAVE_VECTORCALL isset. Ifso,thismustbeapositiveinteger
containingtheoffsetintheinstanceofa vectorcallfunc pointer.
The vectorcallfunc pointer may be NULL, in which case the instance behaves as if
Py_TPFLAGS_HAVE_VECTORCALL wasnotset: callingtheinstancefallsbackto tp_call.
Anyclassthatsets Py_TPFLAGS_HAVE_VECTORCALL mustalsoset tp_callandmakesureitsbehaviouris
consistentwiththe vectorcallfunc function. Thiscanbedonebysetting tp_calltoPyVectorcall_Call() .
Changed in version 3.8: Before version 3.8, this slot was named tp_print . In Python 2.x, it was used for
printingtoafile. InPython3.0to3.7,itwasunused.
Changedinversion3.12: Beforeversion3.12,itwasnotrecommendedfor mutable heap types toimplement
thevectorcallprotocol. Whenausersets __call__ inPythoncode,only tp_callisupdated,likelymakingit
inconsistentwiththevectorcallfunction. Since3.12,setting __call__ willdisablevectorcalloptimizationby
clearingthe Py_TPFLAGS_HAVE_VECTORCALL flag.
Inheritance:
Thisfieldisalwaysinherited. However,the Py_TPFLAGS_HAVE_VECTORCALL flagisnotalwaysinherited. If
it’snotset,thenthesubclasswon’tuse vectorcall,exceptwhen PyVectorcall_Call() isexplicitlycalled.
getattrfunc PyTypeObject .tp_getattr
Anoptionalpointertotheget-attribute-stringfunction.
Thisfieldisdeprecated. Whenitisdefined,itshouldpointtoafunctionthatactsthesameasthe tp_getattro
function,buttakingaCstringinsteadofaPythonstringobjecttogivetheattributename.
Inheritance:
Group: tp_getattr ,tp_getattro
This field is inherited by subtypes together with tp_getattro : a subtype inherits both tp_getattr and
tp_getattro fromitsbasetypewhenthesubtype’s tp_getattr andtp_getattro areboth NULL.
setattrfunc PyTypeObject .tp_setattr
Anoptionalpointertothefunctionforsettinganddeletingattributes.
Thisfieldisdeprecated. Whenitisdefined,itshouldpointtoafunctionthatactsthesameasthe tp_setattro
function,buttakingaCstringinsteadofaPythonstringobjecttogivetheattributename.
Inheritance:
Group: tp_setattr ,tp_setattro
This field is inherited by subtypes together with tp_setattro : a subtype inherits both tp_setattr and
tp_setattro fromitsbasetypewhenthesubtype’s tp_setattr andtp_setattro areboth NULL.
12.3. Type Objects 273
The Python/C API, Release 3.13.0
PyAsyncMethods *PyTypeObject .tp_as_async
Pointertoanadditionalstructurethatcontainsfieldsrelevantonlytoobjectswhichimplement awaitableand
asynchronous iterator protocolsattheC-level. See Async Object Structures fordetails.
Addedinversion3.5: Formerlyknownas tp_compare andtp_reserved .
Inheritance:
Thetp_as_async fieldisnotinherited,butthecontainedfieldsareinheritedindividually.
reprfunc PyTypeObject .tp_repr
Anoptionalpointertoafunctionthatimplementsthebuilt-infunction repr().
Thesignatureisthesameasfor PyObject_Repr() :
PyObject *tp_repr (PyObject *self);
ThefunctionmustreturnastringoraUnicodeobject. Ideally,thisfunctionshouldreturnastringthat,when
passedto eval(),givenasuitableenvironment,returnsanobjectwiththesamevalue. Ifthisisnotfeasible,
itshouldreturnastringstartingwith '<'andendingwith '>'fromwhichboththetypeandthevalueofthe
objectcanbededuced.
Inheritance:
Thisfieldisinheritedbysubtypes.
Default:
Whenthisfieldisnotset,astringoftheform <%s object at %p> isreturned,where %sisreplacedbythe
typename,and %pbytheobject’smemoryaddress.
PyNumberMethods *PyTypeObject .tp_as_number
Pointer to an additional structure that contains fields relevant only to objects which implement the number
protocol. Thesefieldsaredocumentedin Number Object Structures .
Inheritance:
Thetp_as_number fieldisnotinherited,butthecontainedfieldsareinheritedindividually.
PySequenceMethods *PyTypeObject .tp_as_sequence
Pointer to an additional structure that contains fields relevant only to objects which implement the sequence
protocol. Thesefieldsaredocumentedin Sequence Object Structures .
Inheritance:
Thetp_as_sequence fieldisnotinherited,butthecontainedfieldsareinheritedindividually.
PyMappingMethods *PyTypeObject .tp_as_mapping
Pointer to an additional structure that contains fields relevant only to objects which implement the mapping
protocol. Thesefieldsaredocumentedin Mapping Object Structures .
Inheritance:
Thetp_as_mapping fieldisnotinherited,butthecontainedfieldsareinheritedindividually.
hashfunc PyTypeObject .tp_hash
Anoptionalpointertoafunctionthatimplementsthebuilt-infunction hash().
Thesignatureisthesameasfor PyObject_Hash() :
Py_hash_t tp_hash (PyObject *);
The value -1should not be returned as a normal return value; when an error occurs during the computation
ofthehashvalue,thefunctionshouldsetanexceptionandreturn -1.
Whenthisfieldisnotset( andtp_richcompare isnotset),anattempttotakethehashoftheobjectraises
TypeError . Thisisthesameassettingitto PyObject_HashNotImplemented() .
274 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
This field can be set explicitly to PyObject_HashNotImplemented() to block inheritance of the hash
methodfromaparenttype. Thisisinterpretedastheequivalentof __hash__ = None atthePythonlevel,
causing isinstance(o, collections.Hashable) tocorrectlyreturn False. Notethattheconverseis
alsotrue-setting __hash__ = None onaclassatthePythonlevelwillresultinthe tp_hashslotbeingset
toPyObject_HashNotImplemented() .
Inheritance:
Group: tp_hash,tp_richcompare
This field is inherited by subtypes together with tp_richcompare : a subtype inherits both of
tp_richcompare andtp_hash,whenthesubtype’s tp_richcompare andtp_hashareboth NULL.
Default:
PyBaseObject_Type usesPyObject_GenericHash() .
ternaryfunc PyTypeObject .tp_call
Anoptionalpointertoafunctionthatimplementscallingtheobject. Thisshouldbe NULLiftheobjectisnot
callable. Thesignatureisthesameasfor PyObject_Call() :
PyObject *tp_call (PyObject *self, PyObject *args, PyObject *kwargs);
Inheritance:
Thisfieldisinheritedbysubtypes.
reprfunc PyTypeObject .tp_str
Anoptionalpointertoafunctionthatimplementsthebuilt-inoperation str(). (Notethat strisatypenow,
andstr()callstheconstructorforthattype. Thisconstructorcalls PyObject_Str() todotheactualwork,
andPyObject_Str() willcallthishandler.)
Thesignatureisthesameasfor PyObject_Str() :
PyObject *tp_str (PyObject *self);
The function must return a string or a Unicode object. It should be a “friendly” string representation of the
object,asthisistherepresentationthatwillbeused,amongotherthings,bythe print()function.
Inheritance:
Thisfieldisinheritedbysubtypes.
Default:
Whenthisfieldisnotset, PyObject_Repr() iscalledtoreturnastringrepresentation.
getattrofunc PyTypeObject .tp_getattro
Anoptionalpointertotheget-attributefunction.
Thesignatureisthesameasfor PyObject_GetAttr() :
PyObject *tp_getattro (PyObject *self, PyObject *attr);
It is usually convenient to set this field to PyObject_GenericGetAttr() , which implements the normal
wayoflookingforobjectattributes.
Inheritance:
Group: tp_getattr ,tp_getattro
This field is inherited by subtypes together with tp_getattr : a subtype inherits both tp_getattr and
tp_getattro fromitsbasetypewhenthesubtype’s tp_getattr andtp_getattro areboth NULL.
Default:
PyBaseObject_Type usesPyObject_GenericGetAttr() .
12.3. Type Objects 275
The Python/C API, Release 3.13.0
setattrofunc PyTypeObject .tp_setattro
Anoptionalpointertothefunctionforsettinganddeletingattributes.
Thesignatureisthesameasfor PyObject_SetAttr() :
int tp_setattro (PyObject *self, PyObject *attr, PyObject *value);
Inaddition,setting valuetoNULLtodeleteanattributemustbesupported. Itisusuallyconvenienttosetthis
fieldto PyObject_GenericSetAttr() ,whichimplementsthenormalwayofsettingobjectattributes.
Inheritance:
Group: tp_setattr ,tp_setattro
This field is inherited by subtypes together with tp_setattr : a subtype inherits both tp_setattr and
tp_setattro fromitsbasetypewhenthesubtype’s tp_setattr andtp_setattro areboth NULL.
Default:
PyBaseObject_Type usesPyObject_GenericSetAttr() .
PyBufferProcs *PyTypeObject .tp_as_buffer
Pointer to an additional structure that contains fields relevant only to objects which implement the buffer in-
terface. Thesefieldsaredocumentedin Buffer Object Structures .
Inheritance:
Thetp_as_buffer fieldisnotinherited,butthecontainedfieldsareinheritedindividually.
unsignedlong PyTypeObject .tp_flags
This field is a bit mask of various flags. Some flags indicate variant semantics for certain situations; oth-
ers are used to indicate that certain fields in the type object (or in the extension structures referenced via
tp_as_number ,tp_as_sequence ,tp_as_mapping , and tp_as_buffer ) that were historically not al-
ways present are valid; if such a flag bit is clear, the type fields it guards must not be accessed and must be
consideredtohaveazeroor NULLvalueinstead.
Inheritance:
Inheritanceofthisfieldiscomplicated. Mostflagbitsareinheritedindividually,i.e. ifthebasetypehasaflag
bitset,thesubtypeinheritsthisflagbit. Theflagbitsthatpertaintoextensionstructuresarestrictlyinheritedif
theextensionstructureisinherited,i.e. thebasetype’svalueoftheflagbitiscopiedintothesubtypetogether
with a pointer to theextension structure. The Py_TPFLAGS_HAVE_GC flagbit is inherited togetherwith the
tp_traverse andtp_clear fields, i.e. if the Py_TPFLAGS_HAVE_GC flag bit is clear in the subtype and
thetp_traverse andtp_clear fieldsinthesubtypeexistandhave NULLvalues. .. XXXaremostflagbits
reallyinheritedindividually?
Default:
PyBaseObject_Type usesPy_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE .
Bit Masks:
The following bit masks are currently defined; these can be ORed together using the |operator to form the
value of the tp_flags field. The macro PyType_HasFeature() takes a type and a flags value, tpandf,
andcheckswhether tp->tp_flags & f isnon-zero.
Py_TPFLAGS_HEAPTYPE
Thisbitissetwhenthetypeobjectitselfisallocatedontheheap,forexample,typescreateddynamically
using PyType_FromSpec() . Inthiscase, the ob_typefieldofitsinstancesisconsideredareference
to the type, and the type object is INCREF’ed when a new instance is created, and DECREF’ed when
an instance is destroyed (this does not apply to instances of subtypes; only the type referenced by the
instance’sob_typegetsINCREF’edorDECREF’ed). Heaptypesshouldalso support garbage collection
astheycanformareferencecyclewiththeirownmoduleobject.
Inheritance:
???
276 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Py_TPFLAGS_BASETYPE
This bit is set when the type can be used as the base type of another type. If this bit is clear, the type
cannotbesubtyped(similartoa“final”classinJava).
Inheritance:
???
Py_TPFLAGS_READY
Thisbitissetwhenthetypeobjecthasbeenfullyinitializedby PyType_Ready() .
Inheritance:
???
Py_TPFLAGS_READYING
Thisbitissetwhile PyType_Ready() isintheprocessofinitializingthetypeobject.
Inheritance:
???
Py_TPFLAGS_HAVE_GC
This bit is set when the object supports garbage collection. If this bit is set, instances must be created
using PyObject_GC_New and destroyed using PyObject_GC_Del() . More information in section
Supporting Cyclic Garbage Collection . ThisbitalsoimpliesthattheGC-relatedfields tp_traverse and
tp_clear arepresentinthetypeobject.
Inheritance:
Group: Py_TPFLAGS_HAVE_GC ,tp_traverse ,tp_clear
ThePy_TPFLAGS_HAVE_GC flagbitisinheritedtogetherwiththe tp_traverse andtp_clear fields,
i.e. ifthe Py_TPFLAGS_HAVE_GC flagbitisclearinthesubtypeandthe tp_traverse andtp_clear
fieldsinthesubtypeexistandhave NULLvalues.
Py_TPFLAGS_DEFAULT
This is a bitmask of all the bits that pertain to the existence of certain fields in the
type object and its extension structures. Currently, it includes the following bits:
Py_TPFLAGS_HAVE_STACKLESS_EXTENSION .
Inheritance:
???
Py_TPFLAGS_METHOD_DESCRIPTOR
Thisbitindicatesthatobjectsbehavelikeunboundmethods.
Ifthisflagissetfor type(meth) ,then:
•meth.__get__(obj, cls)(*args, **kwds) (with objnot None) must be equivalent to
meth(obj, *args, **kwds) .
•meth.__get__(None, cls)(*args, **kwds) must be equivalent to meth(*args,
**kwds).
Thisflagenablesanoptimizationfortypicalmethodcallslike obj.meth() : itavoidscreatingatempo-
rary“boundmethod”objectfor obj.meth .
Addedinversion3.8.
Inheritance:
Thisflagisneverinheritedbytypeswithoutthe Py_TPFLAGS_IMMUTABLETYPE flagset. Forextension
types,itisinheritedwhenever tp_descr_get isinherited.
12.3. Type Objects 277
The Python/C API, Release 3.13.0
Py_TPFLAGS_MANAGED_DICT
Thisbitindicatesthatinstancesoftheclasshavea ~object.__dict__ attribute,andthatthespaceforthe
dictionaryismanagedbytheVM.
Ifthisflagisset, Py_TPFLAGS_HAVE_GC shouldalsobeset.
Thetypetraversefunctionmustcall PyObject_VisitManagedDict() anditsclearfunctionmustcall
PyObject_ClearManagedDict() .
Addedinversion3.12.
Inheritance:
Thisflagisinheritedunlessthe tp_dictoffset fieldissetinasuperclass.
Py_TPFLAGS_MANAGED_WEAKREF
Thisbitindicatesthatinstancesoftheclassshouldbeweaklyreferenceable.
Addedinversion3.12.
Inheritance:
Thisflagisinheritedunlessthe tp_weaklistoffset fieldissetinasuperclass.
Py_TPFLAGS_ITEMS_AT_END
Onlyusablewithvariable-sizetypes,i.e. oneswithnon-zero tp_itemsize .
Indicatesthatthevariable-sizedportionofaninstanceofthistypeisattheendoftheinstance’smemory
area,atanoffsetof Py_TYPE(obj)->tp_basicsize (whichmaybedifferentineachsubclass).
When setting this flag, be sure that all superclasses either use this memory layout, or are not variable-
sized. Pythondoesnotcheckthis.
Addedinversion3.12.
Inheritance:
Thisflagisinherited.
Py_TPFLAGS_LONG_SUBCLASS
Py_TPFLAGS_LIST_SUBCLASS
Py_TPFLAGS_TUPLE_SUBCLASS
Py_TPFLAGS_BYTES_SUBCLASS
Py_TPFLAGS_UNICODE_SUBCLASS
Py_TPFLAGS_DICT_SUBCLASS
Py_TPFLAGS_BASE_EXC_SUBCLASS
Py_TPFLAGS_TYPE_SUBCLASS
Theseflagsareusedbyfunctionssuchas PyLong_Check() toquicklydetermineifatypeisasubclass
ofabuilt-intype;suchspecificchecksarefasterthanagenericcheck,like PyObject_IsInstance() .
Customtypesthatinheritfrombuilt-insshouldhavetheir tp_flags setappropriately,orthecodethat
interactswithsuchtypeswillbehavedifferentlydependingonwhatkindofcheckisused.
Py_TPFLAGS_HAVE_FINALIZE
Thisbitissetwhenthe tp_finalize slotispresentinthetypestructure.
Addedinversion3.4.
Deprecated since version 3.8: This flag isn’t necessary anymore, as the interpreter assumes the
tp_finalize slotisalwayspresentinthetypestructure.
278 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Py_TPFLAGS_HAVE_VECTORCALL
This bit is set when the class implements the vectorcall protocol . See tp_vectorcall_offset for
details.
Inheritance:
Thisbitisinheritedif tp_callisalsoinherited.
Addedinversion3.9.
Changedinversion3.12: Thisflagisnowremovedfromaclasswhentheclass’s __call__() method
isreassigned.
Thisflagcannowbeinheritedbymutableclasses.
Py_TPFLAGS_IMMUTABLETYPE
Thisbitissetfortypeobjectsthatareimmutable: typeattributescannotbesetnordeleted.
PyType_Ready() automaticallyappliesthisflagto static types.
Inheritance:
Thisflagisnotinherited.
Addedinversion3.10.
Py_TPFLAGS_DISALLOW_INSTANTIATION
Disallowcreatinginstancesofthetype: set tp_newtoNULLanddon’tcreatethe __new__keyinthe
typedictionary.
The flag must be set before creating the type, not after. For example, it must be set before
PyType_Ready() iscalledonthetype.
Theflagissetautomaticallyon static types iftp_baseisNULLor &PyBaseObject_Type andtp_new
isNULL.
Inheritance:
Thisflagisnotinherited. However,subclasseswillnotbeinstantiableunlesstheyprovideanon-NULL
tp_new(whichisonlypossibleviatheCAPI).
®Note
Todisallowinstantiatingaclassdirectlybutallowinstantiatingitssubclasses(e.g. foran abstract base
class),donotusethisflag. Instead,make tp_newonlysucceedforsubclasses.
Addedinversion3.10.
Py_TPFLAGS_MAPPING
This bit indicates that instances of the class may match mapping patterns when used as the subject of
amatchblock. It is automatically set when registering or subclassing collections.abc.Mapping ,
andunsetwhenregistering collections.abc.Sequence .
®Note
Py_TPFLAGS_MAPPING andPy_TPFLAGS_SEQUENCE aremutuallyexclusive; itisan errorto en-
ablebothflagssimultaneously.
Inheritance:
Thisflagisinheritedbytypesthatdonotalreadyset Py_TPFLAGS_SEQUENCE .
12.3. Type Objects 279
The Python/C API, Release 3.13.0
µSee also
PEP 634–StructuralPatternMatching: Specification
Addedinversion3.10.
Py_TPFLAGS_SEQUENCE
This bit indicates that instances of the class may match sequence patterns when used as the subject of
amatchblock. Itisautomaticallysetwhenregisteringorsubclassing collections.abc.Sequence ,
andunsetwhenregistering collections.abc.Mapping .
®Note
Py_TPFLAGS_MAPPING andPy_TPFLAGS_SEQUENCE aremutuallyexclusive; itisan errorto en-
ablebothflagssimultaneously.
Inheritance:
Thisflagisinheritedbytypesthatdonotalreadyset Py_TPFLAGS_MAPPING .
µSee also
PEP 634–StructuralPatternMatching: Specification
Addedinversion3.10.
Py_TPFLAGS_VALID_VERSION_TAG
Internal. Donotsetorunsetthisflag. Toindicatethataclasshaschangedcall PyType_Modified()
ÁWarning
Thisflagispresentinheaderfiles,butisnotbeused. ItwillberemovedinafutureversionofCPython
constchar* PyTypeObject .tp_doc
AnoptionalpointertoaNUL-terminatedCstringgivingthedocstringforthistypeobject. Thisisexposedas
the__doc__attributeonthetypeandinstancesofthetype.
Inheritance:
Thisfieldis notinheritedbysubtypes.
traverseproc PyTypeObject .tp_traverse
An optional pointer to a traversal function for the garbage collector. This is only used if the
Py_TPFLAGS_HAVE_GC flagbitisset. Thesignatureis:
int tp_traverse (PyObject *self, visitproc visit, void *arg);
MoreinformationaboutPython’sgarbagecollectionschemecanbefoundinsection Supporting Cyclic Garbage
Collection.
Thetp_traverse pointer is used by the garbage collector to detect reference cycles. A typical implemen-
tation of a tp_traverse function simply calls Py_VISIT() on each of the instance’s members that are
Pythonobjectsthattheinstanceowns. Forexample,thisisfunction local_traverse() fromthe _thread
extensionmodule:
280 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
static int
local_traverse (localobject *self, visitproc visit, void *arg)
{
Py_VISIT(self ->args);
Py_VISIT(self ->kw);
Py_VISIT(self ->dict);
return 0;
}
Note that Py_VISIT() is called only on those members that can participate in reference cycles. Although
thereisalsoa self->key member,itcanonlybe NULLoraPythonstringandthereforecannotbepartofa
referencecycle.
Ontheotherhand,evenifyouknowamembercanneverbepartofacycle,asadebuggingaidyoumaywant
tovisititanywayjustsothe gcmodule’s get_referents() functionwillincludeit.
Heaptypes( Py_TPFLAGS_HEAPTYPE )mustvisittheirtypewith:
Py_VISIT(Py_TYPE(self));
ItisonlyneededsincePython3.9. TosupportPython3.8andolder,thislinemustbeconditional:
#if PY_VERSION_HEX >= 0x03090000
Py_VISIT(Py_TYPE(self));
#endif
If the Py_TPFLAGS_MANAGED_DICT bit is set in the tp_flags field, the traverse function must call
PyObject_VisitManagedDict() likethis:
PyObject_VisitManagedDict((PyObject *)self, visit, arg);
ÁWarning
Whenimplementing tp_traverse ,onlythemembersthattheinstance owns(byhaving strong references
tothem)mustbevisited. Forinstance,ifanobjectsupportsweakreferencesviathe tp_weaklist slot,
thepointersupportingthelinkedlist(what tp_weaklist pointsto)must notbevisitedastheinstancedoes
notdirectlyowntheweakreferencestoitself(theweakreferencelististheretosupporttheweakreference
machinery, but the instance has no strong reference to the elements inside it, as they are allowed to be
removedeveniftheinstanceisstillalive).
Note that Py_VISIT() requires the visitandargparameters to local_traverse() to have these specific
names;don’tnamethemjustanything.
Instancesof heap-allocated types holdareferencetotheirtype. Theirtraversalfunctionmustthereforeeither
visitPy_TYPE(self) ,ordelegatethisresponsibilitybycalling tp_traverse ofanotherheap-allocatedtype
(suchasaheap-allocatedsuperclass). Iftheydonot,thetypeobjectmaynotbegarbage-collected.
Changed in version 3.9: Heap-allocated types are expected to visit Py_TYPE(self) intp_traverse . In
earlierversionsofPython,dueto bug40217,doingthismayleadtocrashesinsubclasses.
Inheritance:
Group: Py_TPFLAGS_HAVE_GC ,tp_traverse ,tp_clear
Thisfieldisinheritedbysubtypestogetherwith tp_clear andthe Py_TPFLAGS_HAVE_GC flagbit: theflag
bit,tp_traverse ,and tp_clear areallinheritedfromthebasetypeiftheyareallzerointhesubtype.
inquiry PyTypeObject .tp_clear
An optional pointer to a clear function for the garbage collector. This is only used if the
Py_TPFLAGS_HAVE_GC flagbitisset. Thesignatureis:
12.3. Type Objects 281
The Python/C API, Release 3.13.0
int tp_clear (PyObject *);
Thetp_clear memberfunctionisusedtobreakreferencecyclesincyclicgarbagedetectedbythegarbage
collector. Takentogether, all tp_clear functionsinthesystemmustcombinetobreakallreferencecycles.
Thisissubtle,andifinanydoubtsupplya tp_clear function. Forexample,thetupletypedoesnotimplement
atp_clear function,becauseit’spossibletoprovethatnoreferencecyclecanbecomposedentirelyoftuples.
Thereforethe tp_clear functionsofothertypesmustbesufficienttobreakanycyclecontainingatuple. This
isn’timmediatelyobvious,andthere’srarelyagoodreasontoavoidimplementing tp_clear .
Implementations of tp_clear should drop the instance’s references to those of its members that may be
Pythonobjects,andsetitspointerstothosemembersto NULL,asinthefollowingexample:
static int
local_clear (localobject *self)
{
Py_CLEAR(self ->key);
Py_CLEAR(self ->args);
Py_CLEAR(self ->kw);
Py_CLEAR(self ->dict);
return 0;
}
ThePy_CLEAR() macroshouldbeused,becauseclearingreferencesisdelicate: thereferencetothecontained
objectmustnotbereleased(via Py_DECREF() )untilafterthepointertothecontainedobjectissetto NULL.
Thisisbecausereleasingthereferencemaycausethecontainedobjecttobecometrash,triggeringachainof
reclamationactivitythatmayincludeinvokingarbitraryPythoncode(duetofinalizers,orweakrefcallbacks,
associatedwiththecontainedobject). Ifit’spossibleforsuchcodetoreference selfagain,it’simportantthat
thepointertothecontainedobjectbe NULLatthattime,sothat selfknowsthecontainedobjectcannolonger
beused. The Py_CLEAR() macroperformstheoperationsinasafeorder.
If the Py_TPFLAGS_MANAGED_DICT bit is set in the tp_flags field, the traverse function must call
PyObject_ClearManagedDict() likethis:
PyObject_ClearManagedDict((PyObject *)self);
Note that tp_clear is not alwayscalled before an instance is deallocated. For example, when reference
counting is enough to determine that an object is no longer used, the cyclic garbage collector is not involved
andtp_dealloc iscalleddirectly.
Because the goal of tp_clear functions is to break reference cycles, it’s not necessary to clear contained
objectslikePythonstringsorPythonintegers,whichcan’tparticipateinreferencecycles. Ontheotherhand,it
maybeconvenienttoclearallcontainedPythonobjects,andwritethetype’s tp_dealloc functiontoinvoke
tp_clear .
MoreinformationaboutPython’sgarbagecollectionschemecanbefoundinsection Supporting Cyclic Garbage
Collection.
Inheritance:
Group: Py_TPFLAGS_HAVE_GC ,tp_traverse ,tp_clear
Thisfieldisinheritedbysubtypestogetherwith tp_traverse andthe Py_TPFLAGS_HAVE_GC flagbit: the
flagbit, tp_traverse ,and tp_clear areallinheritedfromthebasetypeiftheyareallzerointhesubtype.
richcmpfunc PyTypeObject .tp_richcompare
Anoptionalpointertotherichcomparisonfunction,whosesignatureis:
PyObject *tp_richcompare (PyObject *self, PyObject *other, int op);
Thefirstparameterisguaranteedtobeaninstanceofthetypethatisdefinedby PyTypeObject .
282 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Thefunctionshouldreturntheresultofthecomparison(usually Py_TrueorPy_False ). Ifthecomparison
isundefined,itmustreturn Py_NotImplemented ,ifanothererroroccurreditmustreturn NULLandsetan
exceptioncondition.
The following constants are defined to be used as the third argument for tp_richcompare and for
PyObject_RichCompare() :
Constant Comparison
Py_LT<
Py_LE<=
Py_EQ==
Py_NE!=
Py_GT>
Py_GE>=
Thefollowingmacroisdefinedtoeasewritingrichcomparisonfunctions:
Py_RETURN_RICHCOMPARE (VAL_A,VAL_B,op )
Return Py_TrueorPy_False from the function, depending on the result of a comparison. VAL_A
and VAL_B must be orderable by C comparison operators (for example, they may be C ints or floats).
Thethirdargumentspecifiestherequestedoperation,asfor PyObject_RichCompare() .
Thereturnedvalueisanew strong reference .
Onerror,setsanexceptionandreturns NULLfromthefunction.
Addedinversion3.7.
Inheritance:
Group: tp_hash,tp_richcompare
Thisfieldisinheritedbysubtypestogetherwith tp_hash: asubtypeinherits tp_richcompare andtp_hash
whenthesubtype’s tp_richcompare andtp_hashareboth NULL.
Default:
PyBaseObject_Type providesa tp_richcompare implementation,whichmaybeinherited. However,if
onlytp_hashisdefined,noteventheinheritedfunctionisusedandinstancesofthetypewillnotbeableto
participateinanycomparisons.
Py_ssize_t PyTypeObject .tp_weaklistoffset
Whilethisfieldisstillsupported, Py_TPFLAGS_MANAGED_WEAKREF shouldbeusedinstead,ifatallpossible.
Iftheinstancesofthistypeareweaklyreferenceable, thisfieldisgreaterthanzeroandcontainstheoffsetin
theinstancestructureoftheweakreferencelisthead(ignoringtheGCheader,ifpresent);thisoffsetisusedby
PyObject_ClearWeakRefs() andthe PyWeakref_* functions. Theinstancestructureneedstoincludea
fieldoftype PyObject *whichisinitializedto NULL.
Donotconfusethisfieldwith tp_weaklist ;thatisthelistheadforweakreferencestothetypeobjectitself.
Itisanerrortosetboththe Py_TPFLAGS_MANAGED_WEAKREF bitand tp_weaklistoffset .
12.3. Type Objects 283
The Python/C API, Release 3.13.0
Inheritance:
Thisfieldisinheritedbysubtypes,butseetheruleslistedbelow. Asubtypemayoverridethisoffset;thismeans
thatthesubtypeusesadifferentweakreferencelistheadthanthebasetype. Sincethelistheadisalwaysfound
viatp_weaklistoffset ,thisshouldnotbeaproblem.
Default:
If the Py_TPFLAGS_MANAGED_WEAKREF bit is set in the tp_flags field, then tp_weaklistoffset will
besettoanegativevalue,toindicatethatitisunsafetousethisfield.
getiterfunc PyTypeObject .tp_iter
Anoptionalpointertoafunctionthatreturnsan iteratorfortheobject. Itspresencenormallysignalsthatthe
instancesofthistypeare iterable(althoughsequencesmaybeiterablewithoutthisfunction).
Thisfunctionhasthesamesignatureas PyObject_GetIter() :
PyObject *tp_iter (PyObject *self);
Inheritance:
Thisfieldisinheritedbysubtypes.
iternextfunc PyTypeObject .tp_iternext
Anoptionalpointertoafunctionthatreturnsthenextiteminan iterator. Thesignatureis:
PyObject *tp_iternext (PyObject *self);
When the iterator is exhausted, it must return NULL; aStopIteration exception may or may not be set.
When another error occurs, it must return NULLtoo. Its presence signals that the instances of this type are
iterators.
Iterator types should also define the tp_iterfunction, and that function should return the iterator instance
itself(notanewiteratorinstance).
Thisfunctionhasthesamesignatureas PyIter_Next() .
Inheritance:
Thisfieldisinheritedbysubtypes.
struct PyMethodDef *PyTypeObject .tp_methods
Anoptionalpointertoastatic NULL-terminatedarrayof PyMethodDef structures,declaringregularmethods
ofthistype.
Foreachentryinthearray,anentryisaddedtothetype’sdictionary(see tp_dictbelow)containingamethod
descriptor.
Inheritance:
Thisfieldisnotinheritedbysubtypes(methodsareinheritedthroughadifferentmechanism).
struct PyMemberDef *PyTypeObject .tp_members
An optional pointer to a static NULL-terminated array of PyMemberDef structures, declaring regular data
members(fieldsorslots)ofinstancesofthistype.
Foreachentryinthearray,anentryisaddedtothetype’sdictionary(see tp_dictbelow)containingamember
descriptor.
Inheritance:
Thisfieldisnotinheritedbysubtypes(membersareinheritedthroughadifferentmechanism).
struct PyGetSetDef *PyTypeObject .tp_getset
An optional pointer to a static NULL-terminated array of PyGetSetDef structures, declaring computed at-
tributesofinstancesofthistype.
284 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Foreachentryinthearray,anentryisaddedtothetype’sdictionary(see tp_dictbelow)containingagetset
descriptor.
Inheritance:
Thisfieldisnotinheritedbysubtypes(computedattributesareinheritedthroughadifferentmechanism).
PyTypeObject *PyTypeObject .tp_base
Anoptionalpointertoabasetypefromwhichtypepropertiesareinherited. Atthislevel,onlysingleinheritance
issupported;multipleinheritancerequiredynamicallycreatingatypeobjectbycallingthemetatype.
®Note
Slotinitializationissubjecttotherulesofinitializingglobals. C99requirestheinitializerstobe“address
constants”. Functiondesignatorslike PyType_GenericNew() ,withimplicitconversiontoapointer,are
validC99addressconstants.
However,theunary‘&’operatorappliedtoanon-staticvariablelike PyBaseObject_Type isnotrequired
toproduceanaddressconstant. Compilersmaysupportthis(gccdoes),MSVCdoesnot. Bothcompilers
arestrictlystandardconforminginthisparticularbehavior.
Consequently, tp_baseshouldbesetintheextensionmodule’sinitfunction.
Inheritance:
Thisfieldisnotinheritedbysubtypes(obviously).
Default:
Thisfielddefaultsto &PyBaseObject_Type (whichtoPythonprogrammersisknownasthetype object).
PyObject*PyTypeObject .tp_dict
Thetype’sdictionaryisstoredhereby PyType_Ready() .
Thisfieldshouldnormallybeinitializedto NULLbeforePyType_Readyiscalled;itmayalsobeinitializedto
a dictionary containing initial attributes for the type. Once PyType_Ready() has initialized the type, extra
attributesforthetypemaybeaddedtothisdictionaryonlyiftheydon’tcorrespondtooverloadedoperations
(like __add__() ). Onceinitializationforthetypehasfinished,thisfieldshouldbetreatedasread-only.
Sometypesmaynotstoretheirdictionaryinthisslot. Use PyType_GetDict() toretrievethedictionaryfor
anarbitrarytype.
Changedinversion3.12: Internalsdetail: Forstaticbuiltintypes,thisisalways NULL.Instead,thedictforsuch
typesisstoredon PyInterpreterState . Use PyType_GetDict() togetthedictforanarbitrarytype.
Inheritance:
This field is not inherited by subtypes (though the attributes defined in here are inherited through a different
mechanism).
Default:
Ifthisfieldis NULL,PyType_Ready() willassignanewdictionarytoit.
ÁWarning
Itisnotsafetouse PyDict_SetItem() onorotherwisemodify tp_dictwiththedictionaryC-API.
descrgetfunc PyTypeObject .tp_descr_get
Anoptionalpointertoa“descriptorget”function.
Thefunctionsignatureis:
12.3. Type Objects 285
The Python/C API, Release 3.13.0
PyObject *tp_descr_get (PyObject *self, PyObject *obj, PyObject *type);
Inheritance:
Thisfieldisinheritedbysubtypes.
descrsetfunc PyTypeObject .tp_descr_set
Anoptionalpointertoafunctionforsettinganddeletingadescriptor’svalue.
Thefunctionsignatureis:
int tp_descr_set (PyObject *self, PyObject *obj, PyObject *value);
Thevalueargumentissetto NULLtodeletethevalue.
Inheritance:
Thisfieldisinheritedbysubtypes.
Py_ssize_t PyTypeObject .tp_dictoffset
Whilethisfieldisstillsupported, Py_TPFLAGS_MANAGED_DICT shouldbeusedinstead,ifatallpossible.
If the instances of this type have a dictionary containing instance variables, this field is non-zero and
contains the offset in the instances of the type of the instance variable dictionary; this offset is used by
PyObject_GenericGetAttr() .
Donotconfusethisfieldwith tp_dict;thatisthedictionaryforattributesofthetypeobjectitself.
Thevaluespecifiestheoffsetofthedictionaryfromthestartoftheinstancestructure.
The tp_dictoffset should be regarded as write-only. To get the pointer to the dictionary call
PyObject_GenericGetDict() . Calling PyObject_GenericGetDict() mayneedtoallocatememory
for the dictionary, so it is may be more efficient to call PyObject_GetAttr() when accessing an attribute
ontheobject.
Itisanerrortosetboththe Py_TPFLAGS_MANAGED_WEAKREF bitand tp_dictoffset .
Inheritance:
This field is inherited by subtypes. A subtype should not override this offset; doing so could be un-
safe, if C code tries to access the dictionary at the previous offset. To properly support inheritance, use
Py_TPFLAGS_MANAGED_DICT .
Default:
Thisslothasnodefault. For static types,ifthefieldis NULLthenno __dict__ getscreatedforinstances.
If the Py_TPFLAGS_MANAGED_DICT bit is set in the tp_flags field, then tp_dictoffset will be set to
-1,toindicatethatitisunsafetousethisfield.
initproc PyTypeObject .tp_init
Anoptionalpointertoaninstanceinitializationfunction.
Thisfunctioncorrespondstothe __init__() methodofclasses. Like __init__() ,itispossibletocreatean
instancewithoutcalling __init__() ,anditispossibletoreinitializeaninstancebycallingits __init__()
methodagain.
Thefunctionsignatureis:
int tp_init (PyObject *self, PyObject *args, PyObject *kwds);
Theselfargumentistheinstancetobeinitialized;the argsandkwdsargumentsrepresentpositionalandkey-
wordargumentsofthecallto __init__() .
Thetp_initfunction, if not NULL, is called when an instance is created normally by calling its type, after
thetype’s tp_newfunctionhasreturnedaninstanceofthetype. Ifthe tp_newfunctionreturnsaninstance
286 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
ofsomeothertypethatisnotasubtypeoftheoriginaltype,no tp_initfunctioniscalled;if tp_newreturns
aninstanceofasubtypeoftheoriginaltype,thesubtype’s tp_initiscalled.
Returns 0onsuccess, -1andsetsanexceptiononerror.
Inheritance:
Thisfieldisinheritedbysubtypes.
Default:
Forstatic types thisfielddoesnothaveadefault.
allocfunc PyTypeObject .tp_alloc
Anoptionalpointertoaninstanceallocationfunction.
Thefunctionsignatureis:
PyObject *tp_alloc (PyTypeObject *self, Py_ssize_t nitems);
Inheritance:
Thisfieldisinheritedbystaticsubtypes,butnotbydynamicsubtypes(subtypescreatedbyaclassstatement).
Default:
Fordynamicsubtypes,thisfieldisalwayssetto PyType_GenericAlloc() ,toforceastandardheapalloca-
tionstrategy.
Forstaticsubtypes, PyBaseObject_Type usesPyType_GenericAlloc() . Thatistherecommendedvalue
forallstaticallydefinedtypes.
newfunc PyTypeObject .tp_new
Anoptionalpointertoaninstancecreationfunction.
Thefunctionsignatureis:
PyObject *tp_new (PyTypeObject *subtype, PyObject *args, PyObject *kwds);
Thesubtypeargumentisthetypeoftheobjectbeingcreated;the argsandkwdsargumentsrepresentpositional
andkeywordargumentsofthecalltothetype. Notethat subtypedoesn’thavetoequalthetypewhose tp_new
functioniscalled;itmaybeasubtypeofthattype(butnotanunrelatedtype).
Thetp_newfunctionshouldcall subtype->tp_alloc(subtype, nitems) toallocatespacefortheob-
ject,andthendoonlyasmuchfurtherinitializationasisabsolutelynecessary. Initializationthatcansafelybe
ignored or repeated should be placed in the tp_inithandler. A good rule of thumb is that for immutable
types, all initialization should take place in tp_new, while for mutable types, most initialization should be
deferredto tp_init.
Setthe Py_TPFLAGS_DISALLOW_INSTANTIATION flagtodisallowcreatinginstancesofthetypeinPython.
Inheritance:
This field is inherited by subtypes, except it is not inherited by static types whose tp_baseisNULLor
&PyBaseObject_Type .
Default:
Forstatic types thisfieldhasnodefault. Thismeansiftheslotisdefinedas NULL,thetypecannotbecalledto
createnewinstances;presumablythereissomeotherwaytocreateinstances,likeafactoryfunction.
freefunc PyTypeObject .tp_free
Anoptionalpointertoaninstancedeallocationfunction. Itssignatureis:
void tp_free (void *self);
12.3. Type Objects 287
The Python/C API, Release 3.13.0
Aninitializerthatiscompatiblewiththissignatureis PyObject_Free() .
Inheritance:
Thisfieldisinheritedbystaticsubtypes,butnotbydynamicsubtypes(subtypescreatedbyaclassstatement)
Default:
In dynamic subtypes, this field is set to a deallocator suitable to match PyType_GenericAlloc() and the
valueofthe Py_TPFLAGS_HAVE_GC flagbit.
Forstaticsubtypes, PyBaseObject_Type usesPyObject_Del() .
inquiry PyTypeObject .tp_is_gc
Anoptionalpointertoafunctioncalledbythegarbagecollector.
Thegarbagecollectorneedstoknowwhetheraparticularobjectiscollectibleornot. Normally,itissufficient
tolookattheobject’stype’s tp_flags field,andcheckthe Py_TPFLAGS_HAVE_GC flagbit. Butsometypes
haveamixtureofstaticallyanddynamicallyallocatedinstances,andthestaticallyallocatedinstancesarenot
collectible. Such types should define this function; it should return 1for a collectible instance, and 0for a
non-collectibleinstance. Thesignatureis:
int tp_is_gc (PyObject *self);
(Theonlyexampleofthisaretypesthemselves. Themetatype, PyType_Type ,definesthisfunctiontodistin-
guishbetweenstaticallyand dynamically allocated types .)
Inheritance:
Thisfieldisinheritedbysubtypes.
Default:
Thisslothasnodefault. Ifthisfieldis NULL,Py_TPFLAGS_HAVE_GC isusedasthefunctionalequivalent.
PyObject*PyTypeObject .tp_bases
Tupleofbasetypes.
Thisfieldshouldbesetto NULLandtreatedasread-only. Pythonwillfillitinwhenthetypeis initialized .
For dynamically created classes, the Py_tp_bases slotcan be used instead of the basesargument of
PyType_FromSpecWithBases() . Theargumentformispreferred.
ÁWarning
Multipleinheritancedoesnotworkwellforstaticallydefinedtypes. Ifyouset tp_bases toatuple,Python
willnotraiseanerror,butsomeslotswillonlybeinheritedfromthefirstbase.
Inheritance:
Thisfieldisnotinherited.
PyObject*PyTypeObject .tp_mro
Tuple containing the expanded set of base types, starting with the type itself and ending with object, in
MethodResolutionOrder.
Thisfieldshouldbesetto NULLandtreatedasread-only. Pythonwillfillitinwhenthetypeis initialized .
Inheritance:
Thisfieldisnotinherited;itiscalculatedfreshby PyType_Ready() .
PyObject*PyTypeObject .tp_cache
Unused. Internaluseonly.
Inheritance:
288 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
Thisfieldisnotinherited.
void* PyTypeObject .tp_subclasses
Acollectionofsubclasses. Internaluseonly. Maybeaninvalidpointer.
Togetalistofsubclasses,callthePythonmethod __subclasses__() .
Changedinversion3.12: Forsometypes,thisfielddoesnotholdavalid PyObject *. Thetypewaschanged
tovoid*toindicatethis.
Inheritance:
Thisfieldisnotinherited.
PyObject*PyTypeObject .tp_weaklist
Weakreferencelisthead,forweakreferencestothistypeobject. Notinherited. Internaluseonly.
Changedinversion3.12: Internalsdetail: Forthestaticbuiltintypesthisisalways NULL,evenifweakrefsare
added. Instead, the weakrefs for each are stored on PyInterpreterState . Use the public C-API or the
internal _PyObject_GET_WEAKREFS_LISTPTR() macrotoavoidthedistinction.
Inheritance:
Thisfieldisnotinherited.
destructor PyTypeObject .tp_del
Thisfieldisdeprecated. Use tp_finalize instead.
unsignedint PyTypeObject .tp_version_tag
Usedtoindexintothemethodcache. Internaluseonly.
Inheritance:
Thisfieldisnotinherited.
destructor PyTypeObject .tp_finalize
Anoptionalpointertoaninstancefinalizationfunction. Itssignatureis:
void tp_finalize (PyObject *self);
Iftp_finalize is set, the interpreter calls it once when finalizing an instance. It is called either from the
garbagecollector(iftheinstanceispartofanisolatedreferencecycle)orjustbeforetheobjectisdeallocated.
Eitherway,itisguaranteedtobecalledbeforeattemptingtobreakreferencecycles,ensuringthatitfindsthe
objectinasanestate.
tp_finalize shouldnotmutatethecurrentexceptionstatus;therefore,arecommendedwaytowriteanon-
trivialfinalizeris:
static void
local_finalize (PyObject *self)
{
PyObject *error_type, *error_value, *error_traceback;
/* Save the current exception, if any. */
PyErr_Fetch( &error_type, &error_value, &error_traceback);
/* ... */
/* Restore the saved exception. */
PyErr_Restore(error_type, error_value, error_traceback);
}
Inheritance:
Thisfieldisinheritedbysubtypes.
12.3. Type Objects 289
The Python/C API, Release 3.13.0
Addedinversion3.4.
Changedinversion3.8: Beforeversion3.8itwasnecessarytosetthe Py_TPFLAGS_HAVE_FINALIZE flags
bitinorderforthisfieldtobeused. Thisisnolongerrequired.
µSee also
“Safeobjectfinalization”( PEP 442)
vectorcallfunc PyTypeObject .tp_vectorcall
Vectorcall function to use for calls of this type object. In other words, it is used to implement vectorcall
fortype.__call__ . Iftp_vectorcall isNULL, the default call implementation using __new__() and
__init__() isused.
Inheritance:
Thisfieldisneverinherited.
Addedinversion3.9: (thefieldexistssince3.8butit’sonlyusedsince3.9)
unsignedchar PyTypeObject .tp_watched
Internal. Donotuse.
Addedinversion3.12.
12.3.6 Static Types
Traditionally,typesdefinedinCcodeare static,thatis,astatic PyTypeObject structureisdefineddirectlyincode
andinitializedusing PyType_Ready() .
ThisresultsintypesthatarelimitedrelativetotypesdefinedinPython:
•Statictypesarelimitedtoonebase,i.e. theycannotusemultipleinheritance.
•Statictypeobjects(butnotnecessarilytheirinstances)areimmutable. Itisnotpossibletoaddormodifythe
typeobject’sattributesfromPython.
•Static type objects are shared across sub-interpreters , so they should not include any subinterpreter-specific
state.
Also,since PyTypeObject isonlypartofthe Limited API asanopaquestruct,anyextensionmodulesusingstatic
typesmustbecompiledforaspecificPythonminorversion.
12.3.7 Heap Types
An alternative to static types isheap-allocated types , orheap types for short, which correspond closely to classes
createdbyPython’s classstatement. Heaptypeshavethe Py_TPFLAGS_HEAPTYPE flagset.
This is done by filling a PyType_Spec structure and calling PyType_FromSpec() ,
PyType_FromSpecWithBases() ,PyType_FromModuleAndSpec() ,orPyType_FromMetaclass() .
12.3.8 Number Object Structures
typePyNumberMethods
This structure holds pointers to the functions which an object uses to implement the number protocol. Each
functionisusedbythefunctionofsimilarnamedocumentedinthe Number Protocol section.
Hereisthestructuredefinition:
typedef struct {
binaryfunc nb_add;
binaryfunc nb_subtract;
(continuesonnextpage)
290 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
binaryfunc nb_multiply;
binaryfunc nb_remainder;
binaryfunc nb_divmod;
ternaryfunc nb_power;
unaryfunc nb_negative;
unaryfunc nb_positive;
unaryfunc nb_absolute;
inquiry nb_bool;
unaryfunc nb_invert;
binaryfunc nb_lshift;
binaryfunc nb_rshift;
binaryfunc nb_and;
binaryfunc nb_xor;
binaryfunc nb_or;
unaryfunc nb_int;
void *nb_reserved;
unaryfunc nb_float;
binaryfunc nb_inplace_add;
binaryfunc nb_inplace_subtract;
binaryfunc nb_inplace_multiply;
binaryfunc nb_inplace_remainder;
ternaryfunc nb_inplace_power;
binaryfunc nb_inplace_lshift;
binaryfunc nb_inplace_rshift;
binaryfunc nb_inplace_and;
binaryfunc nb_inplace_xor;
binaryfunc nb_inplace_or;
binaryfunc nb_floor_divide;
binaryfunc nb_true_divide;
binaryfunc nb_inplace_floor_divide;
binaryfunc nb_inplace_true_divide;
unaryfunc nb_index;
binaryfunc nb_matrix_multiply;
binaryfunc nb_inplace_matrix_multiply;
}PyNumberMethods;
®Note
Binaryandternaryfunctionsmustcheckthetypeofalltheiroperands,andimplementthenecessarycon-
versions (at least one of the operands is an instance of the defined type). If the operation is not defined
forthegivenoperands,binaryandternaryfunctionsmustreturn Py_NotImplemented ,ifanothererror
occurredtheymustreturn NULLandsetanexception.
®Note
Thenb_reserved fieldshouldalwaysbe NULL.Itwaspreviouslycalled nb_long,andwasrenamedin
Python3.0.1.
binaryfunc PyNumberMethods .nb_add
12.3. Type Objects 291
The Python/C API, Release 3.13.0
binaryfunc PyNumberMethods .nb_subtract
binaryfunc PyNumberMethods .nb_multiply
binaryfunc PyNumberMethods .nb_remainder
binaryfunc PyNumberMethods .nb_divmod
ternaryfunc PyNumberMethods .nb_power
unaryfunc PyNumberMethods .nb_negative
unaryfunc PyNumberMethods .nb_positive
unaryfunc PyNumberMethods .nb_absolute
inquiry PyNumberMethods .nb_bool
unaryfunc PyNumberMethods .nb_invert
binaryfunc PyNumberMethods .nb_lshift
binaryfunc PyNumberMethods .nb_rshift
binaryfunc PyNumberMethods .nb_and
binaryfunc PyNumberMethods .nb_xor
binaryfunc PyNumberMethods .nb_or
unaryfunc PyNumberMethods .nb_int
void* PyNumberMethods .nb_reserved
unaryfunc PyNumberMethods .nb_float
binaryfunc PyNumberMethods .nb_inplace_add
binaryfunc PyNumberMethods .nb_inplace_subtract
binaryfunc PyNumberMethods .nb_inplace_multiply
binaryfunc PyNumberMethods .nb_inplace_remainder
ternaryfunc PyNumberMethods .nb_inplace_power
binaryfunc PyNumberMethods .nb_inplace_lshift
binaryfunc PyNumberMethods .nb_inplace_rshift
binaryfunc PyNumberMethods .nb_inplace_and
binaryfunc PyNumberMethods .nb_inplace_xor
binaryfunc PyNumberMethods .nb_inplace_or
binaryfunc PyNumberMethods .nb_floor_divide
binaryfunc PyNumberMethods .nb_true_divide
binaryfunc PyNumberMethods .nb_inplace_floor_divide
binaryfunc PyNumberMethods .nb_inplace_true_divide
unaryfunc PyNumberMethods .nb_index
binaryfunc PyNumberMethods .nb_matrix_multiply
binaryfunc PyNumberMethods .nb_inplace_matrix_multiply
292 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
12.3.9 Mapping Object Structures
typePyMappingMethods
Thisstructureholdspointerstothefunctionswhichanobjectusestoimplementthemappingprotocol. Ithas
threemembers:
lenfunc PyMappingMethods .mp_length
Thisfunctionisusedby PyMapping_Size() andPyObject_Size() ,andhasthesamesignature. Thisslot
maybesetto NULLiftheobjecthasnodefinedlength.
binaryfunc PyMappingMethods .mp_subscript
Thisfunctionisusedby PyObject_GetItem() andPySequence_GetSlice() ,andhasthesamesignature
asPyObject_GetItem() . Thisslotmustbefilledforthe PyMapping_Check() functiontoreturn 1,itcan
beNULLotherwise.
objobjargproc PyMappingMethods .mp_ass_subscript
Thisfunctionisusedby PyObject_SetItem() ,PyObject_DelItem() ,PySequence_SetSlice() and
PySequence_DelSlice() . It has the same signature as PyObject_SetItem() , butvcan also be set to
NULLtodeleteanitem. Ifthisslotis NULL,theobjectdoesnotsupportitemassignmentanddeletion.
12.3.10 Sequence Object Structures
typePySequenceMethods
Thisstructureholdspointerstothefunctionswhichanobjectusestoimplementthesequenceprotocol.
lenfunc PySequenceMethods .sq_length
This function is used by PySequence_Size() andPyObject_Size() , and has the same signature. It is
alsousedforhandlingnegativeindicesviathe sq_itemandthe sq_ass_item slots.
binaryfunc PySequenceMethods .sq_concat
Thisfunctionisusedby PySequence_Concat() andhasthesamesignature. Itisalsousedbythe +operator,
aftertryingthenumericadditionviathe nb_addslot.
ssizeargfunc PySequenceMethods .sq_repeat
Thisfunctionisusedby PySequence_Repeat() andhasthesamesignature. Itisalsousedbythe *operator,
aftertryingnumericmultiplicationviathe nb_multiply slot.
ssizeargfunc PySequenceMethods .sq_item
This function is used by PySequence_GetItem() and has the same signature. It is also used by
PyObject_GetItem() ,aftertryingthesubscriptionviathe mp_subscript slot. Thisslotmustbefilledfor
thePySequence_Check() functiontoreturn 1,itcanbe NULLotherwise.
Negativeindexesarehandledasfollows: ifthe sq_length slotisfilled,itiscalledandthesequencelengthis
usedtocomputeapositiveindexwhichispassedto sq_item. Ifsq_length isNULL,theindexispassedas
istothefunction.
ssizeobjargproc PySequenceMethods .sq_ass_item
This function is used by PySequence_SetItem() and has the same signature. It is also used by
PyObject_SetItem() andPyObject_DelItem() , after trying the item assignment and deletion via the
mp_ass_subscript slot. Thisslotmaybeleftto NULLiftheobjectdoesnotsupportitemassignmentand
deletion.
objobjproc PySequenceMethods .sq_contains
Thisfunctionmaybeusedby PySequence_Contains() andhasthesamesignature. Thisslotmaybeleft
toNULL,inthiscase PySequence_Contains() simplytraversesthesequenceuntilitfindsamatch.
binaryfunc PySequenceMethods .sq_inplace_concat
Thisfunctionisusedby PySequence_InPlaceConcat() andhasthesamesignature. Itshouldmodifyits
firstoperand,andreturnit. Thisslotmaybeleftto NULL,inthiscase PySequence_InPlaceConcat() will
fallbackto PySequence_Concat() . Itisalsousedbytheaugmentedassignment +=, aftertryingnumeric
in-placeadditionviathe nb_inplace_add slot.
12.3. Type Objects 293
The Python/C API, Release 3.13.0
ssizeargfunc PySequenceMethods .sq_inplace_repeat
Thisfunctionisusedby PySequence_InPlaceRepeat() andhasthesamesignature. Itshouldmodifyits
firstoperand,andreturnit. Thisslotmaybeleftto NULL,inthiscase PySequence_InPlaceRepeat() will
fallbackto PySequence_Repeat() . Itisalsousedbytheaugmentedassignment *=, aftertryingnumeric
in-placemultiplicationviathe nb_inplace_multiply slot.
12.3.11 Buffer Object Structures
typePyBufferProcs
This structure holds pointers to the functions required by the Buffer protocol . The protocol defines how an
exporterobjectcanexposeitsinternaldatatoconsumerobjects.
getbufferproc PyBufferProcs .bf_getbuffer
Thesignatureofthisfunctionis:
int (PyObject *exporter, Py_buffer *view, int flags);
Handlearequestto exportertofillin viewasspecifiedby flags. Exceptforpoint(3),animplementationofthis
functionMUSTtakethesesteps:
(1)Checkiftherequestcanbemet. Ifnot,raise BufferError ,setview->obj toNULLandreturn -1.
(2)Fillintherequestedfields.
(3)Incrementaninternalcounterforthenumberofexports.
(4)Setview->obj toexporterandincrement view->obj .
(5)Return 0.
Ifexporterispartofachainortreeofbufferproviders,twomainschemescanbeused:
•Re-export: Eachmemberofthetreeactsastheexportingobjectandsets view->obj toanewreference
toitself.
•Redirect: Thebufferrequestisredirectedtotherootobjectofthetree. Here, view->obj willbeanew
referencetotherootobject.
Theindividualfieldsof viewaredescribedinsection Buffer structure ,theruleshowanexportermustreactto
specificrequestsareinsection Buffer request types .
Allmemorypointedtointhe Py_buffer structurebelongstotheexporterandmustremainvaliduntilthereare
noconsumersleft. format,shape,strides,suboffsets andinternal areread-onlyfortheconsumer.
PyBuffer_FillInfo() providesaneasywayofexposingasimplebytesbufferwhiledealingcorrectlywith
allrequesttypes.
PyObject_GetBuffer() istheinterfacefortheconsumerthatwrapsthisfunction.
releasebufferproc PyBufferProcs .bf_releasebuffer
Thesignatureofthisfunctionis:
void (PyObject *exporter, Py_buffer *view);
Handlearequesttoreleasetheresourcesofthebuffer. Ifnoresourcesneedtobereleased, PyBufferProcs.
bf_releasebuffer may be NULL. Otherwise, a standard implementation of this function will take these
optionalsteps:
(1)Decrementaninternalcounterforthenumberofexports.
(2)Ifthecounteris 0,freeallmemoryassociatedwith view.
TheexporterMUSTusethe internal fieldtokeeptrackofbuffer-specificresources. Thisfieldisguaranteed
toremainconstant,whileaconsumerMAYpassacopyoftheoriginalbufferasthe viewargument.
ThisfunctionMUSTNOTdecrement view->obj ,sincethatisdoneautomaticallyin PyBuffer_Release()
(thisschemeisusefulforbreakingreferencecycles).
294 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
PyBuffer_Release() istheinterfacefortheconsumerthatwrapsthisfunction.
12.3.12 Async Object Structures
Addedinversion3.5.
typePyAsyncMethods
Thisstructureholdspointerstothefunctionsrequiredtoimplement awaitableandasynchronous iterator ob-
jects.
Hereisthestructuredefinition:
typedef struct {
unaryfunc am_await;
unaryfunc am_aiter;
unaryfunc am_anext;
sendfunc am_send;
}PyAsyncMethods;
unaryfunc PyAsyncMethods .am_await
Thesignatureofthisfunctionis:
PyObject *am_await (PyObject *self);
Thereturnedobjectmustbean iterator,i.e. PyIter_Check() mustreturn 1forit.
Thisslotmaybesetto NULLifanobjectisnotan awaitable.
unaryfunc PyAsyncMethods .am_aiter
Thesignatureofthisfunctionis:
PyObject *am_aiter (PyObject *self);
Mustreturnan asynchronous iterator object. See __anext__() fordetails.
Thisslotmaybesetto NULLifanobjectdoesnotimplementasynchronousiterationprotocol.
unaryfunc PyAsyncMethods .am_anext
Thesignatureofthisfunctionis:
PyObject *am_anext (PyObject *self);
Mustreturnan awaitableobject. See __anext__() fordetails. Thisslotmaybesetto NULL.
sendfunc PyAsyncMethods .am_send
Thesignatureofthisfunctionis:
PySendResult am_send (PyObject *self, PyObject *arg, PyObject **result);
SeePyIter_Send() fordetails. Thisslotmaybesetto NULL.
Addedinversion3.10.
12.3.13 Slot Type typedefs
typedef PyObject*(*allocfunc )(PyTypeObject *cls,Py_ssize_t nitems)
Part of the Stable ABI .The purpose of this function is to separate memory allocation from memory initial-
ization. Itshouldreturnapointertoablockofmemoryofadequatelengthfortheinstance,suitablyaligned,
and initialized to zeros, but with ob_refcnt set to 1andob_typeset to the type argument. If the type’s
tp_itemsize is non-zero, the object’s ob_sizefield should be initialized to nitemsand the length of the
allocatedmemoryblockshouldbe tp_basicsize + nitems*tp_itemsize ,roundeduptoamultipleof
sizeof(void*) ;otherwise, nitemsisnotusedandthelengthoftheblockshouldbe tp_basicsize .
12.3. Type Objects 295
The Python/C API, Release 3.13.0
Thisfunctionshouldnotdoanyotherinstanceinitialization,noteventoallocateadditionalmemory;thatshould
bedoneby tp_new.
typedefvoid(* destructor )(PyObject*)
Part of the StableABI .
typedefvoid(* freefunc )(void*)
Seetp_free.
typedef PyObject*(*newfunc)(PyObject*,PyObject*,PyObject*)
Part of the StableABI .Seetp_new.
typedefint(* initproc )(PyObject*,PyObject*,PyObject*)
Part of the StableABI .Seetp_init.
typedef PyObject*(*reprfunc )(PyObject*)
Part of the StableABI .Seetp_repr.
typedef PyObject*(*getattrfunc )(PyObject*self,char*attr)
Part of the StableABI .Returnthevalueofthenamedattributefortheobject.
typedefint(* setattrfunc )(PyObject*self,char*attr, PyObject*value)
Part of the StableABI .Setthevalueofthenamedattributefortheobject. Thevalueargumentissetto NULL
todeletetheattribute.
typedef PyObject*(*getattrofunc )(PyObject*self, PyObject*attr)
Part of the StableABI .Returnthevalueofthenamedattributefortheobject.
Seetp_getattro .
typedefint(* setattrofunc )(PyObject*self, PyObject*attr, PyObject*value)
Part of the StableABI .Setthevalueofthenamedattributefortheobject. Thevalueargumentissetto NULL
todeletetheattribute.
Seetp_setattro .
typedef PyObject*(*descrgetfunc )(PyObject*,PyObject*,PyObject*)
Part of the StableABI .Seetp_descr_get .
typedefint(* descrsetfunc )(PyObject*,PyObject*,PyObject*)
Part of the StableABI .Seetp_descr_set .
typedef Py_hash_t (*hashfunc )(PyObject*)
Part of the StableABI .Seetp_hash.
typedef PyObject*(*richcmpfunc )(PyObject*,PyObject*,int)
Part of the StableABI .Seetp_richcompare .
typedef PyObject*(*getiterfunc )(PyObject*)
Part of the StableABI .Seetp_iter.
typedef PyObject*(*iternextfunc )(PyObject*)
Part of the StableABI .Seetp_iternext .
typedef Py_ssize_t (*lenfunc)(PyObject*)
Part of the StableABI .
typedefint(* getbufferproc )(PyObject*,Py_buffer*,int)
Part of the StableABI since version 3.12.
typedefvoid(* releasebufferproc )(PyObject*,Py_buffer*)
Part of the StableABI since version 3.12.
296 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
typedef PyObject*(*unaryfunc )(PyObject*)
Part of the StableABI .
typedef PyObject*(*binaryfunc )(PyObject*,PyObject*)
Part of the StableABI .
typedef PySendResult (*sendfunc )(PyObject*,PyObject*,PyObject**)
Seeam_send.
typedef PyObject*(*ternaryfunc )(PyObject*,PyObject*,PyObject*)
Part of the StableABI .
typedef PyObject*(*ssizeargfunc )(PyObject*,Py_ssize_t)
Part of the StableABI .
typedefint(* ssizeobjargproc )(PyObject*,Py_ssize_t,PyObject*)
Part of the StableABI .
typedefint(* objobjproc )(PyObject*,PyObject*)
Part of the StableABI .
typedefint(* objobjargproc )(PyObject*,PyObject*,PyObject*)
Part of the StableABI .
12.3.14 Examples
The following are simple examples of Python type definitions. They include common usage you may encounter.
Somedemonstratetrickycornercases. Formoreexamples,practicalinfo,andatutorial,seedefining-new-typesand
new-types-topics.
Abasic static type:
typedef struct {
PyObject_HEAD
const char *data;
}MyObject;
static PyTypeObject MyObject_Type ={
PyVarObject_HEAD_INIT( NULL ,0)
.tp_name ="mymod.MyObject ",
.tp_basicsize =sizeof (MyObject),
.tp_doc =PyDoc_STR( "My objects "),
.tp_new =myobj_new,
.tp_dealloc =(destructor)myobj_dealloc,
.tp_repr =(reprfunc)myobj_repr,
};
Youmayalsofindoldercode(especiallyintheCPythoncodebase)withamoreverboseinitializer:
static PyTypeObject MyObject_Type ={
PyVarObject_HEAD_INIT( NULL ,0)
"mymod.MyObject ", /* tp_name */
sizeof (MyObject), /* tp_basicsize */
0, /* tp_itemsize */
(destructor)myobj_dealloc, /* tp_dealloc */
0, /* tp_vectorcall_offset */
0, /* tp_getattr */
0, /* tp_setattr */
0, /* tp_as_async */
(reprfunc)myobj_repr, /* tp_repr */
(continuesonnextpage)
12.3. Type Objects 297
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
0, /* tp_as_number */
0, /* tp_as_sequence */
0, /* tp_as_mapping */
0, /* tp_hash */
0, /* tp_call */
0, /* tp_str */
0, /* tp_getattro */
0, /* tp_setattro */
0, /* tp_as_buffer */
0, /* tp_flags */
PyDoc_STR( "My objects "), /* tp_doc */
0, /* tp_traverse */
0, /* tp_clear */
0, /* tp_richcompare */
0, /* tp_weaklistoffset */
0, /* tp_iter */
0, /* tp_iternext */
0, /* tp_methods */
0, /* tp_members */
0, /* tp_getset */
0, /* tp_base */
0, /* tp_dict */
0, /* tp_descr_get */
0, /* tp_descr_set */
0, /* tp_dictoffset */
0, /* tp_init */
0, /* tp_alloc */
myobj_new, /* tp_new */
};
Atypethatsupportsweakrefs,instancedicts,andhashing:
typedef struct {
PyObject_HEAD
const char *data;
}MyObject;
static PyTypeObject MyObject_Type ={
PyVarObject_HEAD_INIT( NULL ,0)
.tp_name ="mymod.MyObject ",
.tp_basicsize =sizeof (MyObject),
.tp_doc =PyDoc_STR( "My objects "),
.tp_flags =Py_TPFLAGS_DEFAULT |Py_TPFLAGS_BASETYPE |
Py_TPFLAGS_HAVE_GC |Py_TPFLAGS_MANAGED_DICT |
Py_TPFLAGS_MANAGED_WEAKREF,
.tp_new =myobj_new,
.tp_traverse =(traverseproc)myobj_traverse,
.tp_clear =(inquiry)myobj_clear,
.tp_alloc =PyType_GenericNew,
.tp_dealloc =(destructor)myobj_dealloc,
.tp_repr =(reprfunc)myobj_repr,
.tp_hash =(hashfunc)myobj_hash,
.tp_richcompare =PyBaseObject_Type.tp_richcompare,
};
Astrsubclassthatcannotbesubclassedandcannotbecalledtocreateinstances(e.g. usesaseparatefactoryfunc)
using Py_TPFLAGS_DISALLOW_INSTANTIATION flag:
298 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
typedef struct {
PyUnicodeObject raw;
char *extra;
}MyStr;
static PyTypeObject MyStr_Type ={
PyVarObject_HEAD_INIT( NULL ,0)
.tp_name ="mymod.MyStr ",
.tp_basicsize =sizeof (MyStr),
.tp_base =NULL ,// set to &PyUnicode_Type in module init
.tp_doc =PyDoc_STR( "my custom str "),
.tp_flags =Py_TPFLAGS_DEFAULT |Py_TPFLAGS_DISALLOW_INSTANTIATION,
.tp_repr =(reprfunc)myobj_repr,
};
Thesimplest static typewithfixed-lengthinstances:
typedef struct {
PyObject_HEAD
}MyObject;
static PyTypeObject MyObject_Type ={
PyVarObject_HEAD_INIT( NULL ,0)
.tp_name ="mymod.MyObject ",
};
Thesimplest static typewithvariable-lengthinstances:
typedef struct {
PyObject_VAR_HEAD
const char *data[ 1];
}MyObject;
static PyTypeObject MyObject_Type ={
PyVarObject_HEAD_INIT( NULL ,0)
.tp_name ="mymod.MyObject ",
.tp_basicsize =sizeof (MyObject) -sizeof (char *),
.tp_itemsize =sizeof (char *),
};
12.4Supporting Cyclic Garbage Collection
Python’ssupportfordetectingandcollectinggarbagewhichinvolvescircularreferencesrequiressupportfromobject
typeswhichare“containers”forotherobjectswhichmayalsobecontainers. Typeswhichdonotstorereferencesto
otherobjects,orwhichonlystorereferencestoatomictypes(suchasnumbersorstrings),donotneedtoprovideany
explicitsupportforgarbagecollection.
To create a container type, the tp_flags field of the type object must include the Py_TPFLAGS_HAVE_GC and
provideanimplementationofthe tp_traverse handler. Ifinstancesofthetypearemutable,a tp_clear imple-
mentationmustalsobeprovided.
Py_TPFLAGS_HAVE_GC
Objects with a type with this flag set must conform with the rules documented here. For convenience these
objectswillbereferredtoascontainerobjects.
Constructorsforcontainertypesmustconformtotworules:
1.Thememoryfortheobjectmustbeallocatedusing PyObject_GC_New orPyObject_GC_NewVar .
12.4. Supporting Cyclic Garbage Collection 299
The Python/C API, Release 3.13.0
2.Once all the fields which may contain references to other containers are initialized, it must call
PyObject_GC_Track() .
Similarly,thedeallocatorfortheobjectmustconformtoasimilarpairofrules:
1.Beforefieldswhichrefertoothercontainersareinvalidated, PyObject_GC_UnTrack() mustbecalled.
2.Theobject’smemorymustbedeallocatedusing PyObject_GC_Del() .
ÁWarning
IfatypeaddsthePy_TPFLAGS_HAVE_GC,thenit mustimplementatleasta tp_traverse handleror
explicitlyuseonefromitssubclassorsubclasses.
When calling PyType_Ready() or some of the APIs that indirectly call it like
PyType_FromSpecWithBases() orPyType_FromSpec() theinterpreterwillautomaticallypopulate
thetp_flags ,tp_traverse andtp_clear fieldsifthetypeinheritsfromaclassthatimplementsthe
garbagecollectorprotocolandthechildclassdoes notincludethe Py_TPFLAGS_HAVE_GC flag.
PyObject_GC_New (TYPE,typeobj )
Analogousto PyObject_New butforcontainerobjectswiththe Py_TPFLAGS_HAVE_GC flagset.
PyObject_GC_NewVar (TYPE,typeobj,size )
Analogousto PyObject_NewVar butforcontainerobjectswiththe Py_TPFLAGS_HAVE_GC flagset.
PyObject*PyUnstable_Object_GC_NewWithExtraData (PyTypeObject *type,size_textra_size )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Analogous to PyObject_GC_New but allocates extra_size bytes at the end of the object (at offset
tp_basicsize ). Theallocatedmemoryisinitializedtozeros,exceptforthe Python object header .
Theextradatawillbedeallocatedwiththeobject,butotherwiseitisnotmanagedbyPython.
ÁWarning
Thefunctionismarkedasunstablebecausethefinalmechanismforreservingextradataafteraninstanceis
notyetdecided. Forallocatingavariablenumberoffields,preferusing PyVarObject andtp_itemsize
instead.
Addedinversion3.12.
PyObject_GC_Resize (TYPE,op,newsize )
Resizeanobjectallocatedby PyObject_NewVar . Returnstheresizedobjectoftype TYPE*(referstoanyC
type)or NULLonfailure.
opmust be of type PyVarObject *and must not be tracked by the collector yet. newsizemust be of type
Py_ssize_t .
voidPyObject_GC_Track (PyObject*op)
Part of the StableABI .Addstheobject optothesetofcontainerobjectstrackedbythecollector. Thecollector
canrunatunexpectedtimessoobjectsmustbevalidwhilebeingtracked. Thisshouldbecalledonceallthe
fieldsfollowedbythe tp_traverse handlerbecomevalid,usuallyneartheendoftheconstructor.
intPyObject_IS_GC (PyObject*obj)
Returnsnon-zeroiftheobjectimplementsthegarbagecollectorprotocol,otherwisereturns0.
Theobjectcannotbetrackedbythegarbagecollectorifthisfunctionreturns0.
300 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
intPyObject_GC_IsTracked (PyObject*op)
Part of the StableABI since version 3.9. Returns1iftheobjecttypeof opimplementstheGCprotocoland
opisbeingcurrentlytrackedbythegarbagecollectorand0otherwise.
ThisisanalogoustothePythonfunction gc.is_tracked() .
Addedinversion3.9.
intPyObject_GC_IsFinalized (PyObject*op)
Part of the StableABI since version 3.9. Returns1iftheobjecttypeof opimplementstheGCprotocoland
ophasbeenalreadyfinalizedbythegarbagecollectorand0otherwise.
ThisisanalogoustothePythonfunction gc.is_finalized() .
Addedinversion3.9.
voidPyObject_GC_Del (void*op )
Part of the Stable ABI .Releases memory allocated to an object using PyObject_GC_New or
PyObject_GC_NewVar .
voidPyObject_GC_UnTrack (void*op )
Part of the StableABI .Removetheobject opfromthesetofcontainerobjectstrackedbythecollector. Note
thatPyObject_GC_Track() canbe called again onthis object to addit back to the setof tracked objects.
The deallocator ( tp_dealloc handler) should call this for the object before any of the fields used by the
tp_traverse handlerbecomeinvalid.
Changed in version 3.8: The _PyObject_GC_TRACK() and_PyObject_GC_UNTRACK() macros have been re-
movedfromthepublicCAPI.
Thetp_traverse handleracceptsafunctionparameterofthistype:
typedefint(* visitproc )(PyObject*object,void*arg)
Part of the StableABI .Typeofthevisitorfunctionpassedtothe tp_traverse handler. Thefunctionshould
becalledwithanobjecttotraverseas objectandthethirdparametertothe tp_traverse handleras arg. The
Python core uses several visitor functions to implement cyclic garbage detection; it’s not expected that users
willneedtowritetheirownvisitorfunctions.
Thetp_traverse handlermusthavethefollowingtype:
typedefint(* traverseproc )(PyObject*self, visitprocvisit,void*arg)
Part of the StableABI .Traversalfunctionforacontainerobject. Implementationsmustcallthe visitfunction
foreachobjectdirectlycontainedby self,withtheparametersto visitbeingthecontainedobjectandthe arg
valuepassedtothehandler. The visitfunctionmustnotbecalledwitha NULLobjectargument. If visitreturns
anon-zerovaluethatvalueshouldbereturnedimmediately.
To simplify writing tp_traverse handlers, a Py_VISIT() macro is provided. In order to use this macro, the
tp_traverse implementationmustnameitsargumentsexactly visitandarg:
voidPy_VISIT (PyObject*o)
Ifoisnot NULL,callthe visitcallback,witharguments oandarg. Ifvisitreturnsanon-zerovalue,thenreturn
it. Usingthismacro, tp_traverse handlerslooklike:
static int
my_traverse (Noddy *self, visitproc visit, void *arg)
{
Py_VISIT(self ->foo);
Py_VISIT(self ->bar);
return 0;
}
Thetp_clear handlermustbeofthe inquirytype,or NULLiftheobjectisimmutable.
12.4. Supporting Cyclic Garbage Collection 301
The Python/C API, Release 3.13.0
typedefint(* inquiry)(PyObject*self)
Part of the Stable ABI .Drop references that may have created reference cycles. Immutable objects do not
havetodefinethismethodsincetheycanneverdirectlycreatereferencecycles. Notethattheobjectmuststill
be valid after calling this method (don’t just call Py_DECREF() on a reference). The collector will call this
methodifitdetectsthatthisobjectisinvolvedinareferencecycle.
12.4.1 Controlling the Garbage Collector State
TheC-APIprovidesthefollowingfunctionsforcontrollinggarbagecollectionruns.
Py_ssize_t PyGC_Collect (void)
Part of the StableABI .Performafullgarbagecollection,ifthegarbagecollectorisenabled. (Notethat gc.
collect() runsitunconditionally.)
Returns the number of collected + unreachable objects which cannot be collected. If the garbage collector
isdisabledoralreadycollecting,returns 0immediately. Errorsduringgarbagecollectionarepassedto sys.
unraisablehook . Thisfunctiondoesnotraiseexceptions.
intPyGC_Enable (void)
Part of the StableABI since version 3.10. Enablethegarbagecollector: similarto gc.enable() . Returnsthe
previousstate,0fordisabledand1forenabled.
Addedinversion3.10.
intPyGC_Disable (void)
Part of the StableABI since version 3.10. Disablethegarbagecollector: similarto gc.disable() . Returns
thepreviousstate,0fordisabledand1forenabled.
Addedinversion3.10.
intPyGC_IsEnabled (void)
Part of the Stable ABI since version 3.10. Query the state of the garbage collector: similar to gc.
isenabled() . Returnsthecurrentstate,0fordisabledand1forenabled.
Addedinversion3.10.
12.4.2 Querying Garbage Collector State
TheC-APIprovidesthefollowinginterfaceforqueryinginformationaboutthegarbagecollector.
voidPyUnstable_GC_VisitObjects (gcvisitobjects_t callback,void*arg )
®
Thisis Unstable API .Itmaychangewithoutwarninginminorreleases.
Runsupplied callbackonallliveGC-capableobjects. argispassedthroughtoallinvocationsof callback.
ÁWarning
Ifnewobjectsare(de)allocatedbythecallbackitisundefinediftheywillbevisited.
Garbage collection is disabled during operation. Explicitly running a collection in the callback may lead
toundefinedbehavioure.g. visitingthesameobjectsmultipletimesornotatall.
Addedinversion3.12.
302 Chapter 12. Object Implementation Support
The Python/C API, Release 3.13.0
typedefint(* gcvisitobjects_t )(PyObject*object,void*arg)
Typeofthevisitorfunctiontobepassedto PyUnstable_GC_VisitObjects() .argisthesameasthe arg
passedto PyUnstable_GC_VisitObjects . Return 0tocontinueiteration,return 1tostopiteration. Other
returnvaluesarereservedfornowsobehavioronreturninganythingelseisundefined.
Addedinversion3.12.
12.4. Supporting Cyclic Garbage Collection 303
The Python/C API, Release 3.13.0
304 Chapter 12. Object Implementation Support
CHAPTER
THIRTEEN
API AND ABI VERSIONING
CPythonexposesitsversionnumberinthefollowingmacros. Notethatthesecorrespondtotheversioncodeis built
with,notnecessarilytheversionusedat run time.
SeeC API Stability foradiscussionofAPIandABIstabilityacrossversions.
PY_MAJOR_VERSION
The3in3.4.1a2.
PY_MINOR_VERSION
The4in3.4.1a2.
PY_MICRO_VERSION
The1in3.4.1a2.
PY_RELEASE_LEVEL
Theain3.4.1a2. Thiscanbe 0xAforalpha, 0xBforbeta, 0xCforreleasecandidateor 0xFforfinal.
PY_RELEASE_SERIAL
The2in3.4.1a2. Zeroforfinalreleases.
PY_VERSION_HEX
ThePythonversionnumberencodedinasingleinteger.
Theunderlyingversioninformationcanbefoundbytreatingitasa32bitnumberinthefollowingmanner:
BytesBits(bigendianorder) Meaning Valuefor 3.4.1a2
11-8 PY_MAJOR_VERSION 0x03
29-16 PY_MINOR_VERSION 0x04
317-24 PY_MICRO_VERSION 0x01
425-28 PY_RELEASE_LEVEL 0xA
29-32 PY_RELEASE_SERIAL 0x2
Thus 3.4.1a2ishexversion 0x030401a2 and3.10.0ishexversion 0x030a00f0 .
Usethisfornumericcomparisons,e.g. #if PY_VERSION_HEX >= ... .
Thisversionisalsoavailableviathesymbol Py_Version .
constunsignedlong Py_Version
Part of the Stable ABI since version 3.11. The Python runtime version number encoded in a single constant
integer,withthesameformatasthe PY_VERSION_HEX macro. ThiscontainsthePythonversionusedatrun
time.
Addedinversion3.11.
Allthegivenmacrosaredefinedin Include/patchlevel.h .
305
The Python/C API, Release 3.13.0
306 Chapter 13. API and ABI Versioning
CHAPTER
FOURTEEN
MONITORING C API
Addedinversion3.13.
Anextensionmayneedtointeractwiththeeventmonitoringsystem. Subscribingtoeventsandregisteringcallbacks
canbedoneviathePythonAPIexposedin sys.monitoring .
307
The Python/C API, Release 3.13.0
308 Chapter 14. Monitoring C API
CHAPTER
FIFTEEN
GENERATING EXECUTION EVENTS
ThefunctionsbelowmakeitpossibleforanextensiontofiremonitoringeventsasitemulatestheexecutionofPython
code. Eachofthesefunctionsacceptsa PyMonitoringState structwhichcontainsconciseinformationaboutthe
activationstateofevents,aswellastheeventarguments,whichincludea PyObject* representingthecodeobject,
the instruction offset and sometimes additional, event-specific arguments (see sys.monitoring for details about
thesignaturesofthedifferenteventcallbacks). The codelike argumentshouldbeaninstanceof types.CodeType
orofatypethatemulatesit.
TheVMdisablestracingwhenfiringanevent,sothereisnoneedforusercodetodothat.
Monitoringfunctionsshouldnotbecalledwithanexceptionset,exceptthoselistedbelowasworkingwiththecurrent
exception.
typePyMonitoringState
Representationofthestateofaneventtype. Itisallocatedbytheuserwhileitscontentsaremaintainedbythe
monitoringAPIfunctionsdescribedbelow.
Allofthefunctionsbelowreturn0onsuccessand-1(withanexceptionset)onerror.
Seesys.monitoring fordescriptionsoftheevents.
intPyMonitoring_FirePyStartEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea PY_START event.
intPyMonitoring_FirePyResumeEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea PY_RESUME event.
intPyMonitoring_FirePyReturnEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset,
PyObject*retval )
Firea PY_RETURN event.
intPyMonitoring_FirePyYieldEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset, PyObject
*retval )
Firea PY_YIELD event.
intPyMonitoring_FireCallEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset, PyObject
*callable, PyObject*arg0 )
Firea CALLevent.
intPyMonitoring_FireLineEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset,intlineno )
Firea LINEevent.
intPyMonitoring_FireJumpEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset, PyObject
*target_offset )
Firea JUMPevent.
intPyMonitoring_FireBranchEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset, PyObject
*target_offset )
Firea BRANCHevent.
309
The Python/C API, Release 3.13.0
intPyMonitoring_FireCReturnEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset, PyObject
*retval )
Firea C_RETURN event.
intPyMonitoring_FirePyThrowEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea PY_THROW eventwiththecurrentexception(asreturnedby PyErr_GetRaisedException() ).
intPyMonitoring_FireRaiseEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea RAISEeventwiththecurrentexception(asreturnedby PyErr_GetRaisedException() ).
intPyMonitoring_FireCRaiseEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea C_RAISEeventwiththecurrentexception(asreturnedby PyErr_GetRaisedException() ).
intPyMonitoring_FireReraiseEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea RERAISEeventwiththecurrentexception(asreturnedby PyErr_GetRaisedException() ).
intPyMonitoring_FireExceptionHandledEvent (PyMonitoringState *state, PyObject*codelike,int32_t
offset )
Fire an EXCEPTION_HANDLED event with the current exception (as returned by
PyErr_GetRaisedException() ).
intPyMonitoring_FirePyUnwindEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset )
Firea PY_UNWIND eventwiththecurrentexception(asreturnedby PyErr_GetRaisedException() ).
intPyMonitoring_FireStopIterationEvent (PyMonitoringState *state, PyObject*codelike,int32_toffset,
PyObject*value )
Fire a STOP_ITERATION event. If valueis an instance of StopIteration , it is used. Otherwise, a new
StopIteration instanceiscreatedwith valueasitsargument.
15.1Managing the Monitoring State
Monitoring states can be managed with the help of monitoring scopes. A scope would typically correspond to a
pythonfunction.
intPyMonitoring_EnterScope (PyMonitoringState *state_array,uint64_t*version,constuint8_t*event_types,
Py_ssize_t length )
Enter a monitored scope. event_types is an array of the event IDs for events that may be fired from the
scope. Forexample,theIDofa PY_START eventisthevalue PY_MONITORING_EVENT_PY_START ,whichis
numerically equal to the base-2 logarithm of sys.monitoring.events.PY_START .state_array is an
arraywithamonitoringstateentryforeacheventin event_types ,itisallocatedbytheuserbutpopulated
byPyMonitoring_EnterScope() with information about the activation state of the event. The size of
event_types (andhencealsoof state_array )isgivenin length.
The version argument is a pointer to a value which should be allocated by the user together with
state_array and initialized to 0, and then set only by PyMonitoring_EnterScope() itself. It allows
thisfunctiontodeterminewhethereventstateshavechangedsincethepreviouscall, andtoreturnquicklyif
theyhavenot.
Thescopesreferredtoherearelexicalscopes: afunction,classormethod. PyMonitoring_EnterScope()
shouldbecalledwheneverthelexicalscopeisentered. Scopescanbereentered,reusingthesame state_array
andversion, in situations like when emulating a recursive Python function. When a code-like’s execution is
paused,suchaswhenemulatingagenerator,thescopeneedstobeexitedandre-entered.
Themacrosfor event_types are:
310 Chapter 15. Generating Execution Events
The Python/C API, Release 3.13.0
Macro Event
PY_MONITORING_EVENT_BRANCHBRANCH
PY_MONITORING_EVENT_CALLCALL
PY_MONITORING_EVENT_C_RAISEC_RAISE
PY_MONITORING_EVENT_C_RETURNC_RETURN
PY_MONITORING_EVENT_EXCEPTION_HANDLEDEXCEPTION_HANDLED
PY_MONITORING_EVENT_INSTRUCTIONINSTRUCTION
PY_MONITORING_EVENT_JUMPJUMP
PY_MONITORING_EVENT_LINELINE
PY_MONITORING_EVENT_PY_RESUMEPY_RESUME
PY_MONITORING_EVENT_PY_RETURNPY_RETURN
PY_MONITORING_EVENT_PY_STARTPY_START
PY_MONITORING_EVENT_PY_THROWPY_THROW
PY_MONITORING_EVENT_PY_UNWINDPY_UNWIND
PY_MONITORING_EVENT_PY_YIELDPY_YIELD
PY_MONITORING_EVENT_RAISERAISE
PY_MONITORING_EVENT_RERAISERERAISE
PY_MONITORING_EVENT_STOP_ITERATIONSTOP_ITERATION
intPyMonitoring_ExitScope (void)
Exitthelastscopethatwasenteredwith PyMonitoring_EnterScope() .
15.1. Managing the Monitoring State 311
The Python/C API, Release 3.13.0
312 Chapter 15. Generating Execution Events
APPENDIX
A
GLOSSARY
>>>
The default Python prompt of the interactive shell. Often seen for code examples which can be executed
interactivelyintheinterpreter.
...
Canreferto:
•The default Python prompt of the interactive shell when entering the code for an indented code block,
when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or
triplequotes),orafterspecifyingadecorator.
•TheEllipsis built-inconstant.
abstract base class
Abstractbaseclassescomplement duck-typing byprovidingawaytodefineinterfaceswhenothertechniques
likehasattr() wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual
subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and
issubclass() ;seethe abcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-
tures (in the collections.abc module), numbers (in the numbersmodule), streams (in the iomodule),
import finders and loaders (in the importlib.abc module). You can create your own ABCs with the abc
module.
annotation
Alabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention
asatype hint.
Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-
tributes, and functions are stored in the __annotations__ special attribute of modules, classes, and func-
tions,respectively.
Seevariable annotation ,function annotation ,PEP 484andPEP 526,whichdescribethisfunctionality. Also
seeannotations-howtoforbestpracticesonworkingwithannotations.
argument
Avaluepassedtoa function(ormethod)whencallingthefunction. Therearetwokindsofargument:
•keyword argument : anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa
valueinadictionaryprecededby **. Forexample, 3and5arebothkeywordargumentsinthefollowing
callsto complex() :
complex (real =3, imag =5)
complex (**{'real ':3,'imag ':5})
•positional argument : anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe
beginningofanargumentlistand/orbepassedaselementsofan iterableprecededby *. Forexample, 3
and5arebothpositionalargumentsinthefollowingcalls:
complex (3,5)
complex (*(3,5))
313
The Python/C API, Release 3.13.0
Arguments are assigned to the named local variables in a function body. See the calls section for the rules
governingthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument; theevaluated
valueisassignedtothelocalvariable.
Seealsothe parameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
andPEP 362.
asynchronous context manager
Anobjectwhichcontrolstheenvironmentseeninan async with statementbydefining __aenter__() and
__aexit__() methods. Introducedby PEP 492.
asynchronous generator
A function which returns an asynchronous generator iterator . It looks like a coroutine function defined with
async def except that it contains yieldexpressions for producing a series of values usable in an async
forloop.
Usually refers to an asynchronous generator function, but may refer to an asynchronous generator iterator in
somecontexts. Incaseswheretheintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
Anasynchronousgeneratorfunctionmaycontain awaitexpressionsaswellas async for ,and async with
statements.
asynchronous generator iterator
Anobjectcreatedbya asynchronous generator function.
Thisisan asynchronous iterator whichwhencalledusingthe __anext__() methodreturnsanawaitableobject
whichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe asynchronous generator iterator effectivelyresumeswithanother
awaitablereturnedby __anext__() ,itpicksupwhereitleftoff. See PEP 492andPEP 525.
asynchronous iterable
An object, that can be used in an async for statement. Must return an asynchronous iterator from its
__aiter__() method. Introducedby PEP 492.
asynchronous iterator
An object that implements the __aiter__() and__anext__() methods. __anext__() must return an
awaitableobject. async for resolves the awaitables returned by an asynchronous iterator’s __anext__()
methoduntilitraisesa StopAsyncIteration exception. Introducedby PEP 492.
attribute
Avalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,
ifanobject ohasanattribute aitwouldbereferencedas o.a.
Itispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample
using setattr() , if the object allowsit. Such an attributewill not be accessibleusing a dotted expression,
andwouldinsteadneedtoberetrievedwith getattr() .
awaitable
An object that can be used in an awaitexpression. Can be a coroutineor an object with an __await__()
method. Seealso PEP 492.
BDFL
BenevolentDictatorForLife,a.k.a. GuidovanRossum ,Python’screator.
binary file
Afile objectabletoreadandwrite bytes-like objects . Examplesofbinaryfilesarefilesopenedinbinarymode
('rb','wb'or'rb+'),sys.stdin.buffer ,sys.stdout.buffer , andinstancesof io.BytesIO and
gzip.GzipFile .
Seealso text fileforafileobjectabletoreadandwrite strobjects.
borrowed reference
InPython’sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot
ownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection
canremovethelast strong reference totheobjectandsodestroyit.
314 Appendix A. Glossary
The Python/C API, Release 3.13.0
Calling Py_INCREF() onthe borrowed reference isrecommendedtoconvertittoa strong reference in-place,
exceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. The Py_NewRef()
functioncanbeusedtocreateanew strong reference .
bytes-like object
An object that supports the Buffer Protocol and can export a C- contiguous buffer. This includes all bytes,
bytearray ,and array.array objects,aswellasmanycommon memoryview objects. Bytes-likeobjects
can be used for variousoperations that work withbinary data; these include compression, saving to a binary
file,andsendingoverasocket.
Someoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas“read-write
bytes-likeobjects”. Examplemutablebufferobjectsinclude bytearray anda memoryview ofabytearray .
Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”);
examplesoftheseinclude bytesanda memoryview ofabytesobject.
bytecode
Pythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython
interpreter. Thebytecodeisalsocachedin .pycfilessothatexecutingthesamefileisfasterthesecondtime
(recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a
virtual machine thatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare
notexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.
Alistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.
callable
Acallableisanobjectthatcanbecalled,possiblywithasetofarguments(see argument),withthefollowing
syntax:
callable (argument1, argument2, argumentN)
Afunction,andbyextensiona method,isacallable. Aninstanceofaclassthatimplementsthe __call__()
methodisalsoacallable.
callback
Asubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.
class
A template for creating user-defined objects. Class definitions normally contain method definitions which
operateoninstancesoftheclass.
class variable
Avariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).
closure variable
Afree variable referencedfroma nested scope thatisdefinedinanouterscoperatherthanbeingresolvedat
runtime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to
allowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.
Forexample,inthe innerfunctioninthefollowingcode,both xandprintarefree variables ,butonly xis
aclosure variable :
def outer ():
x=0
def inner ():
nonlocal x
x+=1
print (x)
return inner
Duetothe codeobject.co_freevars attribute(which,despiteitsname,onlyincludesthenamesofclosure
variablesratherthanlistingallreferencedfreevariables),themoregeneral free variable termissometimesused
evenwhentheintendedmeaningistoreferspecificallytoclosurevariables.
315
The Python/C API, Release 3.13.0
complex number
Anextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand
animaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof -1),often
written iin mathematics or jin engineering. Python has built-in support for complex numbers, which are
writtenwiththislatternotation;theimaginarypartiswrittenwitha jsuffix,e.g., 3+1j. Togetaccesstocom-
plexequivalentsofthe mathmodule,use cmath. Useofcomplexnumbersisafairlyadvancedmathematical
feature. Ifyou’renotawareofaneedforthem,it’salmostcertainyoucansafelyignorethem.
context
Thistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:
•Thetemporarystateorenvironmentestablishedbya context manager viaa withstatement.
•The collection of keyvalue bindings associated with a particular contextvars.Context object and
accessedvia ContextVar objects. Alsosee context variable .
•Acontextvars.Context object. Alsosee current context .
context management protocol
The__enter__() and__exit__() methodscalledbythe withstatement. See PEP 343.
context manager
An object which implements the context management protocol and controls the environment seen in a with
statement. See PEP 343.
context variable
A variable whose value depends on which context is the current context . Values are accessed via
contextvars.ContextVar objects. Context variables are primarily used to isolate state between concur-
rentasynchronoustasks.
contiguous
Abufferisconsideredcontiguousexactlyifitiseither C-contiguous orFortran contiguous . Zero-dimensional
buffersareCandFortrancontiguous. Inone-dimensionalarrays, theitemsmustbelaidoutinmemorynext
toeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the
lastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous
arrays,thefirstindexvariesthefastest.
coroutine
Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at
anotherpoint. Coroutinescanbeentered, exited, andresumedatmanydifferentpoints. Theycanbeimple-
mentedwiththe async def statement. Seealso PEP 492.
coroutine function
Afunctionwhichreturnsa coroutineobject. Acoroutinefunctionmaybedefinedwiththe async def state-
ment, and may contain await,async for , and async with keywords. These were introduced by PEP
492.
CPython
ThecanonicalimplementationofthePythonprogramminglanguage,asdistributedon python.org. Theterm
“CPython”isusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.
current context
Thecontext(contextvars.Context object) that is currently used by ContextVar objects to access (get
or set) the values of context variables . Each thread has its own current context. Frameworks for executing
asynchronous tasks (see asyncio) associate each task with a context which becomes the current context
wheneverthetaskstartsorresumesexecution.
decorator
Afunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe @wrapper syntax.
Commonexamplesfordecoratorsare classmethod() andstaticmethod() .
Thedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-
alent:
316 Appendix A. Glossary
The Python/C API, Release 3.13.0
def f(arg):
...
f=staticmethod (f)
@staticmethod
def f(arg):
...
The same concept exists for classes, but is less commonly used there. See the documentation for function
definitionsandclassdefinitionsformoreaboutdecorators.
descriptor
Anyobjectwhichdefinesthemethods __get__() ,__set__() ,or__delete__() . Whenaclassattribute
is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.bto get,
set or delete an attribute looks up the object named bin the class dictionary for a, but if bis a descriptor,
the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of
Pythonbecausetheyarethebasisformanyfeaturesincludingfunctions, methods, properties, classmethods,
staticmethods,andreferencetosuperclasses.
Formoreinformationaboutdescriptors’methods,seedescriptorsortheDescriptorHowToGuide.
dictionary
Anassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith __hash__()
and__eq__() methods. CalledahashinPerl.
dictionary comprehension
A compact way to process all or part of the elements in an iterable and return a dictionary with the re-
sults. results = {n: n ** 2 for n in range(10)} generatesadictionarycontainingkey nmapped
tovalue n ** 2. Seecomprehensions.
dictionary view
Theobjectsreturnedfrom dict.keys() ,dict.values() ,and dict.items() arecalleddictionaryviews.
They providea dynamicview onthe dictionary’sentries, whichmeans thatwhen thedictionary changes, the
view reflects these changes. To force the dictionary view to become a full list use list(dictview) . See
dict-views.
docstring
A string literal which appears as the first expression in a class, function or module. While ignored when the
suite is executed, it is recognized by the compiler and put into the __doc__attribute of the enclosing class,
function or module. Since it is available via introspection, it is the canonical place for documentation of the
object.
duck-typing
Aprogrammingstylewhichdoesnotlookatanobject’stypetodetermineifithastherightinterface;instead,
the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be
a duck.”) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility
by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (Note,
however, that duck-typing can be complemented with abstract base classes .) Instead, it typically employs
hasattr() testsor EAFPprogramming.
EAFP
Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of
valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is
characterizedbythepresenceofmany tryandexceptstatements. Thetechniquecontrastswiththe LBYL
stylecommontomanyotherlanguagessuchasC.
expression
Apieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof
expressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In
contrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealso statementswhich
cannotbeusedasexpressions,suchas while. Assignmentsarealsostatements,notexpressions.
317
The Python/C API, Release 3.13.0
extension module
AmodulewritteninCorC++,usingPython’sCAPItointeractwiththecoreandwithusercode.
f-string
String literals prefixed with 'f'or'F'are commonly called “f-strings” which is short for formatted string
literals. Seealso PEP 498.
file object
Anobjectexposingafile-orientedAPI(withmethodssuchas read()orwrite())toanunderlyingresource.
Dependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof
storageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).
Fileobjectsarealsocalled file-like objects orstreams.
There are actually three categories of file objects: raw binary files , buffered binary files andtext files. Their
interfaces are defined in the iomodule. The canonical way to create a file object is by using the open()
function.
file-like object
Asynonymfor file object.
filesystem encoding and error handler
EncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto
theoperatingsystem.
Thefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding
failstoprovidethisguarantee,APIfunctionscanraise UnicodeError .
Thesys.getfilesystemencoding() andsys.getfilesystemencodeerrors() functions can be
usedtogetthefilesystemencodinganderrorhandler.
Thefilesystem encoding and error handler areconfiguredatPythonstartupbythe PyConfig_Read() func-
tion: see filesystem_encoding andfilesystem_errors membersof PyConfig .
Seealsothe locale encoding .
finder
Anobjectthattriestofindthe loaderforamodulethatisbeingimported.
Therearetwotypesoffinder: meta path finders forusewith sys.meta_path ,andpath entry finders foruse
withsys.path_hooks .
Seefinders-and-loadersand importlib formuchmoredetail.
floor division
Mathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris //. Forexample,the
expression 11 // 4evaluates to 2in contrast to the 2.75returned by float true division. Note that (-11)
// 4is-3becausethatis -2.75rounded downward. See PEP 238.
free threading
AthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.
Thisisincontrasttothe global interpreter lock whichallowsonlyonethreadtoexecutePythonbytecodeata
time. See PEP 703.
free variable
Formally, as defined in the language execution model, a free variable is any variable used in a namespace
whichisnotalocalvariableinthatnamespace. See closure variable foranexample. Pragmatically,duetothe
nameofthe codeobject.co_freevars attribute,thetermisalsosometimesusedasasynonymfor closure
variable.
function
Aseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormore argumentswhich
maybeusedintheexecutionofthebody. Seealso parameter,method,andthefunctionsection.
function annotation
Anannotation ofafunctionparameterorreturnvalue.
318 Appendix A. Glossary
The Python/C API, Release 3.13.0
Function annotations are usually used for type hints: for example, this function is expected to take two int
argumentsandisalsoexpectedtohavean intreturnvalue:
def sum_two_numbers (a: int, b: int)->int:
return a+b
Functionannotationsyntaxisexplainedinsectionfunction.
Seevariable annotation andPEP 484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest
practicesonworkingwithannotations.
__future__
A future statement, from __future__ import <feature> , directs the compiler to compile the current
moduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The __future__
moduledocumentsthepossiblevaluesof feature. Byimportingthismoduleandevaluatingitsvariables,you
canseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:
>>> import __future__
>>> __future__ .division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
garbage collection
Theprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference
countingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector
canbecontrolledusingthe gcmodule.
generator
A function which returns a generator iterator . It looks like a normal function except that it contains yield
expressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe
next()function.
Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where
theintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
generator iterator
Anobjectcreatedbya generatorfunction.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe generator iterator resumes,itpicksupwhereitleftoff(incontrast
tofunctionswhichstartfreshoneveryinvocation).
generator expression
Anexpression that returns an iterator. It looks like a normal expression followed by a forclause defining a
loop variable, range, and an optional ifclause. The combined expression generates values for an enclosing
function:
>>> sum(i*ifor iinrange (10)) # sum of squares 0, 1, 4, ... 81
285
generic function
Afunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-
plementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.
Seealsothe single dispatch glossaryentry,the functools.singledispatch() decorator,and PEP 443.
generic type
Atypethat can be parameterized; typically a container class such as listordict. Used for type hintsand
annotations .
Formoredetails,seegenericaliastypes, PEP 483,PEP 484,PEP 585,andthe typingmodule.
GIL
Seeglobal interpreter lock .
319
The Python/C API, Release 3.13.0
global interpreter lock
The mechanism used by the CPythoninterpreter to assure that only one thread executes Python bytecodeat
a time. This simplifies the CPython implementation by making the object model (including critical built-in
types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier
fortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor
machines.
However,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen
doingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen
doingI/O.
As of Python 3.13, the GIL can be disabled using the --disable-gil build configuration. After building
Pythonwiththisoption,codemustberunwith -X gil=0 oraftersettingthe PYTHON_GIL=0 environment
variable. This feature enables improved performance for multi-threaded applications and makes it easier to
usemulti-coreCPUsefficiently. Formoredetails,see PEP 703.
hash-based pyc
Abytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto
determineitsvalidity. Seepyc-invalidation.
hashable
Anobjectis hashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa __hash__()
method), and can be compared to other objects (it needs an __eq__() method). Hashable objects which
compareequalmusthavethesamehashvalue.
Hashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe
hashvalueinternally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)
arenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.
Objectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except
withthemselves),andtheirhashvalueisderivedfromtheir id().
IDLE
AnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-
ronmentwhichshipswiththestandarddistributionofPython.
immortal
Immortal objects areaCPythonimplementationdetailintroducedin PEP 683.
If an object is immortal, its reference count is never modified, and therefore it is never deallocated while the
interpreterisrunning. Forexample, TrueandNoneareimmortalinCPython.
immutable
An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot
bealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein
placeswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.
import path
Alistoflocations(or path entries )thataresearchedbythe path based finder formodulestoimport. During
import, this list of locations usually comes from sys.path , but for subpackages it may also come from the
parentpackage’s __path__ attribute.
importing
TheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.
importer
Anobjectthatbothfindsandloadsamodule;botha finderandloaderobject.
interactive
Pythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter
prompt, immediately execute them and see their results. Just launch pythonwith no arguments (possibly
by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect
modulesandpackages(remember help(x)). Formoreoninteractivemode,seetut-interac.
320 Appendix A. Glossary
The Python/C API, Release 3.13.0
interpreted
Pythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause
ofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly
creating an executable which is then run. Interpreted languages typically have a shorter development/debug
cyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealso interactive.
interpreter shutdown
Whenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated
resources, such as modules and various critical internal structures. It also makes several calls to the garbage
collector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-
cutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction
anymore(commonexamplesarelibrarymodulesorthewarningsmachinery).
The main reason for interpreter shutdown is that the __main__ module or the script being run has finished
executing.
iterable
An object capable of returning its members one at a time. Examples of iterables include all sequence types
(such as list,str, and tuple) and some non-sequence types like dict,file objects, and objects of any
classesyoudefinewithan __iter__() methodorwitha __getitem__() methodthatimplements sequence
semantics.
Iterables can be used in a forloop and in many other places where a sequence is needed ( zip(),map(),
…). Whenaniterableobjectispassed as anargumentto thebuilt-infunction iter(), itreturnsan iterator
fortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot
necessarytocall iter()ordealwithiteratorobjectsyourself. The forstatementdoesthatautomaticallyfor
you,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealso iterator,
sequence,andgenerator.
iterator
An object representing a stream of data. Repeated calls to the iterator’s __next__() method (or passing
ittothebuilt-infunction next())returnsuccessiveitemsinthestream. Whennomoredataareavailablea
StopIteration exceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls
toits __next__() methodjustraise StopIteration again. Iteratorsarerequiredtohavean __iter__()
methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces
whereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A
containerobject(suchasa list)producesafreshnewiteratoreachtimeyoupassittothe iter()function
oruseitina forloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused
inthepreviousiterationpass,makingitappearlikeanemptycontainer.
Moreinformationcanbefoundintypeiter.
CPython implementation detail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine
__iter__() . Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof
iteratoroperations.
key function
Akeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,
locale.strxfrm() isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.
A number of tools in Python accept key functions to control how elements are ordered or grouped. They
include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq.
nlargest() ,and itertools.groupby() .
There are several ways to create a key function. For example. the str.lower() method can serve as a
key function for case insensitive sorts. Alternatively, a key function can be built from a lambdaexpression
suchas lambda r: (r[0], r[2]) . Also, operator.attrgetter() ,operator.itemgetter() ,and
operator.methodcaller() are three key function constructors. See the Sorting HOW TO for examples
ofhowtocreateandusekeyfunctions.
keyword argument
Seeargument.
321
The Python/C API, Release 3.13.0
lambda
Ananonymousinlinefunctionconsistingofasingle expressionwhichisevaluatedwhenthefunctioniscalled.
Thesyntaxtocreatealambdafunctionis lambda [parameters]: expression
LBYL
Lookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This
stylecontrastswiththe EAFPapproachandischaracterizedbythepresenceofmany ifstatements.
In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the
looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can
failifanotherthreadremoves keyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved
withlocksorbyusingtheEAFPapproach.
list
Abuilt-inPython sequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist
sinceaccesstoelementsis O(1).
list comprehension
Acompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result
= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generatesalistofstringscon-
tainingevenhexnumbers(0x..) intherangefrom0to255. The ifclauseisoptional. Ifomitted,allelements
inrange(256) areprocessed.
loader
Anobjectthatloadsamodule. Itmustdefineamethodnamed load_module() . Aloaderistypicallyreturned
byafinder. Seealso:
•finders-and-loaders
•importlib.abc.Loader
•PEP 302
locale encoding
On Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.
LC_CTYPE, new_locale) .
OnWindows,itistheANSIcodepage(ex: "cp1252" ).
OnAndroidandVxWorks,Pythonuses "utf-8"asthelocaleencoding.
locale.getencoding() canbeusedtogetthelocaleencoding.
Seealsothe filesystem encoding and error handler .
magic method
Aninformalsynonymfor special method .
mapping
A container object that supports arbitrary key lookups and implements the methods specified in the
collections.abc.Mapping orcollections.abc.MutableMapping abstract base classes. Exam-
ples include dict,collections.defaultdict ,collections.OrderedDict andcollections.
Counter.
meta path finder
Afinderreturnedbyasearchof sys.meta_path . Metapathfindersarerelatedto, butdifferentfrom path
entry finders .
Seeimportlib.abc.MetaPathFinder forthemethodsthatmetapathfindersimplement.
metaclass
The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The
metaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-
gramming languages provide a default implementation. What makes Python special is that it is possible to
createcustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide
powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking
objectcreation,implementingsingletons,andmanyothertasks.
322 Appendix A. Glossary
The Python/C API, Release 3.13.0
Moreinformationcanbefoundinmetaclasses.
method
Afunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod
willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self). See functionandnested scope .
method resolution order
Method Resolution Order is the order in which base classes are searched for a member during lookup. See
python_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.
module
AnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary
Pythonobjects. ModulesareloadedintoPythonbytheprocessof importing.
Seealso package.
module spec
Anamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceof importlib.
machinery.ModuleSpec .
Seealsomodule-specs.
MRO
Seemethod resolution order .
mutable
Mutableobjectscanchangetheirvaluebutkeeptheir id(). Seealso immutable.
named tuple
Theterm“namedtuple”appliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare
alsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.
Several built-in types are named tuples, including the values returned by time.localtime() andos.
stat(). Anotherexampleis sys.float_info :
>>> sys.float_info[ 1] # indexed access
1024
>>> sys.float_info .max_exp # named field access
1024
>>> isinstance (sys .float_info, tuple ) # kind of tuple
True
Some named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be
created from a regular class definition that inherits from tupleand that defines named fields. Such a class
canbewrittenbyhand,oritcanbecreatedbyinheriting typing.NamedTuple ,orwiththefactoryfunction
collections.namedtuple() . The latter techniques also add some extra methods that may not be found
inhand-writtenorbuilt-innamedtuples.
namespace
The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,
global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support
modularitybypreventingnamingconflicts. Forinstance,thefunctions builtins.open andos.open() are
distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear
which module implements a function. For instance, writing random.seed() oritertools.islice()
makesitclearthatthosefunctionsareimplementedbythe randomanditertools modules,respectively.
namespace package
APEP 420 packagewhich serves only as a container for subpackages. Namespace packages may have no
physical representation, and specifically are not like a regular package because they have no __init__.py
file.
Seealso module.
nested scope
The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another
323
The Python/C API, Release 3.13.0
functioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference
andnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables
readandwritetotheglobalnamespace. The nonlocal allowswritingtoouterscopes.
new-style class
Old name for the flavor of classes now used for all class objects. In earlier Python versions, only
new-style classes could use Python’s newer, versatile features like __slots__ , descriptors, properties,
__getattribute__() ,classmethods,andstaticmethods.
object
Anydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany
new-style class .
optimized scope
A scope where target local variable names are reliably known to the compiler when the code is compiled,
allowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,
coroutines, comprehensions, and generator expressions are optimized in this fashion. Note: most interpreter
optimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames
arerestrictedtooptimizedscopes.
package
A Python modulewhich can contain submodules or recursively, subpackages. Technically, a package is a
Pythonmodulewitha __path__ attribute.
Seealso regular package andnamespace package .
parameter
Anamedentityina function(ormethod)definitionthatspecifiesan argument(orinsomecases,arguments)
thatthefunctioncanaccept. Therearefivekindsofparameter:
•positional-or-keyword : specifiesanargumentthatcanbepassedeither positionally orasa keyword argu-
ment. Thisisthedefaultkindofparameter,forexample fooandbarinthefollowing:
def func (foo, bar =None ):...
•positional-only : specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters
canbedefinedbyincludinga /characterintheparameterlistofthefunctiondefinitionafterthem,for
example posonly1andposonly2inthefollowing:
def func (posonly1, posonly2, /, positional_or_keyword): ...
•keyword-only : specifies an argument that can be supplied only by keyword. Keyword-only parameters
canbedefinedbyincludingasinglevar-positionalparameterorbare *intheparameterlistofthefunction
definitionbeforethem,forexample kw_only1andkw_only2inthefollowing:
def func (arg, *, kw_only1, kw_only2): ...
•var-positional : specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition
toanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby
prependingtheparameternamewith *,forexample argsinthefollowing:
def func (*args, **kwargs): ...
•var-keyword : specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-
wordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending
theparameternamewith **,forexample kwargsintheexampleabove.
Parameters can specify both optional and required arguments, as well as default values for some optional
arguments.
Seealsothe argumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
theinspect.Parameter class,thefunctionsection,and PEP 362.
324 Appendix A. Glossary
The Python/C API, Release 3.13.0
path entry
Asinglelocationonthe import path whichthe path based finder consultstofindmodulesforimporting.
path entry finder
Afinderreturned by a callable on sys.path_hooks (i.e. a path entry hook ) which knows how to locate
modulesgivena path entry.
Seeimportlib.abc.PathEntryFinder forthemethodsthatpathentryfindersimplement.
path entry hook
Acallableonthe sys.path_hooks listwhichreturnsa path entry finder ifitknowshowtofindmoduleson
aspecific path entry.
path based finder
Oneofthedefault meta path finders whichsearchesan import path formodules.
path-like object
An object representing a file system path. A path-like object is either a strorbytesobject representing
a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike
protocol can be converted to a strorbytesfile system path by calling the os.fspath() function; os.
fsdecode() andos.fsencode() can be used to guarantee a strorbytesresult instead, respectively.
Introducedby PEP 519.
PEP
PythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,
ordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical
specificationandarationaleforproposedfeatures.
PEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity
input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is
responsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.
SeePEP 1.
portion
A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as
definedin PEP 420.
positional argument
Seeargument.
provisional API
A provisional API is one which has been deliberately excluded from the standard library’s backwards com-
patibility guarantees. While major changes to such interfaces are not expected, as long as they are marked
provisional, backwards incompatible changes (up to and including removal of the interface) may occur if
deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if
seriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.
Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every
attemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.
Thisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign
errorsforextendedperiodsoftime. See PEP 411formoredetails.
provisional package
Seeprovisional API .
Python 3000
NicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe
distantfuture.) Thisisalsoabbreviated“Py3k”.
Pythonic
AnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan
implementing code using concepts common to other languages. For example, a common idiom in Python is
to loop over all elementsof an iterable using a forstatement. Many other languages don’thave this type of
construct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:
325
The Python/C API, Release 3.13.0
for iinrange (len(food)):
print (food[i])
Asopposedtothecleaner,Pythonicmethod:
for piece infood:
print (piece)
qualified name
Adottednameshowingthe“path”fromamodule’sglobalscopetoaclass,functionormethoddefinedinthat
module, as defined in PEP 3155 . For top-level functions and classes, the qualified name is the same as the
object’sname:
>>> class C:
... class D:
... def meth (self ):
... pass
...
>>> C.__qualname__
'C'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth .__qualname__
'C.D.meth'
Whenusedtorefertomodules,the fully qualified name meanstheentiredottedpathtothemodule,including
anyparentpackages,e.g. email.mime.text :
>>> import email .mime .text
>>> email .mime .text .__name__
'email.mime.text'
reference count
Thenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.
Some objects are immortaland have reference counts that are never modified, and therefore the objects are
never deallocated. Reference counting is generally not visible to Python code, but it is a key element of the
CPythonimplementation. Programmers can call the sys.getrefcount() function to return the reference
countforaparticularobject.
regular package
Atraditional package,suchasadirectorycontainingan __init__.py file.
Seealso namespace package .
REPL
Anacronymforthe“read–eval–printloop”,anothernameforthe interactiveinterpretershell.
__slots__
Adeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating
instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for
rarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.
sequence
Aniterablewhich supports efficient element access using integer indices via the __getitem__() special
method and defines a __len__() method that returns the length of the sequence. Some built-in sequence
typesare list,str,tuple,and bytes. Notethat dictalsosupports __getitem__() and__len__() ,
but is considered a mapping rather than a sequence because the lookups use arbitrary hashablekeys rather
thanintegers.
Thecollections.abc.Sequence abstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust
__getitem__() and__len__() ,adding count(),index(),__contains__() ,and __reversed__() .
326 Appendix A. Glossary
The Python/C API, Release 3.13.0
Types that implement this expanded interface can be registered explicitly using register() . For more
documentationonsequencemethodsgenerally,seeCommonSequenceOperations.
set comprehension
Acompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results
= {c for c in 'abracadabra' if c not in 'abc'} generatesthesetofstrings {'r', 'd'} . See
comprehensions.
single dispatch
Aformof generic function dispatchwheretheimplementationischosenbasedonthetypeofasingleargument.
slice
Anobjectusuallycontainingaportionofa sequence. Asliceiscreatedusingthesubscriptnotation, []with
colons between numbers when several are given, such as in variable_name[1:3:5] . The bracket (sub-
script)notationuses sliceobjectsinternally.
soft deprecated
A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The
APIremainsdocumentedandtested,butwillnotbeenhancedfurther.
Softdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.
SeePEP387: SoftDeprecation .
special method
AmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such
methods have names starting and ending with double underscores. Special methods are documented in spe-
cialnames.
statement
Astatementispartofasuite(a“block”ofcode). Astatementiseitheran expressionoroneofseveralconstructs
withakeyword,suchas if,whileorfor.
static type checker
An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See also
type hintsandthe typingmodule.
strong reference
In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the
reference. Thestrongreferenceistakenbycalling Py_INCREF() whenthereferenceiscreatedandreleased
withPy_DECREF() whenthereferenceisdeleted.
ThePy_NewRef() functioncanbeusedtocreateastrongreferencetoanobject. Usually,the Py_DECREF()
functionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking
onereference.
Seealso borrowed reference .
text encoding
AstringinPythonisasequenceofUnicodecodepoints(inrange U+0000–U+10FFFF ).Tostoreortransfer
astring,itneedstobeserializedasasequenceofbytes.
Serializingastringintoasequenceofbytesisknownas“encoding”,andrecreatingthestringfromthesequence
ofbytesisknownas“decoding”.
Thereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas“textencodings”.
text file
Afile objectabletoreadandwrite strobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream
andhandlesthe text encoding automatically. Examplesoftextfilesarefilesopenedintextmode( 'r'or'w'),
sys.stdin ,sys.stdout ,andinstancesof io.StringIO .
Seealso binary file forafileobjectabletoreadandwrite bytes-like objects .
triple-quoted string
Astringwhichisboundbythreeinstancesofeitheraquotationmark(”)oranapostrophe(‘). Whiletheydon’t
provide any functionality not available with single-quoted strings, they are useful for a number of reasons.
327
The Python/C API, Release 3.13.0
Theyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines
withouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.
type
ThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject’stypeis
accessibleasits __class__ attributeorcanberetrievedwith type(obj) .
type alias
Asynonymforatype,createdbyassigningthetypetoanidentifier.
Typealiasesareusefulforsimplifying type hints. Forexample:
def remove_gray_shades (
colors: list [tuple [int,int,int]]) ->list [tuple [int,int,int]]:
pass
couldbemademorereadablelikethis:
Color =tuple [int,int,int]
def remove_gray_shades (colors: list [Color]) ->list [Color]:
pass
SeetypingandPEP 484,whichdescribethisfunctionality.
type hint
Anannotation thatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn
value.
Type hints are optional and are not enforced by Python but they are useful to static type checkers . They can
alsoaidIDEswithcodecompletionandrefactoring.
Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using
typing.get_type_hints() .
SeetypingandPEP 484,whichdescribethisfunctionality.
universal newlines
Amannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix
end-of-lineconvention '\n',theWindowsconvention '\r\n',andtheoldMacintoshconvention '\r'. See
PEP 278andPEP 3116,aswellas bytes.splitlines() foranadditionaluse.
variable annotation
Anannotation ofavariableoraclassattribute.
Whenannotatingavariableoraclassattribute,assignmentisoptional:
class C:
field: 'annotation '
Variableannotationsareusuallyusedfor type hints: forexamplethisvariableisexpectedtotake intvalues:
count: int =0
Variableannotationsyntaxisexplainedinsectionannassign.
Seefunction annotation ,PEP 484andPEP 526,whichdescribethisfunctionality. Alsoseeannotations-howto
forbestpracticesonworkingwithannotations.
virtual environment
AcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade
PythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon
thesamesystem.
Seealso venv.
328 Appendix A. Glossary
The Python/C API, Release 3.13.0
virtual machine
Acomputerdefinedentirelyinsoftware. Python’svirtualmachineexecutesthe bytecodeemittedbythebyte-
codecompiler.
Zen of Python
ListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.
Thelistingcanbefoundbytyping“ import this ”attheinteractiveprompt.
329
The Python/C API, Release 3.13.0
330 Appendix A. Glossary
APPENDIX
B
ABOUT THESE DOCUMENTS
Thesedocumentsaregeneratedfrom reStructuredText sourcesby Sphinx,adocumentprocessorspecificallywritten
forthePythondocumentation.
Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you
want to contribute, please take a look at the reporting-bugs page for information on how to do so. New volunteers
arealwayswelcome!
Manythanksgoto:
•FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandwriterofmuchofthecontent;
•theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;
•FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.
B.1Contributors to the Python Documentation
ManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.
SeeMisc/ACKS inthePythonsourcedistributionforapartiallistofcontributors.
ItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation
–ThankYou!
331
The Python/C API, Release 3.13.0
332 Appendix B. About these documents
APPENDIX
C
HISTORY AND LICENSE
C.1History of the software
Pythonwascreatedintheearly1990s byGuidovanRossumatStichtingMathematischCentrum(CWI, see https:
//www.cwi.nl/ )intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython’sprincipalauthor,
althoughitincludesmanycontributionsfromothers.
In1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,see https:
//www.cnri.reston.va.us/ )inReston,Virginiawherehereleasedseveralversionsofthesoftware.
In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen Python-
Labsteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations(nowZopeCorporation;
seehttps://www.zope.org/ ). In2001, thePythonSoftwareFoundation(PSF,see https://www.python.org/psf/ )was
formed,anon-profitorganizationcreatedspecificallytoownPython-relatedIntellectualProperty. ZopeCorporation
isasponsoringmemberofthePSF.
AllPythonreleasesareOpenSource(see https://opensource.org/ fortheOpenSourceDefinition). Historically,most,
butnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.
Release Derivedfrom Year Owner GPLcompatible?
0.9.0thru1.2 n/a 1991-1995 CWI yes
1.3thru1.5.2 1.2 1995-1999 CNRI yes
1.6 1.5.2 2000 CNRI no
2.0 1.6 2000 BeOpen.com no
1.6.1 1.6 2001 CNRI no
2.1 2.0+1.6.1 2001 PSF no
2.0.1 2.0+1.6.1 2001 PSF yes
2.1.1 2.1+2.0.1 2001 PSF yes
2.1.2 2.1.1 2002 PSF yes
2.1.3 2.1.2 2002 PSF yes
2.2andabove 2.1.1 2001-now PSF yes
®Note
GPL-compatibledoesn’tmeanthatwe’redistributingPythonundertheGPL.AllPythonlicenses,unliketheGPL,
let you distribute a modified version without making your changes open source. The GPL-compatible licenses
makeitpossibletocombinePythonwithothersoftwarethatisreleasedundertheGPL;theothersdon’t.
ThankstothemanyoutsidevolunteerswhohaveworkedunderGuido’sdirectiontomakethesereleasespossible.
333
The Python/C API, Release 3.13.0
C.2Terms and conditions for accessing or otherwise using Python
Pythonsoftwareanddocumentationarelicensedunderthe PSF License Agreement .
StartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF
LicenseAgreementandthe Zero-Clause BSD license .
Some software incorporated into Python is under different licenses. The licenses are listed with code falling under
thatlicense. See Licenses and Acknowledgements for Incorporated Software foranincompletelistoftheselicenses.
C.2.1PSF LICENSE AGREEMENT FOR PYTHON 3.13.0
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
the Individual or Organization ("Licensee") accessing and otherwise using Python
3.13.0 software in source or binary form and its associated documentation.
2. Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 3.13.0 alone or in any derivative
version, provided, however, that PSF's License Agreement and PSF's notice of
copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
Reserved" are retained in Python 3.13.0 alone or in any derivative version
prepared by Licensee.
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 3.13.0 or any part thereof, and wants to make the
derivative work available to others as provided herein, then Licensee hereby
agrees to include in any such work a brief summary of the changes made to Python
3.13.0.
4. PSF is making Python 3.13.0 available to Licensee on an "AS IS" basis.
PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF PYTHON 3.13.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.13.0
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.13.0, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. Nothing in this License Agreement shall be deemed to create any relationship
of agency, partnership, or joint venture between PSF and Licensee. This License
Agreement does not grant permission to use PSF trademarks or trade name in a
trademark sense to endorse or promote products or services of Licensee, or any
third party.
8. By copying, installing or otherwise using Python 3.13.0, Licensee agrees
to be bound by the terms and conditions of this License Agreement.
334 Appendix C. History and License
The Python/C API, Release 3.13.0
C.2.2BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
BEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
("Licensee") accessing and otherwise using this software in source or binary
form and its associated documentation ("the Software").
2. Subject to the terms and conditions of this BeOpen Python License Agreement,
BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
to reproduce, analyze, test, perform and/or display publicly, prepare derivative
works, distribute, and otherwise use the Software alone or in any derivative
version, provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee.
3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
ADVISED OF THE POSSIBILITY THEREOF.
5. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
6. This License Agreement shall be governed by and interpreted in all respects
by the law of the State of California, excluding conflict of law provisions.
Nothing in this License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between BeOpen and Licensee. This License
Agreement does not grant permission to use BeOpen trademarks or trade names in a
trademark sense to endorse or promote products or services of Licensee, or any
third party. As an exception, the "BeOpen Python" logos available at
http://www.pythonlabs.com/logos.html may be used according to the permissions
granted on that web page.
7. By copying, installing or otherwise using the software, Licensee agrees to be
bound by the terms and conditions of this License Agreement.
C.2.3CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
1. This LICENSE AGREEMENT is between the Corporation for National Research
Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
("CNRI"), and the Individual or Organization ("Licensee") accessing and
otherwise using Python 1.6.1 software in source or binary form and its
associated documentation.
2. Subject to the terms and conditions of this License Agreement, CNRI hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
(continuesonnextpage)
C.2. Terms and conditions for accessing or otherwise using Python 335
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
prepared by Licensee. Alternately, in lieu of CNRI's License Agreement,
Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
is made available subject to the terms and conditions in CNRI's License
Agreement. This Agreement together with Python 1.6.1 may be located on the
internet using the following unique, persistent identifier (known as a handle):
1895.22/1013. This Agreement may also be obtained from a proxy server on the
internet using the following URL: http://hdl.handle.net/1895.22/1013."
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
work available to others as provided herein, then Licensee hereby agrees to
include in any such work a brief summary of the changes made to Python 1.6.1.
4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis. CNRI
MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. This License Agreement shall be governed by the federal intellectual property
law of the United States, including without limitation the federal copyright
law, and, to the extent such U.S. federal law does not apply, by the law of the
Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
Notwithstanding the foregoing, with regard to derivative works based on Python
1.6.1 that incorporate non-separable material that was previously distributed
under the GNU General Public License (GPL), the law of the Commonwealth of
Virginia shall govern this License Agreement only as to issues arising under or
with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in
this License Agreement shall be deemed to create any relationship of agency,
partnership, or joint venture between CNRI and Licensee. This License Agreement
does not grant permission to use CNRI trademarks or trade name in a trademark
sense to endorse or promote products or services of Licensee, or any third
party.
8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
conditions of this License Agreement.
C.2.4CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands. All rights reserved.
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
(continuesonnextpage)
336 Appendix C. History and License
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.
STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
C.2.5ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCU-
MENTATION
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3Licenses and Acknowledgements for Incorporated Software
Thissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated
inthePythondistribution.
C.3.1Mersenne Twister
The_randomCextensionunderlyingthe randommoduleincludescodebasedonadownloadfrom http://www.math.
sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html . Thefollowingaretheverbatimcommentsfromthe
originalcode:
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.
Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 337
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
C.3.2Sockets
Thesocketmoduleusesthefunctions, getaddrinfo() ,andgetnameinfo() ,whicharecodedinseparatesource
filesfromtheWIDEProject, https://www.wide.ad.jp/ .
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
338 Appendix C. History and License
The Python/C API, Release 3.13.0
C.3.3Asynchronous socket services
Thetest.support.asynchat andtest.support.asyncore modulescontainthefollowingnotice:
Copyright 1996 by Sam Rushing
All Rights Reserved
Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.
SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
C.3.4Cookie management
Thehttp.cookies modulecontainsthefollowingnotice:
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
All Rights Reserved
Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3.5Execution tracing
Thetracemodulecontainsthefollowingnotice:
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err... reserved and offered to the public under the terms of the
Python 2.2 license.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 339
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com
Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke
Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.
Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
C.3.6UUencode and UUdecode functions
Theuucodeccontainsthefollowingnotice:
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
between ascii and binary. This results in a 1000-fold speedup. The C
version is still 5 times faster, though.
- Arguments more compliant with Python standard
340 Appendix C. History and License
The Python/C API, Release 3.13.0
C.3.7XML Remote Procedure Calls
Thexmlrpc.client modulecontainsthefollowingnotice:
The XML-RPC client interface is
Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh
By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:
Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
C.3.8test_epoll
Thetest.test_epoll modulecontainsthefollowingnotice:
Copyright (c) 2001-2006 Twisted Matrix Laboratories.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3. Licenses and Acknowledgements for Incorporated Software 341
The Python/C API, Release 3.13.0
C.3.9Select kqueue
Theselectmodulecontainsthefollowingnoticeforthekqueueinterface:
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.10 SipHash24
Thefile Python/pyhash.c containsMarekMajkowski’implementationofDanBernstein’sSipHash24algorithm.
Itcontainsthefollowingnote:
<MIT License>
Copyright (c) 2013 Marek Majkowski <marek@popcount.org>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>
Original location:
https://github.com/majek/csiphash/
Solution inspired by code from:
Samuel Neves (supercop/crypto_auth/siphash24/little)
djb (supercop/crypto_auth/siphash24/little2)
Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
342 Appendix C. History and License
The Python/C API, Release 3.13.0
C.3.11 strtod and dtoa
Thefile Python/dtoa.c ,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,
is derived from the file of the same name by David M. Gay, currently available from https://web.archive.org/web/
20220517033456/http://www.netlib.org/fp/dtoa.c . The original file, as retrieved on March 16, 2009, contains the
followingcopyrightandlicensingnotice:
/****************************************************************
*
* The author of this software is David M. Gay.
*
* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
*
* Permission to use, copy, modify, and distribute this software for any
* purpose without fee is hereby granted, provided that this entire notice
* is included in all copies of any software which is or includes a copy
* or modification of this software and in all copies of the supporting
* documentation for such software.
*
* THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
*
***************************************************************/
C.3.12 OpenSSL
The modules hashlib,posixandssluse the OpenSSL library for added performance if made available by the
operatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL
libraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived
fromthat,theApacheLicensev2applies:
Apache License
Version 2.0, January 2004
https://www.apache.org/licenses/
TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
1. Definitions.
"License" shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.
"Licensor" shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.
"Legal Entity" shall mean the union of the acting entity and all
other entities that control, are controlled by, or are under common
control with that entity. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.
"You" (or "Your") shall mean an individual or Legal Entity
exercising permissions granted by this License.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 343
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
"Source" form shall mean the preferred form for making modifications,
including but not limited to software source code, documentation
source, and configuration files.
"Object" form shall mean any form resulting from mechanical
transformation or translation of a Source form, including but
not limited to compiled object code, generated documentation,
and conversions to other media types.
"Work" shall mean the work of authorship, whether in Source or
Object form, made available under the License, as indicated by a
copyright notice that is included in or attached to the work
(an example is provided in the Appendix below).
"Derivative Works" shall mean any work, whether in Source or Object
form, that is based on (or derived from) the Work and for which the
editorial revisions, annotations, elaborations, or other modifications
represent, as a whole, an original work of authorship. For the purposes
of this License, Derivative Works shall not include works that remain
separable from, or merely link (or bind by name) to the interfaces of,
the Work and Derivative Works thereof.
"Contribution" shall mean any work of authorship, including
the original version of the Work and any modifications or additions
to that Work or Derivative Works thereof, that is intentionally
submitted to Licensor for inclusion in the Work by the copyright owner
or by an individual or Legal Entity authorized to submit on behalf of
the copyright owner. For the purposes of this definition, "submitted"
means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems,
and issue tracking systems that are managed by, or on behalf of, the
Licensor for the purpose of discussing and improving the Work, but
excluding communication that is conspicuously marked or otherwise
designated in writing by the copyright owner as "Not a Contribution."
"Contributor" shall mean Licensor and any individual or Legal Entity
on behalf of whom a Contribution has been received by Licensor and
subsequently incorporated within the Work.
2. Grant of Copyright License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the
Work and such Derivative Works in Source or Object form.
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
(except as stated in this section) patent license to make, have made,
use, offer to sell, sell, import, and otherwise transfer the Work,
where such license applies only to those patent claims licensable
by such Contributor that are necessarily infringed by their
Contribution(s) alone or by combination of their Contribution(s)
with the Work to which such Contribution(s) was submitted. If You
(continuesonnextpage)
344 Appendix C. History and License
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work
or a Contribution incorporated within the Work constitutes direct
or contributory patent infringement, then any patent licenses
granted to You under this License for that Work shall terminate
as of the date such litigation is filed.
4. Redistribution. You may reproduce and distribute copies of the
Work or Derivative Works thereof in any medium, with or without
modifications, and in Source or Object form, provided that You
meet the following conditions:
(a) You must give any other recipients of the Work or
Derivative Works a copy of this License; and
(b) You must cause any modified files to carry prominent notices
stating that You changed the files; and
(c) You must retain, in the Source form of any Derivative Works
that You distribute, all copyright, patent, trademark, and
attribution notices from the Source form of the Work,
excluding those notices that do not pertain to any part of
the Derivative Works; and
(d) If the Work includes a "NOTICE" text file as part of its
distribution, then any Derivative Works that You distribute must
include a readable copy of the attribution notices contained
within such NOTICE file, excluding those notices that do not
pertain to any part of the Derivative Works, in at least one
of the following places: within a NOTICE text file distributed
as part of the Derivative Works; within the Source form or
documentation, if provided along with the Derivative Works; or,
within a display generated by the Derivative Works, if and
wherever such third-party notices normally appear. The contents
of the NOTICE file are for informational purposes only and
do not modify the License. You may add Your own attribution
notices within Derivative Works that You distribute, alongside
or as an addendum to the NOTICE text from the Work, provided
that such additional attribution notices cannot be construed
as modifying the License.
You may add Your own copyright statement to Your modifications and
may provide additional or different license terms and conditions
for use, reproduction, or distribution of Your modifications, or
for any such Derivative Works as a whole, provided Your use,
reproduction, and distribution of the Work otherwise complies with
the conditions stated in this License.
5. Submission of Contributions. Unless You explicitly state otherwise,
any Contribution intentionally submitted for inclusion in the Work
by You to the Licensor shall be under the terms and conditions of
this License, without any additional terms or conditions.
Notwithstanding the above, nothing herein shall supersede or modify
the terms of any separate license agreement you may have executed
with Licensor regarding such Contributions.
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 345
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
6. Trademarks. This License does not grant permission to use the trade
names, trademarks, service marks, or product names of the Licensor,
except as required for reasonable and customary use in describing the
origin of the Work and reproducing the content of the NOTICE file.
7. Disclaimer of Warranty. Unless required by applicable law or
agreed to in writing, Licensor provides the Work (and each
Contributor provides its Contributions) on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied, including, without limitation, any warranties or conditions
of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
PARTICULAR PURPOSE. You are solely responsible for determining the
appropriateness of using or redistributing the Work and assume any
risks associated with Your exercise of permissions under this License.
8. Limitation of Liability. In no event and under no legal theory,
whether in tort (including negligence), contract, or otherwise,
unless required by applicable law (such as deliberate and grossly
negligent acts) or agreed to in writing, shall any Contributor be
liable to You for damages, including any direct, indirect, special,
incidental, or consequential damages of any character arising as a
result of this License or out of the use or inability to use the
Work (including but not limited to damages for loss of goodwill,
work stoppage, computer failure or malfunction, or any and all
other commercial damages or losses), even if such Contributor
has been advised of the possibility of such damages.
9. Accepting Warranty or Additional Liability. While redistributing
the Work or Derivative Works thereof, You may choose to offer,
and charge a fee for, acceptance of support, warranty, indemnity,
or other liability obligations and/or rights consistent with this
License. However, in accepting such obligations, You may act only
on Your own behalf and on Your sole responsibility, not on behalf
of any other Contributor, and only if You agree to indemnify,
defend, and hold each Contributor harmless for any liability
incurred by, or claims asserted against, such Contributor by reason
of your accepting any such warranty or additional liability.
END OF TERMS AND CONDITIONS
C.3.13 expat
Thepyexpat extension is built using an included copy of the expat sources unless the build is configured
--with-system-expat :
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
and Clark Cooper
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
(continuesonnextpage)
346 Appendix C. History and License
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.14 libffi
The_ctypesCextensionunderlyingthe ctypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless
thebuildisconfigured --with-system-libffi :
Copyright (c) 1996-2008 Red Hat, Inc and others.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
C.3.15 zlib
Thezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo
oldtobeusedforthebuild:
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler
This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
(continuesonnextpage)
C.3. Licenses and Acknowledgements for Incorporated Software 347
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
Jean-loup Gailly Mark Adler
jloup@gzip.org madler@alumni.caltech.edu
C.3.16 cfuhash
Theimplementationofthehashtableusedbythe tracemalloc isbasedonthecfuhashproject:
Copyright (c) 2005 Don Owens
All rights reserved.
This code is released under the BSD license:
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.
* Neither the name of the author nor the names of its
contributors may be used to endorse or promote products derived
from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
C.3.17 libmpdec
The_decimal Cextensionunderlyingthe decimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary
unlessthebuildisconfigured --with-system-libmpdec :
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.
Redistribution and use in source and binary forms, with or without
(continuesonnextpage)
348 Appendix C. History and License
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.18 W3C C14N test suite
TheC14N2.0testsuiteinthe testpackage( Lib/test/xmltestdata/c14n-20/ )wasretrievedfromtheW3C
websiteathttps://www.w3.org/TR/xml-c14n2-testcases/ andisdistributedunderthe3-clauseBSDlicense:
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of works must retain the original copyright notice,
this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
used to endorse or promote products derived from this work without
specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. Licenses and Acknowledgements for Incorporated Software 349
The Python/C API, Release 3.13.0
C.3.19 mimalloc
MITLicense:
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
C.3.20 asyncio
Partsofthe asynciomoduleareincorporatedfrom uvloop0.16 ,whichisdistributedundertheMITlicense:
Copyright (c) 2015-2021 MagicStack Inc. http://magic.io
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.21 Global Unbounded Sequences (GUS)
The file Python/qsbr.c is adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation
schemeinsubr_smr.c . Thefileisdistributedunderthe2-ClauseBSDLicense:
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
(continuesonnextpage)
350 Appendix C. History and License
The Python/C API, Release 3.13.0
(continuedfrompreviouspage)
are met:
1. Redistributions of source code must retain the above copyright
notice unmodified, this list of conditions, and the following
disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. Licenses and Acknowledgements for Incorporated Software 351
The Python/C API, Release 3.13.0
352 Appendix C. History and License
APPENDIX
D
COPYRIGHT
Pythonandthisdocumentationis:
Copyright©2001-2024PythonSoftwareFoundation. Allrightsreserved.
Copyright©2000BeOpen.com. Allrightsreserved.
Copyright©1995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.
Copyright©1991-1995StichtingMathematischCentrum. Allrightsreserved.
SeeHistory and License forcompletelicenseandpermissionsinformation.
353
The Python/C API, Release 3.13.0
354 Appendix D. Copyright
INDEX
Non-alphabetical
...,313
>>>,313
__all__(package variable ),66
__dict__ (module attribute ),171
__doc__(module attribute ),171
__file__ (module attribute ),171,172
__future__ ,319
__import__
built-in function ,66
__loader__ (module attribute ),171
__main__
module,12,199,213
__name__ (module attribute ),171,172
__package__ (module attribute ),171
__PYVENV_LAUNCHER__ ,230,236
__slots__ ,326
_frozen(C struct),69
_inittab (C struct),69
_inittab.initfunc (C member),69
_inittab.name (C member),69
_Py_c_diff (C function),130
_Py_c_neg (C function),130
_Py_c_pow (C function),130
_Py_c_prod (C function),130
_Py_c_quot (C function),130
_Py_c_sum (C function),130
_Py_InitializeMain (C function),243
_Py_NoneStruct (C var),255
_PyBytes_Resize (C function),133
_PyCode_GetExtra (C function),169
_PyCode_SetExtra (C function),170
_PyEval_RequestCodeExtraIndex (C function ),
169
_PyFrameEvalFunction (C type),210
_PyInterpreterFrame (C struct),187
_PyInterpreterState_GetEvalFrameFunc (C
function),210
_PyInterpreterState_SetEvalFrameFunc (C
function),211
_PyObject_GetDictPtr (C function),93
_PyObject_New (C function),255
_PyObject_NewVar (C function),255
_PyTuple_Resize (C function),153
_thread
module,207A
abort(C function),65
abs
built-in function ,101
abstract base class ,313
allocfunc (C type),295
annotation ,313
argument ,313
argv(in module sys ),203,230
ascii
built-in function ,93
asynchronous context manager ,314
asynchronous generator ,314
asynchronous generator iterator ,314
asynchronous iterable ,314
asynchronous iterator ,314
attribute ,314
awaitable ,314
B
BDFL,314
binary file ,314
binaryfunc (C type),297
borrowed reference ,314
buffer interface
(see buffer protocol) ,108
buffer object
(see buffer protocol) ,108
buffer protocol ,108
built-in function
__import__ ,66
abs,101
ascii,93
bytes,94
classmethod ,260
compile,67
divmod,101
float,103
hash,94,274
int,103
len,95,104,106,155,159,162
pow,101,103
repr,93,274
staticmethod ,260
tuple,105,156
type,94
355
The Python/C API, Release 3.13.0
builtins
module,12,199,213
bytearray
object,133
bytecode ,315
bytes
built-in function ,94
object,132
bytes-like object ,315
C
callable ,315
callback ,315
calloc(C function),245
Capsule
object,184
C-contiguous ,111,316
class,315
class variable ,315
classmethod
built-in function ,260
cleanup functions ,66
close(in module os ),213
closure variable ,315
CO_FUTURE_DIVISION (C var),42
code object ,166
Common Vulnerabilities and Exposures
CVE 2008-5983 ,204
compile
built-in function ,67
complex number ,316
object,130
context,316
context management protocol ,316
context manager ,316
context variable ,316
contiguous ,111,316
copyright (in module sys ),203
coroutine ,316
coroutine function ,316
CPython,316
current context ,316
D
decorator ,316
descrgetfunc (C type),296
descriptor ,317
descrsetfunc (C type),296
destructor (C type),296
dictionary ,317
object,156
dictionary comprehension ,317
dictionary view ,317
divmod
built-in function ,101
docstring ,317
duck-typing ,317E
EAFP,317
environment variable
__PYVENV_LAUNCHER__ ,230,236
PATH,12
PYTHON_CPU_COUNT ,234
PYTHON_GIL ,320
PYTHON_PERF_JIT_SUPPORT ,238
PYTHON_PRESITE ,237
PYTHONCOERCECLOCALE ,241
PYTHONDEBUG ,196,235
PYTHONDEVMODE ,231
PYTHONDONTWRITEBYTECODE ,197,239
PYTHONDUMPREFS ,232
PYTHONEXECUTABLE ,236
PYTHONFAULTHANDLER ,232
PYTHONHASHSEED ,197,233
PYTHONHOME ,12,197,204,205,233
PYTHONINSPECT ,197,233
PYTHONINTMAXSTRDIGITS ,234
PYTHONIOENCODING ,237
PYTHONLEGACYWINDOWSFSENCODING ,198,227
PYTHONLEGACYWINDOWSSTDIO ,198,234
PYTHONMALLOC ,246,250,251,253
PYTHONMALLOCSTATS ,234,246
PYTHONNODEBUGRANGES ,231
PYTHONNOUSERSITE ,198,238
PYTHONOPTIMIZE ,198,235
PYTHONPATH ,12,197,235
PYTHONPLATLIBDIR ,234
PYTHONPROFILEIMPORTTIME ,233
PYTHONPYCACHEPREFIX ,236
PYTHONSAFEPATH ,230
PYTHONTRACEMALLOC ,238
PYTHONUNBUFFERED ,199,230
PYTHONUTF8 ,227,241
PYTHONVERBOSE ,199,238
PYTHONWARNINGS ,239
EOFError (built-in exception ),170
exc_info (in module sys ),10
executable (in module sys ),202
exit(C function),66
expression ,317
extension module ,318
F
f-string ,318
file
object,170
file object ,318
file-like object ,318
filesystem encoding and error handler ,318
finder,318
float
built-in function ,103
floating-point
object,128
floor division ,318
356 Index
The Python/C API, Release 3.13.0
Fortran contiguous ,111,316
free(C function),245
free threading ,318
free variable ,318
freefunc (C type),296
freeze utility ,69
frozenset
object,161
function ,318
object,163
function annotation ,318
G
garbage collection ,319
gcvisitobjects_t (C type),302
generator ,319
generator expression ,319
generator iterator ,319
generic function ,319
generic type ,319
getattrfunc (C type),296
getattrofunc (C type),296
getbufferproc (C type),296
getiterfunc (C type),296
getter(C type),264
GIL,319
global interpreter lock ,205,320
H
hash
built-in function ,94,274
hash-based pyc ,320
hashable ,320
hashfunc (C type),296
I
IDLE,320
immortal ,320
immutable ,320
import path ,320
importer ,320
importing ,320
incr_item() ,11
initproc (C type),296
inquiry(C type),301
instancemethod
object,165
int
built-in function ,103
integer
object,121
interactive ,320
interpreted ,321
interpreter lock ,205
interpreter shutdown ,321
iterable ,321
iterator ,321
iternextfunc (C type),296K
key function ,321
KeyboardInterrupt (built-in exception ),54,55
keyword argument ,321
L
lambda,322
LBYL,322
len
built-in function ,95,104,106,155,159,
162
lenfunc(C type),296
list,322
object,154
list comprehension ,322
loader,322
locale encoding ,322
lock, interpreter ,205
long integer
object,121
LONG_MAX (C macro),123
M
magic
method,322
magic method ,322
main(),201,203,230
malloc(C function),245
mapping,322
object,156
memoryview
object,181
meta path finder ,322
metaclass ,322
METH_CLASS (C macro),259
METH_COEXIST (C macro),260
METH_FASTCALL (C macro),259
METH_KEYWORDS (C macro),259
METH_METHOD (C macro),259
METH_NOARGS (C macro),259
METH_O(C macro),259
METH_STATIC (C macro),260
METH_VARARGS (C macro),258
method,323
magic,322
object,165
special,327
method resolution order ,323
MethodType (in module types ),163,165
module,323
__main__ ,12,199,213
_thread,207
builtins ,12,199,213
object,171
search path ,12,199,203
signal,54,55
sys,12,199,213
module spec ,323
Index 357
The Python/C API, Release 3.13.0
modules(in module sys ),66,199
ModuleType (in module types ),171
MRO,323
mutable,323
N
named tuple ,323
namespace ,323
namespace package ,323
nested scope ,323
new-style class ,324
newfunc(C type),296
None
object,121
numeric
object,121
O
object,324
bytearray ,133
bytes,132
Capsule,184
code,166
complex number ,130
dictionary ,156
file,170
floating-point ,128
frozenset ,161
function ,163
instancemethod ,165
integer,121
list,154
long integer ,121
mapping,156
memoryview ,181
method,165
module,171
None,121
numeric,121
sequence ,132
set,161
tuple,151
type,6,115
objobjargproc (C type),297
objobjproc (C type),297
optimized scope ,324
OverflowError (built-in exception ),123,124
P
package,324
package variable
__all__,66
parameter ,324
PATH,12
path
module search ,12,199,203
path(in module sys ),12,199,203
path based finder ,325path entry ,325
path entry finder ,325
path entry hook ,325
path-like object ,325
PEP,325
platform (in module sys ),203
portion,325
positional argument ,325
pow
built-in function ,101,103
provisional API ,325
provisional package ,325
Py_ABS(C macro),4
Py_AddPendingCall (C function),214
Py_ALWAYS_INLINE (C macro),4
Py_ASNATIVEBYTES_ALLOW_INDEX (C macro),126
Py_ASNATIVEBYTES_BIG_ENDIAN (C macro),126
Py_ASNATIVEBYTES_DEFAULTS (C macro),126
Py_ASNATIVEBYTES_LITTLE_ENDIAN (C macro),
126
Py_ASNATIVEBYTES_NATIVE_ENDIAN (C macro),
126
Py_ASNATIVEBYTES_REJECT_NEGATIVE (C macro),
126
Py_ASNATIVEBYTES_UNSIGNED_BUFFER (C macro),
126
Py_AtExit (C function),66
Py_AUDIT_READ (C macro),261
Py_AuditHookFunction (C type),65
Py_BEGIN_ALLOW_THREADS (C macro),205,208
Py_BEGIN_CRITICAL_SECTION (C macro),221
Py_BEGIN_CRITICAL_SECTION2 (C macro),221
Py_BLOCK_THREADS (C macro),209
Py_buffer (C type),109
Py_buffer.buf (C member),109
Py_buffer.format (C member),109
Py_buffer.internal (C member),110
Py_buffer.itemsize (C member),109
Py_buffer.len (C member),109
Py_buffer.ndim (C member),109
Py_buffer.obj (C member),109
Py_buffer.readonly (C member),109
Py_buffer.shape (C member),110
Py_buffer.strides (C member),110
Py_buffer.suboffsets (C member),110
Py_BuildValue (C function),77
Py_BytesMain (C function),200
Py_BytesWarningFlag (C var),196
Py_CHARMASK (C macro),5
Py_CLEAR (C function),44
Py_CompileString (C function),41,42
Py_CompileStringExFlags (C function),41
Py_CompileStringFlags (C function),41
Py_CompileStringObject (C function),41
Py_complex (C type),130
Py_complex.imag (C member),130
Py_complex.real (C member),130
Py_CONSTANT_ELLIPSIS (C macro),90
358 Index
The Python/C API, Release 3.13.0
Py_CONSTANT_EMPTY_BYTES (C macro),90
Py_CONSTANT_EMPTY_STR (C macro),90
Py_CONSTANT_EMPTY_TUPLE (C macro),90
Py_CONSTANT_FALSE (C macro),90
Py_CONSTANT_NONE (C macro),90
Py_CONSTANT_NOT_IMPLEMENTED (C macro),90
Py_CONSTANT_ONE (C macro),90
Py_CONSTANT_TRUE (C macro),90
Py_CONSTANT_ZERO (C macro),90
PY_CXX_CONST (C macro),76
Py_DEBUG (C macro),12
Py_DebugFlag (C var),196
Py_DecodeLocale (C function),62
Py_DECREF (C function),7,44
Py_DecRef (C function),45
Py_DEPRECATED (C macro),5
Py_DontWriteBytecodeFlag (C var),196
Py_Ellipsis (C var),181
Py_EncodeLocale (C function),63
Py_END_ALLOW_THREADS (C macro),205,208
Py_END_CRITICAL_SECTION (C macro),221
Py_END_CRITICAL_SECTION2 (C macro),222
Py_EndInterpreter (C function),213
Py_EnterRecursiveCall (C function),58
Py_EQ(C macro),283
Py_eval_input (C var),42
Py_Exit(C function),65
Py_ExitStatusException (C function),225
Py_False (C var),128
Py_FatalError (C function),65
Py_FatalError() ,203
Py_FdIsInteractive (C function),61
Py_file_input (C var),42
Py_Finalize (C function),200
Py_FinalizeEx (C function),66,199,200,213,214
Py_FrozenFlag (C var),197
Py_GE(C macro),283
Py_GenericAlias (C function),193
Py_GenericAliasType (C var),194
Py_GetArgcArgv (C function),242
Py_GetBuildInfo (C function),203
Py_GetCompiler (C function),203
Py_GetConstant (C function),89
Py_GetConstantBorrowed (C function),90
Py_GetCopyright (C function),203
Py_GETENV (C macro),5
Py_GetExecPrefix (C function),12,202
Py_GetPath (C function),12,203
Py_GetPath() ,201
Py_GetPlatform (C function),203
Py_GetPrefix (C function),12,202
Py_GetProgramFullPath (C function),12,202
Py_GetProgramName (C function),201
Py_GetPythonHome (C function),204
Py_GetVersion (C function),203
Py_GT(C macro),283
Py_hash_t (C type),80
Py_HashPointer (C function),81Py_HashRandomizationFlag (C var),197
Py_IgnoreEnvironmentFlag (C var),197
Py_INCREF (C function),7,43
Py_IncRef (C function),44
Py_Initialize (C function),12,199,213
Py_Initialize() ,201
Py_InitializeEx (C function),199
Py_InitializeFromConfig (C function),199
Py_InspectFlag (C var),197
Py_InteractiveFlag (C var),197
Py_Is(C function),256
Py_IS_TYPE (C function),257
Py_IsFalse (C function),256
Py_IsFinalizing (C function),199
Py_IsInitialized (C function),12,199
Py_IsNone (C function),256
Py_IsolatedFlag (C var),197
Py_IsTrue (C function),256
Py_LE(C macro),283
Py_LeaveRecursiveCall (C function),58
Py_LegacyWindowsFSEncodingFlag (C var),198
Py_LegacyWindowsStdioFlag (C var),198
Py_LIMITED_API (C macro),13
Py_LT(C macro),283
Py_Main(C function),200
PY_MAJOR_VERSION (C macro),305
Py_MAX(C macro),5
Py_MEMBER_SIZE (C macro),5
PY_MICRO_VERSION (C macro),305
Py_MIN(C macro),5
PY_MINOR_VERSION (C macro),305
Py_mod_create (C macro),174
Py_mod_exec (C macro),175
Py_mod_gil (C macro),175
Py_MOD_GIL_NOT_USED (C macro),175
Py_MOD_GIL_USED (C macro),175
Py_mod_multiple_interpreters (C macro),175
Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED
(C macro),175
Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED (C
macro),175
Py_MOD_PER_INTERPRETER_GIL_SUPPORTED (C
macro),175
PY_MONITORING_EVENT_BRANCH (C macro),311
PY_MONITORING_EVENT_C_RAISE (C macro),311
PY_MONITORING_EVENT_C_RETURN (C macro),311
PY_MONITORING_EVENT_CALL (C macro),311
PY_MONITORING_EVENT_EXCEPTION_HANDLED (C
macro),311
PY_MONITORING_EVENT_INSTRUCTION (C macro),
311
PY_MONITORING_EVENT_JUMP (C macro),311
PY_MONITORING_EVENT_LINE (C macro),311
PY_MONITORING_EVENT_PY_RESUME (C macro),311
PY_MONITORING_EVENT_PY_RETURN (C macro),311
PY_MONITORING_EVENT_PY_START (C macro),311
PY_MONITORING_EVENT_PY_THROW (C macro),311
PY_MONITORING_EVENT_PY_UNWIND (C macro),311
Index 359
The Python/C API, Release 3.13.0
PY_MONITORING_EVENT_PY_YIELD (C macro),311
PY_MONITORING_EVENT_RAISE (C macro),311
PY_MONITORING_EVENT_RERAISE (C macro),311
PY_MONITORING_EVENT_STOP_ITERATION (C
macro),311
Py_NE(C macro),283
Py_NewInterpreter (C function),213
Py_NewInterpreterFromConfig (C function),212
Py_NewRef (C function),43
Py_NO_INLINE (C macro),5
Py_None(C var),121
Py_NoSiteFlag (C var),198
Py_NotImplemented (C var),90
Py_NoUserSiteDirectory (C var),198
Py_OpenCodeHookFunction (C type),170
Py_OptimizeFlag (C var),198
Py_PreInitialize (C function),227
Py_PreInitializeFromArgs (C function),228
Py_PreInitializeFromBytesArgs (C function ),
227
Py_PRINT_RAW (C macro),90,171
Py_QuietFlag (C var),198
Py_READONLY (C macro),261
Py_REFCNT (C function),43
Py_RELATIVE_OFFSET (C macro),261
PY_RELEASE_LEVEL (C macro),305
PY_RELEASE_SERIAL (C macro),305
Py_ReprEnter (C function),58
Py_ReprLeave (C function),58
Py_RETURN_FALSE (C macro),128
Py_RETURN_NONE (C macro),121
Py_RETURN_NOTIMPLEMENTED (C macro),90
Py_RETURN_RICHCOMPARE (C macro),283
Py_RETURN_TRUE (C macro),128
Py_RunMain (C function),201
Py_SET_REFCNT (C function),43
Py_SET_SIZE (C function),257
Py_SET_TYPE (C function),257
Py_SetProgramName (C function),201
Py_SetPythonHome (C function),204
Py_SETREF (C macro),45
Py_single_input (C var),42
Py_SIZE(C function),257
Py_ssize_t (C type),10
PY_SSIZE_T_MAX (C macro),124
Py_STRINGIFY (C macro),5
Py_T_BOOL (C macro),263
Py_T_BYTE (C macro),263
Py_T_CHAR (C macro),263
Py_T_DOUBLE (C macro),263
Py_T_FLOAT (C macro),263
Py_T_INT (C macro),263
Py_T_LONG (C macro),263
Py_T_LONGLONG (C macro),263
Py_T_OBJECT_EX (C macro),263
Py_T_PYSSIZET (C macro),263
Py_T_SHORT (C macro),263
Py_T_STRING (C macro),263Py_T_STRING_INPLACE (C macro),263
Py_T_UBYTE (C macro),263
Py_T_UINT (C macro),263
Py_T_ULONG (C macro),263
Py_T_ULONGLONG (C macro),263
Py_T_USHORT (C macro),263
Py_TPFLAGS_BASE_EXC_SUBCLASS (C macro),278
Py_TPFLAGS_BASETYPE (C macro),276
Py_TPFLAGS_BYTES_SUBCLASS (C macro),278
Py_TPFLAGS_DEFAULT (C macro),277
Py_TPFLAGS_DICT_SUBCLASS (C macro),278
Py_TPFLAGS_DISALLOW_INSTANTIATION (C macro),
279
Py_TPFLAGS_HAVE_FINALIZE (C macro),278
Py_TPFLAGS_HAVE_GC (C macro),277
Py_TPFLAGS_HAVE_VECTORCALL (C macro),278
Py_TPFLAGS_HEAPTYPE (C macro),276
Py_TPFLAGS_IMMUTABLETYPE (C macro),279
Py_TPFLAGS_ITEMS_AT_END (C macro),278
Py_TPFLAGS_LIST_SUBCLASS (C macro),278
Py_TPFLAGS_LONG_SUBCLASS (C macro),278
Py_TPFLAGS_MANAGED_DICT (C macro),277
Py_TPFLAGS_MANAGED_WEAKREF (C macro),278
Py_TPFLAGS_MAPPING (C macro),279
Py_TPFLAGS_METHOD_DESCRIPTOR (C macro),277
Py_TPFLAGS_READY (C macro),277
Py_TPFLAGS_READYING (C macro),277
Py_TPFLAGS_SEQUENCE (C macro),280
Py_TPFLAGS_TUPLE_SUBCLASS (C macro),278
Py_TPFLAGS_TYPE_SUBCLASS (C macro),278
Py_TPFLAGS_UNICODE_SUBCLASS (C macro),278
Py_TPFLAGS_VALID_VERSION_TAG (C macro),280
Py_tracefunc (C type),215
Py_True(C var),128
Py_tss_NEEDS_INIT (C macro),218
Py_tss_t (C type),218
Py_TYPE(C function),257
Py_UCS1(C type),135
Py_UCS2(C type),135
Py_UCS4(C type),135
Py_uhash_t (C type),80
Py_UNBLOCK_THREADS (C macro),209
Py_UnbufferedStdioFlag (C var),199
Py_UNICODE (C type),135
Py_UNICODE_IS_HIGH_SURROGATE (C function),138
Py_UNICODE_IS_LOW_SURROGATE (C function),138
Py_UNICODE_IS_SURROGATE (C function),138
Py_UNICODE_ISALNUM (C function),137
Py_UNICODE_ISALPHA (C function),137
Py_UNICODE_ISDECIMAL (C function),137
Py_UNICODE_ISDIGIT (C function),137
Py_UNICODE_ISLINEBREAK (C function),137
Py_UNICODE_ISLOWER (C function),137
Py_UNICODE_ISNUMERIC (C function),137
Py_UNICODE_ISPRINTABLE (C function),137
Py_UNICODE_ISSPACE (C function),137
Py_UNICODE_ISTITLE (C function),137
Py_UNICODE_ISUPPER (C function),137
360 Index
The Python/C API, Release 3.13.0
Py_UNICODE_JOIN_SURROGATES (C function),138
Py_UNICODE_TODECIMAL (C function),137
Py_UNICODE_TODIGIT (C function),137
Py_UNICODE_TOLOWER (C function),137
Py_UNICODE_TONUMERIC (C function),137
Py_UNICODE_TOTITLE (C function),137
Py_UNICODE_TOUPPER (C function),137
Py_UNREACHABLE (C macro),5
Py_UNUSED (C macro),6
Py_VaBuildValue (C function),79
PY_VECTORCALL_ARGUMENTS_OFFSET (C macro),97
Py_VerboseFlag (C var),199
Py_Version (C var),305
PY_VERSION_HEX (C macro),305
Py_VISIT (C function),301
Py_XDECREF (C function),11,44
Py_XINCREF (C function),43
Py_XNewRef (C function),44
Py_XSETREF (C macro),45
PyAIter_Check (C function),107
PyAnySet_Check (C function),161
PyAnySet_CheckExact (C function),162
PyArg_Parse (C function),75
PyArg_ParseTuple (C function),75
PyArg_ParseTupleAndKeywords (C function),75
PyArg_UnpackTuple (C function),76
PyArg_ValidateKeywordArguments (C function ),
75
PyArg_VaParse (C function),75
PyArg_VaParseTupleAndKeywords (C function),75
PyASCIIObject (C type),135
PyAsyncMethods (C type),295
PyAsyncMethods.am_aiter (C member),295
PyAsyncMethods.am_anext (C member),295
PyAsyncMethods.am_await (C member),295
PyAsyncMethods.am_send (C member),295
PyBool_Check (C function),128
PyBool_FromLong (C function),128
PyBool_Type (C var),128
PyBUF_ANY_CONTIGUOUS (C macro),111
PyBUF_C_CONTIGUOUS (C macro),111
PyBUF_CONTIG (C macro),112
PyBUF_CONTIG_RO (C macro),112
PyBUF_F_CONTIGUOUS (C macro),111
PyBUF_FORMAT (C macro),111
PyBUF_FULL (C macro),112
PyBUF_FULL_RO (C macro),112
PyBUF_INDIRECT (C macro),111
PyBUF_MAX_NDIM (C macro),110
PyBUF_ND (C macro),111
PyBUF_READ (C macro),182
PyBUF_RECORDS (C macro),112
PyBUF_RECORDS_RO (C macro),112
PyBUF_SIMPLE (C macro),111
PyBUF_STRIDED (C macro),112
PyBUF_STRIDED_RO (C macro),112
PyBUF_STRIDES (C macro),111
PyBUF_WRITABLE (C macro),111PyBUF_WRITE (C macro),182
PyBuffer_FillContiguousStrides (C function ),
114
PyBuffer_FillInfo (C function),114
PyBuffer_FromContiguous (C function),114
PyBuffer_GetPointer (C function),114
PyBuffer_IsContiguous (C function),114
PyBuffer_Release (C function),114
PyBuffer_SizeFromFormat (C function),114
PyBuffer_ToContiguous (C function),114
PyBufferProcs (C type),108,294
PyBufferProcs.bf_getbuffer (C member),294
PyBufferProcs.bf_releasebuffer (C member ),
294
PyByteArray_AS_STRING (C function),134
PyByteArray_AsString (C function),134
PyByteArray_Check (C function),134
PyByteArray_CheckExact (C function),134
PyByteArray_Concat (C function),134
PyByteArray_FromObject (C function),134
PyByteArray_FromStringAndSize (C function ),
134
PyByteArray_GET_SIZE (C function),134
PyByteArray_Resize (C function),134
PyByteArray_Size (C function),134
PyByteArray_Type (C var),133
PyByteArrayObject (C type),133
PyBytes_AS_STRING (C function),133
PyBytes_AsString (C function),133
PyBytes_AsStringAndSize (C function),133
PyBytes_Check (C function),132
PyBytes_CheckExact (C function),132
PyBytes_Concat (C function),133
PyBytes_ConcatAndDel (C function),133
PyBytes_FromFormat (C function),132
PyBytes_FromFormatV (C function),132
PyBytes_FromObject (C function),133
PyBytes_FromString (C function),132
PyBytes_FromStringAndSize (C function),132
PyBytes_GET_SIZE (C function),133
PyBytes_Size (C function),133
PyBytes_Type (C var),132
PyBytesObject (C type),132
PyCallable_Check (C function),100
PyCallIter_Check (C function),179
PyCallIter_New (C function),179
PyCallIter_Type (C var),179
PyCapsule (C type),184
PyCapsule_CheckExact (C function),184
PyCapsule_Destructor (C type),184
PyCapsule_GetContext (C function),184
PyCapsule_GetDestructor (C function),184
PyCapsule_GetName (C function),184
PyCapsule_GetPointer (C function),184
PyCapsule_Import (C function),185
PyCapsule_IsValid (C function),185
PyCapsule_New (C function),184
PyCapsule_SetContext (C function),185
Index 361
The Python/C API, Release 3.13.0
PyCapsule_SetDestructor (C function),185
PyCapsule_SetName (C function),185
PyCapsule_SetPointer (C function),185
PyCell_Check (C function),166
PyCell_GET (C function),166
PyCell_Get (C function),166
PyCell_New (C function),166
PyCell_SET (C function),166
PyCell_Set (C function),166
PyCell_Type (C var),166
PyCellObject (C type),166
PyCFunction (C type),257
PyCFunction_New (C function),260
PyCFunction_NewEx (C function),260
PyCFunctionFast (C type),258
PyCFunctionFastWithKeywords (C type),258
PyCFunctionWithKeywords (C type),257
PyCMethod (C type),258
PyCMethod_New (C function),260
PyCode_Addr2Line (C function),167
PyCode_Addr2Location (C function),167
PyCode_AddWatcher (C function),168
PyCode_Check (C function),166
PyCode_ClearWatcher (C function),168
PyCode_GetCellvars (C function),168
PyCode_GetCode (C function),168
PyCode_GetFreevars (C function),168
PyCode_GetNumFree (C function),166
PyCode_GetVarnames (C function),168
PyCode_New (C function),167
PyCode_NewEmpty (C function),167
PyCode_NewWithPosOnlyArgs (C function),167
PyCode_Type (C var),166
PyCode_WatchCallback (C type),168
PyCodec_BackslashReplaceErrors (C function ),
84
PyCodec_Decode (C function),83
PyCodec_Decoder (C function),83
PyCodec_Encode (C function),83
PyCodec_Encoder (C function),83
PyCodec_IgnoreErrors (C function),84
PyCodec_IncrementalDecoder (C function),84
PyCodec_IncrementalEncoder (C function),83
PyCodec_KnownEncoding (C function),83
PyCodec_LookupError (C function),84
PyCodec_NameReplaceErrors (C function),84
PyCodec_Register (C function),83
PyCodec_RegisterError (C function),84
PyCodec_ReplaceErrors (C function),84
PyCodec_StreamReader (C function),84
PyCodec_StreamWriter (C function),84
PyCodec_StrictErrors (C function),84
PyCodec_Unregister (C function),83
PyCodec_XMLCharRefReplaceErrors (C function),
84
PyCodeEvent (C type),168
PyCodeObject (C type),166
PyCompactUnicodeObject (C type),135PyCompilerFlags (C struct),42
PyCompilerFlags.cf_feature_version (C mem-
ber),42
PyCompilerFlags.cf_flags (C member),42
PyComplex_AsCComplex (C function),131
PyComplex_Check (C function),131
PyComplex_CheckExact (C function),131
PyComplex_FromCComplex (C function),131
PyComplex_FromDoubles (C function),131
PyComplex_ImagAsDouble (C function),131
PyComplex_RealAsDouble (C function),131
PyComplex_Type (C var),131
PyComplexObject (C type),131
PyConfig (C type),228
PyConfig_Clear (C function),229
PyConfig_InitIsolatedConfig (C function),228
PyConfig_InitPythonConfig (C function),228
PyConfig_Read (C function),229
PyConfig_SetArgv (C function),229
PyConfig_SetBytesArgv (C function),229
PyConfig_SetBytesString (C function),229
PyConfig_SetString (C function),228
PyConfig_SetWideStringList (C function),229
PyConfig.argv (C member),230
PyConfig.base_exec_prefix (C member),230
PyConfig.base_executable (C member),230
PyConfig.base_prefix (C member),230
PyConfig.buffered_stdio (C member),230
PyConfig.bytes_warning (C member),231
PyConfig.check_hash_pycs_mode (C member ),
231
PyConfig.code_debug_ranges (C member),231
PyConfig.configure_c_stdio (C member),231
PyConfig.cpu_count (C member),234
PyConfig.dev_mode (C member),231
PyConfig.dump_refs (C member),231
PyConfig.exec_prefix (C member),232
PyConfig.executable (C member),232
PyConfig.faulthandler (C member),232
PyConfig.filesystem_encoding (C member),232
PyConfig.filesystem_errors (C member),232
PyConfig.hash_seed (C member),233
PyConfig.home (C member),233
PyConfig.import_time (C member),233
PyConfig.inspect (C member),233
PyConfig.install_signal_handlers (C mem-
ber),233
PyConfig.int_max_str_digits (C member),233
PyConfig.interactive (C member),233
PyConfig.isolated (C member),234
PyConfig.legacy_windows_stdio (C member ),
234
PyConfig.malloc_stats (C member),234
PyConfig.module_search_paths (C member),235
PyConfig.module_search_paths_set (C mem-
ber),235
PyConfig.optimization_level (C member),235
PyConfig.orig_argv (C member),235
362 Index
The Python/C API, Release 3.13.0
PyConfig.parse_argv (C member),235
PyConfig.parser_debug (C member),235
PyConfig.pathconfig_warnings (C member),236
PyConfig.perf_profiling (C member),238
PyConfig.platlibdir (C member),234
PyConfig.prefix (C member),236
PyConfig.program_name (C member),236
PyConfig.pycache_prefix (C member),236
PyConfig.pythonpath_env (C member),235
PyConfig.quiet (C member),236
PyConfig.run_command (C member),236
PyConfig.run_filename (C member),236
PyConfig.run_module (C member),237
PyConfig.run_presite (C member),237
PyConfig.safe_path (C member),230
PyConfig.show_ref_count (C member),237
PyConfig.site_import (C member),237
PyConfig.skip_source_first_line (C member),
237
PyConfig.stdio_encoding (C member),237
PyConfig.stdio_errors (C member),237
PyConfig.tracemalloc (C member),238
PyConfig.use_environment (C member),238
PyConfig.use_hash_seed (C member),233
PyConfig.user_site_directory (C member),238
PyConfig.verbose (C member),238
PyConfig.warn_default_encoding (C member ),
231
PyConfig.warnoptions (C member),238
PyConfig.write_bytecode (C member),239
PyConfig.xoptions (C member),239
PyContext (C type),188
PyContext_CheckExact (C function),189
PyContext_Copy (C function),189
PyContext_CopyCurrent (C function),189
PyContext_Enter (C function),189
PyContext_Exit (C function),189
PyContext_New (C function),189
PyContext_Type (C var),189
PyContextToken (C type),189
PyContextToken_CheckExact (C function),189
PyContextToken_Type (C var),189
PyContextVar (C type),189
PyContextVar_CheckExact (C function),189
PyContextVar_Get (C function),189
PyContextVar_New (C function),189
PyContextVar_Reset (C function),190
PyContextVar_Set (C function),190
PyContextVar_Type (C var),189
PyCoro_CheckExact (C function),188
PyCoro_New (C function),188
PyCoro_Type (C var),188
PyCoroObject (C type),188
PyDate_Check (C function),190
PyDate_CheckExact (C function),191
PyDate_FromDate (C function),191
PyDate_FromTimestamp (C function),193
PyDateTime_Check (C function),191PyDateTime_CheckExact (C function),191
PyDateTime_Date (C type),190
PyDateTime_DATE_GET_FOLD (C function),192
PyDateTime_DATE_GET_HOUR (C function),192
PyDateTime_DATE_GET_MICROSECOND (C function),
192
PyDateTime_DATE_GET_MINUTE (C function),192
PyDateTime_DATE_GET_SECOND (C function),192
PyDateTime_DATE_GET_TZINFO (C function),192
PyDateTime_DateTime (C type),190
PyDateTime_DateTimeType (C var),190
PyDateTime_DateType (C var),190
PyDateTime_Delta (C type),190
PyDateTime_DELTA_GET_DAYS (C function),193
PyDateTime_DELTA_GET_MICROSECONDS (C func-
tion),193
PyDateTime_DELTA_GET_SECONDS (C function),193
PyDateTime_DeltaType (C var),190
PyDateTime_FromDateAndTime (C function),191
PyDateTime_FromDateAndTimeAndFold (C func-
tion),191
PyDateTime_FromTimestamp (C function),193
PyDateTime_GET_DAY (C function),192
PyDateTime_GET_MONTH (C function),192
PyDateTime_GET_YEAR (C function),192
PyDateTime_Time (C type),190
PyDateTime_TIME_GET_FOLD (C function),193
PyDateTime_TIME_GET_HOUR (C function),192
PyDateTime_TIME_GET_MICROSECOND (C function),
192
PyDateTime_TIME_GET_MINUTE (C function),192
PyDateTime_TIME_GET_SECOND (C function),192
PyDateTime_TIME_GET_TZINFO (C function),193
PyDateTime_TimeType (C var),190
PyDateTime_TimeZone_UTC (C var),190
PyDateTime_TZInfoType (C var),190
PyDelta_Check (C function),191
PyDelta_CheckExact (C function),191
PyDelta_FromDSU (C function),191
PyDescr_IsData (C function),180
PyDescr_NewClassMethod (C function),180
PyDescr_NewGetSet (C function),180
PyDescr_NewMember (C function),180
PyDescr_NewMethod (C function),180
PyDescr_NewWrapper (C function),180
PyDict_AddWatcher (C function),160
PyDict_Check (C function),156
PyDict_CheckExact (C function),156
PyDict_Clear (C function),156
PyDict_ClearWatcher (C function),160
PyDict_Contains (C function),157
PyDict_ContainsString (C function),157
PyDict_Copy (C function),157
PyDict_DelItem (C function),157
PyDict_DelItemString (C function),157
PyDict_GetItem (C function),157
PyDict_GetItemRef (C function),157
PyDict_GetItemString (C function),158
Index 363
The Python/C API, Release 3.13.0
PyDict_GetItemStringRef (C function),158
PyDict_GetItemWithError (C function),157
PyDict_Items (C function),158
PyDict_Keys (C function),159
PyDict_Merge (C function),160
PyDict_MergeFromSeq2 (C function),160
PyDict_New (C function),156
PyDict_Next (C function),159
PyDict_Pop (C function),158
PyDict_PopString (C function),158
PyDict_SetDefault (C function),158
PyDict_SetDefaultRef (C function),158
PyDict_SetItem (C function),157
PyDict_SetItemString (C function),157
PyDict_Size (C function),159
PyDict_Type (C var),156
PyDict_Unwatch (C function),160
PyDict_Update (C function),160
PyDict_Values (C function),159
PyDict_Watch (C function),160
PyDict_WatchCallback (C type),160
PyDict_WatchEvent (C type),160
PyDictObject (C type),156
PyDictProxy_New (C function),156
PyDoc_STR (C macro),6
PyDoc_STRVAR (C macro),6
PyErr_BadArgument (C function),48
PyErr_BadInternalCall (C function),50
PyErr_CheckSignals (C function),54
PyErr_Clear (C function),10,11,47
PyErr_DisplayException (C function),48
PyErr_ExceptionMatches (C function),11,51
PyErr_Fetch (C function),52
PyErr_Format (C function),48
PyErr_FormatUnraisable (C function),48
PyErr_FormatV (C function),48
PyErr_GetExcInfo (C function),54
PyErr_GetHandledException (C function),53
PyErr_GetRaisedException (C function),52
PyErr_GivenExceptionMatches (C function),52
PyErr_NewException (C function),55
PyErr_NewExceptionWithDoc (C function),56
PyErr_NoMemory (C function),49
PyErr_NormalizeException (C function),53
PyErr_Occurred (C function),10,51
PyErr_Print (C function),47
PyErr_PrintEx (C function),47
PyErr_ResourceWarning (C function),51
PyErr_Restore (C function),53
PyErr_SetExcFromWindowsErr (C function),49
PyErr_SetExcFromWindowsErrWithFilename (C
function),50
PyErr_SetExcFromWindowsErrWithFilenameObject
(C function),49
PyErr_SetExcFromWindowsErrWithFilenameObjects
(C function),50
PyErr_SetExcInfo (C function),54
PyErr_SetFromErrno (C function),49PyErr_SetFromErrnoWithFilename (C function ),
49
PyErr_SetFromErrnoWithFilenameObject (C
function),49
PyErr_SetFromErrnoWithFilenameObjects (C
function),49
PyErr_SetFromWindowsErr (C function),49
PyErr_SetFromWindowsErrWithFilename (C
function),49
PyErr_SetHandledException (C function),53
PyErr_SetImportError (C function),50
PyErr_SetImportErrorSubclass (C function),50
PyErr_SetInterrupt (C function),55
PyErr_SetInterruptEx (C function),55
PyErr_SetNone (C function),48
PyErr_SetObject (C function),48
PyErr_SetRaisedException (C function),52
PyErr_SetString (C function),10,48
PyErr_SyntaxLocation (C function),50
PyErr_SyntaxLocationEx (C function),50
PyErr_SyntaxLocationObject (C function),50
PyErr_WarnEx (C function),51
PyErr_WarnExplicit (C function),51
PyErr_WarnExplicitObject (C function),51
PyErr_WarnFormat (C function),51
PyErr_WriteUnraisable (C function),47
PyEval_AcquireThread (C function),211
PyEval_AcquireThread() ,207
PyEval_EvalCode (C function),41
PyEval_EvalCodeEx (C function),41
PyEval_EvalFrame (C function),42
PyEval_EvalFrameEx (C function),42
PyEval_GetBuiltins (C function),82
PyEval_GetFrame (C function),82
PyEval_GetFrameBuiltins (C function),82
PyEval_GetFrameGlobals (C function),83
PyEval_GetFrameLocals (C function),82
PyEval_GetFuncDesc (C function),83
PyEval_GetFuncName (C function),83
PyEval_GetGlobals (C function),82
PyEval_GetLocals (C function),82
PyEval_InitThreads (C function),207
PyEval_InitThreads() ,199
PyEval_MergeCompilerFlags (C function),42
PyEval_ReleaseThread (C function),211
PyEval_ReleaseThread() ,207
PyEval_RestoreThread (C function),205,207
PyEval_RestoreThread() ,207
PyEval_SaveThread (C function),205,207
PyEval_SaveThread() ,207
PyEval_SetProfile (C function),216
PyEval_SetProfileAllThreads (C function),216
PyEval_SetTrace (C function),217
PyEval_SetTraceAllThreads (C function),217
PyExc_ArithmeticError (C var),58
PyExc_AssertionError (C var),58
PyExc_AttributeError (C var),58
PyExc_BaseException (C var),58
364 Index
The Python/C API, Release 3.13.0
PyExc_BlockingIOError (C var),58
PyExc_BrokenPipeError (C var),58
PyExc_BufferError (C var),58
PyExc_BytesWarning (C var),60
PyExc_ChildProcessError (C var),58
PyExc_ConnectionAbortedError (C var),58
PyExc_ConnectionError (C var),58
PyExc_ConnectionRefusedError (C var),58
PyExc_ConnectionResetError (C var),58
PyExc_DeprecationWarning (C var),60
PyExc_EnvironmentError (C var),60
PyExc_EOFError (C var),58
PyExc_Exception (C var),58
PyExc_FileExistsError (C var),58
PyExc_FileNotFoundError (C var),58
PyExc_FloatingPointError (C var),58
PyExc_FutureWarning (C var),60
PyExc_GeneratorExit (C var),58
PyExc_ImportError (C var),58
PyExc_ImportWarning (C var),60
PyExc_IndentationError (C var),58
PyExc_IndexError (C var),58
PyExc_InterruptedError (C var),58
PyExc_IOError (C var),60
PyExc_IsADirectoryError (C var),58
PyExc_KeyboardInterrupt (C var),58
PyExc_KeyError (C var),58
PyExc_LookupError (C var),58
PyExc_MemoryError (C var),58
PyExc_ModuleNotFoundError (C var),58
PyExc_NameError (C var),58
PyExc_NotADirectoryError (C var),58
PyExc_NotImplementedError (C var),58
PyExc_OSError (C var),58
PyExc_OverflowError (C var),58
PyExc_PendingDeprecationWarning (C var),60
PyExc_PermissionError (C var),58
PyExc_ProcessLookupError (C var),58
PyExc_PythonFinalizationError (C var),58
PyExc_RecursionError (C var),58
PyExc_ReferenceError (C var),58
PyExc_ResourceWarning (C var),60
PyExc_RuntimeError (C var),58
PyExc_RuntimeWarning (C var),60
PyExc_StopAsyncIteration (C var),58
PyExc_StopIteration (C var),58
PyExc_SyntaxError (C var),58
PyExc_SyntaxWarning (C var),60
PyExc_SystemError (C var),58
PyExc_SystemExit (C var),58
PyExc_TabError (C var),58
PyExc_TimeoutError (C var),58
PyExc_TypeError (C var),58
PyExc_UnboundLocalError (C var),58
PyExc_UnicodeDecodeError (C var),58
PyExc_UnicodeEncodeError (C var),58
PyExc_UnicodeError (C var),58
PyExc_UnicodeTranslateError (C var),58PyExc_UnicodeWarning (C var),60
PyExc_UserWarning (C var),60
PyExc_ValueError (C var),58
PyExc_Warning (C var),60
PyExc_WindowsError (C var),60
PyExc_ZeroDivisionError (C var),58
PyException_GetArgs (C function),56
PyException_GetCause (C function),56
PyException_GetContext (C function),56
PyException_GetTraceback (C function),56
PyException_SetArgs (C function),56
PyException_SetCause (C function),56
PyException_SetContext (C function),56
PyException_SetTraceback (C function),56
PyFile_FromFd (C function),170
PyFile_GetLine (C function),170
PyFile_SetOpenCodeHook (C function),170
PyFile_WriteObject (C function),171
PyFile_WriteString (C function),171
PyFloat_AS_DOUBLE (C function),129
PyFloat_AsDouble (C function),128
PyFloat_Check (C function),128
PyFloat_CheckExact (C function),128
PyFloat_FromDouble (C function),128
PyFloat_FromString (C function),128
PyFloat_GetInfo (C function),129
PyFloat_GetMax (C function),129
PyFloat_GetMin (C function),129
PyFloat_Pack2 (C function),129
PyFloat_Pack4 (C function),129
PyFloat_Pack8 (C function),129
PyFloat_Type (C var),128
PyFloat_Unpack2 (C function),130
PyFloat_Unpack4 (C function),130
PyFloat_Unpack8 (C function),130
PyFloatObject (C type),128
PyFrame_Check (C function),185
PyFrame_GetBack (C function),186
PyFrame_GetBuiltins (C function),186
PyFrame_GetCode (C function),186
PyFrame_GetGenerator (C function),186
PyFrame_GetGlobals (C function),186
PyFrame_GetLasti (C function),186
PyFrame_GetLineNumber (C function),187
PyFrame_GetLocals (C function),186
PyFrame_GetVar (C function),186
PyFrame_GetVarString (C function),186
PyFrame_Type (C var),185
PyFrameObject (C type),185
PyFrozenSet_Check (C function),161
PyFrozenSet_CheckExact (C function),162
PyFrozenSet_New (C function),162
PyFrozenSet_Type (C var),161
PyFunction_AddWatcher (C function),164
PyFunction_Check (C function),163
PyFunction_ClearWatcher (C function),164
PyFunction_GetAnnotations (C function),164
PyFunction_GetClosure (C function),163
Index 365
The Python/C API, Release 3.13.0
PyFunction_GetCode (C function),163
PyFunction_GetDefaults (C function),163
PyFunction_GetGlobals (C function),163
PyFunction_GetModule (C function),163
PyFunction_New (C function),163
PyFunction_NewWithQualName (C function),163
PyFunction_SetAnnotations (C function),164
PyFunction_SetClosure (C function),164
PyFunction_SetDefaults (C function),163
PyFunction_SetVectorcall (C function),163
PyFunction_Type (C var),163
PyFunction_WatchCallback (C type),164
PyFunction_WatchEvent (C type),164
PyFunctionObject (C type),163
PyGC_Collect (C function),302
PyGC_Disable (C function),302
PyGC_Enable (C function),302
PyGC_IsEnabled (C function),302
PyGen_Check (C function),188
PyGen_CheckExact (C function),188
PyGen_New (C function),188
PyGen_NewWithQualName (C function),188
PyGen_Type (C var),188
PyGenObject (C type),187
PyGetSetDef (C type),264
PyGetSetDef.closure (C member),264
PyGetSetDef.doc (C member),264
PyGetSetDef.get (C member),264
PyGetSetDef.name (C member),264
PyGetSetDef.set (C member),264
PyGILState_Check (C function),208
PyGILState_Ensure (C function),208
PyGILState_GetThisThreadState (C function ),
208
PyGILState_Release (C function),208
PyHASH_BITS (C macro),81
PyHash_FuncDef (C type),81
PyHash_FuncDef.hash_bits (C member),81
PyHash_FuncDef.name (C member),81
PyHash_FuncDef.seed_bits (C member),81
PyHash_GetFuncDef (C function),81
PyHASH_IMAG (C macro),81
PyHASH_INF (C macro),81
PyHASH_MODULUS (C macro),81
PyHASH_MULTIPLIER (C macro),81
PyImport_AddModule (C function),67
PyImport_AddModuleObject (C function),67
PyImport_AddModuleRef (C function),67
PyImport_AppendInittab (C function),69
PyImport_ExecCodeModule (C function),67
PyImport_ExecCodeModuleEx (C function),67
PyImport_ExecCodeModuleObject (C function),68
PyImport_ExecCodeModuleWithPathnames (C
function),68
PyImport_ExtendInittab (C function),69
PyImport_FrozenModules (C var),69
PyImport_GetImporter (C function),68
PyImport_GetMagicNumber (C function),68PyImport_GetMagicTag (C function),68
PyImport_GetModule (C function),68
PyImport_GetModuleDict (C function),68
PyImport_Import (C function),66
PyImport_ImportFrozenModule (C function),69
PyImport_ImportFrozenModuleObject (C func-
tion),68
PyImport_ImportModule (C function),66
PyImport_ImportModuleEx (C function),66
PyImport_ImportModuleLevel (C function),66
PyImport_ImportModuleLevelObject (C func-
tion),66
PyImport_ImportModuleNoBlock (C function),66
PyImport_ReloadModule (C function),67
PyIndex_Check (C function),103
PyInstanceMethod_Check (C function),165
PyInstanceMethod_Function (C function),165
PyInstanceMethod_GET_FUNCTION (C function ),
165
PyInstanceMethod_New (C function),165
PyInstanceMethod_Type (C var),165
PyInterpreterConfig (C type),212
PyInterpreterConfig_DEFAULT_GIL (C macro),
212
PyInterpreterConfig_OWN_GIL (C macro),212
PyInterpreterConfig_SHARED_GIL (C macro),
212
PyInterpreterConfig.allow_daemon_threads
(C member),212
PyInterpreterConfig.allow_exec (C member ),
212
PyInterpreterConfig.allow_fork (C member ),
212
PyInterpreterConfig.allow_threads (C mem-
ber),212
PyInterpreterConfig.check_multi_interp_extensions
(C member),212
PyInterpreterConfig.gil (C member),212
PyInterpreterConfig.use_main_obmalloc (C
member),212
PyInterpreterState (C type),207
PyInterpreterState_Clear (C function),209
PyInterpreterState_Delete (C function),209
PyInterpreterState_Get (C function),210
PyInterpreterState_GetDict (C function),210
PyInterpreterState_GetID (C function),210
PyInterpreterState_Head (C function),218
PyInterpreterState_Main (C function),218
PyInterpreterState_New (C function),209
PyInterpreterState_Next (C function),218
PyInterpreterState_ThreadHead (C function ),
218
PyIter_Check (C function),107
PyIter_Next (C function),107
PyIter_Send (C function),108
PyList_Append (C function),155
PyList_AsTuple (C function),156
PyList_Check (C function),154
366 Index
The Python/C API, Release 3.13.0
PyList_CheckExact (C function),154
PyList_Clear (C function),156
PyList_Extend (C function),156
PyList_GET_ITEM (C function),155
PyList_GET_SIZE (C function),155
PyList_GetItem (C function),9,155
PyList_GetItemRef (C function),155
PyList_GetSlice (C function),155
PyList_Insert (C function),155
PyList_New (C function),154
PyList_Reverse (C function),156
PyList_SET_ITEM (C function),155
PyList_SetItem (C function),7,155
PyList_SetSlice (C function),156
PyList_Size (C function),155
PyList_Sort (C function),156
PyList_Type (C var),154
PyListObject (C type),154
PyLong_AS_LONG (C function),123
PyLong_AsDouble (C function),124
PyLong_AsInt (C function),123
PyLong_AsLong (C function),123
PyLong_AsLongAndOverflow (C function),123
PyLong_AsLongLong (C function),123
PyLong_AsLongLongAndOverflow (C function),123
PyLong_AsNativeBytes (C function),125
PyLong_AsSize_t (C function),124
PyLong_AsSsize_t (C function),123
PyLong_AsUnsignedLong (C function),124
PyLong_AsUnsignedLongLong (C function),124
PyLong_AsUnsignedLongLongMask (C function ),
124
PyLong_AsUnsignedLongMask (C function),124
PyLong_AsVoidPtr (C function),124
PyLong_Check (C function),121
PyLong_CheckExact (C function),121
PyLong_FromDouble (C function),122
PyLong_FromLong (C function),121
PyLong_FromLongLong (C function),122
PyLong_FromNativeBytes (C function),122
PyLong_FromSize_t (C function),122
PyLong_FromSsize_t (C function),121
PyLong_FromString (C function),122
PyLong_FromUnicodeObject (C function),122
PyLong_FromUnsignedLong (C function),121
PyLong_FromUnsignedLongLong (C function),122
PyLong_FromUnsignedNativeBytes (C function ),
122
PyLong_FromVoidPtr (C function),122
PyLong_GetInfo (C function),127
PyLong_Type (C var),121
PyLongObject (C type),121
PyMapping_Check (C function),105
PyMapping_DelItem (C function),106
PyMapping_DelItemString (C function),106
PyMapping_GetItemString (C function),106
PyMapping_GetOptionalItem (C function),106PyMapping_GetOptionalItemString (C function),
106
PyMapping_HasKey (C function),106
PyMapping_HasKeyString (C function),106
PyMapping_HasKeyStringWithError (C function),
106
PyMapping_HasKeyWithError (C function),106
PyMapping_Items (C function),107
PyMapping_Keys (C function),107
PyMapping_Length (C function),106
PyMapping_SetItemString (C function),106
PyMapping_Size (C function),106
PyMapping_Values (C function),107
PyMappingMethods (C type),293
PyMappingMethods.mp_ass_subscript (C mem-
ber),293
PyMappingMethods.mp_length (C member),293
PyMappingMethods.mp_subscript (C member ),
293
PyMarshal_ReadLastObjectFromFile (C func-
tion),70
PyMarshal_ReadLongFromFile (C function),70
PyMarshal_ReadObjectFromFile (C function),70
PyMarshal_ReadObjectFromString (C function ),
70
PyMarshal_ReadShortFromFile (C function),70
PyMarshal_WriteLongToFile (C function),69
PyMarshal_WriteObjectToFile (C function),70
PyMarshal_WriteObjectToString (C function),70
PyMem_Calloc (C function),247
PyMem_Del (C function),248
PYMEM_DOMAIN_MEM (C macro),250
PYMEM_DOMAIN_OBJ (C macro),250
PYMEM_DOMAIN_RAW (C macro),250
PyMem_Free (C function),248
PyMem_GetAllocator (C function),251
PyMem_Malloc (C function),247
PyMem_New (C macro),248
PyMem_RawCalloc (C function),246
PyMem_RawFree (C function),247
PyMem_RawMalloc (C function),246
PyMem_RawRealloc (C function),247
PyMem_Realloc (C function),247
PyMem_Resize (C macro),248
PyMem_SetAllocator (C function),251
PyMem_SetupDebugHooks (C function),251
PyMemAllocatorDomain (C type),250
PyMemAllocatorEx (C type),250
PyMember_GetOne (C function),261
PyMember_SetOne (C function),261
PyMemberDef (C type),260
PyMemberDef.doc (C member),261
PyMemberDef.flags (C member),261
PyMemberDef.name (C member),260
PyMemberDef.offset (C member),261
PyMemberDef.type (C member),260
PyMemoryView_Check (C function),182
PyMemoryView_FromBuffer (C function),182
Index 367
The Python/C API, Release 3.13.0
PyMemoryView_FromMemory (C function),182
PyMemoryView_FromObject (C function),182
PyMemoryView_GET_BASE (C function),182
PyMemoryView_GET_BUFFER (C function),182
PyMemoryView_GetContiguous (C function),182
PyMethod_Check (C function),165
PyMethod_Function (C function),165
PyMethod_GET_FUNCTION (C function),165
PyMethod_GET_SELF (C function),165
PyMethod_New (C function),165
PyMethod_Self (C function),165
PyMethod_Type (C var),165
PyMethodDef (C type),258
PyMethodDef.ml_doc (C member),258
PyMethodDef.ml_flags (C member),258
PyMethodDef.ml_meth (C member),258
PyMethodDef.ml_name (C member),258
PyMODINIT_FUNC (C macro),4
PyModule_Add (C function),177
PyModule_AddFunctions (C function),176
PyModule_AddIntConstant (C function),178
PyModule_AddIntMacro (C macro),178
PyModule_AddObject (C function),177
PyModule_AddObjectRef (C function),176
PyModule_AddStringConstant (C function),178
PyModule_AddStringMacro (C macro),178
PyModule_AddType (C function),178
PyModule_Check (C function),171
PyModule_CheckExact (C function),171
PyModule_Create (C function),173
PyModule_Create2 (C function),173
PyModule_ExecDef (C function),176
PyModule_FromDefAndSpec (C function),176
PyModule_FromDefAndSpec2 (C function),176
PyModule_GetDef (C function),172
PyModule_GetDict (C function),171
PyModule_GetFilename (C function),172
PyModule_GetFilenameObject (C function),172
PyModule_GetName (C function),172
PyModule_GetNameObject (C function),171
PyModule_GetState (C function),172
PyModule_New (C function),171
PyModule_NewObject (C function),171
PyModule_SetDocString (C function),176
PyModule_Type (C var),171
PyModuleDef (C type),172
PyModuleDef_Init (C function),174
PyModuleDef_Slot (C type),174
PyModuleDef_Slot.slot (C member),174
PyModuleDef_Slot.value (C member),174
PyModuleDef.m_base (C member),172
PyModuleDef.m_clear (C member),173
PyModuleDef.m_doc (C member),172
PyModuleDef.m_free (C member),173
PyModuleDef.m_methods (C member),173
PyModuleDef.m_name (C member),172
PyModuleDef.m_size (C member),172
PyModuleDef.m_slots (C member),173PyModuleDef.m_slots.m_reload (C member),173
PyModuleDef.m_traverse (C member),173
PyMonitoring_EnterScope (C function),310
PyMonitoring_ExitScope (C function),311
PyMonitoring_FireBranchEvent (C function),309
PyMonitoring_FireCallEvent (C function),309
PyMonitoring_FireCRaiseEvent (C function),310
PyMonitoring_FireCReturnEvent (C function ),
309
PyMonitoring_FireExceptionHandledEvent (C
function),310
PyMonitoring_FireJumpEvent (C function),309
PyMonitoring_FireLineEvent (C function),309
PyMonitoring_FirePyResumeEvent (C function ),
309
PyMonitoring_FirePyReturnEvent (C function ),
309
PyMonitoring_FirePyStartEvent (C function ),
309
PyMonitoring_FirePyThrowEvent (C function ),
310
PyMonitoring_FirePyUnwindEvent (C function ),
310
PyMonitoring_FirePyYieldEvent (C function ),
309
PyMonitoring_FireRaiseEvent (C function),310
PyMonitoring_FireReraiseEvent (C function ),
310
PyMonitoring_FireStopIterationEvent (C
function),310
PyMonitoringState (C type),309
PyMutex(C type),220
PyMutex_Lock (C function),220
PyMutex_Unlock (C function),220
PyNumber_Absolute (C function),101
PyNumber_Add (C function),101
PyNumber_And (C function),102
PyNumber_AsSsize_t (C function),103
PyNumber_Check (C function),101
PyNumber_Divmod (C function),101
PyNumber_Float (C function),103
PyNumber_FloorDivide (C function),101
PyNumber_Index (C function),103
PyNumber_InPlaceAdd (C function),102
PyNumber_InPlaceAnd (C function),103
PyNumber_InPlaceFloorDivide (C function),102
PyNumber_InPlaceLshift (C function),103
PyNumber_InPlaceMatrixMultiply (C function ),
102
PyNumber_InPlaceMultiply (C function),102
PyNumber_InPlaceOr (C function),103
PyNumber_InPlacePower (C function),102
PyNumber_InPlaceRemainder (C function),102
PyNumber_InPlaceRshift (C function),103
PyNumber_InPlaceSubtract (C function),102
PyNumber_InPlaceTrueDivide (C function),102
PyNumber_InPlaceXor (C function),103
PyNumber_Invert (C function),101
368 Index
The Python/C API, Release 3.13.0
PyNumber_Long (C function),103
PyNumber_Lshift (C function),102
PyNumber_MatrixMultiply (C function),101
PyNumber_Multiply (C function),101
PyNumber_Negative (C function),101
PyNumber_Or (C function),102
PyNumber_Positive (C function),101
PyNumber_Power (C function),101
PyNumber_Remainder (C function),101
PyNumber_Rshift (C function),102
PyNumber_Subtract (C function),101
PyNumber_ToBase (C function),103
PyNumber_TrueDivide (C function),101
PyNumber_Xor (C function),102
PyNumberMethods (C type),290
PyNumberMethods.nb_absolute (C member),292
PyNumberMethods.nb_add (C member),291
PyNumberMethods.nb_and (C member),292
PyNumberMethods.nb_bool (C member),292
PyNumberMethods.nb_divmod (C member),292
PyNumberMethods.nb_float (C member),292
PyNumberMethods.nb_floor_divide (C member),
292
PyNumberMethods.nb_index (C member),292
PyNumberMethods.nb_inplace_add (C member ),
292
PyNumberMethods.nb_inplace_and (C member ),
292
PyNumberMethods.nb_inplace_floor_divide
(C member),292
PyNumberMethods.nb_inplace_lshift (C mem-
ber),292
PyNumberMethods.nb_inplace_matrix_multiply
(C member),292
PyNumberMethods.nb_inplace_multiply (C
member),292
PyNumberMethods.nb_inplace_or (C member ),
292
PyNumberMethods.nb_inplace_power (C mem-
ber),292
PyNumberMethods.nb_inplace_remainder (C
member),292
PyNumberMethods.nb_inplace_rshift (C mem-
ber),292
PyNumberMethods.nb_inplace_subtract (C
member),292
PyNumberMethods.nb_inplace_true_divide (C
member),292
PyNumberMethods.nb_inplace_xor (C member ),
292
PyNumberMethods.nb_int (C member),292
PyNumberMethods.nb_invert (C member),292
PyNumberMethods.nb_lshift (C member),292
PyNumberMethods.nb_matrix_multiply (C mem-
ber),292
PyNumberMethods.nb_multiply (C member),292
PyNumberMethods.nb_negative (C member),292
PyNumberMethods.nb_or (C member),292PyNumberMethods.nb_positive (C member),292
PyNumberMethods.nb_power (C member),292
PyNumberMethods.nb_remainder (C member),292
PyNumberMethods.nb_reserved (C member),292
PyNumberMethods.nb_rshift (C member),292
PyNumberMethods.nb_subtract (C member),291
PyNumberMethods.nb_true_divide (C member ),
292
PyNumberMethods.nb_xor (C member),292
PyObject (C type),256
PyObject_ASCII (C function),93
PyObject_AsFileDescriptor (C function),170
PyObject_Bytes (C function),93
PyObject_Call (C function),98
PyObject_CallFunction (C function),99
PyObject_CallFunctionObjArgs (C function),99
PyObject_CallMethod (C function),99
PyObject_CallMethodNoArgs (C function),99
PyObject_CallMethodObjArgs (C function),99
PyObject_CallMethodOneArg (C function),100
PyObject_CallNoArgs (C function),98
PyObject_CallObject (C function),99
PyObject_Calloc (C function),249
PyObject_CallOneArg (C function),99
PyObject_CheckBuffer (C function),113
PyObject_ClearManagedDict (C function),96
PyObject_ClearWeakRefs (C function),183
PyObject_CopyData (C function),114
PyObject_Del (C function),255
PyObject_DelAttr (C function),92
PyObject_DelAttrString (C function),92
PyObject_DelItem (C function),95
PyObject_Dir (C function),95
PyObject_Format (C function),93
PyObject_Free (C function),249
PyObject_GC_Del (C function),301
PyObject_GC_IsFinalized (C function),301
PyObject_GC_IsTracked (C function),301
PyObject_GC_New (C macro),300
PyObject_GC_NewVar (C macro),300
PyObject_GC_Resize (C macro),300
PyObject_GC_Track (C function),300
PyObject_GC_UnTrack (C function),301
PyObject_GenericGetAttr (C function),92
PyObject_GenericGetDict (C function),92
PyObject_GenericHash (C function),81
PyObject_GenericSetAttr (C function),92
PyObject_GenericSetDict (C function),93
PyObject_GetAIter (C function),95
PyObject_GetArenaAllocator (C function),253
PyObject_GetAttr (C function),91
PyObject_GetAttrString (C function),91
PyObject_GetBuffer (C function),113
PyObject_GetItem (C function),95
PyObject_GetItemData (C function),96
PyObject_GetIter (C function),95
PyObject_GetOptionalAttr (C function),91
Index 369
The Python/C API, Release 3.13.0
PyObject_GetOptionalAttrString (C function ),
92
PyObject_GetTypeData (C function),95
PyObject_HasAttr (C function),91
PyObject_HasAttrString (C function),91
PyObject_HasAttrStringWithError (C function),
91
PyObject_HasAttrWithError (C function),91
PyObject_Hash (C function),94
PyObject_HashNotImplemented (C function),94
PyObject_HEAD (C macro),256
PyObject_HEAD_INIT (C macro),257
PyObject_Init (C function),255
PyObject_InitVar (C function),255
PyObject_IS_GC (C function),300
PyObject_IsInstance (C function),94
PyObject_IsSubclass (C function),94
PyObject_IsTrue (C function),94
PyObject_Length (C function),95
PyObject_LengthHint (C function),95
PyObject_Malloc (C function),249
PyObject_New (C macro),255
PyObject_NewVar (C macro),255
PyObject_Not (C function),94
PyObject_Print (C function),90
PyObject_Realloc (C function),249
PyObject_Repr (C function),93
PyObject_RichCompare (C function),93
PyObject_RichCompareBool (C function),93
PyObject_SetArenaAllocator (C function),253
PyObject_SetAttr (C function),92
PyObject_SetAttrString (C function),92
PyObject_SetItem (C function),95
PyObject_Size (C function),95
PyObject_Str (C function),93
PyObject_Type (C function),94
PyObject_TypeCheck (C function),94
PyObject_VAR_HEAD (C macro),256
PyObject_Vectorcall (C function),100
PyObject_VectorcallDict (C function),100
PyObject_VectorcallMethod (C function),100
PyObject_VisitManagedDict (C function),96
PyObjectArenaAllocator (C type),253
PyObject.ob_refcnt (C member),270
PyObject.ob_type (C member),270
PyOS_AfterFork (C function),62
PyOS_AfterFork_Child (C function),62
PyOS_AfterFork_Parent (C function),61
PyOS_BeforeFork (C function),61
PyOS_CheckStack (C function),62
PyOS_double_to_string (C function),80
PyOS_FSPath (C function),61
PyOS_getsig (C function),62
PyOS_InputHook (C var),40
PyOS_ReadlineFunctionPointer (C var),40
PyOS_setsig (C function),62
PyOS_sighandler_t (C type),62
PyOS_snprintf (C function),79PyOS_stricmp (C function),80
PyOS_string_to_double (C function),80
PyOS_strnicmp (C function),80
PyOS_strtol (C function),79
PyOS_strtoul (C function),79
PyOS_vsnprintf (C function),79
PyPreConfig (C type),226
PyPreConfig_InitIsolatedConfig (C function ),
226
PyPreConfig_InitPythonConfig (C function),226
PyPreConfig.allocator (C member),226
PyPreConfig.coerce_c_locale (C member),226
PyPreConfig.coerce_c_locale_warn (C mem-
ber),226
PyPreConfig.configure_locale (C member),226
PyPreConfig.dev_mode (C member),226
PyPreConfig.isolated (C member),227
PyPreConfig.legacy_windows_fs_encoding (C
member),227
PyPreConfig.parse_argv (C member),227
PyPreConfig.use_environment (C member),227
PyPreConfig.utf8_mode (C member),227
PyProperty_Type (C var),180
PyRefTracer (C type),217
PyRefTracer_CREATE (C var),217
PyRefTracer_DESTROY (C var),217
PyRefTracer_GetTracer (C function),217
PyRefTracer_SetTracer (C function),217
PyRun_AnyFile (C function),39
PyRun_AnyFileEx (C function),39
PyRun_AnyFileExFlags (C function),39
PyRun_AnyFileFlags (C function),39
PyRun_File (C function),41
PyRun_FileEx (C function),41
PyRun_FileExFlags (C function),41
PyRun_FileFlags (C function),41
PyRun_InteractiveLoop (C function),40
PyRun_InteractiveLoopFlags (C function),40
PyRun_InteractiveOne (C function),40
PyRun_InteractiveOneFlags (C function),40
PyRun_SimpleFile (C function),39
PyRun_SimpleFileEx (C function),39
PyRun_SimpleFileExFlags (C function),39
PyRun_SimpleString (C function),39
PyRun_SimpleStringFlags (C function),39
PyRun_String (C function),40
PyRun_StringFlags (C function),40
PySendResult (C type),108
PySeqIter_Check (C function),179
PySeqIter_New (C function),179
PySeqIter_Type (C var),179
PySequence_Check (C function),104
PySequence_Concat (C function),104
PySequence_Contains (C function),105
PySequence_Count (C function),104
PySequence_DelItem (C function),104
PySequence_DelSlice (C function),104
PySequence_Fast (C function),105
370 Index
The Python/C API, Release 3.13.0
PySequence_Fast_GET_ITEM (C function),105
PySequence_Fast_GET_SIZE (C function),105
PySequence_Fast_ITEMS (C function),105
PySequence_GetItem (C function),9,104
PySequence_GetSlice (C function),104
PySequence_Index (C function),105
PySequence_InPlaceConcat (C function),104
PySequence_InPlaceRepeat (C function),104
PySequence_ITEM (C function),105
PySequence_Length (C function),104
PySequence_List (C function),105
PySequence_Repeat (C function),104
PySequence_SetItem (C function),104
PySequence_SetSlice (C function),104
PySequence_Size (C function),104
PySequence_Tuple (C function),105
PySequenceMethods (C type),293
PySequenceMethods.sq_ass_item (C member ),
293
PySequenceMethods.sq_concat (C member),293
PySequenceMethods.sq_contains (C member ),
293
PySequenceMethods.sq_inplace_concat (C
member),293
PySequenceMethods.sq_inplace_repeat (C
member),293
PySequenceMethods.sq_item (C member),293
PySequenceMethods.sq_length (C member),293
PySequenceMethods.sq_repeat (C member),293
PySet_Add (C function),162
PySet_Check (C function),161
PySet_CheckExact (C function),162
PySet_Clear (C function),162
PySet_Contains (C function),162
PySet_Discard (C function),162
PySet_GET_SIZE (C function),162
PySet_New (C function),162
PySet_Pop (C function),162
PySet_Size (C function),162
PySet_Type (C var),161
PySetObject (C type),161
PySignal_SetWakeupFd (C function),55
PySlice_AdjustIndices (C function),181
PySlice_Check (C function),180
PySlice_GetIndices (C function),180
PySlice_GetIndicesEx (C function),180
PySlice_New (C function),180
PySlice_Type (C var),180
PySlice_Unpack (C function),181
PyState_AddModule (C function),179
PyState_FindModule (C function),179
PyState_RemoveModule (C function),179
PyStatus (C type),224
PyStatus_Error (C function),225
PyStatus_Exception (C function),225
PyStatus_Exit (C function),225
PyStatus_IsError (C function),225
PyStatus_IsExit (C function),225PyStatus_NoMemory (C function),225
PyStatus_Ok (C function),225
PyStatus.err_msg (C member),224
PyStatus.exitcode (C member),224
PyStatus.func (C member),224
PyStructSequence_Desc (C type),153
PyStructSequence_Desc.doc (C member),153
PyStructSequence_Desc.fields (C member),153
PyStructSequence_Desc.n_in_sequence (C
member),153
PyStructSequence_Desc.name (C member),153
PyStructSequence_Field (C type),153
PyStructSequence_Field.doc (C member),153
PyStructSequence_Field.name (C member),153
PyStructSequence_GET_ITEM (C function),154
PyStructSequence_GetItem (C function),154
PyStructSequence_InitType (C function),153
PyStructSequence_InitType2 (C function),153
PyStructSequence_New (C function),154
PyStructSequence_NewType (C function),153
PyStructSequence_SET_ITEM (C function),154
PyStructSequence_SetItem (C function),154
PyStructSequence_UnnamedField (C var),154
PySys_AddAuditHook (C function),65
PySys_Audit (C function),64
PySys_AuditTuple (C function),65
PySys_FormatStderr (C function),64
PySys_FormatStdout (C function),64
PySys_GetObject (C function),64
PySys_GetXOptions (C function),64
PySys_ResetWarnOptions (C function),64
PySys_SetArgv (C function),204
PySys_SetArgvEx (C function),203
PySys_SetObject (C function),64
PySys_WriteStderr (C function),64
PySys_WriteStdout (C function),64
Python 3000 ,325
Python Enhancement Proposals
PEP 1,325
PEP 7,3,6
PEP 238,42,318
PEP 278,328
PEP 302,322
PEP 343,316
PEP 353,10
PEP 362,314,324
PEP 383,142,143
PEP 387,13
PEP 393,134
PEP 411,325
PEP 420,323,325
PEP 432,243
PEP 442,290
PEP 443,319
PEP 451,174
PEP 456,81
PEP 483,319
PEP 484,313,319,328
Index 371
The Python/C API, Release 3.13.0
PEP 489,175,212
PEP 492,314,316
PEP 498,318
PEP 519,325
PEP 523,187,211
PEP 525,314
PEP 526,313,328
PEP 528,198,234
PEP 529,143,198
PEP 538,241
PEP 539,218
PEP 540,241
PEP 552,231
PEP 554,214
PEP 578,65
PEP 585,319
PEP 587,223
PEP 590,96
PEP 623,135
PEP 0626#out-of-process-debuggers-and-profilers ,
167
PEP 634,280
PEP 667,82,187
PEP 0683 ,43,44,320
PEP 703,318,320
PEP 3116 ,328
PEP 3119 ,94
PEP 3121 ,173
PEP 3147 ,68
PEP 3151 ,59
PEP 3155 ,326
PYTHON_CPU_COUNT ,234
PYTHON_GIL ,320
PYTHON_PERF_JIT_SUPPORT ,238
PYTHON_PRESITE ,237
PYTHONCOERCECLOCALE ,241
PYTHONDEBUG ,196,235
PYTHONDEVMODE ,231
PYTHONDONTWRITEBYTECODE ,197,239
PYTHONDUMPREFS ,232
PYTHONEXECUTABLE ,236
PYTHONFAULTHANDLER ,232
PYTHONHASHSEED ,197,233
PYTHONHOME ,12,197,204,205,233
Pythonic ,325
PYTHONINSPECT ,197,233
PYTHONINTMAXSTRDIGITS ,234
PYTHONIOENCODING ,237
PYTHONLEGACYWINDOWSFSENCODING ,198,227
PYTHONLEGACYWINDOWSSTDIO ,198,234
PYTHONMALLOC ,246,250,251,253
PYTHONMALLOCSTATS ,234,246
PYTHONNODEBUGRANGES ,231
PYTHONNOUSERSITE ,198,238
PYTHONOPTIMIZE ,198,235
PYTHONPATH ,12,197,235
PYTHONPLATLIBDIR ,234
PYTHONPROFILEIMPORTTIME ,233PYTHONPYCACHEPREFIX ,236
PYTHONSAFEPATH ,230
PYTHONTRACEMALLOC ,238
PYTHONUNBUFFERED ,199,230
PYTHONUTF8 ,227,241
PYTHONVERBOSE ,199,238
PYTHONWARNINGS ,239
PyThread_create_key (C function),220
PyThread_delete_key (C function),220
PyThread_delete_key_value (C function),220
PyThread_get_key_value (C function),220
PyThread_ReInitTLS (C function),220
PyThread_set_key_value (C function),220
PyThread_tss_alloc (C function),219
PyThread_tss_create (C function),219
PyThread_tss_delete (C function),219
PyThread_tss_free (C function),219
PyThread_tss_get (C function),219
PyThread_tss_is_created (C function),219
PyThread_tss_set (C function),219
PyThreadState (C type),205,207
PyThreadState_Clear (C function),209
PyThreadState_Delete (C function),209
PyThreadState_DeleteCurrent (C function),209
PyThreadState_EnterTracing (C function),210
PyThreadState_Get (C function),207
PyThreadState_GetDict (C function),211
PyThreadState_GetFrame (C function),209
PyThreadState_GetID (C function),209
PyThreadState_GetInterpreter (C function),210
PyThreadState_GetUnchecked (C function),207
PyThreadState_LeaveTracing (C function),210
PyThreadState_New (C function),209
PyThreadState_Next (C function),218
PyThreadState_SetAsyncExc (C function),211
PyThreadState_Swap (C function),208
PyThreadState.interp (C member),207
PyTime_AsSecondsDouble (C function),86
PyTime_Check (C function),191
PyTime_CheckExact (C function),191
PyTime_FromTime (C function),191
PyTime_FromTimeAndFold (C function),191
PyTime_MAX (C var),85
PyTime_MIN (C var),85
PyTime_Monotonic (C function),85
PyTime_MonotonicRaw (C function),85
PyTime_PerfCounter (C function),85
PyTime_PerfCounterRaw (C function),85
PyTime_t (C type),85
PyTime_Time (C function),85
PyTime_TimeRaw (C function),85
PyTimeZone_FromOffset (C function),192
PyTimeZone_FromOffsetAndName (C function),192
PyTrace_C_CALL (C var),216
PyTrace_C_EXCEPTION (C var),216
PyTrace_C_RETURN (C var),216
PyTrace_CALL (C var),216
PyTrace_EXCEPTION (C var),216
372 Index
The Python/C API, Release 3.13.0
PyTrace_LINE (C var),216
PyTrace_OPCODE (C var),216
PyTrace_RETURN (C var),216
PyTraceMalloc_Track (C function),253
PyTraceMalloc_Untrack (C function),253
PyTuple_Check (C function),152
PyTuple_CheckExact (C function),152
PyTuple_GET_ITEM (C function),152
PyTuple_GET_SIZE (C function),152
PyTuple_GetItem (C function),152
PyTuple_GetSlice (C function),152
PyTuple_New (C function),152
PyTuple_Pack (C function),152
PyTuple_SET_ITEM (C function),152
PyTuple_SetItem (C function),7,152
PyTuple_Size (C function),152
PyTuple_Type (C var),151
PyTupleObject (C type),151
PyType_AddWatcher (C function),116
PyType_Check (C function),115
PyType_CheckExact (C function),115
PyType_ClearCache (C function),115
PyType_ClearWatcher (C function),116
PyType_FromMetaclass (C function),118
PyType_FromModuleAndSpec (C function),119
PyType_FromSpec (C function),119
PyType_FromSpecWithBases (C function),119
PyType_GenericAlloc (C function),116
PyType_GenericNew (C function),117
PyType_GetDict (C function),115
PyType_GetFlags (C function),115
PyType_GetFullyQualifiedName (C function),117
PyType_GetModule (C function),117
PyType_GetModuleByDef (C function),118
PyType_GetModuleName (C function),117
PyType_GetModuleState (C function),118
PyType_GetName (C function),117
PyType_GetQualName (C function),117
PyType_GetSlot (C function),117
PyType_GetTypeDataSize (C function),95
PyType_HasFeature (C function),116
PyType_IS_GC (C function),116
PyType_IsSubtype (C function),116
PyType_Modified (C function),116
PyType_Ready (C function),117
PyType_Slot (C type),120
PyType_Slot.pfunc (C member),121
PyType_Slot.slot (C member),120
PyType_Spec (C type),119
PyType_Spec.basicsize (C member),119
PyType_Spec.flags (C member),120
PyType_Spec.itemsize (C member),120
PyType_Spec.name (C member),119
PyType_Spec.slots (C member),120
PyType_Type (C var),115
PyType_Watch (C function),116
PyType_WatchCallback (C type),116
PyTypeObject (C type),115PyTypeObject.tp_alloc (C member),287
PyTypeObject.tp_as_async (C member),273
PyTypeObject.tp_as_buffer (C member),276
PyTypeObject.tp_as_mapping (C member),274
PyTypeObject.tp_as_number (C member),274
PyTypeObject.tp_as_sequence (C member),274
PyTypeObject.tp_base (C member),285
PyTypeObject.tp_bases (C member),288
PyTypeObject.tp_basicsize (C member),271
PyTypeObject.tp_cache (C member),288
PyTypeObject.tp_call (C member),275
PyTypeObject.tp_clear (C member),281
PyTypeObject.tp_dealloc (C member),272
PyTypeObject.tp_del (C member),289
PyTypeObject.tp_descr_get (C member),285
PyTypeObject.tp_descr_set (C member),286
PyTypeObject.tp_dict (C member),285
PyTypeObject.tp_dictoffset (C member),286
PyTypeObject.tp_doc (C member),280
PyTypeObject.tp_finalize (C member),289
PyTypeObject.tp_flags (C member),276
PyTypeObject.tp_free (C member),287
PyTypeObject.tp_getattr (C member),273
PyTypeObject.tp_getattro (C member),275
PyTypeObject.tp_getset (C member),284
PyTypeObject.tp_hash (C member),274
PyTypeObject.tp_init (C member),286
PyTypeObject.tp_is_gc (C member),288
PyTypeObject.tp_itemsize (C member),271
PyTypeObject.tp_iter (C member),284
PyTypeObject.tp_iternext (C member),284
PyTypeObject.tp_members (C member),284
PyTypeObject.tp_methods (C member),284
PyTypeObject.tp_mro (C member),288
PyTypeObject.tp_name (C member),271
PyTypeObject.tp_new (C member),287
PyTypeObject.tp_repr (C member),274
PyTypeObject.tp_richcompare (C member),282
PyTypeObject.tp_setattr (C member),273
PyTypeObject.tp_setattro (C member),275
PyTypeObject.tp_str (C member),275
PyTypeObject.tp_subclasses (C member),289
PyTypeObject.tp_traverse (C member),280
PyTypeObject.tp_vectorcall (C member),290
PyTypeObject.tp_vectorcall_offset (C mem-
ber),273
PyTypeObject.tp_version_tag (C member),289
PyTypeObject.tp_watched (C member),290
PyTypeObject.tp_weaklist (C member),289
PyTypeObject.tp_weaklistoffset (C member ),
283
PyTZInfo_Check (C function),191
PyTZInfo_CheckExact (C function),191
PyUnicode_1BYTE_DATA (C function),135
PyUnicode_1BYTE_KIND (C macro),136
PyUnicode_2BYTE_DATA (C function),135
PyUnicode_2BYTE_KIND (C macro),136
PyUnicode_4BYTE_DATA (C function),135
Index 373
The Python/C API, Release 3.13.0
PyUnicode_4BYTE_KIND (C macro),136
PyUnicode_AsASCIIString (C function),148
PyUnicode_AsCharmapString (C function),148
PyUnicode_AsEncodedString (C function),145
PyUnicode_AsLatin1String (C function),148
PyUnicode_AsMBCSString (C function),149
PyUnicode_AsRawUnicodeEscapeString (C func-
tion),148
PyUnicode_AsUCS4 (C function),142
PyUnicode_AsUCS4Copy (C function),142
PyUnicode_AsUnicodeEscapeString (C function),
147
PyUnicode_AsUTF8 (C function),146
PyUnicode_AsUTF8AndSize (C function),145
PyUnicode_AsUTF8String (C function),145
PyUnicode_AsUTF16String (C function),147
PyUnicode_AsUTF32String (C function),146
PyUnicode_AsWideChar (C function),144
PyUnicode_AsWideCharString (C function),144
PyUnicode_Check (C function),135
PyUnicode_CheckExact (C function),135
PyUnicode_Compare (C function),150
PyUnicode_CompareWithASCIIString (C func-
tion),150
PyUnicode_Concat (C function),149
PyUnicode_Contains (C function),151
PyUnicode_CopyCharacters (C function),141
PyUnicode_Count (C function),150
PyUnicode_DATA (C function),136
PyUnicode_Decode (C function),145
PyUnicode_DecodeASCII (C function),148
PyUnicode_DecodeCharmap (C function),148
PyUnicode_DecodeFSDefault (C function),143
PyUnicode_DecodeFSDefaultAndSize (C func-
tion),143
PyUnicode_DecodeLatin1 (C function),148
PyUnicode_DecodeLocale (C function),142
PyUnicode_DecodeLocaleAndSize (C function ),
142
PyUnicode_DecodeMBCS (C function),149
PyUnicode_DecodeMBCSStateful (C function),149
PyUnicode_DecodeRawUnicodeEscape (C func-
tion),148
PyUnicode_DecodeUnicodeEscape (C function ),
147
PyUnicode_DecodeUTF7 (C function),147
PyUnicode_DecodeUTF7Stateful (C function),147
PyUnicode_DecodeUTF8 (C function),145
PyUnicode_DecodeUTF8Stateful (C function),145
PyUnicode_DecodeUTF16 (C function),146
PyUnicode_DecodeUTF16Stateful (C function ),
147
PyUnicode_DecodeUTF32 (C function),146
PyUnicode_DecodeUTF32Stateful (C function ),
146
PyUnicode_EncodeCodePage (C function),149
PyUnicode_EncodeFSDefault (C function),144
PyUnicode_EncodeLocale (C function),142PyUnicode_EqualToUTF8 (C function),150
PyUnicode_EqualToUTF8AndSize (C function),150
PyUnicode_Fill (C function),141
PyUnicode_Find (C function),150
PyUnicode_FindChar (C function),150
PyUnicode_Format (C function),151
PyUnicode_FromEncodedObject (C function),141
PyUnicode_FromFormat (C function),138
PyUnicode_FromFormatV (C function),141
PyUnicode_FromKindAndData (C function),138
PyUnicode_FromObject (C function),141
PyUnicode_FromString (C function),138
PyUnicode_FromStringAndSize (C function),138
PyUnicode_FromWideChar (C function),144
PyUnicode_FSConverter (C function),143
PyUnicode_FSDecoder (C function),143
PyUnicode_GET_LENGTH (C function),135
PyUnicode_GetLength (C function),141
PyUnicode_InternFromString (C function),151
PyUnicode_InternInPlace (C function),151
PyUnicode_IsIdentifier (C function),136
PyUnicode_Join (C function),150
PyUnicode_KIND (C function),136
PyUnicode_MAX_CHAR_VALUE (C function),136
PyUnicode_New (C function),138
PyUnicode_READ (C function),136
PyUnicode_READ_CHAR (C function),136
PyUnicode_ReadChar (C function),141
PyUnicode_READY (C function),135
PyUnicode_Replace (C function),150
PyUnicode_RichCompare (C function),151
PyUnicode_Split (C function),149
PyUnicode_Splitlines (C function),149
PyUnicode_Substring (C function),142
PyUnicode_Tailmatch (C function),150
PyUnicode_Translate (C function),149
PyUnicode_Type (C var),135
PyUnicode_WRITE (C function),136
PyUnicode_WriteChar (C function),141
PyUnicodeDecodeError_Create (C function),57
PyUnicodeDecodeError_GetEncoding (C func-
tion),57
PyUnicodeDecodeError_GetEnd (C function),57
PyUnicodeDecodeError_GetObject (C function ),
57
PyUnicodeDecodeError_GetReason (C function ),
57
PyUnicodeDecodeError_GetStart (C function),57
PyUnicodeDecodeError_SetEnd (C function),57
PyUnicodeDecodeError_SetReason (C function ),
57
PyUnicodeDecodeError_SetStart (C function),57
PyUnicodeEncodeError_GetEncoding (C func-
tion),57
PyUnicodeEncodeError_GetEnd (C function),57
PyUnicodeEncodeError_GetObject (C function ),
57
374 Index
The Python/C API, Release 3.13.0
PyUnicodeEncodeError_GetReason (C function ),
57
PyUnicodeEncodeError_GetStart (C function),57
PyUnicodeEncodeError_SetEnd (C function),57
PyUnicodeEncodeError_SetReason (C function ),
57
PyUnicodeEncodeError_SetStart (C function),57
PyUnicodeObject (C type),135
PyUnicodeTranslateError_GetEnd (C function ),
57
PyUnicodeTranslateError_GetObject (C func-
tion),57
PyUnicodeTranslateError_GetReason (C func-
tion),57
PyUnicodeTranslateError_GetStart (C func-
tion),57
PyUnicodeTranslateError_SetEnd (C function ),
57
PyUnicodeTranslateError_SetReason (C func-
tion),57
PyUnicodeTranslateError_SetStart (C func-
tion),57
PyUnstable ,13
PyUnstable_Code_GetExtra (C function),169
PyUnstable_Code_GetFirstFree (C function),166
PyUnstable_Code_New (C function),167
PyUnstable_Code_NewWithPosOnlyArgs (C func-
tion),167
PyUnstable_Code_SetExtra (C function),169
PyUnstable_Eval_RequestCodeExtraIndex (C
function),169
PyUnstable_Exc_PrepReraiseStar (C function ),
56
PyUnstable_GC_VisitObjects (C function),302
PyUnstable_InterpreterFrame_GetCode (C
function),187
PyUnstable_InterpreterFrame_GetLasti (C
function),187
PyUnstable_InterpreterFrame_GetLine (C
function),187
PyUnstable_Long_CompactValue (C function),127
PyUnstable_Long_IsCompact (C function),127
PyUnstable_Module_SetGIL (C function),178
PyUnstable_Object_ClearWeakRefsNoCallbacks
(C function),183
PyUnstable_Object_GC_NewWithExtraData (C
function),300
PyUnstable_PerfMapState_Fini (C function),86
PyUnstable_PerfMapState_Init (C function),86
PyUnstable_Type_AssignVersionTag (C func-
tion),118
PyUnstable_WritePerfMapEntry (C function),86
PyVarObject (C type),256
PyVarObject_HEAD_INIT (C macro),257
PyVarObject.ob_size (C member),271
PyVectorcall_Call (C function),98
PyVectorcall_Function (C function),98
PyVectorcall_NARGS (C function),97PyWeakref_Check (C function),182
PyWeakref_CheckProxy (C function),182
PyWeakref_CheckRef (C function),182
PyWeakref_GET_OBJECT (C function),183
PyWeakref_GetObject (C function),183
PyWeakref_GetRef (C function),183
PyWeakref_NewProxy (C function),183
PyWeakref_NewRef (C function),182
PyWideStringList (C type),224
PyWideStringList_Append (C function),224
PyWideStringList_Insert (C function),224
PyWideStringList.items (C member),224
PyWideStringList.length (C member),224
PyWrapper_New (C function),180
Q
qualified name ,326
R
READ_RESTRICTED (C macro),262
READONLY (C macro),262
realloc(C function),245
reference count ,326
regular package ,326
releasebufferproc (C type),296
REPL,326
repr
built-in function ,93,274
reprfunc (C type),296
RESTRICTED (C macro),262
richcmpfunc (C type),296
S
search
path,module,12,199,203
sendfunc (C type),297
sequence ,326
object,132
set
object,161
set comprehension ,327
set_all() ,8
setattrfunc (C type),296
setattrofunc (C type),296
setswitchinterval (in module sys ),205
setter(C type),264
SIGINT(C macro),54,55
signal
module,54,55
single dispatch ,327
SIZE_MAX (C macro),124
slice,327
soft deprecated ,327
special
method,327
special method ,327
ssizeargfunc (C type),297
ssizeobjargproc (C type),297
Index 375
The Python/C API, Release 3.13.0
statement ,327
static type checker ,327
staticmethod
built-in function ,260
stderr(in module sys ),213
stdin(in module sys ),213
stdout(in module sys ),213
strerror (C function),49
string
PyObject_Str (C function),93
strong reference ,327
structmember.h ,264
sum_list() ,9
sum_sequence() ,9,10
sys
module,12,199,213
SystemError (built-in exception ),172
T
T_BOOL(C macro),264
T_BYTE(C macro),264
T_CHAR(C macro),264
T_DOUBLE (C macro),264
T_FLOAT(C macro),264
T_INT(C macro),264
T_LONG(C macro),264
T_LONGLONG (C macro),264
T_NONE(C macro),264
T_OBJECT (C macro),264
T_OBJECT_EX (C macro),264
T_PYSSIZET (C macro),264
T_SHORT(C macro),264
T_STRING (C macro),264
T_STRING_INPLACE (C macro),264
T_UBYTE(C macro),264
T_UINT(C macro),264
T_ULONG(C macro),264
T_ULONGULONG (C macro),264
T_USHORT (C macro),264
ternaryfunc (C type),297
text encoding ,327
text file ,327
traverseproc (C type),301
triple-quoted string ,327
tuple
built-in function ,105,156
object,151
type,328
built-in function ,94
object,6,115
type alias ,328
type hint ,328
U
ULONG_MAX (C macro),124
unaryfunc (C type),296
universal newlines ,328
USE_STACKCHECK (C macro),62V
variable annotation ,328
vectorcallfunc (C type),97
version(in module sys ),203
virtual environment ,328
virtual machine ,329
visitproc (C type),301
W
WRITE_RESTRICTED (C macro),262
Z
Zen of Python ,329
376 Index
