Argparse Tutorial
Release 3.13.0
Guido van Rossum and the Python development team
November 15, 2024
Python Software Foundation
Email: docs@python.org
Contents
1 Concepts 2
2 The basics 2
3 Introducing Positional arguments 3
4 Introducing Optional arguments 4
4.1 Shortoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
5 Combining Positional and Optional arguments 6
6 Getting a little more advanced 10
6.1 Specifyingambiguousarguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
6.2 Conflictingoptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
7 How to translate the argparse output 13
8 Custom type converters 14
9 Conclusion 14
author
TshepangMbambo
Thistutorialisintendedtobeagentleintroductionto argparse ,therecommendedcommand-lineparsingmodule
inthePythonstandardlibrary.
®Note
Therearetwoothermodulesthatfulfillthesametask,namely getopt(anequivalentfor getopt() fromtheC
language)andthedeprecated optparse . Notealsothat argparse isbasedon optparse ,andthereforevery
similarintermsofusage.
1
1Concepts
Let’sshowthesortoffunctionalitythatwearegoingtoexploreinthisintroductorytutorialbymakinguseofthe ls
command:
$ls
cpython devguide prog.py pypy rm-unused-function.patch
$lspypy
ctypes_configure demo dotviewer include lib_pypy lib-python ...
$ls-l
total 20
drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython
drwxr-xr-x 4 wena wena 4096 Feb 8 12:04 devguide
-rwxr-xr-x 1 wena wena 535 Feb 19 00:05 prog.py
drwxr-xr-x 14 wena wena 4096 Feb 7 00:59 pypy
-rw-r--r-- 1 wena wena 741 Feb 18 01:01 rm-unused-function.patch
$ls--help
Usage: ls [OPTION]... [FILE]...
List information about the FILEs (the current directory by default).
Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.
...
Afewconceptswecanlearnfromthefourcommands:
•Thelscommand is useful when run without any options at all. It defaults to displaying the contents of the
currentdirectory.
•Ifwewantbeyondwhatitprovidesbydefault,wetellitabitmore. Inthiscase,wewantittodisplayadifferent
directory, pypy. What we did is specify what is known as a positional argument. It’s named so because the
programshouldknowwhattodowiththevalue,solelybasedonwhereitappearsonthecommandline. This
conceptismorerelevanttoacommandlike cp,whosemostbasicusageis cp SRC DEST .Thefirstposition
iswhat you want copied, andthesecondpositionis where you want it copied to .
•Now, say we want to change behaviour of the program. In our example, we display more info for each file
insteadofjustshowingthefilenames. The -linthatcaseisknownasanoptionalargument.
•That’sasnippetofthehelptext. It’sveryusefulinthatyoucancomeacrossaprogramyouhaveneverused
before,andcanfigureouthowitworkssimplybyreadingitshelptext.
2The basics
Letusstartwithaverysimpleexamplewhichdoes(almost)nothing:
import argparse
parser =argparse .ArgumentParser()
parser .parse_args()
Followingisaresultofrunningthecode:
$python prog.py
$python prog.py --help
usage: prog.py [-h]
options:
-h, --help show this help message and exit
$python prog.py --verbose
usage: prog.py [-h]
prog.py: error: unrecognized arguments: --verbose
$python prog.py foo
(continuesonnextpage)
2
(continuedfrompreviouspage)
usage: prog.py [-h]
prog.py: error: unrecognized arguments: foo
Hereiswhatishappening:
•Runningthescriptwithoutanyoptionsresultsinnothingdisplayedtostdout. Notsouseful.
•Thesecondonestartstodisplaytheusefulnessofthe argparse module. Wehavedonealmostnothing,but
alreadywegetanicehelpmessage.
•The--helpoption, which can also be shortened to -h, is the only option we get for free (i.e. no need to
specifyit). Specifyinganythingelseresultsinanerror. Buteventhen,wedogetausefulusagemessage,also
forfree.
3Introducing Positional arguments
Anexample:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "echo ")
args =parser .parse_args()
print (args .echo)
Andrunningthecode:
$python prog.py
usage: prog.py [-h] echo
prog.py: error: the following arguments are required: echo
$python prog.py --help
usage: prog.py [-h] echo
positional arguments:
echo
options:
-h, --help show this help message and exit
$python prog.py foo
foo
Hereiswhat’shappening:
•We’ve added the add_argument() method, which is what we use to specify which command-line options
theprogramiswillingtoaccept. Inthiscase,I’venamedit echosothatit’sinlinewithitsfunction.
•Callingourprogramnowrequiresustospecifyanoption.
•Theparse_args() methodactuallyreturnssomedatafromtheoptionsspecified,inthiscase, echo.
•Thevariableissomeformof‘magic’that argparse performsforfree(i.e. noneedtospecifywhichvariable
that value is stored in). You will also notice that its name matches the string argument given to the method,
echo.
Notehoweverthat,althoughthehelpdisplaylooksniceandall,itcurrentlyisnotashelpfulasitcanbe. Forexample
we see that we got echoas a positional argument, but we don’t know what it does, other than by guessing or by
readingthesourcecode. So,let’smakeitabitmoreuseful:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "echo ", help ="echo the string you use here ")
(continuesonnextpage)
3
(continuedfrompreviouspage)
args =parser .parse_args()
print (args .echo)
Andweget:
$python prog.py -h
usage: prog.py [-h] echo
positional arguments:
echo echo the string you use here
options:
-h, --help show this help message and exit
Now,howaboutdoingsomethingevenmoreuseful:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ", help ="display a square of a given number ")
args =parser .parse_args()
print (args .square **2)
Followingisaresultofrunningthecode:
$python prog.py 4
Traceback (most recent call last):
File "prog.py", line 5, in <module>
print(args.square**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
Thatdidn’tgosowell. That’sbecause argparse treatstheoptionswegiveitasstrings,unlesswetellitotherwise.
So,let’stell argparse totreatthatinputasaninteger:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ", help ="display a square of a given number ",
type =int)
args =parser .parse_args()
print (args .square **2)
Followingisaresultofrunningthecode:
$python prog.py 4
16
$python prog.py four
usage: prog.py [-h] square
prog.py: error: argument square: invalid int value: 'four'
Thatwentwell. Theprogramnowevenhelpfullyquitsonbadillegalinputbeforeproceeding.
4Introducing Optional arguments
Sofarwehavebeenplayingwithpositionalarguments. Letushavealookonhowtoaddoptionalones:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "--verbosity ", help ="increase output verbosity ")
(continuesonnextpage)
4
(continuedfrompreviouspage)
args =parser .parse_args()
ifargs .verbosity:
print ("verbosity turned on ")
Andtheoutput:
$python prog.py --verbosity 1
verbosity turned on
$python prog.py
$python prog.py --help
usage: prog.py [-h] [--verbosity VERBOSITY]
options:
-h, --help show this help message and exit
--verbosity VERBOSITY
increase output verbosity
$python prog.py --verbosity
usage: prog.py [-h] [--verbosity VERBOSITY]
prog.py: error: argument --verbosity: expected one argument
Hereiswhatishappening:
•Theprogramiswrittensoastodisplaysomethingwhen --verbosity isspecifiedanddisplaynothingwhen
not.
•Toshowthattheoptionisactuallyoptional,thereisnoerrorwhenrunningtheprogramwithoutit. Notethat
by default, if an optional argument isn’t used, the relevant variable, in this case args.verbosity , is given
Noneasavalue,whichisthereasonitfailsthetruthtestofthe ifstatement.
•Thehelpmessageisabitdifferent.
•Whenusingthe --verbosity option,onemustalsospecifysomevalue,anyvalue.
Theaboveexampleacceptsarbitraryintegervaluesfor --verbosity ,butforoursimpleprogram,onlytwovalues
areactuallyuseful, TrueorFalse. Let’smodifythecodeaccordingly:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "--verbose ", help ="increase output verbosity ",
action ="store_true ")
args =parser .parse_args()
ifargs .verbose:
print ("verbosity turned on ")
Andtheoutput:
$python prog.py --verbose
verbosity turned on
$python prog.py --verbose 1
usage: prog.py [-h] [--verbose]
prog.py: error: unrecognized arguments: 1
$python prog.py --help
usage: prog.py [-h] [--verbose]
options:
-h, --help show this help message and exit
--verbose increase output verbosity
Hereiswhatishappening:
5
•Theoptionisnowmoreofaflagthansomethingthatrequiresavalue. Weevenchangedthenameoftheoption
tomatchthatidea. Notethatwenowspecifyanewkeyword, action,andgiveitthevalue "store_true" .
Thismeansthat,iftheoptionisspecified,assignthevalue Truetoargs.verbose . Notspecifyingitimplies
False.
•Itcomplainswhenyouspecifyavalue,intruespiritofwhatflagsactuallyare.
•Noticethedifferenthelptext.
4.1Short options
Ifyouarefamiliarwithcommandlineusage,youwillnoticethatIhaven’tyettouchedonthetopicofshortversions
oftheoptions. It’squitesimple:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "-v","--verbose ", help ="increase output verbosity ",
action ="store_true ")
args =parser .parse_args()
ifargs .verbose:
print ("verbosity turned on ")
Andheregoes:
$python prog.py -v
verbosity turned on
$python prog.py --help
usage: prog.py [-h] [-v]
options:
-h, --help show this help message and exit
-v, --verbose increase output verbosity
Notethatthenewabilityisalsoreflectedinthehelptext.
5Combining Positional and Optional arguments
Ourprogramkeepsgrowingincomplexity:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ",type =int,
help ="display a square of a given number ")
parser .add_argument( "-v","--verbose ", action ="store_true ",
help ="increase output verbosity ")
args =parser .parse_args()
answer =args .square **2
ifargs .verbose:
print (f"the square of {args .square }equals {answer }")
else :
print (answer)
Andnowtheoutput:
$python prog.py
usage: prog.py [-h] [-v] square
prog.py: error: the following arguments are required: square
$python prog.py 4
(continuesonnextpage)
6
(continuedfrompreviouspage)
16
$python prog.py 4--verbose
the square of 4 equals 16
$python prog.py --verbose 4
the square of 4 equals 16
•We’vebroughtbackapositionalargument,hencethecomplaint.
•Notethattheorderdoesnotmatter.
How about we give this program of ours back the ability to have multiple verbosity values, and actually get to use
them:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ",type =int,
help ="display a square of a given number ")
parser .add_argument( "-v","--verbosity ",type =int,
help ="increase output verbosity ")
args =parser .parse_args()
answer =args .square **2
ifargs .verbosity ==2:
print (f"the square of {args .square }equals {answer }")
elif args .verbosity ==1:
print (f"{args .square }^2 == {answer }")
else :
print (answer)
Andtheoutput:
$python prog.py 4
16
$python prog.py 4-v
usage: prog.py [-h] [-v VERBOSITY] square
prog.py: error: argument -v/--verbosity: expected one argument
$python prog.py 4-v1
4^2 == 16
$python prog.py 4-v2
the square of 4 equals 16
$python prog.py 4-v3
16
Thesealllookgoodexceptthelastone,whichexposesabuginourprogram. Let’sfixitbyrestrictingthevaluesthe
--verbosity optioncanaccept:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ",type =int,
help ="display a square of a given number ")
parser .add_argument( "-v","--verbosity ",type =int, choices =[0,1,2],
help ="increase output verbosity ")
args =parser .parse_args()
answer =args .square **2
ifargs .verbosity ==2:
print (f"the square of {args .square }equals {answer }")
elif args .verbosity ==1:
print (f"{args .square }^2 == {answer }")
(continuesonnextpage)
7
(continuedfrompreviouspage)
else :
print (answer)
Andtheoutput:
$python prog.py 4-v3
usage: prog.py [-h] [-v {0,1,2}] square
prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)
$python prog.py 4-h
usage: prog.py [-h] [-v {0,1,2}] square
positional arguments:
square display a square of a given number
options:
-h, --help show this help message and exit
-v, --verbosity {0,1,2}
increase output verbosity
Notethatthechangealsoreflectsbothintheerrormessageaswellasthehelpstring.
Now, let’suseadifferentapproachofplayingwithverbosity, whichisprettycommon. Italsomatchesthewaythe
CPythonexecutablehandlesitsownverbosityargument(checktheoutputof python --help ):
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ",type =int,
help ="display the square of a given number ")
parser .add_argument( "-v","--verbosity ", action ="count ",
help ="increase output verbosity ")
args =parser .parse_args()
answer =args .square **2
ifargs .verbosity ==2:
print (f"the square of {args .square }equals {answer }")
elif args .verbosity ==1:
print (f"{args .square }^2 == {answer }")
else :
print (answer)
Wehaveintroducedanotheraction,“count”,tocountthenumberofoccurrencesofspecificoptions.
$python prog.py 4
16
$python prog.py 4-v
4^2 == 16
$python prog.py 4-vv
the square of 4 equals 16
$python prog.py 4--verbosity --verbosity
the square of 4 equals 16
$python prog.py 4-v1
usage: prog.py [-h] [-v] square
prog.py: error: unrecognized arguments: 1
$python prog.py 4-h
usage: prog.py [-h] [-v] square
positional arguments:
square display a square of a given number
(continuesonnextpage)
8
(continuedfrompreviouspage)
options:
-h, --help show this help message and exit
-v, --verbosity increase output verbosity
$python prog.py 4-vvv
16
•Yes,it’snowmoreofaflag(similarto action="store_true" )inthepreviousversionofourscript. That
shouldexplainthecomplaint.
•Italsobehavessimilarto“store_true”action.
•Nowhere’sademonstrationofwhatthe“count”actiongives. You’veprobablyseenthissortofusagebefore.
•Andifyoudon’tspecifythe -vflag,thatflagisconsideredtohave Nonevalue.
•Asshouldbeexpected,specifyingthelongformoftheflag,weshouldgetthesameoutput.
•Sadly,ourhelpoutputisn’tveryinformativeonthenewabilityourscripthasacquired,butthatcanalwaysbe
fixedbyimprovingthedocumentationforourscript(e.g. viathe helpkeywordargument).
•Thatlastoutputexposesabuginourprogram.
Let’sfix:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ",type =int,
help ="display a square of a given number ")
parser .add_argument( "-v","--verbosity ", action ="count ",
help ="increase output verbosity ")
args =parser .parse_args()
answer =args .square **2
# bugfix: replace == with >=
ifargs .verbosity >=2:
print (f"the square of {args .square }equals {answer }")
elif args .verbosity >=1:
print (f"{args .square }^2 == {answer }")
else :
print (answer)
Andthisiswhatitgives:
$python prog.py 4-vvv
the square of 4 equals 16
$python prog.py 4-vvvv
the square of 4 equals 16
$python prog.py 4
Traceback (most recent call last):
File "prog.py", line 11, in <module>
if args.verbosity >= 2:
TypeError: '>=' not supported between instances of 'NoneType' and 'int'
•Firstoutputwentwell, andfixesthebugwehadbefore. Thatis, wewantanyvalue>=2tobeasverboseas
possible.
•Thirdoutputnotsogood.
Let’sfixthatbug:
9
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "square ",type =int,
help ="display a square of a given number ")
parser .add_argument( "-v","--verbosity ", action ="count ", default =0,
help ="increase output verbosity ")
args =parser .parse_args()
answer =args .square **2
ifargs .verbosity >=2:
print (f"the square of {args .square }equals {answer }")
elif args .verbosity >=1:
print (f"{args .square }^2 == {answer }")
else :
print (answer)
We’vejustintroducedyetanotherkeyword, default. We’vesetitto 0inordertomakeitcomparabletotheother
intvalues. Rememberthatbydefault,ifanoptionalargumentisn’tspecified,itgetsthe Nonevalue,andthatcannot
becomparedtoanintvalue(hencethe TypeError exception).
And:
$python prog.py 4
16
You can go quite far just with what we’ve learned so far, and we have only scratched the surface. The argparse
moduleisverypowerful,andwe’llexploreabitmoreofitbeforeweendthistutorial.
6Getting a little more advanced
Whatifwewantedtoexpandourtinyprogramtoperformotherpowers,notjustsquares:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "x",type =int, help ="the base ")
parser .add_argument( "y",type =int, help ="the exponent ")
parser .add_argument( "-v","--verbosity ", action ="count ", default =0)
args =parser .parse_args()
answer =args .x**args .y
ifargs .verbosity >=2:
print (f"{args .x}to the power {args .y}equals {answer }")
elif args .verbosity >=1:
print (f"{args .x}^{args .y}=={answer }")
else :
print (answer)
Output:
$python prog.py
usage: prog.py [-h] [-v] x y
prog.py: error: the following arguments are required: x, y
$python prog.py -h
usage: prog.py [-h] [-v] x y
positional arguments:
x the base
y the exponent
(continuesonnextpage)
10
(continuedfrompreviouspage)
options:
-h, --help show this help message and exit
-v, --verbosity
$python prog.py 42-v
4^2 == 16
Notice that so far we’ve been using verbosity level to changethe text that gets displayed. The following example
insteadusesverbosityleveltodisplay moretextinstead:
import argparse
parser =argparse .ArgumentParser()
parser .add_argument( "x",type =int, help ="the base ")
parser .add_argument( "y",type =int, help ="the exponent ")
parser .add_argument( "-v","--verbosity ", action ="count ", default =0)
args =parser .parse_args()
answer =args .x**args .y
ifargs .verbosity >=2:
print (f"Running '{__file__ }'")
ifargs .verbosity >=1:
print (f"{args .x}^{args .y}==", end ="")
print (answer)
Output:
$python prog.py 42
16
$python prog.py 42-v
4^2 == 16
$python prog.py 42-vv
Running 'prog.py'
4^2 == 16
6.1Specifying ambiguous arguments
When there is ambiguity in deciding whether an argument is positional or for an argument, --can be used to tell
parse_args() thateverythingafterthatisapositionalargument:
>>> parser =argparse .ArgumentParser(prog ='PROG ')
>>> parser .add_argument( '-n', nargs ='+')
>>> parser .add_argument( 'args ', nargs ='*')
>>> # ambiguous, so parse_args assumes it's an option
>>> parser .parse_args([ '-f'])
usage: PROG [-h] [-n N [N ...]] [args ...]
PROG: error: unrecognized arguments: -f
>>> parser .parse_args([ '--','-f'])
Namespace(args=['-f'], n=None)
>>> # ambiguous, so the -n option greedily accepts arguments
>>> parser .parse_args([ '-n','1','2','3'])
Namespace(args=[], n=['1', '2', '3'])
>>> parser .parse_args([ '-n','1','--','2','3'])
Namespace(args=['2', '3'], n=['1'])
11
6.2Conflicting options
So far, we have been working with two methods of an argparse.ArgumentParser instance. Let’s introduce a
thirdone, add_mutually_exclusive_group() . Itallowsforustospecifyoptionsthatconflictwitheachother.
Let’salsochangetherestoftheprogramsothatthenewfunctionalitymakesmoresense: we’llintroducethe --quiet
option,whichwillbetheoppositeofthe --verbose one:
import argparse
parser =argparse .ArgumentParser()
group =parser .add_mutually_exclusive_group()
group .add_argument( "-v","--verbose ", action ="store_true ")
group .add_argument( "-q","--quiet ", action ="store_true ")
parser .add_argument( "x",type =int, help ="the base ")
parser .add_argument( "y",type =int, help ="the exponent ")
args =parser .parse_args()
answer =args .x**args .y
ifargs .quiet:
print (answer)
elif args .verbose:
print (f"{args .x}to the power {args .y}equals {answer }")
else :
print (f"{args .x}^{args .y}=={answer }")
Our program is now simpler, and we’ve lost some functionality for the sake of demonstration. Anyways, here’s the
output:
$python prog.py 42
4^2 == 16
$python prog.py 42-q
16
$python prog.py 42-v
4 to the power 2 equals 16
$python prog.py 42-vq
usage: prog.py [-h] [-v | -q] x y
prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose
$python prog.py 42-v--quiet
usage: prog.py [-h] [-v | -q] x y
prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose
That should be easy to follow. I’ve added that last output so you can see the sort of flexibility you get, i.e. mixing
longformoptionswithshortformones.
Beforeweconclude,youprobablywanttotellyourusersthemainpurposeofyourprogram,justincasetheydon’t
know:
import argparse
parser =argparse .ArgumentParser(description ="calculate X to the power of Y ")
group =parser .add_mutually_exclusive_group()
group .add_argument( "-v","--verbose ", action ="store_true ")
group .add_argument( "-q","--quiet ", action ="store_true ")
parser .add_argument( "x",type =int, help ="the base ")
parser .add_argument( "y",type =int, help ="the exponent ")
args =parser .parse_args()
answer =args .x**args .y
ifargs .quiet:
(continuesonnextpage)
12
(continuedfrompreviouspage)
print (answer)
elif args .verbose:
print (f"{args .x}to the power {args .y}equals {answer }")
else :
print (f"{args .x}^{args .y}=={answer }")
Note that slight difference in the usage text. Note the [-v | -q] , which tells us that we can either use -vor-q,
butnotbothatthesametime:
$python prog.py --help
usage: prog.py [-h] [-v | -q] x y
calculate X to the power of Y
positional arguments:
x the base
y the exponent
options:
-h, --help show this help message and exit
-v, --verbose
-q, --quiet
7How to translate the argparse output
The output of the argparse module such as its help text and error messages are all made translatable using the
gettextmodule. Thisallowsapplicationstoeasilylocalizemessagesproducedby argparse . Seealsoi18n-howto.
Forinstance,inthis argparse output:
$python prog.py --help
usage: prog.py [-h] [-v | -q] x y
calculate X to the power of Y
positional arguments:
x the base
y the exponent
options:
-h, --help show this help message and exit
-v, --verbose
-q, --quiet
The strings usage:,positional arguments: ,options: andshow this help message and exit are
alltranslatable.
In order to translate these strings, they must first be extracted into a .pofile. For example, using Babel, run this
command:
$pybabel extract -omessages.po /usr/lib/python3.12/argparse.py
This command will extract all translatable strings from the argparse module and output them into a file named
messages.po . ThiscommandassumesthatyourPythoninstallationisin /usr/lib .
Youcanfindoutthelocationofthe argparse moduleonyoursystemusingthisscript:
13
import argparse
print (argparse .__file__ )
Oncethemessagesinthe .pofilearetranslatedandthetranslationsareinstalledusing gettext,argparse willbe
abletodisplaythetranslatedmessages.
Totranslateyourownstringsinthe argparse output,use gettext.
8Custom type converters
Theargparse moduleallowsyoutospecifycustomtypeconvertersforyourcommand-linearguments. Thisallows
you to modify user input before it’s stored in the argparse.Namespace . This can be useful when you need to
pre-processtheinputbeforeitisusedinyourprogram.
Whenusingacustomtypeconverter,youcanuseanycallablethattakesasinglestringargument(theargumentvalue)
andreturnstheconvertedvalue. However,ifyouneedtohandlemorecomplexscenarios,youcanuseacustomaction
classwiththe actionparameterinstead.
Forexample,let’ssayyouwanttohandleargumentswithdifferentprefixesandprocessthemaccordingly:
import argparse
parser =argparse .ArgumentParser(prefix_chars ='-+')
parser .add_argument( '-a', metavar ='<value> ', action ='append ',
type =lambda x: ( '-', x))
parser .add_argument( '+a', metavar ='<value> ', action ='append ',
type =lambda x: ( '+', x))
args =parser .parse_args()
print (args)
Output:
$python prog.py -avalue1 +avalue2
Namespace(a=[('-', 'value1'), ('+', 'value2')])
Inthisexample,we:
•Createdaparserwithcustomprefixcharactersusingthe prefix_chars parameter.
•Definedtwoarguments, -aand+a,whichusedthe typeparametertocreatecustomtypeconverterstostore
thevalueinatuplewiththeprefix.
Withoutthecustomtypeconverters,theargumentswouldhavetreatedthe -aand+aasthesameargument,which
wouldhavebeenundesirable. Byusingcustomtypeconverters,wewereabletodifferentiatebetweenthetwoargu-
ments.
9Conclusion
Theargparse module offers a lot more than shown here. Its docs are quite detailed and thorough, and full of
examples. Havinggonethroughthistutorial,youshouldeasilydigestthemwithoutfeelingoverwhelmed.
14
