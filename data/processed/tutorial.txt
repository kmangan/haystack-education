PythonTutorial
Release 3.13.0
GuidovanRossumandthePythondevelopmentteam
November15,2024
PythonSoftwareFoundation
Email: docs@python.org

CONTENTS
1 WhettingYourAppetite 3
2 UsingthePythonInterpreter 5
2.1 InvokingtheInterpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.1.1 ArgumentPassing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.1.2 InteractiveMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.2 TheInterpreterandItsEnvironment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
2.2.1 SourceCodeEncoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3 An InformalIntroductionto Python 7
3.1 UsingPythonasaCalculator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.1.1 Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.1.2 Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
3.1.3 Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.2 FirstStepsTowardsProgramming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
4 MoreControlFlowTools 17
4.1 ifStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
4.2 forStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
4.3 The range()Function. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
4.4 breakandcontinue Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
4.5 elseClausesonLoops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
4.6 passStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
4.7 matchStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
4.8 DefiningFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
4.9 MoreonDefiningFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.9.1 DefaultArgumentValues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.9.2 KeywordArguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
4.9.3 Specialparameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
4.9.4 ArbitraryArgumentLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
4.9.5 UnpackingArgumentLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
4.9.6 LambdaExpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
4.9.7 DocumentationStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
4.9.8 FunctionAnnotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
4.10 Intermezzo: CodingStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
5 DataStructures 33
5.1 MoreonLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
5.1.1 UsingListsasStacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
5.1.2 UsingListsasQueues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
5.1.3 ListComprehensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
5.1.4 NestedListComprehensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
5.2 The delstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
5.3 TuplesandSequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
5.4 Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
i
5.5 Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39
5.6 LoopingTechniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
5.7 MoreonConditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
5.8 ComparingSequencesandOtherTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
6 Modules 43
6.1 MoreonModules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
6.1.1 Executingmodulesasscripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
6.1.2 TheModuleSearchPath . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
6.1.3 “Compiled”Pythonfiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
6.2 StandardModules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
6.3 The dir()Function. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
6.4 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
6.4.1 Importing*FromaPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
6.4.2 Intra-packageReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
6.4.3 PackagesinMultipleDirectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
7 InputandOutput 53
7.1 FancierOutputFormatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
7.1.1 FormattedStringLiterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
7.1.2 TheStringformat()Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
7.1.3 ManualStringFormatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
7.1.4 Oldstringformatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
7.2 ReadingandWritingFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
7.2.1 MethodsofFileObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
7.2.2 Savingstructureddatawith json. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
8 ErrorsandExceptions 61
8.1 SyntaxErrors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
8.2 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
8.3 HandlingExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
8.4 RaisingExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
8.5 ExceptionChaining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
8.6 User-definedExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
8.7 DefiningClean-upActions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
8.8 PredefinedClean-upActions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68
8.9 RaisingandHandlingMultipleUnrelatedExceptions . . . . . . . . . . . . . . . . . . . . . . . . 68
8.10 EnrichingExceptionswithNotes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
9 Classes 73
9.1 AWordAboutNamesandObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
9.2 PythonScopesandNamespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
9.2.1 ScopesandNamespacesExample . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
9.3 AFirstLookatClasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
9.3.1 ClassDefinitionSyntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
9.3.2 ClassObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
9.3.3 InstanceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
9.3.4 MethodObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
9.3.5 ClassandInstanceVariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
9.4 RandomRemarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
9.5 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80
9.5.1 MultipleInheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
9.6 PrivateVariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
9.7 OddsandEnds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
9.8 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
9.9 Generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
9.10 GeneratorExpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
10 BriefTouroftheStandardLibrary 87
ii
10.1 OperatingSystemInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
10.2 FileWildcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
10.3 CommandLineArguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
10.4 ErrorOutputRedirectionandProgramTermination . . . . . . . . . . . . . . . . . . . . . . . . . 88
10.5 StringPatternMatching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
10.6 Mathematics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
10.7 InternetAccess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
10.8 DatesandTimes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
10.9 DataCompression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
10.10 PerformanceMeasurement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
10.11 QualityControl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
10.12 BatteriesIncluded . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
11 BriefTouroftheStandardLibrary— PartII 93
11.1 OutputFormatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
11.2 Templating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
11.3 WorkingwithBinaryDataRecordLayouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
11.4 Multi-threading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
11.5 Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
11.6 WeakReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
11.7 ToolsforWorkingwithLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
11.8 DecimalFloating-PointArithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
12 VirtualEnvironmentsandPackages 101
12.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
12.2 CreatingVirtualEnvironments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
12.3 ManagingPackageswithpip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
13 WhatNow? 105
14 InteractiveInputEditingandHistorySubstitution 107
14.1 TabCompletionandHistoryEditing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
14.2 AlternativestotheInteractiveInterpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
15 Floating-PointArithmetic: IssuesandLimitations 109
15.1 RepresentationError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
16 Appendix 115
16.1 InteractiveMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
16.1.1 ErrorHandling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
16.1.2 ExecutablePythonScripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
16.1.3 TheInteractiveStartupFile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
16.1.4 TheCustomizationModules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
A Glossary 117
B Aboutthesedocuments 135
B.1 ContributorstothePythonDocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
C HistoryandLicense 137
C.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
C.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 138
C.2.1 PSFLICENSEAGREEMENTFORPYTHON3.13.0 . . . . . . . . . . . . . . . . . . . 138
C.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 139
C.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 139
C.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 140
C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCUMEN-
TATION. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
C.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 141
C.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
iii
C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
C.3.4 Cookiemanagement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
C.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
C.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
C.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
C.3.11 strtodanddtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
C.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
C.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
D Copyright 157
Index 159
iv
PythonTutorial,Release3.13.0
Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple
buteffectiveapproachtoobject-orientedprogramming. Python’selegantsyntaxanddynamictyping, togetherwith
its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on
mostplatforms.
ThePythoninterpreterandtheextensivestandardlibraryarefreelyavailableinsourceorbinaryformforallmajor
platforms from the Python web site, https://www.python.org/ , and may be freely distributed. The same site also
containsdistributionsofandpointerstomanyfreethirdpartyPythonmodules, programsandtools, andadditional
documentation.
The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other
languagescallablefromC).Pythonisalsosuitableasanextensionlanguageforcustomizableapplications.
ThistutorialintroducesthereaderinformallytothebasicconceptsandfeaturesofthePythonlanguageandsystem. It
helpstohaveaPythoninterpreterhandyforhands-onexperience,butallexamplesareself-contained,sothetutorial
canbereadoff-lineaswell.
Foradescriptionofstandardobjectsandmodules,seelibrary-index. reference-indexgivesamoreformaldefinition
ofthelanguage. TowriteextensionsinCorC++,readextending-indexandc-api-index. Therearealsoseveralbooks
coveringPythonindepth.
This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used
feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the
language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and
youwillbereadytolearnmoreaboutthevariousPythonlibrarymodulesdescribedinlibrary-index.
TheGlossaryisalsoworthgoingthrough.
CONTENTS 1
PythonTutorial,Release3.13.0
2 CONTENTS
CHAPTER
ONE
WHETTINGYOURAPPETITE
Ifyoudomuchworkoncomputers,eventuallyyoufindthatthere’ssometaskyou’dliketoautomate. Forexample,
you may wish to perform a search-and-replace over a large number of text files, or rename and rearrange a bunch
of photo files in a complicated way. Perhaps you’d like to write a small custom database, or a specialized GUI
application,orasimplegame.
Ifyou’reaprofessionalsoftwaredeveloper,youmayhavetoworkwithseveralC/C++/Javalibrariesbutfindtheusual
write/compile/test/re-compilecycleistooslow. Perhapsyou’rewritingatestsuiteforsuchalibraryandfindwriting
the testing code a tedious task. Or maybe you’ve written a program that could use an extension language, and you
don’twanttodesignandimplementawholenewlanguageforyourapplication.
Pythonisjustthelanguageforyou.
YoucouldwriteaUnixshellscriptorWindowsbatchfilesforsomeofthesetasks,butshellscriptsarebestatmoving
around files and changing text data, not well-suited for GUI applications or games. You could write a C/C++/Java
program,butitcantakealotofdevelopmenttimetogetevenafirst-draftprogram. Pythonissimplertouse,available
onWindows,macOS,andUnixoperatingsystems,andwillhelpyougetthejobdonemorequickly.
Python is simple to use, but it is a real programming language, offering much more structure and support for large
programsthanshellscriptsorbatchfilescanoffer. Ontheotherhand,Pythonalsooffersmuchmoreerrorchecking
thanC,and,beinga very-high-level language ,ithashigh-leveldatatypesbuiltin,suchasflexiblearraysanddictio-
naries. BecauseofitsmoregeneraldatatypesPythonisapplicabletoamuchlargerproblemdomainthanAwkor
evenPerl,yetmanythingsareatleastaseasyinPythonasinthoselanguages.
PythonallowsyoutosplityourprogramintomodulesthatcanbereusedinotherPythonprograms. Itcomeswitha
largecollectionofstandardmodulesthatyoucanuseasthebasisofyourprograms—orasexamplestostartlearning
toprograminPython. SomeofthesemodulesprovidethingslikefileI/O,systemcalls,sockets,andeveninterfaces
tographicaluserinterfacetoolkitslikeTk.
Python is an interpreted language, which can save you considerable time during program development because no
compilationandlinkingisnecessary. Theinterpretercanbeusedinteractively,whichmakesiteasytoexperimentwith
featuresofthelanguage,towritethrow-awayprograms,ortotestfunctionsduringbottom-upprogramdevelopment.
Itisalsoahandydeskcalculator.
Python enables programs to be written compactly and readably. Programs written in Python are typically much
shorterthanequivalentC,C++,orJavaprograms,forseveralreasons:
•thehigh-leveldatatypesallowyoutoexpresscomplexoperationsinasinglestatement;
•statementgroupingisdonebyindentationinsteadofbeginningandendingbrackets;
•novariableorargumentdeclarationsarenecessary.
Python is extensible: if you know how to program in C it is easy to add a new built-in function or module to the
interpreter,eithertoperformcriticaloperationsatmaximumspeed,ortolinkPythonprogramstolibrariesthatmay
only be available in binary form (such as a vendor-specific graphics library). Once you are really hooked, you can
linkthePythoninterpreterintoanapplicationwritteninCanduseitasanextensionorcommandlanguageforthat
application.
Bytheway,thelanguageisnamedaftertheBBCshow“MontyPython’sFlyingCircus”andhasnothingtodowith
reptiles. MakingreferencestoMontyPythonskitsindocumentationisnotonlyallowed,itisencouraged!
3
PythonTutorial,Release3.13.0
NowthatyouareallexcitedaboutPython,you’llwanttoexamineitinsomemoredetail. Sincethebestwaytolearn
alanguageistouseit,thetutorialinvitesyoutoplaywiththePythoninterpreterasyouread.
In the next chapter, the mechanics of using the interpreter are explained. This is rather mundane information, but
essentialfortryingouttheexamplesshownlater.
The rest of the tutorial introduces various features of the Python language and system through examples, begin-
ning with simple expressions, statements and data types, through functions and modules, and finally touching upon
advancedconceptslikeexceptionsanduser-definedclasses.
4 Chapter1. WhettingYourAppetite
CHAPTER
TWO
USINGTHEPYTHONINTERPRETER
2.1InvokingtheInterpreter
ThePythoninterpreterisusuallyinstalledas /usr/local/bin/python3.13 onthosemachineswhereitisavail-
able;putting /usr/local/bin inyourUnixshell’ssearchpathmakesitpossibletostartitbytypingthecommand:
python3.13
to the shell.1Since the choice of the directory where the interpreter lives is an installation option, other places are
possible; check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular
alternativelocation.)
OnWindowsmachineswhereyouhaveinstalledPythonfromtheMicrosoftStore,the python3.13 commandwill
beavailable. Ifyouhavethepy.exelauncherinstalled,youcanusethe pycommand. Seesetting-envvarsforother
waystolaunchPython.
Typinganend-of-filecharacter( Control-D onUnix, Control-Z onWindows)attheprimarypromptcausesthe
interpreter to exit with a zero exit status. If that doesn’t work, you can exit the interpreter by typing the following
command: quit().
Theinterpreter’sline-editingfeaturesincludeinteractiveediting,historysubstitutionandcodecompletiononsystems
thatsupportthe GNUReadline library. Perhapsthequickestchecktoseewhethercommandlineeditingissupported
istyping Control-P tothefirstPythonpromptyouget. Ifitbeeps,youhavecommandlineediting;seeAppendix
Interactive Input Editing and History Substitution foranintroductiontothekeys. Ifnothingappearstohappen,orif
^Pis echoed, command line editing isn’t available; you’ll only be able to use backspace to remove characters from
thecurrentline.
TheinterpreteroperatessomewhatliketheUnixshell: whencalledwithstandardinputconnectedtoattydevice,it
readsandexecutescommandsinteractively;whencalledwithafilenameargumentorwithafileasstandardinput,it
readsandexecutesa scriptfromthatfile.
Asecondwayofstartingtheinterpreteris python -c command [arg] ... ,whichexecutesthestatement(s)in
command,analogoustotheshell’s -coption. SincePythonstatementsoftencontainspacesorothercharactersthat
arespecialtotheshell,itisusuallyadvisedtoquote commandinitsentirety.
Some Python modules are also useful as scripts. These can be invoked using python -m module [arg] ... ,
whichexecutesthesourcefilefor moduleasifyouhadspelledoutitsfullnameonthecommandline.
Whenascriptfileisused,itissometimesusefultobeabletorunthescriptandenterinteractivemodeafterwards.
Thiscanbedonebypassing -ibeforethescript.
Allcommandlineoptionsaredescribedinusing-on-general.
1OnUnix,thePython3.xinterpreterisbydefaultnotinstalledwiththeexecutablenamed python,sothatitdoesnotconflictwithasimul-
taneouslyinstalledPython2.xexecutable.
5
PythonTutorial,Release3.13.0
2.1.1ArgumentPassing
Whenknowntotheinterpreter,thescriptnameandadditionalargumentsthereafterareturnedintoalistofstrings
andassignedtothe argvvariableinthe sysmodule. Youcanaccessthislistbyexecuting import sys . Thelength
ofthelistisatleastone; whennoscriptandnoargumentsaregiven, sys.argv[0] isanemptystring. Whenthe
script name is given as '-'(meaning standard input), sys.argv[0] is set to '-'. When -ccommandis used,
sys.argv[0] issetto '-c'. When -mmoduleisused, sys.argv[0] issettothefullnameofthelocatedmodule.
Optionsfoundafter -ccommandor-mmodulearenotconsumedbythePythoninterpreter’soptionprocessingbut
leftin sys.argv forthecommandormoduletohandle.
2.1.2InteractiveMode
When commands are read from a tty, the interpreter is said to be in interactive mode . In this mode it prompts for
thenextcommandwiththe primary prompt ,usuallythreegreater-thansigns( >>>);forcontinuationlinesitprompts
withthe secondary prompt ,bydefaultthreedots( ...). Theinterpreterprintsawelcomemessagestatingitsversion
numberandacopyrightnoticebeforeprintingthefirstprompt:
$python3.13
Python 3.13 (default, April 4 2023, 09:25:04)
[GCC 10.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
Continuationlinesareneededwhenenteringamulti-lineconstruct. Asanexample,takealookatthis ifstatement:
>>> the_world_is_flat =True
>>> ifthe_world_is_flat:
... print ("Be careful not to fall off! ")
...
Be careful not to fall off!
Formoreoninteractivemode,see Interactive Mode .
2.2TheInterpreterandItsEnvironment
2.2.1SourceCodeEncoding
Bydefault, PythonsourcefilesaretreatedasencodedinUTF-8. Inthatencoding, charactersofmostlanguagesin
the world can be used simultaneously in string literals, identifiers and comments — although the standard library
only uses ASCII characters for identifiers, a convention that any portable code should follow. To display all these
characters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the
charactersinthefile.
Todeclareanencodingotherthanthedefaultone,aspecialcommentlineshouldbeaddedasthe firstlineofthefile.
Thesyntaxisasfollows:
# -*- coding: encoding -*-
where encodingisoneofthevalid codecssupportedbyPython.
Forexample,todeclarethatWindows-1252encodingistobeused,thefirstlineofyoursourcecodefileshouldbe:
# -*- coding: cp1252 -*-
Oneexceptiontothe first lineruleiswhenthesourcecodestartswitha UNIX “shebang” line . Inthiscase,theencoding
declarationshouldbeaddedasthesecondlineofthefile. Forexample:
#!/usr/bin/env python3
# -*- coding: cp1252 -*-
6 Chapter2. UsingthePythonInterpreter
CHAPTER
THREE
ANINFORMALINTRODUCTIONTOPYTHON
In the following examples, input and output are distinguished by the presence or absence of prompts ( »>and…):
torepeattheexample,youmusttypeeverythingaftertheprompt,whenthepromptappears;linesthatdonotbegin
withapromptareoutputfromtheinterpreter. Notethatasecondarypromptonalinebyitselfinanexamplemeans
youmusttypeablankline;thisisusedtoendamulti-linecommand.
Manyoftheexamplesinthismanual, eventhoseenteredattheinteractiveprompt, includecomments. Comments
inPythonstartwiththehashcharacter, #,andextendtotheendofthephysicalline. Acommentmayappearatthe
startofalineorfollowingwhitespaceorcode,butnotwithinastringliteral. Ahashcharacterwithinastringliteral
isjustahashcharacter. SincecommentsaretoclarifycodeandarenotinterpretedbyPython,theymaybeomitted
whentypinginexamples.
Someexamples:
# this is the first comment
spam =1# and this is the second comment
# ... and now a third!
text ="# This is not a comment because it 's inside quotes. "
3.1UsingPythonasaCalculator
Let’s try some simple Python commands. Start the interpreter and wait for the primary prompt, >>>. (It shouldn’t
takelong.)
3.1.1Numbers
The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression
syntax is straightforward: the operators +,-,*and/can be used to perform arithmetic; parentheses ( ()) can be
usedforgrouping. Forexample:
>>> 2+2
4
>>> 50-5*6
20
>>> (50-5*6)/4
5.0
>>> 8/5# division always returns a floating-point number
1.6
Theintegernumbers(e.g. 2,4,20)havetype int,theoneswithafractionalpart(e.g. 5.0,1.6)havetype float.
Wewillseemoreaboutnumerictypeslaterinthetutorial.
Division ( /) always returns a float. To do floor division and get an integer result you can use the //operator; to
calculatetheremainderyoucanuse %:
7
PythonTutorial,Release3.13.0
>>> 17/3# classic division returns a float
5.666666666666667
>>>
>>> 17//3# floor division discards the fractional part
5
>>> 17%3# the % operator returns the remainder of the division
2
>>> 5*3+2# floored quotient * divisor + remainder
17
WithPython,itispossibletousethe **operatortocalculatepowers1:
>>> 5**2# 5 squared
25
>>> 2**7# 2 to the power of 7
128
Theequalsign( =)isusedtoassignavaluetoavariable. Afterwards,noresultisdisplayedbeforethenextinteractive
prompt:
>>> width =20
>>> height =5*9
>>> width *height
900
Ifavariableisnot“defined”(assignedavalue),tryingtouseitwillgiveyouanerror:
>>> n# try to access an undefined variable
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
NameError : name 'n' is not defined
There is full support for floating point; operators with mixed type operands convert the integer operand to floating
point:
>>> 4*3.75 -1
14.0
In interactive mode, the last printed expression is assigned to the variable _. This means that when you are using
Pythonasadeskcalculator,itissomewhateasiertocontinuecalculations,forexample:
>>> tax =12.5 /100
>>> price =100.50
>>> price *tax
12.5625
>>> price +_
113.0625
>>> round (_, 2)
113.06
Thisvariableshouldbetreatedasread-onlybytheuser. Don’texplicitlyassignavaluetoit—youwouldcreatean
independentlocalvariablewiththesamenamemaskingthebuilt-invariablewithitsmagicbehavior.
Inadditionto intandfloat,Pythonsupportsothertypesofnumbers,suchas DecimalandFraction . Python
alsohasbuilt-insupportforcomplexnumbers,andusesthe jorJsuffixtoindicatetheimaginarypart(e.g. 3+5j).
1Since **hashigherprecedencethan -,-3**2willbeinterpretedas -(3**2)andthusresultin -9. Toavoidthisandget 9,youcanuse
(-3)**2.
8 Chapter3. AnInformalIntroductiontoPython
PythonTutorial,Release3.13.0
3.1.2Text
Pythoncanmanipulatetext(representedbytype str,so-called“strings”)aswellasnumbers. Thisincludescharacters
“!”,words“ rabbit”,names“ Paris”,sentences“ Got your back. ”,etc. “ Yay! :)”. Theycanbeenclosedin
singlequotes( '...')ordoublequotes( "...")withthesameresult2.
>>> 'spam eggs '# single quotes
'spam eggs'
>>> "Paris rabbit got your back :)! Yay! "# double quotes
'Paris rabbit got your back :)! Yay!'
>>> '1975 '# digits and numerals enclosed in quotes are also strings
'1975'
Toquoteaquote,weneedto“escape”it,byprecedingitwith \. Alternatively,wecanusetheothertypeofquotation
marks:
>>> 'doesn \'t'# use \' to escape the single quote...
"doesn't"
>>> "doesn 't"# ...or use double quotes instead
"doesn't"
>>> '"Yes, "they said. '
'"Yes," they said.'
>>> "\"Yes, \"they said. "
'"Yes," they said.'
>>> '"Isn\'t,"they said. '
'"Isn\'t," they said.'
InthePythonshell,thestringdefinitionandoutputstringcanlookdifferent. The print()functionproducesamore
readableoutput,byomittingtheenclosingquotesandbyprintingescapedandspecialcharacters:
>>> s='First line. \nSecond line. '# \n means newline
>>> s# without print(), special characters are included in the string
'First line.\nSecond line.'
>>> print (s) # with print(), special characters are interpreted, so \n produces ␣
,→new line
First line.
Second line.
Ifyoudon’twantcharactersprefacedby \tobeinterpretedasspecialcharacters,youcanuse raw strings byadding
anrbeforethefirstquote:
>>> print ('C:\some \name')# here \n means newline!
C:\some
ame
>>> print (r'C:\some \name ')# note the r before the quote
C:\some\name
Thereisonesubtleaspecttorawstrings: arawstringmaynotendinanoddnumberof \characters; seetheFAQ
entryformoreinformationandworkarounds.
String literals can span multiple lines. One way is using triple-quotes: """...""" or'''...''' . End of lines
are automatically included in the string, but it’s possible to prevent this by adding a \at the end of the line. In the
followingexample,theinitialnewlineisnotincluded:
>>> print ("""\
... Usage: thingy [OPTIONS]
... -h Display this usage message
(continuesonnextpage)
2Unlike other languages, special characters such as \nhave the same meaning with both single ( '...') and double ( "...") quotes. The
onlydifferencebetweenthetwoisthatwithinsinglequotesyoudon’tneedtoescape "(butyouhavetoescape \')andviceversa.
3.1. UsingPythonasaCalculator 9
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
... -H hostname Hostname to connect to
... """)
Usage: thingy [OPTIONS]
-h Display this usage message
-H hostname Hostname to connect to
>>>
Stringscanbeconcatenated(gluedtogether)withthe +operator,andrepeatedwith *:
>>> # 3 times 'un', followed by 'ium'
>>> 3*'un'+'ium'
'unununium'
Twoormore string literals (i.e. theonesenclosedbetweenquotes)nexttoeachotherareautomaticallyconcatenated.
>>> 'Py''thon '
'Python'
Thisfeatureisparticularlyusefulwhenyouwanttobreaklongstrings:
>>> text =('Put several strings within parentheses '
... 'to have them joined together. ')
>>> text
'Put several strings within parentheses to have them joined together.'
Thisonlyworkswithtwoliteralsthough,notwithvariablesorexpressions:
>>> prefix ='Py'
>>> prefix 'thon '# can't concatenate a variable and a string literal
File "<stdin>" , line 1
prefix 'thon '
^^^^^^
SyntaxError : invalid syntax
>>> ('un'*3)'ium'
File "<stdin>" , line 1
('un'*3)'ium'
^^^^^
SyntaxError : invalid syntax
Ifyouwanttoconcatenatevariablesoravariableandaliteral,use +:
>>> prefix +'thon '
'Python'
Stringscanbe indexed(subscripted),withthefirstcharacterhavingindex0. Thereisnoseparatecharactertype; a
characterissimplyastringofsizeone:
>>> word ='Python '
>>> word[ 0]# character in position 0
'P'
>>> word[ 5]# character in position 5
'n'
Indicesmayalsobenegativenumbers,tostartcountingfromtheright:
>>> word[ -1]# last character
'n'
(continuesonnextpage)
10 Chapter3. AnInformalIntroductiontoPython
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
>>> word[ -2]# second-last character
'o'
>>> word[ -6]
'P'
Notethatsince-0isthesameas0,negativeindicesstartfrom-1.
Inadditiontoindexing, slicingisalsosupported. Whileindexingisusedtoobtainindividualcharacters, slicingallows
youtoobtainasubstring:
>>> word[ 0:2]# characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[ 2:5]# characters from position 2 (included) to 5 (excluded)
'tho'
Sliceindiceshaveusefuldefaults;anomittedfirstindexdefaultstozero,anomittedsecondindexdefaultstothesize
ofthestringbeingsliced.
>>> word[: 2] # character from the beginning to position 2 (excluded)
'Py'
>>> word[ 4:] # characters from position 4 (included) to the end
'on'
>>> word[ -2:] # characters from the second-last (included) to the end
'on'
Notehowthestartisalwaysincluded,andtheendalwaysexcluded. Thismakessurethat s[:i] + s[i:] isalways
equalto s:
>>> word[: 2]+word[ 2:]
'Python'
>>> word[: 4]+word[ 4:]
'Python'
Onewaytorememberhowslicesworkistothinkoftheindicesaspointing betweencharacters,withtheleftedgeof
thefirstcharacternumbered0. Thentherightedgeofthelastcharacterofastringof ncharactershasindex n,for
example:
+---+---+---+---+---+---+
|P|y|t|h|o|n|
+---+---+---+---+---+---+
0 1 2 3 4 5 6
-6-5-4-3-2-1
Thefirstrowofnumbersgivesthepositionoftheindices0…6inthestring;thesecondrowgivesthecorresponding
negativeindices. Theslicefrom itojconsistsofallcharactersbetweentheedgeslabeled iandj,respectively.
Fornon-negativeindices,thelengthofasliceisthedifferenceoftheindices,ifbotharewithinbounds. Forexample,
thelengthof word[1:3] is2.
Attemptingtouseanindexthatistoolargewillresultinanerror:
>>> word[ 42]# the word only has 6 characters
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
IndexError : string index out of range
However,outofrangesliceindexesarehandledgracefullywhenusedforslicing:
3.1. UsingPythonasaCalculator 11
PythonTutorial,Release3.13.0
>>> word[ 4:42]
'on'
>>> word[ 42:]
''
Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the string
resultsinanerror:
>>> word[ 0]='J'
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : 'str' object does not support item assignment
>>> word[ 2:]='py'
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : 'str' object does not support item assignment
Ifyouneedadifferentstring,youshouldcreateanewone:
>>> 'J'+word[ 1:]
'Jython'
>>> word[: 2]+'py'
'Pypy'
Thebuilt-infunction len()returnsthelengthofastring:
>>> s='supercalifragilisticexpialidocious '
>>> len(s)
34
µSeealso
textseq
Stringsareexamplesof sequence types ,andsupportthecommonoperationssupportedbysuchtypes.
string-methods
Stringssupportalargenumberofmethodsforbasictransformationsandsearching.
f-strings
Stringliteralsthathaveembeddedexpressions.
formatstrings
Informationaboutstringformattingwith str.format() .
old-string-formatting
Theoldformattingoperationsinvokedwhenstringsaretheleftoperandofthe %operatoraredescribedin
moredetailhere.
3.1.3Lists
Pythonknowsanumberof compound datatypes,usedtogrouptogetherothervalues. Themostversatileisthe list,
whichcanbewrittenasalistofcomma-separatedvalues(items)betweensquarebrackets. Listsmightcontainitems
ofdifferenttypes,butusuallytheitemsallhavethesametype.
>>> squares =[1,4,9,16,25]
>>> squares
[1, 4, 9, 16, 25]
Likestrings(andallotherbuilt-in sequencetypes),listscanbeindexedandsliced:
12 Chapter3. AnInformalIntroductiontoPython
PythonTutorial,Release3.13.0
>>> squares[ 0]# indexing returns the item
1
>>> squares[ -1]
25
>>> squares[ -3:] # slicing returns a new list
[9, 16, 25]
Listsalsosupportoperationslikeconcatenation:
>>> squares +[36,49,64,81,100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Unlikestrings,whichare immutable,listsarea mutabletype,i.e. itispossibletochangetheircontent:
>>> cubes =[1,8,27,65,125]# something's wrong here
>>> 4**3# the cube of 4 is 64, not 65!
64
>>> cubes[ 3]=64 # replace the wrong value
>>> cubes
[1, 8, 27, 64, 125]
You can also add new items at the end of the list, by using the list.append() method(we will see more about
methodslater):
>>> cubes .append( 216)# add the cube of 6
>>> cubes .append( 7**3)# and the cube of 7
>>> cubes
[1, 8, 27, 64, 125, 216, 343]
SimpleassignmentinPythonnevercopiesdata. Whenyouassignalisttoavariable,thevariablereferstothe existing
list. Anychangesyoumaketothelistthroughonevariablewillbeseenthroughallothervariablesthatrefertoit.:
>>> rgb =["Red","Green ","Blue "]
>>> rgba =rgb
>>> id(rgb) ==id(rgba) # they reference the same object
True
>>> rgba .append( "Alph ")
>>> rgb
["Red", "Green", "Blue", "Alph"]
Allsliceoperationsreturnanewlistcontainingtherequestedelements. Thismeansthatthefollowingslicereturnsa
shallowcopyofthelist:
>>> correct_rgba =rgba[:]
>>> correct_rgba[ -1]="Alpha "
>>> correct_rgba
["Red", "Green", "Blue", "Alpha"]
>>> rgba
["Red", "Green", "Blue", "Alph"]
Assignmenttoslicesisalsopossible,andthiscanevenchangethesizeofthelistorclearitentirely:
>>> letters =['a','b','c','d','e','f','g']
>>> letters
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> # replace some values
>>> letters[ 2:5]=['C','D','E']
>>> letters
(continuesonnextpage)
3.1. UsingPythonasaCalculator 13
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> # now remove them
>>> letters[ 2:5]=[]
>>> letters
['a', 'b', 'f', 'g']
>>> # clear the list by replacing all the elements with an empty list
>>> letters[:] =[]
>>> letters
[]
Thebuilt-infunction len()alsoappliestolists:
>>> letters =['a','b','c','d']
>>> len(letters)
4
Itispossibletonestlists(createlistscontainingotherlists),forexample:
>>> a=['a','b','c']
>>> n=[1,2,3]
>>> x=[a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'
3.2FirstStepsTowardsProgramming
Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can
writeaninitialsub-sequenceofthe Fibonacciseries asfollows:
>>> # Fibonacci series:
>>> # the sum of two elements defines the next
>>> a, b =0,1
>>> while a<10:
... print (a)
... a, b =b, a +b
...
0
1
1
2
3
5
8
Thisexampleintroducesseveralnewfeatures.
•Thefirstlinecontainsa multiple assignment : thevariables aandbsimultaneouslygetthenewvalues0and1.
Onthelastlinethisisusedagain,demonstratingthattheexpressionsontheright-handsideareallevaluated
firstbeforeanyoftheassignmentstakeplace. Theright-handsideexpressionsareevaluatedfromtheleftto
theright.
•Thewhileloopexecutesaslongasthecondition(here: a < 10)remainstrue. InPython,likeinC,anynon-
zerointegervalueistrue;zeroisfalse. Theconditionmayalsobeastringorlistvalue,infactanysequence;
14 Chapter3. AnInformalIntroductiontoPython
PythonTutorial,Release3.13.0
anything with a non-zero length is true, empty sequences are false. The test used in the example is a simple
comparison. ThestandardcomparisonoperatorsarewrittenthesameasinC: <(lessthan), >(greaterthan),
==(equalto), <=(lessthanorequalto), >=(greaterthanorequalto)and !=(notequalto).
•Thebodyoftheloopis indented: indentationisPython’swayofgroupingstatements. Attheinteractiveprompt,
youhavetotypeataborspace(s)foreachindentedline. Inpracticeyouwillpreparemorecomplicatedinput
forPythonwithatexteditor;alldecenttexteditorshaveanauto-indentfacility. Whenacompoundstatement
is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot
guess when you have typed the last line). Note that each line within a basic block must be indented by the
sameamount.
•Theprint()functionwritesthevalueoftheargument(s)itisgiven. Itdiffersfromjustwritingtheexpression
you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments,
floating-pointquantities,andstrings. Stringsareprintedwithoutquotes,andaspaceisinsertedbetweenitems,
soyoucanformatthingsnicely,likethis:
>>> i=256*256
>>> print ('The value of i is ', i)
The value of i is 65536
Thekeywordargument endcanbeusedtoavoidthenewlineaftertheoutput,orendtheoutputwithadifferent
string:
>>> a, b =0,1
>>> while a<1000 :
... print (a, end =',')
... a, b =b, a +b
...
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
3.2. FirstStepsTowardsProgramming 15
PythonTutorial,Release3.13.0
16 Chapter3. AnInformalIntroductiontoPython
CHAPTER
FOUR
MORECONTROLFLOWTOOLS
Aswellasthe whilestatementjustintroduced,Pythonusesafewmorethatwewillencounterinthischapter.
4.1ifStatements
Perhapsthemostwell-knownstatementtypeisthe ifstatement. Forexample:
>>> x=int(input ("Please enter an integer: "))
Please enter an integer: 42
>>> ifx<0:
... x=0
... print ('Negative changed to zero ')
... elif x==0:
... print ('Zero ')
... elif x==1:
... print ('Single ')
... else :
... print ('More ')
...
More
Therecanbezeroormore elifparts,andthe elsepartisoptional. Thekeyword‘ elif’isshortfor‘elseif’,andis
usefultoavoidexcessiveindentation. An if…elif…elif…sequenceisasubstituteforthe switchorcase
statementsfoundinotherlanguages.
If you’re comparing the same value to several constants, or checking for specific types or attributes, you may also
findthe matchstatementuseful. Formoredetailssee match Statements .
4.2forStatements
TheforstatementinPythondiffersabitfromwhatyoumaybeusedtoinCorPascal. Ratherthanalwaysiterating
overanarithmeticprogressionofnumbers(likeinPascal),orgivingtheusertheabilitytodefineboththeiteration
stepandhaltingcondition(asC),Python’s forstatementiteratesovertheitemsofanysequence(alistorastring),
intheorderthattheyappearinthesequence. Forexample(nopunintended):
>>> # Measure some strings:
>>> words =['cat','window ','defenestrate ']
>>> for winwords:
... print (w, len(w))
...
cat 3
window 6
defenestrate 12
Codethatmodifiesacollectionwhileiteratingoverthatsamecollectioncanbetrickytogetright. Instead,itisusually
morestraight-forwardtoloopoveracopyofthecollectionortocreateanewcollection:
17
PythonTutorial,Release3.13.0
# Create a sample collection
users ={'Hans ':'active ','Éléonore ':'inactive ','   ':'active '}
# Strategy: Iterate over a copy
for user, status inusers .copy() .items():
ifstatus =='inactive ':
del users[user]
# Strategy: Create a new collection
active_users ={}
for user, status inusers .items():
ifstatus =='active ':
active_users[user] =status
4.3The range()Function
If you do need to iterate over a sequence of numbers, the built-in function range()comes in handy. It generates
arithmeticprogressions:
>>> for iinrange (5):
... print (i)
...
0
1
2
3
4
Thegivenendpointisneverpartofthegeneratedsequence; range(10) generates10values, thelegalindicesfor
items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different
increment(evennegative;sometimesthisiscalledthe‘step’):
>>> list (range (5,10))
[5, 6, 7, 8, 9]
>>> list (range (0,10,3))
[0, 3, 6, 9]
>>> list (range (-10,-100,-30))
[-10, -40, -70]
Toiterateovertheindicesofasequence,youcancombine range()andlen()asfollows:
>>> a=['Mary ','had','a','little ','lamb ']
>>> for iinrange (len(a)):
... print (i, a[i])
...
0 Mary
1 had
2 a
3 little
4 lamb
Inmostsuchcases,however,itisconvenienttousethe enumerate() function,see Looping Techniques .
Astrangethinghappensifyoujustprintarange:
18 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
>>> range (10)
range(0, 10)
Inmanywaystheobjectreturnedby range()behavesasifitisalist,butinfactitisn’t. Itisanobjectwhichreturns
thesuccessiveitemsofthedesiredsequencewhenyouiterateoverit,butitdoesn’treallymakethelist,thussaving
space.
Wesaysuchanobjectis iterable,thatis,suitableasatargetforfunctionsandconstructsthatexpectsomethingfrom
whichtheycanobtainsuccessiveitemsuntilthesupplyisexhausted. Wehaveseenthatthe forstatementissucha
construct,whileanexampleofafunctionthattakesaniterableis sum():
>>> sum(range (4)) # 0 + 1 + 2 + 3
6
Laterwewillseemorefunctionsthatreturniterablesandtakeiterablesasarguments. Inchapter Data Structures ,we
willdiscussinmoredetailabout list().
4.4breakand continue Statements
Thebreakstatementbreaksoutoftheinnermostenclosing fororwhileloop:
>>> for ninrange (2,10):
... for xinrange (2, n):
... ifn%x==0:
... print (f"{n}equals {x}*{n//x}")
... break
...
4 equals 2 * 2
6 equals 2 * 3
8 equals 2 * 4
9 equals 3 * 3
Thecontinue statementcontinueswiththenextiterationoftheloop:
>>> for num inrange (2,10):
... ifnum %2==0:
... print (f"Found an even number {num}")
... continue
... print (f"Found an odd number {num}")
...
Found an even number 2
Found an odd number 3
Found an even number 4
Found an odd number 5
Found an even number 6
Found an odd number 7
Found an even number 8
Found an odd number 9
4.5elseClausesonLoops
In afororwhileloop the breakstatement may be paired with an elseclause. If the loop finishes without
executingthe break,theelseclauseexecutes.
Inaforloop,the elseclauseisexecutedaftertheloopfinishesitsfinaliteration,thatis,ifnobreakoccurred.
Inawhileloop,it’sexecutedaftertheloop’sconditionbecomesfalse.
4.4. breakand continue Statements 19
PythonTutorial,Release3.13.0
Ineitherkindofloop,the elseclauseisnotexecutediftheloopwasterminatedbya break. Ofcourse,otherways
ofendingtheloopearly,suchasa returnoraraisedexception,willalsoskipexecutionofthe elseclause.
Thisisexemplifiedinthefollowing forloop,whichsearchesforprimenumbers:
>>> for ninrange (2,10):
... for xinrange (2, n):
... ifn%x==0:
... print (n, 'equals ', x, '*', n//x)
... break
... else :
... # loop fell through without finding a factor
... print (n, 'is a prime number ')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
(Yes,thisisthecorrectcode. Lookclosely: the elseclausebelongstothe forloop,nottheifstatement.)
Onewaytothinkoftheelseclauseistoimagineitpairedwiththe ifinsidetheloop. Astheloopexecutes,itwill
runasequencelikeif/if/if/else. The ifisinsidetheloop, encounteredanumberoftimes. Iftheconditionisever
true,a breakwillhappen. Iftheconditionisnevertrue,the elseclauseoutsidetheloopwillexecute.
Whenusedwithaloop,the elseclausehasmoreincommonwiththe elseclauseofa trystatementthanitdoes
withthatof ifstatements: a trystatement’s elseclauserunswhennoexceptionoccurs,andaloop’s elseclause
runswhenno breakoccurs. Formoreonthe trystatementandexceptions,see Handling Exceptions .
4.6passStatements
Thepassstatementdoesnothing. Itcanbeusedwhenastatementisrequiredsyntacticallybuttheprogramrequires
noaction. Forexample:
>>> while True :
... pass # Busy-wait for keyboard interrupt (Ctrl+C)
...
Thisiscommonlyusedforcreatingminimalclasses:
>>> class MyEmptyClass :
... pass
...
Anotherplace passcanbeusedisasaplace-holderforafunctionorconditionalbodywhenyouareworkingonnew
code,allowingyoutokeepthinkingatamoreabstractlevel. The passissilentlyignored:
>>> def initlog (*args):
... pass # Remember to implement this!
...
20 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
4.7matchStatements
Amatchstatement takes an expression and compares its value to successive patterns given as one or more case
blocks. ThisissuperficiallysimilartoaswitchstatementinC,JavaorJavaScript(andmanyotherlanguages),butit’s
moresimilartopatternmatchinginlanguageslikeRustorHaskell. Onlythefirstpatternthatmatchesgetsexecuted
anditcanalsoextractcomponents(sequenceelementsorobjectattributes)fromthevalueintovariables.
Thesimplestformcomparesasubjectvalueagainstoneormoreliterals:
def http_error (status):
match status:
case 400:
return "Bad request "
case 404:
return "Not found "
case 418:
return "I'm a teapot "
case _:
return "Something 's wrong with the internet "
Notethelastblock: the“variablename” _actsasa wildcardandneverfailstomatch. Ifnocasematches,noneof
thebranchesisexecuted.
Youcancombineseveralliteralsinasinglepatternusing |(“or”):
case 401 |403 |404:
return "Not allowed "
Patternscanlooklikeunpackingassignments,andcanbeusedtobindvariables:
# point is an (x, y) tuple
match point:
case (0,0):
print ("Origin ")
case (0, y):
print (f"Y={y}")
case (x, 0):
print (f"X={x}")
case (x, y):
print (f"X={x}, Y= {y}")
case _:
raise ValueError ("Not a point ")
Studythatonecarefully! Thefirstpatternhastwoliterals,andcanbethoughtofasanextensionoftheliteralpattern
shownabove. Butthenexttwopatternscombinealiteralandavariable,andthevariable bindsavaluefromthesubject
(point). Thefourthpatterncapturestwovalues,whichmakesitconceptuallysimilartotheunpackingassignment
(x, y) = point .
Ifyouareusingclassestostructureyourdatayoucanusetheclassnamefollowedbyanargumentlistresemblinga
constructor,butwiththeabilitytocaptureattributesintovariables:
class Point :
def __init__ (self , x, y):
self .x=x
self .y=y
def where_is (point):
match point:
case Point(x =0, y=0):
(continuesonnextpage)
4.7. matchStatements 21
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
print ("Origin ")
case Point(x =0, y=y):
print (f"Y={y}")
case Point(x =x, y =0):
print (f"X={x}")
case Point():
print ("Somewhere else ")
case _:
print ("Not a point ")
Youcanusepositionalparameterswithsomebuiltinclassesthatprovideanorderingfortheirattributes(e.g. data-
classes). You can also define a specific position for attributes in patterns by setting the __match_args__ special
attributeinyourclasses. Ifit’ssetto(“x”,“y”),thefollowingpatternsareallequivalent(andallbindthe yattribute
tothe varvariable):
Point( 1, var)
Point( 1, y=var)
Point(x =1, y=var)
Point(y =var, x =1)
A recommended way to read patterns is to look at them as an extended form of what you would put on the left of
anassignment,tounderstandwhichvariableswouldbesettowhat. Onlythestandalonenames(like varabove)are
assigned to by a match statement. Dotted names (like foo.bar), attribute names (the x=andy=above) or class
names(recognizedbythe“(…)”nexttothemlike Pointabove)areneverassignedto.
Patternscanbearbitrarilynested. Forexample,ifwehaveashortlistofPoints,with __match_args__ added,we
couldmatchitlikethis:
class Point :
__match_args__ =('x','y')
def __init__ (self , x, y):
self .x=x
self .y=y
match points:
case []:
print ("No points ")
case [Point( 0,0)]:
print ("The origin ")
case [Point(x, y)]:
print (f"Single point {x},{y}")
case [Point( 0, y1), Point( 0, y2)]:
print (f"Two on the Y axis at {y1},{y2}")
case _:
print ("Something else ")
Wecanaddan ifclausetoapattern,knownasa“guard”. Iftheguardisfalse, matchgoesontotrythenextcase
block. Notethatvaluecapturehappensbeforetheguardisevaluated:
match point:
case Point(x, y) ifx==y:
print (f"Y=X at {x}")
case Point(x, y):
print (f"Not on the diagonal ")
Severalotherkeyfeaturesofthisstatement:
•Likeunpackingassignments,tupleandlistpatternshaveexactlythesamemeaningandactuallymatcharbitrary
sequences. Animportantexceptionisthattheydon’tmatchiteratorsorstrings.
22 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
•Sequencepatternssupportextendedunpacking: [x, y, *rest] and(x, y, *rest) worksimilartoun-
packing assignments. The name after *may also be _, so(x, y, *_) matches a sequence of at least two
itemswithoutbindingtheremainingitems.
•Mappingpatterns: {"bandwidth": b, "latency": l} capturesthe "bandwidth" and"latency" val-
ues from a dictionary. Unlike sequence patterns, extra keys are ignored. An unpacking like **restis also
supported. (But **_wouldberedundant,soitisnotallowed.)
•Subpatternsmaybecapturedusingthe askeyword:
case (Point(x1, y1), Point(x2, y2) asp2): ...
willcapturethesecondelementoftheinputas p2(aslongastheinputisasequenceoftwopoints)
•Most literals are compared by equality, however the singletons True,FalseandNoneare compared by
identity.
•Patterns may use named constants. These must be dotted names to prevent them from being interpreted as
capturevariable:
from enum import Enum
class Color (Enum):
RED ='red'
GREEN ='green '
BLUE ='blue '
color =Color( input ("Enter your choice of 'red','blue 'or'green ':"))
match color:
case Color .RED:
print ("I see red! ")
case Color .GREEN:
print ("Grass is green ")
case Color .BLUE:
print ("I'm feeling the blues :( ")
Foramoredetailedexplanationandadditionalexamples, youcanlookinto PEP 636whichiswritteninatutorial
format.
4.8DefiningFunctions
WecancreateafunctionthatwritestheFibonacciseriestoanarbitraryboundary:
>>> def fib(n): # write Fibonacci series less than n
... """Print a Fibonacci series less than n."""
... a, b =0,1
... while a<n:
... print (a, end ='')
... a, b =b, a +b
... print ()
...
>>> # Now call the function we just defined:
>>> fib( 2000 )
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597
Thekeyword defintroducesafunction definition. Itmustbefollowedbythefunctionnameandtheparenthesizedlist
offormalparameters. Thestatementsthatformthebodyofthefunctionstartatthenextline,andmustbeindented.
Thefirststatementofthefunctionbodycanoptionallybeastringliteral;thisstringliteralisthefunction’sdocumen-
tation string, or docstring. (More about docstrings can be found in the section Documentation Strings .) There are
4.8. DefiningFunctions 23
PythonTutorial,Release3.13.0
toolswhichusedocstringstoautomaticallyproduceonlineorprinteddocumentation,ortolettheuserinteractively
browsethroughcode;it’sgoodpracticetoincludedocstringsincodethatyouwrite,somakeahabitofit.
Theexecutionofafunctionintroducesanewsymboltableusedforthelocalvariablesofthefunction. Moreprecisely,
allvariableassignmentsinafunctionstorethevalueinthelocalsymboltable;whereasvariablereferencesfirstlook
inthelocalsymboltable,theninthelocalsymboltablesofenclosingfunctions,thenintheglobalsymboltable,and
finally in the table of built-in names. Thus, global variables and variables of enclosing functions cannot be directly
assigned a value within a function (unless, for global variables, named in a globalstatement, or, for variables of
enclosingfunctions,namedina nonlocal statement),althoughtheymaybereferenced.
Theactualparameters(arguments)toafunctioncallareintroducedinthelocalsymboltableofthecalledfunction
whenitiscalled; thus, argumentsarepassed using call by value (wherethe valueisalwaysan object reference, not
thevalueoftheobject).1Whenafunctioncallsanotherfunction,orcallsitselfrecursively,anewlocalsymboltable
iscreatedforthatcall.
Afunctiondefinitionassociatesthefunctionnamewiththefunctionobjectinthecurrentsymboltable. Theinterpreter
recognizes the object pointed to by that name as a user-defined function. Other names can also point to that same
functionobjectandcanalsobeusedtoaccessthefunction:
>>> fib
<function fib at 10042ed0>
>>> f=fib
>>> f(100)
0 1 1 2 3 5 8 13 21 34 55 89
Comingfromotherlanguages, youmightobjectthat fibisnotafunctionbutaproceduresinceitdoesn’treturna
value. Infact, evenfunctionswithouta returnstatementdoreturnavalue, albeitaratherboringone. Thisvalue
iscalled None(it’sabuilt-inname). Writingthevalue Noneisnormallysuppressedbytheinterpreterifitwouldbe
theonlyvaluewritten. Youcanseeitifyoureallywanttousing print():
>>> fib( 0)
>>> print (fib( 0))
None
ItissimpletowriteafunctionthatreturnsalistofthenumbersoftheFibonacciseries,insteadofprintingit:
>>> def fib2 (n): # return Fibonacci series up to n
... """Return a list containing the Fibonacci series up to n."""
... result =[]
... a, b =0,1
... while a<n:
... result .append(a) # see below
... a, b =b, a +b
... return result
...
>>> f100 =fib2( 100) # call it
>>> f100 # write the result
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
Thisexample,asusual,demonstratessomenewPythonfeatures:
•Thereturnstatementreturnswithavaluefromafunction. returnwithoutanexpressionargumentreturns
None. Fallingofftheendofafunctionalsoreturns None.
•The statement result.append(a) calls a methodof the list object result. A method is a function that
‘belongs’toanobjectandisnamed obj.methodname ,where objissomeobject(thismaybeanexpression),
andmethodname isthenameofamethodthatisdefinedbytheobject’stype. Differenttypesdefinedifferent
methods. Methods of different types may have the same name without causing ambiguity. (It is possible to
define your own object types and methods, using classes, seeClasses) The method append() shown in the
1Actually, call by object reference wouldbeabetterdescription,sinceifamutableobjectispassed,thecallerwillseeanychangesthecallee
makestoit(itemsinsertedintoalist).
24 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
exampleisdefinedforlistobjects;itaddsanewelementattheendofthelist. Inthisexampleitisequivalent
toresult = result + [a] ,butmoreefficient.
4.9MoreonDefiningFunctions
It is also possible to define functions with a variable number of arguments. There are three forms, which can be
combined.
4.9.1DefaultArgumentValues
The most useful form is to specify a default value for one or more arguments. This creates a function that can be
calledwithfewerargumentsthanitisdefinedtoallow. Forexample:
def ask_ok (prompt, retries =4, reminder ='Please try again! '):
while True :
reply =input (prompt)
ifreply in{'y','ye','yes'}:
return True
ifreply in{'n','no','nop','nope '}:
return False
retries =retries -1
ifretries <0:
raise ValueError ('invalid user response ')
print (reminder)
Thisfunctioncanbecalledinseveralways:
•givingonlythemandatoryargument: ask_ok('Do you really want to quit?')
•givingoneoftheoptionalarguments: ask_ok('OK to overwrite the file?', 2)
•or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes
or no!')
Thisexamplealsointroducesthe inkeyword. Thistestswhetherornotasequencecontainsacertainvalue.
Thedefaultvaluesareevaluatedatthepointoffunctiondefinitioninthe definingscope,sothat
i=5
def f(arg =i):
print (arg)
i=6
f()
willprint 5.
Importantwarning: Thedefaultvalueisevaluatedonlyonce. Thismakesadifferencewhenthedefaultisamutable
object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the
argumentspassedtoitonsubsequentcalls:
def f(a, L =[]):
L.append(a)
return L
print (f(1))
print (f(2))
print (f(3))
Thiswillprint
4.9. MoreonDefiningFunctions 25
PythonTutorial,Release3.13.0
[1]
[1,2]
[1,2,3]
Ifyoudon’twantthedefaulttobesharedbetweensubsequentcalls,youcanwritethefunctionlikethisinstead:
def f(a, L =None ):
ifLisNone :
L=[]
L.append(a)
return L
4.9.2KeywordArguments
Functionscanalsobecalledusing keyword arguments oftheform kwarg=value . Forinstance,thefollowingfunc-
tion:
def parrot (voltage, state ='a stiff ', action ='voom ',type ='Norwegian Blue '):
print ("-- This parrot wouldn 't", action, end ='')
print ("if you put ", voltage, "volts through it. ")
print ("-- Lovely plumage, the ",type )
print ("-- It 's", state, "!")
acceptsonerequiredargument( voltage)andthreeoptionalarguments( state,action,and type). Thisfunction
canbecalledinanyofthefollowingways:
parrot( 1000 ) # 1 positional argument
parrot(voltage =1000 ) # 1 keyword argument
parrot(voltage =1000000 , action ='VOOOOOM ') # 2 keyword arguments
parrot(action ='VOOOOOM ', voltage =1000000 ) # 2 keyword arguments
parrot( 'a million ','bereft of life ','jump ') # 3 positional arguments
parrot( 'a thousand ', state ='pushing up the daisies ')# 1 positional, 1 keyword
butallthefollowingcallswouldbeinvalid:
parrot() # required argument missing
parrot(voltage =5.0,'dead ')# non-keyword argument after a keyword argument
parrot( 110, voltage =220) # duplicate value for the same argument
parrot(actor ='John Cleese ')# unknown keyword argument
In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must
matchoneoftheargumentsacceptedbythefunction(e.g. actorisnotavalidargumentforthe parrotfunction),
andtheirorderisnotimportant. Thisalsoincludesnon-optionalarguments(e.g. parrot(voltage=1000) isvalid
too). Noargumentmayreceiveavaluemorethanonce. Here’sanexamplethatfailsduetothisrestriction:
>>> def function (a):
... pass
...
>>> function( 0, a=0)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : function() got multiple values for argument 'a'
Whenafinalformalparameteroftheform **nameispresent,itreceivesadictionary(seetypesmapping)containing
allkeywordargumentsexceptforthosecorrespondingtoaformalparameter. Thismaybecombinedwithaformal
parameter of the form *name(described in the next subsection) which receives a tuplecontaining the positional
arguments beyond the formal parameter list. ( *namemust occur before **name.) For example, if we define a
functionlikethis:
26 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
def cheeseshop (kind, *arguments, **keywords):
print ("-- Do you have any ", kind, "?")
print ("-- I 'm sorry, we 're all out of ", kind)
for arg inarguments:
print (arg)
print ("-"*40)
for kwinkeywords:
print (kw, ":", keywords[kw])
Itcouldbecalledlikethis:
cheeseshop( "Limburger ","It's very runny, sir. ",
"It's really very, VERY runny, sir. ",
shopkeeper ="Michael Palin ",
client ="John Cleese ",
sketch ="Cheese Shop Sketch ")
andofcourseitwouldprint:
-- Do you have any Limburger ?
-- I'm sorry, we're all out of Limburger
It's very runny, sir.
It's really very, VERY runny, sir.
----------------------------------------
shopkeeper : Michael Palin
client : John Cleese
sketch : Cheese Shop Sketch
Notethattheorderinwhichthekeywordargumentsareprintedisguaranteedtomatchtheorderinwhichtheywere
providedinthefunctioncall.
4.9.3Specialparameters
Bydefault,argumentsmaybepassedtoaPythonfunctioneitherbypositionorexplicitlybykeyword. Forreadability
and performance, it makes sense to restrict the way arguments can be passed so that a developer need only look at
thefunctiondefinitiontodetermineifitemsarepassedbyposition,bypositionorkeyword,orbykeyword.
Afunctiondefinitionmaylooklike:
def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
----------- ---------- ----------
| | |
| Positional or keyword |
| - Keyword only
-- Positional only
where /and*areoptional. Ifused,thesesymbolsindicatethekindofparameterbyhowtheargumentsmaybepassed
tothefunction: positional-only,positional-or-keyword,andkeyword-only. Keywordparametersarealsoreferredto
asnamedparameters.
Positional-or-KeywordArguments
If/and*arenotpresentinthefunctiondefinition,argumentsmaybepassedtoafunctionbypositionorbykeyword.
4.9. MoreonDefiningFunctions 27
PythonTutorial,Release3.13.0
Positional-OnlyParameters
Lookingatthisinabitmoredetail,itispossibletomarkcertainparametersas positional-only . Ifpositional-only ,the
parameters’ordermatters,andtheparameterscannotbepassedbykeyword. Positional-onlyparametersareplaced
before a /(forward-slash). The /is used to logically separate the positional-only parameters from the rest of the
parameters. Ifthereisno /inthefunctiondefinition,therearenopositional-onlyparameters.
Parametersfollowingthe /maybe positional-or-keyword orkeyword-only .
Keyword-OnlyArguments
Tomarkparametersas keyword-only ,indicatingtheparametersmustbepassedbykeywordargument,placean *in
theargumentslistjustbeforethefirst keyword-only parameter.
FunctionExamples
Considerthefollowingexamplefunctiondefinitionspayingcloseattentiontothemarkers /and*:
>>> def standard_arg (arg):
... print (arg)
...
>>> def pos_only_arg (arg, /):
... print (arg)
...
>>> def kwd_only_arg (*, arg):
... print (arg)
...
>>> def combined_example (pos_only, /, standard, *, kwd_only):
... print (pos_only, standard, kwd_only)
Thefirstfunctiondefinition, standard_arg ,themostfamiliarform,placesnorestrictionsonthecallingconvention
andargumentsmaybepassedbypositionorkeyword:
>>> standard_arg( 2)
2
>>> standard_arg(arg =2)
2
The second function pos_only_arg is restricted to only use positional parameters as there is a /in the function
definition:
>>> pos_only_arg( 1)
1
>>> pos_only_arg(arg =1)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : pos_only_arg() got some positional-only arguments passed as keyword ␣
,→arguments: 'arg'
Thethirdfunction kwd_only_arg onlyallowskeywordargumentsasindicatedbya *inthefunctiondefinition:
>>> kwd_only_arg( 3)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : kwd_only_arg() takes 0 positional arguments but 1 was given
>>> kwd_only_arg(arg =3)
3
28 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
Andthelastusesallthreecallingconventionsinthesamefunctiondefinition:
>>> combined_example( 1,2,3)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : combined_example() takes 2 positional arguments but 3 were given
>>> combined_example( 1,2, kwd_only =3)
1 2 3
>>> combined_example( 1, standard =2, kwd_only =3)
1 2 3
>>> combined_example(pos_only =1, standard =2, kwd_only =3)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : combined_example() got some positional-only arguments passed as keyword ␣
,→arguments: 'pos_only'
Finally, consider this function definition which has a potential collision between the positional argument nameand
**kwdswhichhas nameasakey:
def foo(name, **kwds):
return 'name 'inkwds
Thereisnopossiblecallthatwillmakeitreturn Trueasthekeyword 'name'willalwaysbindtothefirstparameter.
Forexample:
>>> foo( 1,**{'name ':2})
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : foo() got multiple values for argument 'name'
>>>
Butusing /(positionalonlyarguments),itispossiblesinceitallows nameasapositionalargumentand 'name'as
akeyinthekeywordarguments:
>>> def foo(name, /,**kwds):
... return 'name 'inkwds
...
>>> foo( 1,**{'name ':2})
True
Inotherwords,thenamesofpositional-onlyparameterscanbeusedin **kwdswithoutambiguity.
Recap
Theusecasewilldeterminewhichparameterstouseinthefunctiondefinition:
def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
Asguidance:
•Usepositional-onlyifyouwantthenameoftheparameterstonotbeavailabletotheuser. Thisisusefulwhen
parameternameshavenorealmeaning,ifyouwanttoenforcetheorderoftheargumentswhenthefunction
iscalledorifyouneedtotakesomepositionalparametersandarbitrarykeywords.
•Use keyword-only when names have meaning and the function definition is more understandable by being
explicitwithnamesoryouwanttopreventusersrelyingonthepositionoftheargumentbeingpassed.
4.9. MoreonDefiningFunctions 29
PythonTutorial,Release3.13.0
•For an API, use positional-only to prevent breaking API changes if the parameter’s name is modified in the
future.
4.9.4ArbitraryArgumentLists
Finally,theleastfrequentlyusedoptionistospecifythatafunctioncanbecalledwithanarbitrarynumberofargu-
ments. These arguments will be wrapped up in a tuple (see Tuples and Sequences ). Before the variable number of
arguments,zeroormorenormalargumentsmayoccur.
def write_multiple_items (file, separator, *args):
file .write(separator .join(args))
Normally,these variadicargumentswillbelastinthelistofformalparameters,becausetheyscoopupallremaining
inputargumentsthatarepassedtothefunction. Anyformalparameterswhichoccurafterthe *argsparameterare
‘keyword-only’arguments,meaningthattheycanonlybeusedaskeywordsratherthanpositionalarguments.
>>> def concat (*args, sep ="/"):
... return sep.join(args)
...
>>> concat( "earth ","mars ","venus ")
'earth/mars/venus'
>>> concat( "earth ","mars ","venus ", sep =".")
'earth.mars.venus'
4.9.5UnpackingArgumentLists
Thereversesituationoccurswhentheargumentsarealreadyinalistortuplebutneedtobeunpackedforafunctioncall
requiringseparatepositionalarguments. Forinstance,thebuilt-in range()functionexpectsseparate startandstop
arguments. Iftheyarenotavailableseparately,writethefunctioncallwiththe *-operatortounpackthearguments
outofalistortuple:
>>> list (range (3,6)) # normal call with separate arguments
[3, 4, 5]
>>> args =[3,6]
>>> list (range (*args)) # call with arguments unpacked from a list
[3, 4, 5]
Inthesamefashion,dictionariescandeliverkeywordargumentswiththe **-operator:
>>> def parrot (voltage, state ='a stiff ', action ='voom '):
... print ("-- This parrot wouldn 't", action, end ='')
... print ("if you put ", voltage, "volts through it. ", end ='')
... print ("E's", state, "!")
...
>>> d={"voltage ":"four million ","state ":"bleedin 'demised ","action ":"VOOM "}
>>> parrot( **d)
-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin
,→' demised !
4.9.6LambdaExpressions
Small anonymous functions can be created with the lambdakeyword. This function returns the sum of its two
arguments: lambda a, b: a+b . Lambda functions can be used wherever function objects are required. They
are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function
definition. Likenestedfunctiondefinitions,lambdafunctionscanreferencevariablesfromthecontainingscope:
>>> def make_incrementor (n):
... return lambda x: x +n
(continuesonnextpage)
30 Chapter4. MoreControlFlowTools
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
...
>>> f=make_incrementor( 42)
>>> f(0)
42
>>> f(1)
43
The above example uses a lambda expression to return a function. Another use is to pass a small function as an
argument:
>>> pairs =[(1,'one'), ( 2,'two'), ( 3,'three '), ( 4,'four ')]
>>> pairs .sort(key =lambda pair: pair[ 1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
4.9.7DocumentationStrings
Herearesomeconventionsaboutthecontentandformattingofdocumentationstrings.
Thefirstlineshouldalwaysbeashort,concisesummaryoftheobject’spurpose. Forbrevity,itshouldnotexplicitly
state the object’s name or type, since these are available by other means (except if the name happens to be a verb
describingafunction’soperation). Thislineshouldbeginwithacapitalletterandendwithaperiod.
Iftherearemorelinesinthedocumentationstring,thesecondlineshouldbeblank,visuallyseparatingthesummary
fromtherestofthedescription. Thefollowinglinesshouldbeoneormoreparagraphsdescribingtheobject’scalling
conventions,itssideeffects,etc.
ThePythonparserdoesnotstripindentationfrommulti-linestringliteralsinPython,sotoolsthatprocessdocumen-
tationhavetostripindentationifdesired. Thisisdoneusingthefollowingconvention. Thefirstnon-blankline after
the first line of the string determines the amount of indentation for the entire documentation string. (We can’t use
thefirstlinesinceitisgenerallyadjacenttothestring’sopeningquotessoitsindentationisnotapparentinthestring
literal.) Whitespace “equivalent” to this indentation is then stripped from the start of all lines of the string. Lines
thatareindentedlessshouldnotoccur,butiftheyoccuralltheirleadingwhitespaceshouldbestripped. Equivalence
ofwhitespaceshouldbetestedafterexpansionoftabs(to8spaces,normally).
Hereisanexampleofamulti-linedocstring:
>>> def my_function ():
... """Do nothing, but document it.
...
... No, really, it doesn't do anything.
... """
... pass
...
>>> print (my_function .__doc__ )
Do nothing, but document it.
No, really, it doesn't do anything.
4.9.8FunctionAnnotations
Function annotations are completely optional metadata information about the types used by user-defined functions
(seePEP 3107 andPEP484formoreinformation).
Annotations arestoredinthe __annotations__ attributeofthefunctionasadictionaryandhavenoeffectonany
other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an
expressionevaluatingtothevalueoftheannotation. Returnannotationsaredefinedbyaliteral ->, followedbyan
expression,betweentheparameterlistandthecolondenotingtheendofthe defstatement. Thefollowingexample
hasarequiredargument,anoptionalargument,andthereturnvalueannotated:
4.9. MoreonDefiningFunctions 31
PythonTutorial,Release3.13.0
>>> def f(ham: str, eggs: str ='eggs ')->str:
... print ("Annotations: ", f.__annotations__ )
... print ("Arguments: ", ham, eggs)
... return ham +'and '+eggs
...
>>> f('spam ')
Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
Arguments: spam eggs
'spam and eggs'
4.10Intermezzo: CodingStyle
Nowthatyouareabouttowritelonger,morecomplexpiecesofPython,itisagoodtimetotalkabout coding style .
Mostlanguagescanbewritten(ormoreconcise, formatted)indifferentstyles;somearemorereadablethanothers.
Makingiteasyforotherstoreadyourcodeisalwaysagoodidea,andadoptinganicecodingstylehelpstremendously
forthat.
For Python, PEP 8has emerged as the style guide that most projects adhere to; it promotes a very readable and
eye-pleasingcodingstyle. EveryPythondevelopershouldreaditatsomepoint;herearethemostimportantpoints
extractedforyou:
•Use4-spaceindentation,andnotabs.
4spacesareagoodcompromisebetweensmallindentation(allowsgreaternestingdepth)andlargeindentation
(easiertoread). Tabsintroduceconfusion,andarebestleftout.
•Wraplinessothattheydon’texceed79characters.
This helps users with small displays and makes it possible to have several code files side-by-side on larger
displays.
•Useblanklinestoseparatefunctionsandclasses,andlargerblocksofcodeinsidefunctions.
•Whenpossible,putcommentsonalineoftheirown.
•Usedocstrings.
•Usespacesaroundoperatorsandaftercommas,butnotdirectlyinsidebracketingconstructs: a = f(1, 2)
+ g(3, 4) .
•Name your classes and functions consistently; the convention is to use UpperCamelCase for classes and
lowercase_with_underscores for functions and methods. Always use selfas the name for the first
methodargument(see A First Look at Classes formoreonclassesandmethods).
•Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default,
UTF-8,orevenplainASCIIworkbestinanycase.
•Likewise,don’tusenon-ASCIIcharactersinidentifiersifthereisonlytheslightestchancepeoplespeakinga
differentlanguagewillreadormaintainthecode.
32 Chapter4. MoreControlFlowTools
CHAPTER
FIVE
DATASTRUCTURES
Thischapterdescribessomethingsyou’velearnedaboutalreadyinmoredetail,andaddssomenewthingsaswell.
5.1MoreonLists
Thelistdatatypehassomemoremethods. Hereareallofthemethodsoflistobjects:
list. append (x)
Addanitemtotheendofthelist. Similarto a[len(a):] = [x] .
list. extend (iterable )
Extendthelistbyappendingalltheitemsfromtheiterable. Similarto a[len(a):] = iterable .
list. insert (i,x)
Insertanitematagivenposition. Thefirstargumentistheindexoftheelementbeforewhichtoinsert,so a.
insert(0, x) insertsatthefrontofthelist,and a.insert(len(a), x) isequivalentto a.append(x) .
list. remove (x)
Removethefirstitemfromthelistwhosevalueisequalto x. Itraisesa ValueError ifthereisnosuchitem.
list. pop([i])
Removetheitematthegivenpositioninthelist,andreturnit. Ifnoindexisspecified, a.pop()removesand
returns the last item in the list. It raises an IndexError if the list is empty or the index is outside the list
range.
list. clear ()
Removeallitemsfromthelist. Similarto del a[:] .
list. index (x[,start[,end]])
Returnzero-basedindexinthelistofthefirstitemwhosevalueisequalto x. Raisesa ValueError ifthere
isnosuchitem.
The optional arguments startandendare interpreted as in the slice notation and are used to limit the search
to a particular subsequence of the list. The returned index is computed relative to the beginning of the full
sequenceratherthanthe startargument.
list. count (x)
Returnthenumberoftimes xappearsinthelist.
list. sort (*,key=None,reverse=False )
Sorttheitemsofthelistinplace(theargumentscanbeusedforsortcustomization,see sorted() fortheir
explanation).
list. reverse ()
Reversetheelementsofthelistinplace.
33
PythonTutorial,Release3.13.0
list. copy ()
Returnashallowcopyofthelist. Similarto a[:].
Anexamplethatusesmostofthelistmethods:
>>> fruits =['orange ','apple ','pear ','banana ','kiwi ','apple ','banana ']
>>> fruits .count( 'apple ')
2
>>> fruits .count( 'tangerine ')
0
>>> fruits .index( 'banana ')
3
>>> fruits .index( 'banana ',4)# Find next banana starting at position 4
6
>>> fruits .reverse()
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']
>>> fruits .append( 'grape ')
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']
>>> fruits .sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
>>> fruits .pop()
'pear'
Youmighthavenoticedthatmethodslike insert,removeorsortthatonlymodifythelisthavenoreturnvalue
printed–theyreturnthedefault None.1ThisisadesignprincipleforallmutabledatastructuresinPython.
Another thing you might notice is that not all data can be sorted or compared. For instance, [None, 'hello',
10]doesn’tsortbecauseintegerscan’tbecomparedtostringsand Nonecan’tbecomparedtoothertypes. Also,there
aresometypesthatdon’thaveadefinedorderingrelation. Forexample, 3+4j < 5+7j isn’tavalidcomparison.
5.1.1UsingListsasStacks
Thelistmethodsmakeitveryeasytousealistasastack,wherethelastelementaddedisthefirstelementretrieved
(“last-in,first-out”). Toaddanitemtothetopofthestack,use append() . Toretrieveanitemfromthetopofthe
stack,use pop()withoutanexplicitindex. Forexample:
>>> stack =[3,4,5]
>>> stack .append( 6)
>>> stack .append( 7)
>>> stack
[3, 4, 5, 6, 7]
>>> stack .pop()
7
>>> stack
[3, 4, 5, 6]
>>> stack .pop()
6
>>> stack .pop()
5
>>> stack
[3, 4]
1Otherlanguagesmayreturnthemutatedobject,whichallowsmethodchaining,suchas d->insert("a")->remove("b")->sort(); .
34 Chapter5. DataStructures
PythonTutorial,Release3.13.0
5.1.2UsingListsasQueues
Itisalsopossibletousealistasaqueue,wherethefirstelementaddedisthefirstelementretrieved(“first-in,first-
out”); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing
insertsorpopsfromthebeginningofalistisslow(becausealloftheotherelementshavetobeshiftedbyone).
To implement a queue, use collections.deque which was designed to have fast appends and pops from both
ends. Forexample:
>>> from collections import deque
>>> queue =deque([ "Eric ","John ","Michael "])
>>> queue .append( "Terry ") # Terry arrives
>>> queue .append( "Graham ") # Graham arrives
>>> queue .popleft() # The first to arrive now leaves
'Eric'
>>> queue .popleft() # The second to arrive now leaves
'John'
>>> queue # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])
5.1.3ListComprehensions
Listcomprehensionsprovideaconcisewaytocreatelists. Commonapplicationsaretomakenewlistswhereeach
element is the result of some operations applied to each member of another sequence or iterable, or to create a
subsequenceofthoseelementsthatsatisfyacertaincondition.
Forexample,assumewewanttocreatealistofsquares,like:
>>> squares =[]
>>> for xinrange (10):
... squares .append(x **2)
...
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Notethatthiscreates(oroverwrites)avariablenamed xthatstillexistsaftertheloopcompletes. Wecancalculate
thelistofsquareswithoutanysideeffectsusing:
squares =list (map(lambda x: x **2,range (10)))
or,equivalently:
squares =[x**2for xinrange (10)]
whichismoreconciseandreadable.
Alistcomprehensionconsistsofbracketscontaininganexpressionfollowedbya forclause,thenzeroormore for
orifclauses. Theresultwillbeanewlistresultingfromevaluatingtheexpressioninthecontextofthe forandif
clauseswhichfollowit. Forexample,thislistcompcombinestheelementsoftwolistsiftheyarenotequal:
>>> [(x, y) for xin[1,2,3]for yin[3,1,4]ifx!=y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
andit’sequivalentto:
>>> combs =[]
>>> for xin[1,2,3]:
... for yin[3,1,4]:
... ifx!=y:
... combs .append((x, y))
(continuesonnextpage)
5.1. MoreonLists 35
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
...
>>> combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
Notehowtheorderofthe forandifstatementsisthesameinboththesesnippets.
Iftheexpressionisatuple(e.g. the (x, y)inthepreviousexample),itmustbeparenthesized.
>>> vec =[-4,-2,0,2,4]
>>> # create a new list with the values doubled
>>> [x*2for xinvec]
[-8, -4, 0, 4, 8]
>>> # filter the list to exclude negative numbers
>>> [xfor xinvec ifx>=0]
[0, 2, 4]
>>> # apply a function to all the elements
>>> [abs(x) for xinvec]
[4, 2, 0, 2, 4]
>>> # call a method on each element
>>> freshfruit =['banana ','loganberry ','passion fruit ']
>>> [weapon .strip() for weapon infreshfruit]
['banana', 'loganberry', 'passion fruit']
>>> # create a list of 2-tuples like (number, square)
>>> [(x, x **2)for xinrange (6)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
>>> # the tuple must be parenthesized, otherwise an error is raised
>>> [x, x **2for xinrange (6)]
File "<stdin>" , line 1
[x, x **2for xinrange (6)]
^^^^^^^
SyntaxError : did you forget parentheses around the comprehension target?
>>> # flatten a list using a listcomp with two 'for'
>>> vec =[[1,2,3], [ 4,5,6], [ 7,8,9]]
>>> [num for elem invec for num inelem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
Listcomprehensionscancontaincomplexexpressionsandnestedfunctions:
>>> from math import pi
>>> [str(round (pi, i)) for iinrange (1,6)]
['3.1', '3.14', '3.142', '3.1416', '3.14159']
5.1.4NestedListComprehensions
Theinitialexpressioninalistcomprehensioncanbeanyarbitraryexpression,includinganotherlistcomprehension.
Considerthefollowingexampleofa3x4matriximplementedasalistof3listsoflength4:
>>> matrix =[
... [1,2,3,4],
... [5,6,7,8],
... [9,10,11,12],
... ]
Thefollowinglistcomprehensionwilltransposerowsandcolumns:
>>> [[row[i] for row inmatrix] for iinrange (4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
36 Chapter5. DataStructures
PythonTutorial,Release3.13.0
Aswesawintheprevioussection,theinnerlistcomprehensionisevaluatedinthecontextofthe forthatfollowsit,
sothisexampleisequivalentto:
>>> transposed =[]
>>> for iinrange (4):
... transposed .append([row[i] for row inmatrix])
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
which,inturn,isthesameas:
>>> transposed =[]
>>> for iinrange (4):
... # the following 3 lines implement the nested listcomp
... transposed_row =[]
... for row inmatrix:
... transposed_row .append(row[i])
... transposed .append(transposed_row)
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
Intherealworld, youshouldpreferbuilt-infunctionstocomplexflowstatements. The zip()functionwoulddoa
greatjobforthisusecase:
>>> list (zip(*matrix))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
SeeUnpacking Argument Lists fordetailsontheasteriskinthisline.
5.2The delstatement
Thereisawaytoremoveanitemfromalistgivenitsindexinsteadofitsvalue: the delstatement. Thisdiffersfrom
thepop()methodwhichreturnsavalue. The delstatementcanalsobeusedtoremoveslicesfromalistorclear
theentirelist(whichwedidearlierbyassignmentofanemptylisttotheslice). Forexample:
>>> a=[-1,1,66.25 ,333,333,1234.5 ]
>>> del a[0]
>>> a
[1, 66.25, 333, 333, 1234.5]
>>> del a[2:4]
>>> a
[1, 66.25, 1234.5]
>>> del a[:]
>>> a
[]
delcanalsobeusedtodeleteentirevariables:
>>> del a
Referencingthename ahereafterisanerror(atleastuntilanothervalueisassignedtoit). We’llfindotherusesfor
dellater.
5.2. The delstatement 37
PythonTutorial,Release3.13.0
5.3TuplesandSequences
Wesawthatlistsandstringshavemanycommonproperties,suchasindexingandslicingoperations. Theyaretwo
examplesof sequencedatatypes(seetypesseq). SincePythonisanevolvinglanguage,othersequencedatatypesmay
beadded. Thereisalsoanotherstandardsequencedatatype: the tuple.
Atupleconsistsofanumberofvaluesseparatedbycommas,forinstance:
>>> t=12345 ,54321 ,'hello! '
>>> t[0]
12345
>>> t
(12345, 54321, 'hello!')
>>> # Tuples may be nested:
>>> u=t, ( 1,2,3,4,5)
>>> u
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
>>> # Tuples are immutable:
>>> t[0]=88888
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
TypeError : 'tuple' object does not support item assignment
>>> # but they can contain mutable objects:
>>> v=([1,2,3], [ 3,2,1])
>>> v
([1, 2, 3], [3, 2, 1])
Asyousee,onoutputtuplesarealwaysenclosedinparentheses,sothatnestedtuplesareinterpretedcorrectly;they
maybeinputwithorwithoutsurroundingparentheses,althoughoftenparenthesesarenecessaryanyway(ifthetuple
ispartofalargerexpression). Itisnotpossibletoassigntotheindividualitemsofatuple,howeveritispossibleto
createtupleswhichcontainmutableobjects,suchaslists.
Thoughtuplesmayseemsimilartolists,theyareoftenusedindifferentsituationsandfordifferentpurposes. Tuples
areimmutable,andusuallycontainaheterogeneoussequenceofelementsthatareaccessedviaunpacking(seelater
inthissection)orindexing(orevenbyattributeinthecaseof namedtuples ). Listsare mutable,andtheirelements
areusuallyhomogeneousandareaccessedbyiteratingoverthelist.
Aspecialproblemistheconstructionoftuplescontaining0or1items: thesyntaxhassomeextraquirkstoaccom-
modate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed
byfollowingavaluewithacomma(itisnotsufficienttoencloseasinglevalueinparentheses). Ugly,buteffective.
Forexample:
>>> empty =()
>>> singleton ='hello ', # <-- note trailing comma
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)
The statement t = 12345, 54321, 'hello!' is an example of tuple packing : the values 12345,54321and
'hello!' arepackedtogetherinatuple. Thereverseoperationisalsopossible:
>>> x, y, z =t
Thisiscalled,appropriatelyenough, sequence unpacking andworksforanysequenceontheright-handside. Sequence
unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the
sequence. Notethatmultipleassignmentisreallyjustacombinationoftuplepackingandsequenceunpacking.
38 Chapter5. DataStructures
PythonTutorial,Release3.13.0
5.4Sets
Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses
includemembershiptestingandeliminatingduplicateentries. Setobjectsalsosupportmathematicaloperationslike
union,intersection,difference,andsymmetricdifference.
Curlybracesorthe set()functioncanbeusedtocreatesets. Note: tocreateanemptysetyouhavetouse set(),
not{};thelattercreatesanemptydictionary,adatastructurethatwediscussinthenextsection.
Hereisabriefdemonstration:
>>> basket ={'apple ','orange ','apple ','pear ','orange ','banana '}
>>> print (basket) # show that duplicates have been removed
{'orange', 'banana', 'pear', 'apple'}
>>> 'orange 'inbasket # fast membership testing
True
>>> 'crabgrass 'inbasket
False
>>> # Demonstrate set operations on unique letters from two words
>>>
>>> a=set('abracadabra ')
>>> b=set('alacazam ')
>>> a # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
>>> a-b # letters in a but not in b
{'r', 'd', 'b'}
>>> a|b # letters in a or b or both
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
>>> a&b # letters in both a and b
{'a', 'c'}
>>> a^b # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}
Similarlyto list comprehensions ,setcomprehensionsarealsosupported:
>>> a={xfor xin'abracadabra 'ifxnot in'abc'}
>>> a
{'r', 'd'}
5.5Dictionaries
Another useful data type built into Python is the dictionary(see typesmapping). Dictionaries are sometimes found
inotherlanguagesas“associativememories”or“associativearrays”. Unlikesequences,whichareindexedbyarange
ofnumbers,dictionariesareindexedby keys,whichcanbeanyimmutabletype;stringsandnumberscanalwaysbe
keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable
objecteitherdirectlyorindirectly,itcannotbeusedasakey. Youcan’tuselistsaskeys,sincelistscanbemodified
inplaceusingindexassignments,sliceassignments,ormethodslike append() andextend() .
Itisbesttothinkofadictionaryas asetof key: value pairs, withtherequirementthatthekeysareunique(within
onedictionary). Apairofbracescreatesanemptydictionary: {}. Placingacomma-separatedlistofkey:valuepairs
withinthebracesaddsinitialkey:valuepairstothedictionary;thisisalsothewaydictionariesarewrittenonoutput.
Themainoperationsonadictionaryarestoringavaluewithsomekeyandextractingthevaluegiventhekey. Itisalso
possibletodeleteakey:valuepairwith del. Ifyoustoreusingakeythatisalreadyinuse,theoldvalueassociated
withthatkeyisforgotten. Itisanerrortoextractavalueusinganon-existentkey.
Performing list(d)on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you
wantitsorted,justuse sorted(d) instead). Tocheckwhetherasinglekeyisinthedictionary,usethe inkeyword.
5.4. Sets 39
PythonTutorial,Release3.13.0
Hereisasmallexampleusingadictionary:
>>> tel ={'jack ':4098 ,'sape ':4139 }
>>> tel[ 'guido ']=4127
>>> tel
{'jack': 4098, 'sape': 4139, 'guido': 4127}
>>> tel[ 'jack ']
4098
>>> del tel[ 'sape ']
>>> tel[ 'irv']=4127
>>> tel
{'jack': 4098, 'guido': 4127, 'irv': 4127}
>>> list (tel)
['jack', 'guido', 'irv']
>>> sorted (tel)
['guido', 'irv', 'jack']
>>> 'guido 'intel
True
>>> 'jack 'not intel
False
Thedict()constructorbuildsdictionariesdirectlyfromsequencesofkey-valuepairs:
>>> dict ([('sape ',4139 ), ( 'guido ',4127 ), ( 'jack ',4098 )])
{'sape': 4139, 'guido': 4127, 'jack': 4098}
Inaddition,dictcomprehensionscanbeusedtocreatedictionariesfromarbitrarykeyandvalueexpressions:
>>> {x: x **2for xin(2,4,6)}
{2: 4, 4: 16, 6: 36}
Whenthekeysaresimplestrings,itissometimeseasiertospecifypairsusingkeywordarguments:
>>> dict (sape =4139 , guido =4127 , jack =4098 )
{'sape': 4139, 'guido': 4127, 'jack': 4098}
5.6LoopingTechniques
When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the
items()method.
>>> knights ={'gallahad ':'the pure ','robin ':'the brave '}
>>> for k, v inknights .items():
... print (k, v)
...
gallahad the pure
robin the brave
Whenloopingthroughasequence,thepositionindexandcorrespondingvaluecanberetrievedatthesametimeusing
theenumerate() function.
>>> for i, v inenumerate (['tic','tac','toe']):
... print (i, v)
...
0 tic
1 tac
2 toe
40 Chapter5. DataStructures
PythonTutorial,Release3.13.0
Toloopovertwoormoresequencesatthesametime,theentriescanbepairedwiththe zip()function.
>>> questions =['name ','quest ','favorite color ']
>>> answers =['lancelot ','the holy grail ','blue ']
>>> for q, a inzip(questions, answers):
... print ('What is your {0}? It is {1}.'.format(q, a))
...
What is your name? It is lancelot.
What is your quest? It is the holy grail.
What is your favorite color? It is blue.
Toloopoverasequenceinreverse,firstspecifythesequenceinaforwarddirectionandthencallthe reversed()
function.
>>> for iinreversed (range (1,10,2)):
... print (i)
...
9
7
5
3
1
To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving
thesourceunaltered.
>>> basket =['apple ','orange ','apple ','pear ','orange ','banana ']
>>> for iinsorted (basket):
... print (i)
...
apple
apple
banana
orange
orange
pear
Using set()onasequenceeliminatesduplicateelements. Theuseof sorted() incombinationwith set()over
asequenceisanidiomaticwaytoloopoveruniqueelementsofthesequenceinsortedorder.
>>> basket =['apple ','orange ','apple ','pear ','orange ','banana ']
>>> for finsorted (set(basket)):
... print (f)
...
apple
banana
orange
pear
Itissometimestemptingtochangealistwhileyouareloopingoverit;however,itisoftensimplerandsafertocreate
anewlistinstead.
>>> import math
>>> raw_data =[56.2 ,float ('NaN'),51.7 ,55.3 ,52.5 ,float ('NaN'),47.8 ]
>>> filtered_data =[]
>>> for value inraw_data:
... ifnot math .isnan(value):
... filtered_data .append(value)
(continuesonnextpage)
5.6. LoopingTechniques 41
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
...
>>> filtered_data
[56.2, 51.7, 55.3, 52.5, 47.8]
5.7MoreonConditions
Theconditionsusedin whileandifstatementscancontainanyoperators,notjustcomparisons.
The comparison operators inandnot inare membership tests that determine whether a value is in (or not in) a
container. Theoperators isandis notcomparewhethertwoobjectsarereallythesameobject. Allcomparison
operatorshavethesamepriority,whichislowerthanthatofallnumericaloperators.
Comparisonscanbechained. Forexample, a < b == c testswhether aislessthan bandmoreover bequals c.
Comparisons may be combined using the Boolean operators andandor, and the outcome of a comparison (or of
any other Boolean expression) may be negated with not. These have lower priorities than comparison operators;
betweenthem, nothasthehighestpriorityand orthelowest,sothat A and not B or C isequivalentto (A and
(not B)) or C .Asalways,parenthesescanbeusedtoexpressthedesiredcomposition.
The Boolean operators andandorare so-called short-circuit operators: their arguments are evaluated from left to
right, andevaluationstopsassoonastheoutcomeisdetermined. Forexample, if AandCaretruebut Bisfalse, A
and B and C does not evaluate the expression C. When used as a general value and not as a Boolean, the return
valueofashort-circuitoperatoristhelastevaluatedargument.
ItispossibletoassigntheresultofacomparisonorotherBooleanexpressiontoavariable. Forexample,
>>> string1, string2, string3 ='','Trondheim ','Hammer Dance '
>>> non_null =string1 orstring2 orstring3
>>> non_null
'Trondheim'
Note that in Python, unlike C, assignment inside expressions must be done explicitly with the walrus operator :=.
ThisavoidsacommonclassofproblemsencounteredinCprograms: typing =inanexpressionwhen ==wasintended.
5.8ComparingSequencesandOtherTypes
Sequence objects typically may be compared to other objects with the same sequence type. The comparison uses
lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of
the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted.
Iftwoitemsto be comparedarethemselvessequencesofthesametype, thelexicographicalcomparisoniscarried
out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence
isaninitialsub-sequenceoftheother,theshortersequenceisthesmaller(lesser)one. Lexicographicalorderingfor
stringsusestheUnicodecodepointnumbertoorderindividualcharacters. Someexamplesofcomparisonsbetween
sequencesofthesametype:
(1,2,3) <(1,2,4)
[1,2,3] <[1,2,4]
'ABC'<'C'<'Pascal '<'Python '
(1,2,3,4) <(1,2,4)
(1,2) <(1,2,-1)
(1,2,3) ==(1.0,2.0,3.0)
(1,2, ('aa','ab')) <(1,2, ('abc','a'),4)
Notethatcomparingobjectsofdifferenttypeswith <or>islegalprovidedthattheobjectshaveappropriatecom-
parisonmethods. Forexample,mixednumerictypesarecomparedaccordingtotheirnumericvalue,so0equals0.0,
etc. Otherwise,ratherthanprovidinganarbitraryordering,theinterpreterwillraisea TypeError exception.
42 Chapter5. DataStructures
CHAPTER
SIX
MODULES
If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables)
arelost. Therefore,ifyouwanttowriteasomewhatlongerprogram,youarebetteroffusingatexteditortoprepare
theinputfortheinterpreterandrunningitwiththatfileasinputinstead. Thisisknownascreatinga script. Asyour
program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a
handyfunctionthatyou’vewritteninseveralprogramswithoutcopyingitsdefinitionintoeachprogram.
To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance
of the interpreter. Such a file is called a module; definitions from a module can be importedinto other modules or
intothe mainmodule(thecollectionofvariablesthatyouhaveaccesstoinascriptexecutedatthetoplevelandin
calculatormode).
A module is a file containing Python definitions and statements. The file name is the module name with the suffix
.pyappended. Within a module, the module’s name (as a string) is available as the value of the global variable
__name__ . Forinstance, useyourfavoritetexteditortocreateafilecalled fibo.pyinthecurrentdirectorywith
thefollowingcontents:
# Fibonacci numbers module
def fib(n): # write Fibonacci series up to n
a, b =0,1
while a<n:
print (a, end ='')
a, b =b, a +b
print ()
def fib2 (n): # return Fibonacci series up to n
result =[]
a, b =0,1
while a<n:
result .append(a)
a, b =b, a +b
return result
NowenterthePythoninterpreterandimportthismodulewiththefollowingcommand:
>>> import fibo
Thisdoesnotaddthenamesofthefunctionsdefinedin fibodirectlytothecurrent namespace (seePython Scopes
and Namespaces formoredetails);itonlyaddsthemodulename fibothere. Usingthemodulenameyoucanaccess
thefunctions:
>>> fibo .fib( 1000 )
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
>>> fibo .fib2( 100)
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
(continuesonnextpage)
43
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
>>> fibo .__name__
'fibo'
Ifyouintendtouseafunctionoftenyoucanassignittoalocalname:
>>> fib =fibo .fib
>>> fib( 500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
6.1MoreonModules
Amodulecancontainexecutablestatementsaswellasfunctiondefinitions. Thesestatementsareintendedtoinitialize
themodule. Theyareexecutedonlythe firsttimethemodulenameisencounteredinanimportstatement.1(They
arealsorunifthefileisexecutedasascript.)
Each module has its own private namespace, which is used as the global namespace by all functions defined in the
module. Thus, the author of a module can use global variables in the module without worrying about accidental
clasheswithauser’sglobalvariables. Ontheotherhand,ifyouknowwhatyouaredoingyoucantouchamodule’s
globalvariableswiththesamenotationusedtorefertoitsfunctions, modname.itemname .
Modulescanimportothermodules. Itiscustomarybutnotrequiredtoplaceall importstatementsatthebeginning
ofamodule(orscript,forthatmatter). Theimportedmodulenames,ifplacedatthetoplevelofamodule(outside
anyfunctionsorclasses),areaddedtothemodule’sglobalnamespace.
Thereisavariantofthe importstatementthatimportsnamesfromamoduledirectlyintotheimportingmodule’s
namespace. Forexample:
>>> from fibo import fib, fib2
>>> fib( 500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
Thisdoesnotintroducethemodulenamefromwhichtheimportsaretakeninthelocalnamespace(sointheexample,
fiboisnotdefined).
Thereisevenavarianttoimportallnamesthatamoduledefines:
>>> from fibo import *
>>> fib( 500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
This imports all names except those beginning with an underscore ( _). In most cases Python programmers do not
use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you
havealreadydefined.
Note that in general the practice of importing *from a module or package is frowned upon, since it often causes
poorlyreadablecode. However,itisokaytouseittosavetypingininteractivesessions.
Ifthemodulenameisfollowedby as,thenthenamefollowing asisbounddirectlytotheimportedmodule.
>>> import fibo asfib
>>> fib.fib( 500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
Thisiseffectivelyimportingthemoduleinthesamewaythat import fibo willdo, withtheonlydifferenceofit
beingavailableas fib.
Itcanalsobeusedwhenutilising fromwithsimilareffects:
1Infactfunctiondefinitionsarealso‘statements’thatare‘executed’;theexecutionofamodule-levelfunctiondefinitionaddsthefunctionname
tothemodule’sglobalnamespace.
44 Chapter6. Modules
PythonTutorial,Release3.13.0
>>> from fibo import fib asfibonacci
>>> fibonacci( 500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
®Note
For efficiency reasons, each module is only imported once per interpreter session. Therefore, if you change
your modules, you must restart the interpreter – or, if it’s just one module you want to test interactively, use
importlib.reload() ,e.g. import importlib; importlib.reload(modulename) .
6.1.1Executingmodulesasscripts
WhenyourunaPythonmodulewith
python fibo .py<arguments >
thecodeinthemodulewillbeexecuted,justasifyouimportedit,butwiththe __name__ setto "__main__" . That
meansthatbyaddingthiscodeattheendofyourmodule:
if__name__ =="__main__ ":
import sys
fib( int(sys .argv[ 1]))
youcanmakethefileusableasascriptaswellasanimportablemodule,becausethecodethatparsesthecommand
lineonlyrunsifthemoduleisexecutedasthe“main”file:
$python fibo.py 50
0 1 1 2 3 5 8 13 21 34
Ifthemoduleisimported,thecodeisnotrun:
>>> import fibo
>>>
This is often used either to provide a convenient user interface to a module, or for testing purposes (running the
moduleasascriptexecutesatestsuite).
6.1.2TheModuleSearchPath
Whenamodulenamed spamisimported,theinterpreterfirstsearchesforabuilt-inmodulewiththatname. These
modulenamesarelistedin sys.builtin_module_names . Ifnotfound,itthensearchesforafilenamed spam.py
inalistofdirectoriesgivenbythevariable sys.path .sys.path isinitializedfromtheselocations:
•Thedirectorycontainingtheinputscript(orthecurrentdirectorywhennofileisspecified).
•PYTHONPATH (alistofdirectorynames,withthesamesyntaxastheshellvariable PATH).
•Theinstallation-dependentdefault(byconventionincludinga site-packages directory,handledbythe site
module).
Moredetailsareatsys-path-init.
®Note
Onfilesystemswhichsupportsymlinks,thedirectorycontainingtheinputscriptiscalculatedafterthesymlink
isfollowed. Inotherwordsthedirectorycontainingthesymlinkis notaddedtothemodulesearchpath.
6.1. MoreonModules 45
PythonTutorial,Release3.13.0
Afterinitialization,Pythonprogramscanmodify sys.path . Thedirectorycontainingthescriptbeingrunisplaced
atthebeginningofthesearchpath,aheadofthestandardlibrarypath. Thismeansthatscriptsinthatdirectorywill
be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is
intended. Seesection Standard Modules formoreinformation.
6.1.3“Compiled”Pythonfiles
Tospeeduploadingmodules, Pythoncachesthecompiledversionofeachmoduleinthe __pycache__ directory
under the name module. version .pyc, where the version encodes the format of the compiled file; it generally
contains the Python version number. For example, in CPython release 3.3 the compiled version of spam.py would
be cached as __pycache__/spam.cpython-33.pyc . This naming convention allows compiled modules from
differentreleasesanddifferentversionsofPythontocoexist.
Python checks the modification date of the source against the compiled version to see if it’s out of date and needs
toberecompiled. Thisisacompletelyautomaticprocess. Also,thecompiledmodulesareplatform-independent,so
thesamelibrarycanbesharedamongsystemswithdifferentarchitectures.
Pythondoesnotcheckthecacheintwocircumstances. First, italwaysrecompilesanddoesnotstoretheresultfor
themodulethat’sloadeddirectlyfromthecommandline. Second,itdoesnotcheckthecacheifthereisnosource
module. Tosupportanon-source(compiledonly)distribution,thecompiledmodulemustbeinthesourcedirectory,
andtheremustnotbeasourcemodule.
Sometipsforexperts:
•Youcanusethe -Oor-OOswitchesonthePythoncommandtoreducethesizeofacompiledmodule. The -O
switchremovesassertstatements,the -OOswitchremovesbothassertstatementsand__doc__strings. Since
some programs may rely on having these available, you should only use this option if you know what you’re
doing. “Optimized”moduleshavean opt-tagandareusuallysmaller. Futurereleasesmaychangetheeffects
ofoptimization.
•Aprogramdoesn’trunanyfasterwhenitisreadfroma .pycfilethanwhenitisreadfroma .pyfile;theonly
thingthat’sfasterabout .pycfilesisthespeedwithwhichtheyareloaded.
•Themodule compileall cancreate.pycfilesforallmodulesinadirectory.
•Thereismoredetailonthisprocess,includingaflowchartofthedecisions,in PEP 3147.
6.2StandardModules
Pythoncomeswithalibraryofstandardmodules,describedinaseparatedocument,thePythonLibraryReference
(“Library Reference” hereafter). Some modules are built into the interpreter; these provide access to operations
that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access
to operating system primitives such as system calls. The set of such modules is a configuration option which also
dependsontheunderlyingplatform. Forexample,the winregmoduleisonlyprovidedonWindowssystems. One
particularmoduledeservessomeattention: sys,whichisbuiltintoeveryPythoninterpreter. Thevariables sys.ps1
andsys.ps2definethestringsusedasprimaryandsecondaryprompts:
>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> sys.ps1 ='C>'
C> print('Yuck!')
Yuck!
C>
Thesetwovariablesareonlydefinediftheinterpreterisininteractivemode.
Thevariable sys.path isalistofstringsthatdeterminestheinterpreter’ssearchpathformodules. Itisinitialized
toadefaultpathtakenfromtheenvironmentvariable PYTHONPATH ,orfromabuilt-indefaultif PYTHONPATH isnot
set. Youcanmodifyitusingstandardlistoperations:
46 Chapter6. Modules
PythonTutorial,Release3.13.0
>>> import sys
>>> sys.path .append( '/ufs/guido/lib/python ')
6.3The dir()Function
Thebuilt-infunction dir()isusedtofindoutwhichnamesamoduledefines. Itreturnsasortedlistofstrings:
>>> import fibo ,sys
>>> dir(fibo)
['__name__', 'fib', 'fib2']
>>> dir(sys)
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__',
'__interactivehook__', '__loader__', '__name__', '__package__', '__spec__',
'__stderr__', '__stdin__', '__stdout__', '__unraisablehook__',
'_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework',
'_getframe', '_git', '_home', '_xoptions', 'abiflags', 'addaudithook',
'api_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix',
'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing',
'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info',
'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info',
'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth',
'getallocatedblocks', 'getdefaultencoding', 'getdlopenflags',
'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile',
'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',
'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',
'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value',
'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks',
'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'pycache_prefix',
'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setdlopenflags',
'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr',
'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info',
'warnoptions']
Withoutarguments, dir()liststhenamesyouhavedefinedcurrently:
>>> a=[1,2,3,4,5]
>>> import fibo
>>> fib =fibo .fib
>>> dir()
['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']
Notethatitlistsalltypesofnames: variables,modules,functions,etc.
dir()doesnotlistthenamesofbuilt-infunctionsandvariables. Ifyouwantalistofthose,theyaredefinedinthe
standardmodule builtins :
>>> import builtins
>>> dir(builtins)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',
'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',
'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',
'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',
'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',
'FileExistsError', 'FileNotFoundError', 'FloatingPointError',
'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',
'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',
'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',
(continuesonnextpage)
6.3. The dir()Function 47
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',
'NotImplementedError', 'OSError', 'OverflowError',
'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',
'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',
'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',
'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',
'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',
'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',
'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',
'__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',
'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',
'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',
'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',
'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',
'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',
'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',
'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',
'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',
'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',
'zip']
6.4Packages
Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example, the
module name A.Bdesignates a submodule named Bin a package named A. Just like the use of modules saves the
authorsofdifferentmodulesfromhavingtoworryabouteachother’sglobalvariablenames,theuseofdottedmodule
names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other’s
modulenames.
Supposeyouwanttodesignacollectionofmodules(a“package”)fortheuniformhandlingofsoundfilesandsound
data. There are many different sound file formats (usually recognized by their extension, for example: .wav,.
aiff,.au), so you may need to create and maintain a growing collection of modules for the conversion between
thevariousfileformats. Therearealsomanydifferentoperationsyoumightwanttoperformonsounddata(suchas
mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be
writinganever-endingstreamofmodulestoperformtheseoperations. Here’sapossiblestructureforyourpackage
(expressedintermsofahierarchicalfilesystem):
sound/ Top-level package
__init__.py Initialize the sound package
formats/ Subpackage for file format conversions
__init__.py
wavread.py
wavwrite.py
aiffread.py
aiffwrite.py
auread.py
auwrite.py
...
effects/ Subpackage for sound effects
__init__.py
echo.py
surround.py
reverse.py
...
filters/ Subpackage for filters
__init__.py
(continuesonnextpage)
48 Chapter6. Modules
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
equalizer.py
vocoder.py
karaoke.py
...
Whenimportingthepackage,Pythonsearchesthroughthedirectorieson sys.path lookingforthepackagesubdi-
rectory.
The__init__.py files are required to make Python treat directories containing the file as packages (unless us-
ing a namespace package , a relatively advanced feature). This prevents directories with a common name, such as
string,fromunintentionallyhidingvalidmodulesthatoccurlateronthemodulesearchpath. Inthesimplestcase,
__init__.py canjustbeanemptyfile,butitcanalsoexecuteinitializationcodeforthepackageorsetthe __all__
variable,describedlater.
Usersofthepackagecanimportindividualmodulesfromthepackage,forexample:
import sound .effects .echo
Thisloadsthesubmodule sound.effects.echo . Itmustbereferencedwithitsfullname.
sound .effects .echo .echofilter( input , output, delay =0.7, atten =4)
Analternativewayofimportingthesubmoduleis:
from sound .effects import echo
Thisalsoloadsthesubmodule echo,andmakesitavailablewithoutitspackageprefix,soitcanbeusedasfollows:
echo .echofilter( input , output, delay =0.7, atten =4)
Yetanothervariationistoimportthedesiredfunctionorvariabledirectly:
from sound .effects .echo import echofilter
Again,thisloadsthesubmodule echo,butthismakesitsfunction echofilter() directlyavailable:
echofilter( input , output, delay =0.7, atten =4)
Notethatwhenusing from package import item , theitemcanbeeitherasubmodule(orsubpackage)ofthe
package,orsomeothernamedefinedinthepackage,likeafunction,classorvariable. The importstatementfirst
testswhethertheitemisdefinedinthepackage;ifnot,itassumesitisamoduleandattemptstoloadit. Ifitfailsto
findit,an ImportError exceptionisraised.
Contrarily,whenusingsyntaxlike import item.subitem.subsubitem ,eachitemexceptforthelastmustbea
package;thelastitemcanbeamoduleorapackagebutcan’tbeaclassorfunctionorvariabledefinedintheprevious
item.
6.4.1Importing*FromaPackage
Now what happens when the user writes from sound.effects import * ? Ideally, one would hope that this
somehowgoesouttothefilesystem,findswhichsubmodulesarepresentinthepackage,andimportsthemall. This
couldtakealongtimeandimportingsub-modulesmighthaveunwantedside-effectsthatshouldonlyhappenwhen
thesub-moduleisexplicitlyimported.
Theonlysolutionisforthepackageauthortoprovideanexplicitindexofthepackage. The importstatementuses
thefollowingconvention: ifapackage’s __init__.py codedefinesalistnamed __all__,itistakentobethelist
ofmodulenamesthatshouldbeimportedwhen from package import * isencountered. Itisuptothepackage
authortokeepthislistup-to-datewhenanewversionofthepackageisreleased. Packageauthorsmayalsodecide
nottosupportit,iftheydon’tseeauseforimporting*fromtheirpackage. Forexample,thefile sound/effects/
__init__.py couldcontainthefollowingcode:
6.4. Packages 49
PythonTutorial,Release3.13.0
__all__ =["echo ","surround ","reverse "]
This would mean that from sound.effects import * would import the three named submodules of the
sound.effects package.
Beawarethatsubmodulesmightbecomeshadowedbylocallydefinednames. Forexample,ifyouaddeda reverse
function to the sound/effects/__init__.py file, the from sound.effects import * would only import
the two submodules echoandsurround , butnotthereversesubmodule, because it is shadowed by the locally
defined reversefunction:
__all__ =[
"echo ", # refers to the 'echo.py' file
"surround ",# refers to the 'surround.py' file
"reverse ", # !!! refers to the 'reverse' function now !!!
]
def reverse (msg: str): # <-- this name shadows the 'reverse.py' submodule
return msg[:: -1] # in the case of a 'from sound.effects import *'
If__all__isnotdefined,thestatement from sound.effects import * doesnotimportallsubmodulesfrom
the package sound.effects into the current namespace; it only ensures that the package sound.effects has
been imported (possibly running any initialization code in __init__.py ) and then imports whatever names are
defined in the package. This includes any names defined (and submodules explicitly loaded) by __init__.py . It
alsoincludesanysubmodulesofthepackagethatwereexplicitlyloadedbyprevious importstatements. Consider
thiscode:
import sound .effects .echo
import sound .effects .surround
from sound .effects import *
Inthisexample,the echoandsurround modulesareimportedinthecurrentnamespacebecausetheyaredefinedin
thesound.effects packagewhenthe from...import statementisexecuted. (Thisalsoworkswhen __all__
isdefined.)
Althoughcertainmodulesaredesignedtoexportonlynamesthatfollowcertainpatternswhenyouuse import * ,
itisstillconsideredbadpracticeinproductioncode.
Remember, there is nothing wrong with using from package import specific_submodule ! In fact, this is
therecommendednotationunlesstheimportingmoduleneedstousesubmoduleswiththesamenamefromdifferent
packages.
6.4.2Intra-packageReferences
Whenpackagesarestructuredintosubpackages(aswiththe soundpackageintheexample),youcanuseabsolute
importstorefertosubmodulesofsiblingspackages. Forexample,ifthemodule sound.filters.vocoder needs
tousethe echomoduleinthe sound.effects package,itcanuse from sound.effects import echo .
Youcanalsowriterelativeimports, withthe from module import name formofimportstatement. Theseim-
portsuseleadingdotstoindicatethecurrentandparentpackagesinvolvedintherelativeimport. Fromthe surround
moduleforexample,youmightuse:
from .import echo
from ..import formats
from ..filters import equalizer
Note that relative imports are based on the name of the current module. Since the name of the main module is
always "__main__" ,modulesintendedforuseasthemainmoduleofaPythonapplicationmustalwaysuseabsolute
imports.
50 Chapter6. Modules
PythonTutorial,Release3.13.0
6.4.3PackagesinMultipleDirectories
Packagessupportonemorespecialattribute, __path__ . Thisisinitializedtobea sequenceofstringscontainingthe
nameofthedirectoryholdingthepackage’s __init__.py beforethecodeinthatfileisexecuted. Thisvariablecan
bemodified;doingsoaffectsfuturesearchesformodulesandsubpackagescontainedinthepackage.
Whilethisfeatureisnotoftenneeded,itcanbeusedtoextendthesetofmodulesfoundinapackage.
6.4. Packages 51
PythonTutorial,Release3.13.0
52 Chapter6. Modules
CHAPTER
SEVEN
INPUTANDOUTPUT
Thereareseveralwaystopresenttheoutputofaprogram;datacanbeprintedinahuman-readableform,orwritten
toafileforfutureuse. Thischapterwilldiscusssomeofthepossibilities.
7.1FancierOutputFormatting
Sofarwe’veencounteredtwowaysofwritingvalues: expression statements andthe print()function. (Athirdway
is using the write()method of file objects; the standard output file can be referenced as sys.stdout . See the
LibraryReferenceformoreinformationonthis.)
Oftenyou’llwantmorecontrolovertheformattingofyouroutputthansimplyprintingspace-separatedvalues. There
areseveralwaystoformatoutput.
•Touse formatted string literals ,beginastringwith forFbeforetheopeningquotationmarkortriplequotation
mark. Inside this string, you can write a Python expression between {and}characters that can refer to
variablesorliteralvalues.
>>> year =2016
>>> event ='Referendum '
>>> f'Results of the {year }{event }'
'Results of the 2016 Referendum'
•Thestr.format() methodofstringsrequiresmoremanualeffort. You’llstilluse {and}tomarkwherea
variablewillbesubstitutedandcanprovidedetailedformattingdirectives,butyou’llalsoneedtoprovidethe
informationtobeformatted. Inthefollowingcodeblocktherearetwoexamplesofhowtoformatvariables:
>>> yes_votes =42_572_654
>>> total_votes =85_705_149
>>> percentage =yes_votes /total_votes
>>> '{:-9} YES votes {:2.2%} '.format(yes_votes, percentage)
' 42572654 YES votes 49.67%'
Notice how the yes_votes are padded with spaces and a negative sign only for negative numbers. The
examplealsoprints percentage multipliedby100,with2decimalplacesandfollowedbyapercentsign(see
formatspecfordetails).
•Finally,youcandoallthestringhandlingyourselfbyusingstringslicingandconcatenationoperationstocreate
any layout you can imagine. The string type has some methods that perform useful operations for padding
stringstoagivencolumnwidth.
Whenyoudon’tneedfancyoutputbutjustwantaquickdisplayofsomevariablesfordebuggingpurposes,youcan
convertanyvaluetoastringwiththe repr()orstr()functions.
Thestr()function is meant to return representations of values which are fairly human-readable, while repr()
ismeanttogeneraterepresentationswhichcanbereadbytheinterpreter(orwillforcea SyntaxError ifthereis
noequivalentsyntax). Forobjectswhichdon’thaveaparticularrepresentationforhumanconsumption, str()will
return the same value as repr(). Many values, such as numbers or structures like lists and dictionaries, have the
samerepresentationusingeitherfunction. Strings,inparticular,havetwodistinctrepresentations.
53
PythonTutorial,Release3.13.0
Someexamples:
>>> s='Hello, world. '
>>> str(s)
'Hello, world.'
>>> repr (s)
"'Hello, world.'"
>>> str(1/7)
'0.14285714285714285'
>>> x=10*3.25
>>> y=200 *200
>>> s='The value of x is '+repr (x) +', and y is '+repr (y) +'...'
>>> print (s)
The value of x is 32.5, and y is 40000...
>>> # The repr() of a string adds string quotes and backslashes:
>>> hello ='hello, world \n'
>>> hellos =repr (hello)
>>> print (hellos)
'hello, world\n'
>>> # The argument to repr() may be any Python object:
>>> repr ((x, y, ( 'spam ','eggs ')))
"(32.5, 40000, ('spam', 'eggs'))"
Thestringmodule contains a Template class that offers yet another way to substitute values into strings, using
placeholderslike $xandreplacingthemwithvaluesfromadictionary,butoffersmuchlesscontroloftheformatting.
7.1.1FormattedStringLiterals
Formattedstringliterals(alsocalledf-stringsforshort)letyouincludethevalueofPythonexpressionsinsideastring
byprefixingthestringwith forFandwritingexpressionsas {expression} .
Anoptionalformatspecifiercanfollowtheexpression. Thisallowsgreatercontroloverhowthevalueisformatted.
Thefollowingexampleroundspitothreeplacesafterthedecimal:
>>> import math
>>> print (f'The value of pi is approximately {math .pi:.3f}.')
The value of pi is approximately 3.142.
Passinganintegerafterthe ':'willcausethatfieldtobeaminimumnumberofcharacterswide. Thisisusefulfor
makingcolumnslineup.
>>> table ={'Sjoerd ':4127 ,'Jack ':4098 ,'Dcab ':7678 }
>>> for name, phone intable .items():
... print (f'{name :10}==> {phone :10d}')
...
Sjoerd ==> 4127
Jack ==> 4098
Dcab ==> 7678
Othermodifierscanbeusedtoconvertthevaluebeforeitisformatted. '!a'applies ascii(),'!s'applies str(),
and'!r'applies repr():
>>> animals ='eels '
>>> print (f'My hovercraft is full of {animals }.')
My hovercraft is full of eels.
>>> print (f'My hovercraft is full of {animals !r}.')
My hovercraft is full of 'eels'.
The=specifiercanbeusedtoexpandanexpressiontothetextoftheexpression,anequalsign,thentherepresentation
oftheevaluatedexpression:
54 Chapter7. InputandOutput
PythonTutorial,Release3.13.0
>>> bugs ='roaches '
>>> count =13
>>> area ='living room '
>>> print (f'Debugging {bugs =}{count =}{area =}')
Debugging bugs='roaches' count=13 area='living room'
Seeself-documentingexpressionsformoreinformationonthe =specifier. Forareferenceontheseformatspecifi-
cations,seethereferenceguidefortheformatspec.
7.1.2TheStringformat()Method
Basicusageofthe str.format() methodlookslikethis:
>>> print ('We are the {}who say "{}!"'.format( 'knights ','Ni'))
We are the knights who say "Ni!"
The brackets and characters within them (called format fields) are replaced with the objects passed into the str.
format() method. A number in the brackets can be used to refer to the position of the object passed into the
str.format() method.
>>> print ('{0} and {1}'.format( 'spam ','eggs '))
spam and eggs
>>> print ('{1} and {0}'.format( 'spam ','eggs '))
eggs and spam
Ifkeywordargumentsareusedinthe str.format() method,theirvaluesarereferredtobyusingthenameofthe
argument.
>>> print ('This {food} is{adjective} .'.format(
... food ='spam ', adjective ='absolutely horrible '))
This spam is absolutely horrible.
Positionalandkeywordargumentscanbearbitrarilycombined:
>>> print ('The story of {0},{1}, and {other} .'.format( 'Bill ','Manfred ',
... other ='Georg '))
The story of Bill, Manfred, and Georg.
If you have a really long format string that you don’t want to split up, it would be nice if you could reference the
variables to be formatted by name instead of by position. This can be done by simply passing the dict and using
squarebrackets '[]'toaccessthekeys.
>>> table ={'Sjoerd ':4127 ,'Jack ':4098 ,'Dcab ':8637678 }
>>> print ('Jack: {0[Jack]:d} ; Sjoerd: {0[Sjoerd]:d} ;'
... 'Dcab: {0[Dcab]:d} '.format(table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678
Thiscouldalsobedonebypassingthe tabledictionaryaskeywordargumentswiththe **notation.
>>> table ={'Sjoerd ':4127 ,'Jack ':4098 ,'Dcab ':8637678 }
>>> print ('Jack: {Jack:d} ; Sjoerd: {Sjoerd:d} ; Dcab: {Dcab:d} '.format( **table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678
This is particularly useful in combination with the built-in function vars(), which returns a dictionary containing
alllocalvariables:
>>> table ={k: str(v) for k, v invars ().items()}
>>> message ="".join([ f'{k}:'+'{'+k+'};'for kintable .keys()])
(continuesonnextpage)
7.1. FancierOutputFormatting 55
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
>>> print (message .format( **table))
__name__: __main__; __doc__: None; __package__: None; __loader__: ...
Asanexample,thefollowinglinesproduceatidilyalignedsetofcolumnsgivingintegersandtheirsquaresandcubes:
>>> for xinrange (1,11):
... print ('{0:2d} {1:3d} {2:4d} '.format(x, x *x, x *x*x))
...
1 1 1
2 4 8
3 9 27
4 16 64
5 25 125
6 36 216
7 49 343
8 64 512
9 81 729
10 100 1000
Foracompleteoverviewofstringformattingwith str.format() ,seeformatstrings.
7.1.3ManualStringFormatting
Here’sthesametableofsquaresandcubes,formattedmanually:
>>> for xinrange (1,11):
... print (repr (x).rjust( 2),repr (x*x).rjust( 3), end ='')
... # Note use of 'end' on previous line
... print (repr (x*x*x).rjust( 4))
...
1 1 1
2 4 8
3 9 27
4 16 64
5 25 125
6 36 216
7 49 343
8 64 512
9 81 729
10 100 1000
(Notethattheonespacebetweeneachcolumnwasaddedbytheway print()works: italwaysaddsspacesbetween
itsarguments.)
Thestr.rjust() methodofstringobjectsright-justifiesastringinafieldofagivenwidthbypaddingitwithspaces
ontheleft. Therearesimilarmethods str.ljust() andstr.center() . Thesemethodsdonotwriteanything,
theyjustreturnanewstring. Iftheinputstringistoolong,theydon’ttruncateit,butreturnitunchanged; thiswill
mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If
youreallywanttruncationyoucanalwaysaddasliceoperation,asin x.ljust(n)[:n] .)
There is another method, str.zfill() , which pads a numeric string on the left with zeros. It understands about
plusandminussigns:
>>> '12'.zfill( 5)
'00012'
>>> '-3.14 '.zfill( 7)
'-003.14'
(continuesonnextpage)
56 Chapter7. InputandOutput
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
>>> '3.14159265359 '.zfill( 5)
'3.14159265359'
7.1.4Oldstringformatting
The % operator (modulo) can also be used for string formatting. Given format % values (where formatis a
string), %conversion specifications in formatare replaced with zero or more elements of values. This operation is
commonlyknownasstringinterpolation. Forexample:
>>> import math
>>> print ('The value of pi is approximately %5.3f .'%math .pi)
The value of pi is approximately 3.142.
Moreinformationcanbefoundintheold-string-formattingsection.
7.2ReadingandWritingFiles
open()returnsa file object,andismostcommonlyusedwithtwopositionalargumentsandonekeywordargument:
open(filename, mode, encoding=None)
>>> f=open ('workfile ','w', encoding ="utf-8 ")
The first argument is a string containing the filename. The second argument is another string containing a few
charactersdescribingthewayinwhichthefilewillbeused. modecanbe 'r'whenthefilewillonlyberead, 'w'
foronlywriting(anexistingfilewiththesamenamewillbeerased),and 'a'opensthefileforappending;anydata
written to the file is automatically added to the end. 'r+'opens the file for both reading and writing. The mode
argumentisoptional; 'r'willbeassumedifit’somitted.
Normally,filesareopenedin text mode,thatmeans,youreadandwritestringsfromandtothefile,whichareencoded
inaspecific encoding. Ifencodingisnotspecified,thedefaultisplatformdependent(see open()). BecauseUTF-
8 is the modern de-facto standard, encoding="utf-8" is recommended unless you know that you need to use a
differentencoding. Appendinga 'b'tothemodeopensthefilein binary mode . Binarymodedataisreadandwritten
asbytesobjects. Youcannotspecify encodingwhenopeningfileinbinarymode.
Intextmode,thedefaultwhenreadingistoconvertplatform-specificlineendings( \nonUnix, \r\nonWindows)
to just \n. When writing in text mode, the default is to convert occurrences of \nback to platform-specific line
endings. Thisbehind-the-scenesmodificationtofiledataisfinefortextfiles,butwillcorruptbinarydatalikethatin
JPEGorEXEfiles. Beverycarefultousebinarymodewhenreadingandwritingsuchfiles.
Itisgoodpracticetousethe withkeywordwhendealingwithfileobjects. Theadvantageisthatthefileisproperly
closed after its suite finishes, even if an exception is raised at some point. Using withis also much shorter than
writingequivalent try-finallyblocks:
>>> with open ('workfile ', encoding ="utf-8 ")asf:
... read_data =f.read()
>>> # We can check that the file has been automatically closed.
>>> f.closed
True
Ifyou’renotusingthe withkeyword,thenyoushouldcall f.close() toclosethefileandimmediatelyfreeupany
systemresourcesusedbyit.
ÁWarning
Calling f.write() without using the withkeyword or calling f.close() mightresult in the arguments of
f.write() notbeingcompletelywrittentothedisk,eveniftheprogramexitssuccessfully.
7.2. ReadingandWritingFiles 57
PythonTutorial,Release3.13.0
Afterafileobjectisclosed,eitherbya withstatementorbycalling f.close() ,attemptstousethefileobjectwill
automaticallyfail.
>>> f.close()
>>> f.read()
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
ValueError : I/O operation on closed file.
7.2.1MethodsofFileObjects
Therestoftheexamplesinthissectionwillassumethatafileobjectcalled fhasalreadybeencreated.
To read a file’s contents, call f.read(size) , which reads some quantity of data and returns it as a string (in text
mode)orbytesobject(inbinarymode). sizeisanoptionalnumericargument. When sizeisomittedornegative,the
entire contents of the file will be read and returned; it’s your problem if the file is twice as large as your machine’s
memory. Otherwise, atmost sizecharacters(intextmode)or sizebytes(inbinarymode)arereadandreturned. If
theendofthefilehasbeenreached, f.read() willreturnanemptystring( '').
>>> f.read()
'This is the entire file.\n'
>>> f.read()
''
f.readline() readsasinglelinefromthefile;anewlinecharacter( \n)isleftattheendofthestring,andisonly
omittedonthelastlineofthefileifthefiledoesn’tendinanewline. Thismakesthereturnvalueunambiguous; if
f.readline() returns an empty string, the end of the file has been reached, while a blank line is represented by
'\n',astringcontainingonlyasinglenewline.
>>> f.readline()
'This is the first line of the file.\n'
>>> f.readline()
'Second line of the file\n'
>>> f.readline()
''
For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple
code:
>>> for line inf:
... print (line, end ='')
...
This is the first line of the file.
Second line of the file
Ifyouwanttoreadallthelinesofafileinalistyoucanalsouse list(f)orf.readlines() .
f.write(string) writesthecontentsof stringtothefile,returningthenumberofcharacterswritten.
>>> f.write( 'This is a test \n')
15
Othertypesofobjectsneedtobeconverted–eithertoastring(intextmode)orabytesobject(inbinarymode)–
beforewritingthem:
>>> value =('the answer ',42)
>>> s=str(value) # convert the tuple to string
>>> f.write(s)
18
58 Chapter7. InputandOutput
PythonTutorial,Release3.13.0
f.tell() returnsanintegergivingthefileobject’scurrentpositioninthefilerepresentedasnumberofbytesfrom
thebeginningofthefilewheninbinarymodeandanopaquenumberwhenintextmode.
Tochangethefileobject’sposition,use f.seek(offset, whence) . Thepositioniscomputedfromadding offset
toareferencepoint;thereferencepointisselectedbythe whenceargument. A whencevalueof0measuresfromthe
beginningofthefile,1usesthecurrentfileposition,and2usestheendofthefileasthereferencepoint. whencecan
beomittedanddefaultsto0,usingthebeginningofthefileasthereferencepoint.
>>> f=open ('workfile ','rb+')
>>> f.write( b'0123456789abcdef ')
16
>>> f.seek( 5) # Go to the 6th byte in the file
5
>>> f.read( 1)
b'5'
>>> f.seek( -3,2)# Go to the 3rd byte before the end
13
>>> f.read( 1)
b'd'
Intextfiles(thoseopenedwithouta binthemodestring),onlyseeksrelativetothebeginningofthefileareallowed
(theexceptionbeingseekingtotheveryfileendwith seek(0, 2) )andtheonlyvalid offsetvaluesarethosereturned
fromthe f.tell() ,orzero. Anyother offsetvalueproducesundefinedbehaviour.
File objects have some additional methods, such as isatty() andtruncate() which are less frequently used;
consulttheLibraryReferenceforacompleteguidetofileobjects.
7.2.2Savingstructureddatawith json
Stringscaneasilybewrittentoandreadfromafile. Numberstakeabitmoreeffort,sincethe read()methodonly
returnsstrings,whichwillhavetobepassedtoafunctionlike int(),whichtakesastringlike '123'andreturnsits
numericvalue123. Whenyouwanttosavemorecomplexdatatypeslikenestedlistsanddictionaries,parsingand
serializingbyhandbecomescomplicated.
Ratherthanhavingusersconstantlywritinganddebuggingcodetosavecomplicateddatatypestofiles,Pythonallows
youtousethepopulardatainterchangeformatcalled JSON(JavaScriptObjectNotation) . Thestandardmodulecalled
jsoncantakePythondatahierarchies,andconvertthemtostringrepresentations;thisprocessiscalled serializing.
Reconstructingthedatafromthestringrepresentationiscalled deserializing . Betweenserializinganddeserializing,
thestringrepresentingtheobjectmayhavebeenstoredinafileordata,orsentoveranetworkconnectiontosome
distantmachine.
®Note
TheJSONformatiscommonlyusedbymodernapplicationstoallowfordataexchange. Manyprogrammersare
alreadyfamiliarwithit,whichmakesitagoodchoiceforinteroperability.
Ifyouhaveanobject x,youcanviewitsJSONstringrepresentationwithasimplelineofcode:
>>> import json
>>> x=[1,'simple ','list ']
>>> json .dumps(x)
'[1, "simple", "list"]'
Anothervariantofthe dumps()function,called dump(),simplyserializestheobjecttoa text file. Soif fisatext
fileobjectopenedforwriting,wecandothis:
json .dump(x, f)
Todecodetheobjectagain,if fisabinary file ortext fileobjectwhichhasbeenopenedforreading:
7.2. ReadingandWritingFiles 59
PythonTutorial,Release3.13.0
x=json .load(f)
®Note
JSONfilesmustbeencodedinUTF-8. Use encoding="utf-8" whenopeningJSONfileasa text fileforboth
ofreadingandwriting.
Thissimpleserializationtechniquecanhandlelistsanddictionaries,butserializingarbitraryclassinstancesinJSON
requiresabitofextraeffort. Thereferenceforthe jsonmodulecontainsanexplanationofthis.
µSeealso
pickle-thepicklemodule
Contrary to JSON,pickleis a protocol which allows the serialization of arbitrarily complex Python objects. As
such,itisspecifictoPythonandcannotbeusedtocommunicatewithapplicationswritteninotherlanguages. It
isalsoinsecurebydefault: deserializingpickledatacomingfromanuntrustedsourcecanexecutearbitrarycode,
ifthedatawascraftedbyaskilledattacker.
60 Chapter7. InputandOutput
CHAPTER
EIGHT
ERRORSANDEXCEPTIONS
Untilnowerrormessageshaven’tbeenmorethanmentioned,butifyouhavetriedouttheexamplesyouhaveprobably
seensome. Thereare(atleast)twodistinguishablekindsoferrors: syntax errors andexceptions.
8.1SyntaxErrors
Syntaxerrors,alsoknownasparsingerrors,areperhapsthemostcommonkindofcomplaintyougetwhileyouare
stilllearningPython:
>>> while True print ('Hello world ')
File "<stdin>" , line 1
while True print ('Hello world ')
^^^^^
SyntaxError : invalid syntax
Theparserrepeatstheoffendinglineanddisplayslittle‘arrow’spointingatthetokeninthelinewheretheerrorwas
detected. Theerrormaybecausedbytheabsenceofatoken beforetheindicatedtoken. Intheexample,theerroris
detectedatthefunction print(),sinceacolon( ':') ismissingbeforeit. Filenameandlinenumberareprinted
soyouknowwheretolookincasetheinputcamefromascript.
8.2Exceptions
Evenifastatementorexpressionissyntacticallycorrect,itmaycauseanerrorwhenanattemptismadetoexecute
it. Errorsdetectedduringexecutionarecalled exceptionsandarenotunconditionallyfatal: youwillsoonlearnhow
to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error
messagesasshownhere:
>>> 10*(1/0)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
10*(1/0)
~^~
ZeroDivisionError : division by zero
>>> 4+spam *3
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
4+spam *3
^^^^
NameError : name 'spam' is not defined
>>> '2'+2
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
'2'+2
~~~~^~~
TypeError : can only concatenate str (not "int") to str
61
PythonTutorial,Release3.13.0
The last line of the error message indicates what happened. Exceptions come in different types, and the type is
printedaspartofthemessage: thetypesintheexampleare ZeroDivisionError ,NameError andTypeError .
Thestringprintedastheexceptiontypeisthenameofthebuilt-inexceptionthatoccurred. Thisistrueforallbuilt-in
exceptions,butneednotbetrueforuser-definedexceptions(althoughitisausefulconvention). Standardexception
namesarebuilt-inidentifiers(notreservedkeywords).
Therestofthelineprovidesdetailbasedonthetypeofexceptionandwhatcausedit.
The preceding part of the error message shows the context where the exception occurred, in the form of a stack
traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from
standardinput.
bltin-exceptionsliststhebuilt-inexceptionsandtheirmeanings.
8.3HandlingExceptions
Itispossibletowriteprogramsthathandleselectedexceptions. Lookatthefollowingexample,whichaskstheuser
for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C
or whatever the operating system supports); note that a user-generated interruption is signalled by raising the
KeyboardInterrupt exception.
>>> while True :
... try:
... x=int(input ("Please enter a number: "))
... break
... except ValueError :
... print ("Oops! That was no valid number. Try again... ")
...
Thetrystatementworksasfollows.
•First,the try clause(thestatement(s)betweenthe tryandexceptkeywords)isexecuted.
•Ifnoexceptionoccurs,the except clause isskippedandexecutionofthe trystatementisfinished.
•Ifanexceptionoccursduringexecutionofthe tryclause,therestoftheclauseisskipped. Then,ifitstype
matches the exception named after the exceptkeyword, the except clause is executed, and then execution
continuesafterthetry/exceptblock.
•Ifanexceptionoccurswhichdoesnotmatchtheexceptionnamedinthe except clause ,itispassedontoouter
trystatements;ifnohandlerisfound,itisan unhandled exception andexecutionstopswithanerrormessage.
Atrystatement may have more than one except clause , to specify handlers for different exceptions. At most one
handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other
handlers of the same trystatement. An except clause may name multiple exceptions as a parenthesized tuple, for
example:
...except (RuntimeError ,TypeError ,NameError ):
... pass
Aclassinan exceptclausematchesexceptionswhichareinstancesoftheclassitselforoneofitsderivedclasses
(butnottheotherwayaround—an except clause listingaderivedclassdoesnotmatchinstancesofitsbaseclasses).
Forexample,thefollowingcodewillprintB,C,Dinthatorder:
class B(Exception ):
pass
class C(B):
pass
class D(C):
(continuesonnextpage)
62 Chapter8. ErrorsandExceptions
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
pass
for cls in[B, C, D]:
try:
raise cls()
except D:
print ("D")
except C:
print ("C")
except B:
print ("B")
Notethatifthe except clauses werereversed(with except B first),itwouldhaveprintedB,B,B—thefirstmatching
except clause istriggered.
When an exception occurs, it may have associated values, also known as the exception’s arguments. The presence
andtypesoftheargumentsdependontheexceptiontype.
Theexcept clause mayspecifyavariableaftertheexceptionname. Thevariableisboundtotheexceptioninstance
which typically has an argsattribute that stores the arguments. For convenience, builtin exception types define
__str__() toprintalltheargumentswithoutexplicitlyaccessing .args.
>>> try:
... raise Exception ('spam ','eggs ')
... except Exception asinst:
... print (type (inst)) # the exception type
... print (inst .args) # arguments stored in .args
... print (inst) # __str__ allows args to be printed directly,
... # but may be overridden in exception subclasses
... x, y =inst .args # unpack args
... print ('x =', x)
... print ('y =', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
Theexception’s __str__() outputisprintedasthelastpart(‘detail’)ofthemessageforunhandledexceptions.
BaseException isthecommonbaseclassofallexceptions. Oneofitssubclasses, Exception ,isthebaseclassof
allthenon-fatalexceptions. Exceptionswhicharenotsubclassesof Exception arenottypicallyhandled,because
they are used to indicate that the program should terminate. They include SystemExit which is raised by sys.
exit()andKeyboardInterrupt whichisraisedwhenauserwishestointerrupttheprogram.
Exception canbeusedasawildcardthatcatches(almost)everything. However,itisgoodpracticetobeasspecific
aspossiblewiththetypesofexceptionsthatweintendtohandle,andtoallowanyunexpectedexceptionstopropagate
on.
Themostcommonpatternforhandling Exception istoprintorlogtheexceptionandthenre-raiseit(allowinga
callertohandletheexceptionaswell):
import sys
try:
f=open ('myfile.txt ')
s=f.readline()
i=int(s.strip())
(continuesonnextpage)
8.3. HandlingExceptions 63
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
except OSError aserr:
print ("OS error: ", err)
except ValueError :
print ("Could not convert data to an integer. ")
except Exception aserr:
print (f"Unexpected {err=},{type (err) =}")
raise
Thetry…exceptstatementhasanoptional else clause,which,whenpresent,mustfollowall except clauses . Itis
usefulforcodethatmustbeexecutedifthe try clausedoesnotraiseanexception. Forexample:
for arg insys.argv[ 1:]:
try:
f=open (arg, 'r')
except OSError :
print ('cannot open ', arg)
else :
print (arg, 'has',len(f.readlines()), 'lines ')
f.close()
The use of the elseclause is better than adding additional code to the tryclause because it avoids accidentally
catchinganexceptionthatwasn’traisedbythecodebeingprotectedbythe try…exceptstatement.
Exceptionhandlersdonothandleonlyexceptionsthatoccurimmediatelyinthe try clause,butalsothosethatoccur
insidefunctionsthatarecalled(evenindirectly)inthe try clause. Forexample:
>>> def this_fails ():
... x=1/0
...
>>> try:
... this_fails()
... except ZeroDivisionError aserr:
... print ('Handling run-time error: ', err)
...
Handling run-time error: division by zero
8.4RaisingExceptions
Theraisestatementallowstheprogrammertoforceaspecifiedexceptiontooccur. Forexample:
>>> raise NameError ('HiThere ')
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
raise NameError ('HiThere ')
NameError : HiThere
The sole argument to raiseindicates the exception to be raised. This must be either an exception instance or an
exception class (a class that derives from BaseException , such as Exception or one of its subclasses). If an
exceptionclassispassed,itwillbeimplicitlyinstantiatedbycallingitsconstructorwithnoarguments:
raise ValueError # shorthand for 'raise ValueError()'
Ifyouneedtodeterminewhetheranexceptionwasraisedbutdon’tintendtohandleit,asimplerformofthe raise
statementallowsyoutore-raisetheexception:
64 Chapter8. ErrorsandExceptions
PythonTutorial,Release3.13.0
>>> try:
... raise NameError ('HiThere ')
... except NameError :
... print ('An exception flew by! ')
... raise
...
An exception flew by!
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
raise NameError ('HiThere ')
NameError : HiThere
8.5ExceptionChaining
If an unhandled exception occurs inside an exceptsection, it will have the exception being handled attached to it
andincludedintheerrormessage:
>>> try:
... open ("database.sqlite ")
... except OSError :
... raise RuntimeError ("unable to handle error ")
...
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
open ("database.sqlite ")
~~~~^^^^^^^^^^^^^^^^^^^
FileNotFoundError : [Errno 2] No such file or directory: 'database.sqlite'
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
File "<stdin>" , line 4, in <module>
raise RuntimeError ("unable to handle error ")
RuntimeError : unable to handle error
Toindicatethatanexceptionisadirectconsequenceofanother,the raisestatementallowsanoptional fromclause:
# exc must be exception instance or None.
raise RuntimeError from exc
Thiscanbeusefulwhenyouaretransformingexceptions. Forexample:
>>> def func ():
... raise ConnectionError
...
>>> try:
... func()
... except ConnectionError asexc:
... raise RuntimeError ('Failed to open database ')from exc
...
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
func()
~~~~^^
File "<stdin>" , line 2, in func
ConnectionError
(continuesonnextpage)
8.5. ExceptionChaining 65
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
File "<stdin>" , line 4, in <module>
raise RuntimeError ('Failed to open database ')from exc
RuntimeError : Failed to open database
Italsoallowsdisablingautomaticexceptionchainingusingthe from None idiom:
>>> try:
... open ('database.sqlite ')
... except OSError :
... raise RuntimeError from None
...
Traceback (most recent call last):
File "<stdin>" , line 4, in <module>
raise RuntimeError from None
RuntimeError
Formoreinformationaboutchainingmechanics,seebltin-exceptions.
8.6User-definedExceptions
Programs may name their own exceptions by creating a new exception class (see Classesfor more about Python
classes). Exceptionsshouldtypicallybederivedfromthe Exception class,eitherdirectlyorindirectly.
Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only
offeringanumberofattributesthatallowinformationabouttheerrortobeextractedbyhandlersfortheexception.
Mostexceptionsaredefinedwithnamesthatendin“Error”,similartothenamingofthestandardexceptions.
Manystandardmodulesdefinetheirownexceptionstoreporterrorsthatmayoccurinfunctionstheydefine.
8.7DefiningClean-upActions
Thetrystatement has another optional clause which is intended to define clean-up actions that must be executed
underallcircumstances. Forexample:
>>> try:
... raise KeyboardInterrupt
... finally :
... print ('Goodbye, world! ')
...
Goodbye, world!
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
raise KeyboardInterrupt
KeyboardInterrupt
Ifafinallyclauseispresent,the finallyclausewillexecuteasthelasttaskbeforethe trystatementcompletes.
Thefinallyclause runs whether or not the trystatement produces an exception. The following points discuss
morecomplexcaseswhenanexceptionoccurs:
•Ifanexceptionoccursduringexecutionofthe tryclause,theexceptionmaybehandledbyan exceptclause.
Iftheexceptionisnothandledbyan exceptclause,theexceptionisre-raisedafterthe finallyclausehas
beenexecuted.
66 Chapter8. ErrorsandExceptions
PythonTutorial,Release3.13.0
•An exception could occur during execution of an exceptorelseclause. Again, the exception is re-raised
afterthe finallyclausehasbeenexecuted.
•Ifthe finallyclauseexecutesa break,continue orreturnstatement,exceptionsarenotre-raised.
•Ifthe trystatementreachesa break,continue orreturnstatement,the finallyclausewillexecutejust
priortothe break,continue orreturnstatement’sexecution.
•If afinallyclause includes a returnstatement, the returned value will be the one from the finally
clause’s returnstatement,notthevaluefromthe tryclause’s returnstatement.
Forexample:
>>> def bool_return ():
... try:
... return True
... finally :
... return False
...
>>> bool_return()
False
Amorecomplicatedexample:
>>> def divide (x, y):
... try:
... result =x/y
... except ZeroDivisionError :
... print ("division by zero! ")
... else :
... print ("result is ", result)
... finally :
... print ("executing finally clause ")
...
>>> divide( 2,1)
result is 2.0
executing finally clause
>>> divide( 2,0)
division by zero!
executing finally clause
>>> divide( "2","1")
executing finally clause
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
divide( "2","1")
~~~~~~^^^^^^^^^^
File "<stdin>" , line 3, in divide
result =x/y
~~^~~
TypeError : unsupported operand type(s) for /: 'str' and 'str'
Asyoucansee,the finallyclauseisexecutedinanyevent. The TypeError raisedbydividingtwostringsisnot
handledbythe exceptclauseandthereforere-raisedafterthe finallyclausehasbeenexecuted.
In real world applications, the finallyclause is useful for releasing external resources (such as files or network
connections),regardlessofwhethertheuseoftheresourcewassuccessful.
8.7. DefiningClean-upActions 67
PythonTutorial,Release3.13.0
8.8PredefinedClean-upActions
Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of
whetherornottheoperationusingtheobjectsucceededorfailed. Lookatthefollowingexample,whichtriestoopen
afileandprintitscontentstothescreen.
for line inopen ("myfile.txt "):
print (line, end ="")
Theproblemwiththiscodeisthatitleavesthefileopenforanindeterminateamountoftimeafterthispartofthe
codehasfinishedexecuting. Thisisnotanissueinsimplescripts,butcanbeaproblemforlargerapplications. The
withstatement allows objects like files to be used in a way that ensures they are always cleaned up promptly and
correctly.
with open ("myfile.txt ")asf:
for line inf:
print (line, end ="")
Afterthestatementisexecuted,thefile fisalwaysclosed,evenifaproblemwasencounteredwhileprocessingthe
lines. Objectswhich,likefiles,providepredefinedclean-upactionswillindicatethisintheirdocumentation.
8.9RaisingandHandlingMultipleUnrelatedExceptions
There are situations where it is necessary to report several exceptions that have occurred. This is often the case in
concurrencyframeworks,whenseveraltasksmayhavefailedinparallel,buttherearealsootherusecaseswhereit
isdesirabletocontinueexecutionandcollectmultipleerrorsratherthanraisethefirstexception.
Thebuiltin ExceptionGroup wrapsalistofexceptioninstancessothattheycanberaisedtogether. Itisanexception
itself,soitcanbecaughtlikeanyotherexception.
>>> def f():
... excs =[OSError ('error 1 '),SystemError ('error 2 ')]
... raise ExceptionGroup( 'there were problems ', excs)
...
>>> f()
+ Exception Group Traceback (most recent call last):
| File "<stdin>", line 1, in <module>
| f()
| ~^^
| File "<stdin>", line 3, in f
| raise ExceptionGroup('there were problems', excs)
| ExceptionGroup: there were problems (2 sub-exceptions)
+-+---------------- 1 ----------------
| OSError: error 1
+---------------- 2 ----------------
| SystemError: error 2
+------------------------------------
>>> try:
... f()
... except Exception ase:
... print (f'caught {type (e)}: e')
...
caught <class 'ExceptionGroup'>: e
>>>
Byusing except*insteadof except,wecanselectivelyhandleonlytheexceptionsinthegroupthatmatchacertain
type. Inthefollowingexample,whichshowsanestedexceptiongroup,each except*clauseextractsfromthegroup
exceptionsofacertaintypewhilelettingallotherexceptionspropagatetootherclausesandeventuallytobereraised.
68 Chapter8. ErrorsandExceptions
PythonTutorial,Release3.13.0
>>> def f():
... raise ExceptionGroup(
... "group1 ",
... [
... OSError (1),
... SystemError (2),
... ExceptionGroup(
... "group2 ",
... [
... OSError (3),
... RecursionError (4)
... ]
... )
... ]
... )
...
>>> try:
... f()
... except *OSError ase:
... print ("There were OSErrors ")
... except *SystemError ase:
... print ("There were SystemErrors ")
...
There were OSErrors
There were SystemErrors
+ Exception Group Traceback (most recent call last):
| File "<stdin>", line 2, in <module>
| f()
| ~^^
| File "<stdin>", line 2, in f
| raise ExceptionGroup(
| ...<12 lines>...
| )
| ExceptionGroup: group1 (1 sub-exception)
+-+---------------- 1 ----------------
| ExceptionGroup: group2 (1 sub-exception)
+-+---------------- 1 ----------------
| RecursionError: 4
+------------------------------------
>>>
Note that the exceptions nested in an exception group must be instances, not types. This is because in practice the
exceptions would typically be ones that have already been raised and caught by the program, along the following
pattern:
>>> excs =[]
... for test intests:
... try:
... test .run()
... except Exception ase:
... excs .append(e)
...
>>> ifexcs:
... raise ExceptionGroup( "Test Failures ", excs)
...
8.9. RaisingandHandlingMultipleUnrelatedExceptions 69
PythonTutorial,Release3.13.0
8.10EnrichingExceptionswithNotes
Whenanexceptioniscreatedinordertoberaised,itisusuallyinitializedwithinformationthatdescribestheerror
that has occurred. There are cases where it is useful to add information after the exception was caught. For this
purpose,exceptionshaveamethod add_note(note) thatacceptsastringandaddsittotheexception’snoteslist.
Thestandardtracebackrenderingincludesallnotes,intheordertheywereadded,aftertheexception.
>>> try:
... raise TypeError ('bad type ')
... except Exception ase:
... e.add_note( 'Add some information ')
... e.add_note( 'Add some more information ')
... raise
...
Traceback (most recent call last):
File "<stdin>" , line 2, in <module>
raise TypeError ('bad type ')
TypeError : bad type
Add some information
Add some more information
>>>
For example, when collecting exceptions into an exception group, we may want to add context information for the
individualerrors. Inthefollowingeachexceptioninthegrouphasanoteindicatingwhenthiserrorhasoccurred.
>>> def f():
... raise OSError ('operation failed ')
...
>>> excs =[]
>>> for iinrange (3):
... try:
... f()
... except Exception ase:
... e.add_note( f'Happened in Iteration {i+1}')
... excs .append(e)
...
>>> raise ExceptionGroup( 'We have some problems ', excs)
+ Exception Group Traceback (most recent call last):
| File "<stdin>", line 1, in <module>
| raise ExceptionGroup('We have some problems', excs)
| ExceptionGroup: We have some problems (3 sub-exceptions)
+-+---------------- 1 ----------------
| Traceback (most recent call last):
| File "<stdin>", line 3, in <module>
| f()
| ~^^
| File "<stdin>", line 2, in f
| raise OSError('operation failed')
| OSError: operation failed
| Happened in Iteration 1
+---------------- 2 ----------------
| Traceback (most recent call last):
| File "<stdin>", line 3, in <module>
| f()
| ~^^
| File "<stdin>", line 2, in f
| raise OSError('operation failed')
| OSError: operation failed
(continuesonnextpage)
70 Chapter8. ErrorsandExceptions
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
| Happened in Iteration 2
+---------------- 3 ----------------
| Traceback (most recent call last):
| File "<stdin>", line 3, in <module>
| f()
| ~^^
| File "<stdin>", line 2, in f
| raise OSError('operation failed')
| OSError: operation failed
| Happened in Iteration 3
+------------------------------------
>>>
8.10. EnrichingExceptionswithNotes 71
PythonTutorial,Release3.13.0
72 Chapter8. ErrorsandExceptions
CHAPTER
NINE
CLASSES
Classesprovideameansofbundlingdataandfunctionalitytogether. Creatinganewclasscreatesanew typeofobject,
allowingnew instancesofthattypetobemade. Eachclassinstancecanhaveattributesattachedtoitformaintaining
itsstate. Classinstancescanalsohavemethods(definedbyitsclass)formodifyingitsstate.
Comparedwithotherprogramminglanguages,Python’sclassmechanismaddsclasseswithaminimumofnewsyntax
andsemantics. ItisamixtureoftheclassmechanismsfoundinC++andModula-3. Pythonclassesprovideallthe
standardfeaturesofObjectOrientedProgramming: theclassinheritancemechanismallowsmultiplebaseclasses,a
derivedclasscanoverrideanymethodsofitsbaseclassorclasses,andamethodcancallthemethodofabaseclass
withthesamename. Objectscancontainarbitraryamountsandkindsofdata. Asistrueformodules,classespartake
ofthedynamicnatureofPython: theyarecreatedatruntime,andcanbemodifiedfurtheraftercreation.
In C++ terminology, normally class members (including the data members) are public(except see below Private
Variables),andallmemberfunctionsare virtual. AsinModula-3,therearenoshorthandsforreferencingtheobject’s
membersfromitsmethods: themethodfunctionisdeclaredwithanexplicitfirstargumentrepresentingtheobject,
whichisprovidedimplicitlybythecall. AsinSmalltalk,classesthemselvesareobjects. Thisprovidessemanticsfor
importingandrenaming. UnlikeC++andModula-3,built-intypescanbeusedasbaseclassesforextensionbythe
user. Also,likeinC++, mostbuilt-inoperatorswithspecialsyntax(arithmeticoperators,subscriptingetc.) canbe
redefinedforclassinstances.
(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++
terms. IwoulduseModula-3terms,sinceitsobject-orientedsemanticsareclosertothoseofPythonthanC++,but
Iexpectthatfewreadershaveheardofit.)
9.1AWordAboutNamesandObjects
Objectshaveindividuality,andmultiplenames(inmultiplescopes)canbeboundtothesameobject. Thisisknown
asaliasinginotherlanguages. ThisisusuallynotappreciatedonafirstglanceatPython, andcanbesafelyignored
whendealingwithimmutablebasictypes(numbers,strings,tuples). However,aliasinghasapossiblysurprisingeffect
onthesemanticsofPythoncodeinvolvingmutableobjectssuchaslists,dictionaries,andmostothertypes. Thisis
usuallyusedtothebenefitoftheprogram,sincealiasesbehavelikepointersinsomerespects. Forexample,passing
anobjectischeapsinceonlyapointerispassedbytheimplementation;andifafunctionmodifiesanobjectpassedas
anargument,thecallerwillseethechange—thiseliminatestheneedfortwodifferentargumentpassingmechanisms
asinPascal.
9.2PythonScopesandNamespaces
Beforeintroducingclasses,IfirsthavetotellyousomethingaboutPython’sscoperules. Classdefinitionsplaysome
neat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what’s
goingon. Incidentally,knowledgeaboutthissubjectisusefulforanyadvancedPythonprogrammer.
Let’sbeginwithsomedefinitions.
Anamespace isamappingfromnamestoobjects. MostnamespacesarecurrentlyimplementedasPythondictionar-
ies,butthat’snormallynotnoticeableinanyway(exceptforperformance),anditmaychangeinthefuture. Examples
of namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names);
the global names in a module; and the local names in a function invocation. In a sense the set of attributes of an
73
PythonTutorial,Release3.13.0
objectalsoformanamespace. Theimportantthingtoknowaboutnamespacesisthatthereisabsolutelynorelation
betweennamesindifferentnamespaces; forinstance, twodifferentmodulesmaybothdefineafunction maximize
withoutconfusion—usersofthemodulesmustprefixitwiththemodulename.
Bytheway, Iusetheword attributeforanynamefollowingadot—forexample, intheexpression z.real,real
is an attribute of the object z. Strictly speaking, references to names in modules are attribute references: in the
expression modname.funcname ,modnameisamoduleobjectand funcname isanattributeofit. Inthiscasethere
happenstobeastraightforwardmappingbetweenthemodule’sattributesandtheglobalnamesdefinedinthemodule:
theysharethesamenamespace!1
Attributesmayberead-onlyorwritable. Inthelattercase,assignmenttoattributesispossible. Moduleattributesare
writable: youcanwrite modname.the_answer = 42 . Writableattributesmayalsobedeletedwiththe delstate-
ment. For example, del modname.the_answer will remove the attribute the_answer from the object named
bymodname.
Namespaces are created at different moments and have different lifetimes. The namespace containing the built-in
names is created when the Python interpreter starts up, and is never deleted. The global namespace for a module
is created when the module definition is read in; normally, module namespaces also last until the interpreter quits.
Thestatementsexecutedbythetop-levelinvocationoftheinterpreter,eitherreadfromascriptfileorinteractively,
are considered part of a module called __main__ , so they have their own global namespace. (The built-in names
actuallyalsoliveinamodule;thisiscalled builtins .)
Thelocalnamespaceforafunctioniscreatedwhenthefunctioniscalled,anddeletedwhenthefunctionreturnsor
raises an exception that is not handled within the function. (Actually, forgetting would be a better way to describe
whatactuallyhappens.) Ofcourse,recursiveinvocationseachhavetheirownlocalnamespace.
AscopeisatextualregionofaPythonprogramwhereanamespaceisdirectlyaccessible. “Directlyaccessible”here
meansthatanunqualifiedreferencetoanameattemptstofindthenameinthenamespace.
Althoughscopesaredeterminedstatically,theyareuseddynamically. Atanytimeduringexecution,thereare3or4
nestedscopeswhosenamespacesaredirectlyaccessible:
•theinnermostscope,whichissearchedfirst,containsthelocalnames
•the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contain
non-local,butalsonon-globalnames
•thenext-to-lastscopecontainsthecurrentmodule’sglobalnames
•theoutermostscope(searchedlast)isthenamespacecontainingbuilt-innames
Ifanameisdeclaredglobal,thenallreferencesandassignmentsgodirectlytothenext-to-lastscopecontainingthe
module’sglobalnames. Torebindvariablesfoundoutsideoftheinnermostscope, the nonlocal statementcanbe
used;ifnotdeclarednonlocal,thosevariablesareread-only(anattempttowritetosuchavariablewillsimplycreate
anewlocalvariableintheinnermostscope,leavingtheidenticallynamedoutervariableunchanged).
Usually, the local scope references the local names of the (textually) current function. Outside functions, the local
scopereferencesthesamenamespaceastheglobalscope: themodule’snamespace. Classdefinitionsplaceyetanother
namespaceinthelocalscope.
It is important to realize that scopes are determined textually: the global scope of a function defined in a module
is that module’s namespace, no matter from where or by what alias the function is called. On the other hand, the
actualsearchfornamesisdonedynamically,atruntime—however,thelanguagedefinitionisevolvingtowardsstatic
name resolution, at “compile” time, so don’t rely on dynamic name resolution! (In fact, local variables are already
determinedstatically.)
AspecialquirkofPythonisthat–ifno globalornonlocal statementisineffect–assignmentstonamesalways
gointotheinnermostscope. Assignmentsdonotcopydata—theyjustbindnamestoobjects. Thesameistruefor
deletions: thestatement del xremovesthebindingof xfromthenamespacereferencedbythelocalscope. Infact,
alloperationsthatintroducenewnamesusethelocalscope: inparticular, importstatementsandfunctiondefinitions
bindthemoduleorfunctionnameinthelocalscope.
1Except for one thing. Module objects have a secret read-only attribute called __dict__ which returns the dictionary used to implement
themodule’snamespace; thename __dict__ isanattributebutnotaglobalname. Obviously,usingthisviolatestheabstractionofnamespace
implementation,andshouldberestrictedtothingslikepost-mortemdebuggers.
74 Chapter9. Classes
PythonTutorial,Release3.13.0
Theglobalstatementcanbeusedtoindicatethatparticularvariablesliveintheglobalscopeandshouldberebound
there; the nonlocal statementindicatesthatparticularvariablesliveinanenclosingscopeandshouldberebound
there.
9.2.1ScopesandNamespacesExample
This is an example demonstrating how to reference the different scopes and namespaces, and how globaland
nonlocal affectvariablebinding:
def scope_test ():
def do_local ():
spam ="local spam "
def do_nonlocal ():
nonlocal spam
spam ="nonlocal spam "
def do_global ():
global spam
spam ="global spam "
spam ="test spam "
do_local()
print ("After local assignment: ", spam)
do_nonlocal()
print ("After nonlocal assignment: ", spam)
do_global()
print ("After global assignment: ", spam)
scope_test()
print ("In global scope: ", spam)
Theoutputoftheexamplecodeis:
After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: nonlocal spam
In global scope: global spam
Notehowthe localassignment(whichisdefault)didn’tchange scope_test’sbindingof spam. The nonlocal assign-
mentchanged scope_test’sbindingof spam,andthe globalassignmentchangedthemodule-levelbinding.
Youcanalsoseethattherewasnopreviousbindingfor spambeforethe globalassignment.
9.3AFirstLookatClasses
Classesintroducealittlebitofnewsyntax,threenewobjecttypes,andsomenewsemantics.
9.3.1ClassDefinitionSyntax
Thesimplestformofclassdefinitionlookslikethis:
class ClassName :
<statement -1>
.
.
.
<statement -N>
9.3. AFirstLookatClasses 75
PythonTutorial,Release3.13.0
Classdefinitions,likefunctiondefinitions( defstatements)mustbeexecutedbeforetheyhaveanyeffect. (Youcould
conceivablyplaceaclassdefinitioninabranchofan ifstatement,orinsideafunction.)
In practice, the statements inside a class definition will usually be function definitions, but other statements are al-
lowed,andsometimesuseful—we’llcomebacktothislater. Thefunctiondefinitionsinsideaclassnormallyhave
apeculiarformofargumentlist,dictatedbythecallingconventionsformethods—again,thisisexplainedlater.
Whenaclassdefinitionisentered,anewnamespaceiscreated,andusedasthelocalscope—thus,allassignments
tolocalvariablesgointothisnewnamespace. Inparticular,functiondefinitionsbindthenameofthenewfunction
here.
Whenaclassdefinitionisleftnormally(viatheend),a class object iscreated. Thisisbasicallyawrapperaroundthe
contentsofthenamespacecreatedbytheclassdefinition;we’lllearnmoreaboutclassobjectsinthenextsection. The
originallocalscope(theoneineffectjustbeforetheclassdefinitionwasentered)isreinstated,andtheclassobjectis
boundheretotheclassnamegivenintheclassdefinitionheader( ClassName intheexample).
9.3.2ClassObjects
Classobjectssupporttwokindsofoperations: attributereferencesandinstantiation.
Attribute references use the standard syntax used for all attribute references in Python: obj.name . Valid attribute
namesareallthenamesthatwereintheclass’snamespacewhentheclassobjectwascreated. So,iftheclassdefinition
lookedlikethis:
class MyClass :
"""A simple example class"""
i=12345
def f(self ):
return 'hello world '
thenMyClass.i andMyClass.f arevalidattributereferences,returninganintegerandafunctionobject,respec-
tively. Classattributescanalsobeassignedto,soyoucanchangethevalueof MyClass.i byassignment. __doc__
isalsoavalidattribute,returningthedocstringbelongingtotheclass: "A simple example class" .
Class instantiation usesfunctionnotation. Justpretendthattheclassobjectisaparameterlessfunctionthatreturnsa
newinstanceoftheclass. Forexample(assumingtheaboveclass):
x=MyClass()
createsanew instanceoftheclassandassignsthisobjecttothelocalvariable x.
Theinstantiationoperation(“calling”aclassobject)createsanemptyobject. Manyclassesliketocreateobjectswith
instancescustomizedtoaspecificinitialstate. Thereforeaclassmaydefineaspecialmethodnamed __init__() ,
likethis:
def __init__ (self ):
self .data =[]
Whenaclassdefinesan __init__() method,classinstantiationautomaticallyinvokes __init__() forthenewly
createdclassinstance. Sointhisexample,anew,initializedinstancecanbeobtainedby:
x=MyClass()
Ofcourse,the __init__() methodmayhaveargumentsforgreaterflexibility. Inthatcase,argumentsgiventothe
classinstantiationoperatorarepassedonto __init__() . Forexample,
>>> class Complex :
... def __init__ (self , realpart, imagpart):
... self .r=realpart
... self .i=imagpart
(continuesonnextpage)
76 Chapter9. Classes
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
...
>>> x=Complex( 3.0,-4.5)
>>> x.r, x .i
(3.0, -4.5)
9.3.3InstanceObjects
Nowwhatcanwedowithinstanceobjects? Theonlyoperationsunderstoodbyinstanceobjectsareattributerefer-
ences. Therearetwokindsofvalidattributenames: dataattributesandmethods.
data attributes correspondto“instancevariables”inSmalltalk,andto“datamembers”inC++. Dataattributesneed
notbedeclared; likelocalvariables, theyspringintoexistencewhentheyarefirstassignedto. Forexample, if xis
theinstanceof MyClasscreatedabove,thefollowingpieceofcodewillprintthevalue 16,withoutleavingatrace:
x.counter =1
while x.counter <10:
x.counter =x.counter *2
print (x.counter)
del x.counter
Theotherkindofinstanceattributereferenceisa method. Amethodisafunctionthat“belongsto”anobject.
Validmethodnamesofaninstanceobjectdependonitsclass. Bydefinition,allattributesofaclassthatarefunction
objects define corresponding methods of its instances. So in our example, x.fis a valid method reference, since
MyClass.f isafunction,but x.iisnot,since MyClass.i isnot. But x.fisnotthesamethingas MyClass.f —
itisa method object ,notafunctionobject.
9.3.4MethodObjects
Usually,amethodiscalledrightafteritisbound:
x.f()
Inthe MyClassexample,thiswillreturnthestring 'hello world' . However,itisnotnecessarytocallamethod
rightaway: x.fisamethodobject,andcanbestoredawayandcalledatalatertime. Forexample:
xf=x.f
while True :
print (xf())
willcontinuetoprint hello world untiltheendoftime.
Whatexactlyhappenswhenamethodiscalled? Youmayhavenoticedthat x.f()wascalledwithoutanargument
above,eventhoughthefunctiondefinitionfor f()specifiedanargument. Whathappenedtotheargument? Surely
Pythonraisesanexceptionwhenafunctionthatrequiresanargumentiscalledwithoutany—eveniftheargument
isn’tactuallyused…
Actually,youmayhaveguessedtheanswer: thespecialthingaboutmethodsisthattheinstanceobjectispassedasthe
firstargumentofthefunction. Inourexample,thecall x.f()isexactlyequivalentto MyClass.f(x) . Ingeneral,
callingamethodwithalistof nargumentsisequivalenttocallingthecorrespondingfunctionwithanargumentlist
thatiscreatedbyinsertingthemethod’sinstanceobjectbeforethefirstargument.
In general, methods work as follows. When a non-data attribute of an instance is referenced, the instance’s class is
searched. Ifthenamedenotesavalidclassattributethatisafunctionobject,referencestoboththeinstanceobject
andthefunctionobjectarepackedintoamethodobject. Whenthemethodobjectiscalledwithanargumentlist,a
newargumentlistisconstructedfromtheinstanceobjectandtheargumentlist,andthefunctionobjectiscalledwith
thisnewargumentlist.
9.3. AFirstLookatClasses 77
PythonTutorial,Release3.13.0
9.3.5ClassandInstanceVariables
Generallyspeaking,instancevariablesarefordatauniquetoeachinstanceandclassvariablesareforattributesand
methodssharedbyallinstancesoftheclass:
class Dog:
kind ='canine ' # class variable shared by all instances
def __init__ (self , name):
self .name =name # instance variable unique to each instance
>>>d=Dog( 'Fido ')
>>>e=Dog( 'Buddy ')
>>>d.kind # shared by all dogs
'canine '
>>>e.kind # shared by all dogs
'canine '
>>>d.name # unique to d
'Fido '
>>>e.name # unique to e
'Buddy '
As discussed in A Word About Names and Objects , shared data can have possibly surprising effects with involving
mutableobjectssuchaslistsanddictionaries. Forexample,the trickslistinthefollowingcodeshouldnotbeusedas
aclassvariablebecausejustasinglelistwouldbesharedbyall Doginstances:
class Dog:
tricks =[] # mistaken use of a class variable
def __init__ (self , name):
self .name =name
def add_trick (self , trick):
self .tricks .append(trick)
>>>d=Dog( 'Fido ')
>>>e=Dog( 'Buddy ')
>>>d.add_trick( 'roll over ')
>>>e.add_trick( 'play dead ')
>>>d.tricks # unexpectedly shared by all dogs
['roll over ','play dead ']
Correctdesignoftheclassshoulduseaninstancevariableinstead:
class Dog:
def __init__ (self , name):
self .name =name
self .tricks =[] # creates a new empty list for each dog
def add_trick (self , trick):
self .tricks .append(trick)
>>>d=Dog( 'Fido ')
>>>e=Dog( 'Buddy ')
>>>d.add_trick( 'roll over ')
(continuesonnextpage)
78 Chapter9. Classes
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
>>>e.add_trick( 'play dead ')
>>>d.tricks
['roll over ']
>>>e.tricks
['play dead ']
9.4RandomRemarks
Ifthesameattributenameoccursinbothaninstanceandinaclass,thenattributelookupprioritizestheinstance:
>>> class Warehouse :
... purpose ='storage '
... region ='west '
...
>>> w1=Warehouse()
>>> print (w1.purpose, w1 .region)
storage west
>>> w2=Warehouse()
>>> w2.region ='east '
>>> print (w2.purpose, w2 .region)
storage east
Dataattributesmaybereferencedbymethodsaswellasbyordinaryusers(“clients”)ofanobject. Inotherwords,
classesarenotusabletoimplementpureabstractdatatypes. Infact,nothinginPythonmakesitpossibletoenforce
data hiding — it is all based upon convention. (On the other hand, the Python implementation, written in C, can
completelyhideimplementationdetailsandcontrolaccesstoanobjectifnecessary; thiscanbeusedbyextensions
toPythonwritteninC.)
Clientsshouldusedataattributeswithcare—clientsmaymessupinvariantsmaintainedbythemethodsbystamping
ontheirdataattributes. Notethatclientsmayadddataattributesoftheirowntoaninstanceobjectwithoutaffecting
the validity of the methods, as long as name conflicts are avoided — again, a naming convention can save a lot of
headacheshere.
There is no shorthand for referencing data attributes (or other methods!) from within methods. I find that this
actuallyincreasesthereadabilityofmethods: thereisnochanceofconfusinglocalvariablesandinstancevariables
whenglancingthroughamethod.
Often, thefirstargumentofamethodiscalled self. Thisisnothingmorethanaconvention: thename selfhas
absolutelynospecialmeaningtoPython. Note,however,thatbynotfollowingtheconventionyourcodemaybeless
readabletootherPythonprogrammers,anditisalsoconceivablethata class browser programmightbewrittenthat
reliesuponsuchaconvention.
Anyfunctionobjectthatisa classattributedefinesa methodforinstancesofthatclass. Itisnotnecessarythatthe
function definition is textually enclosed in the class definition: assigning a function object to a local variable in the
classisalsook. Forexample:
# Function defined outside the class
def f1(self , x, y):
return min(x, x +y)
class C:
f=f1
def g(self ):
return 'hello world '
h=g
9.4. RandomRemarks 79
PythonTutorial,Release3.13.0
Now f,gandhareallattributesofclass Cthatrefertofunctionobjects, andconsequentlytheyareallmethodsof
instancesof C—hbeingexactlyequivalentto g. Notethatthispracticeusuallyonlyservestoconfusethereaderof
aprogram.
Methodsmaycallothermethodsbyusingmethodattributesofthe selfargument:
class Bag:
def __init__ (self ):
self .data =[]
def add(self , x):
self .data .append(x)
def addtwice (self , x):
self .add(x)
self .add(x)
Methods may reference global names in the same way as ordinary functions. The global scope associated with a
methodisthemodulecontainingitsdefinition. (Aclassisneverusedasaglobalscope.) Whileonerarelyencounters
a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing,
functionsandmodulesimportedintotheglobalscopecanbeusedbymethods,aswellasfunctionsandclassesdefined
init. Usually,theclasscontainingthemethodisitselfdefinedinthisglobalscope,andinthenextsectionwe’llfind
somegoodreasonswhyamethodwouldwanttoreferenceitsownclass.
Eachvalueisanobject,andthereforehasa class(alsocalledits type). Itisstoredas object.__class__ .
9.5Inheritance
Ofcourse, alanguagefeaturewouldnotbeworthyofthename“class”withoutsupportinginheritance. Thesyntax
foraderivedclassdefinitionlookslikethis:
class DerivedClassName (BaseClassName):
<statement -1>
.
.
.
<statement -N>
Thename BaseClassName mustbedefinedinanamespaceaccessiblefromthescopecontainingthederivedclass
definition. Inplaceofabaseclassname,otherarbitraryexpressionsarealsoallowed. Thiscanbeuseful,forexample,
whenthebaseclassisdefinedinanothermodule:
class DerivedClassName (modname .BaseClassName):
Executionofaderivedclassdefinitionproceedsthesameasforabaseclass. Whentheclassobjectisconstructed,
the base class is remembered. This is used for resolving attribute references: if a requested attribute is not found
in the class, the search proceeds to look in the base class. This rule is applied recursively if the base class itself is
derivedfromsomeotherclass.
There’snothingspecialaboutinstantiationofderivedclasses: DerivedClassName() createsanewinstanceofthe
class. Methodreferencesareresolvedasfollows: thecorrespondingclassattributeissearched,descendingdownthe
chainofbaseclassesifnecessary,andthemethodreferenceisvalidifthisyieldsafunctionobject.
Derivedclassesmayoverridemethodsoftheirbaseclasses. Becausemethodshavenospecialprivilegeswhencalling
othermethodsofthesameobject,amethodofabaseclassthatcallsanothermethoddefinedinthesamebaseclass
mayendupcallingamethodofaderivedclassthatoverridesit. (ForC++programmers: allmethodsinPythonare
effectively virtual.)
Anoverridingmethodinaderivedclassmayinfactwanttoextendratherthansimplyreplacethebaseclassmethod
of the same name. There is a simple way to call the base class method directly: just call BaseClassName.
80 Chapter9. Classes
PythonTutorial,Release3.13.0
methodname(self, arguments) . This is occasionally useful to clients as well. (Note that this only works if
thebaseclassisaccessibleas BaseClassName intheglobalscope.)
Pythonhastwobuilt-infunctionsthatworkwithinheritance:
•Useisinstance() to check an instance’s type: isinstance(obj, int) will be Trueonly if obj.
__class__ isintorsomeclassderivedfrom int.
•Useissubclass() tocheckclassinheritance: issubclass(bool, int) isTruesince boolisasubclass
ofint. However, issubclass(float, int) isFalsesince floatisnotasubclassof int.
9.5.1MultipleInheritance
Pythonsupportsaformofmultipleinheritanceaswell. Aclassdefinitionwithmultiplebaseclasseslookslikethis:
class DerivedClassName (Base1, Base2, Base3):
<statement -1>
.
.
.
<statement -N>
Formostpurposes, inthesimplestcases, youcanthinkofthesearchforattributesinheritedfromaparentclassas
depth-first,left-to-right,notsearchingtwiceinthesameclasswherethereisanoverlapinthehierarchy. Thus,ifan
attributeisnotfoundin DerivedClassName ,itissearchedforin Base1,then(recursively)inthebaseclassesof
Base1,andifitwasnotfoundthere,itwassearchedforin Base2,andsoon.
Infact,itisslightlymorecomplexthanthat;themethodresolutionorderchangesdynamicallytosupportcooperative
callsto super(). Thisapproachisknowninsomeothermultiple-inheritancelanguagesascall-next-methodandis
morepowerfulthanthesupercallfoundinsingle-inheritancelanguages.
Dynamicorderingisnecessarybecauseallcasesofmultipleinheritanceexhibitoneormorediamondrelationships
(where at least one of the parent classes can be accessed through multiple paths from the bottommost class). For
example,allclassesinheritfrom object,soanycaseofmultipleinheritanceprovidesmorethanonepathtoreach
object. Tokeepthebaseclassesfrombeingaccessedmorethanonce,thedynamicalgorithmlinearizesthesearch
orderinawaythatpreservestheleft-to-rightorderingspecifiedineachclass,thatcallseachparentonlyonce,andthat
ismonotonic(meaningthataclasscanbesubclassedwithoutaffectingtheprecedenceorderofitsparents). Taken
together, these properties make it possible to design reliable and extensible classes with multiple inheritance. For
moredetail,seepython_2.3_mro.
9.6PrivateVariables
“Private”instancevariablesthatcannotbeaccessedexceptfrominsideanobjectdon’texistinPython. However,there
is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be
treatedasanon-publicpartoftheAPI(whetheritisafunction,amethodoradatamember). Itshouldbeconsidered
animplementationdetailandsubjecttochangewithoutnotice.
Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names
defined by subclasses), there is limited support for such a mechanism, called name mangling . Any identifier of
the form __spam(at least two leading underscores, at most one trailing underscore) is textually replaced with
_classname__spam ,where classname isthecurrentclassnamewithleadingunderscore(s)stripped. Thisman-
glingisdonewithoutregardtothesyntacticpositionoftheidentifier, aslongasitoccurswithinthedefinitionofa
class.
µSeealso
Theprivatenamemanglingspecificationsfordetailsandspecialcases.
Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For
example:
9.6. PrivateVariables 81
PythonTutorial,Release3.13.0
class Mapping :
def __init__ (self , iterable):
self .items_list =[]
self .__update(iterable)
def update (self , iterable):
for item initerable:
self .items_list .append(item)
__update =update # private copy of original update() method
class MappingSubclass (Mapping):
def update (self , keys, values):
# provides new signature for update()
# but does not break __init__()
for item inzip(keys, values):
self .items_list .append(item)
The above example would work even if MappingSubclass were to introduce a __update identifier since
it is replaced with _Mapping__update in the Mapping class and _MappingSubclass__update in the
MappingSubclass classrespectively.
Notethatthemanglingrulesaredesignedmostlytoavoidaccidents;itstillispossibletoaccessormodifyavariable
thatisconsideredprivate. Thiscanevenbeusefulinspecialcircumstances,suchasinthedebugger.
Noticethatcodepassedto exec()oreval()doesnotconsidertheclassnameoftheinvokingclasstobethecurrent
class; this is similar to the effect of the globalstatement, the effect of which is likewise restricted to code that is
byte-compiledtogether. Thesamerestrictionappliesto getattr() ,setattr() anddelattr() ,aswellaswhen
referencing __dict__ directly.
9.7OddsandEnds
SometimesitisusefultohaveadatatypesimilartothePascal“record”orC“struct”,bundlingtogetherafewnamed
dataitems. Theidiomaticapproachistouse dataclasses forthispurpose:
from dataclasses import dataclass
@dataclass
class Employee :
name: str
dept: str
salary: int
>>> john =Employee( 'john ','computer lab ',1000 )
>>> john .dept
'computer lab'
>>> john .salary
1000
A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the
methodsofthatdatatypeinstead. Forinstance,ifyouhaveafunctionthatformatssomedatafromafileobject,you
candefineaclasswithmethods read()andreadline() thatgetthedatafromastringbufferinstead,andpassit
asanargument.
Instance method objects have attributes, too: m.__self__ is the instance object with the method m(), and m.
__func__ isthefunctionobjectcorrespondingtothemethod.
82 Chapter9. Classes
PythonTutorial,Release3.13.0
9.8Iterators
Bynowyouhaveprobablynoticedthatmostcontainerobjectscanbeloopedoverusinga forstatement:
for element in[1,2,3]:
print (element)
for element in(1,2,3):
print (element)
for key in{'one':1,'two':2}:
print (key)
for char in"123":
print (char)
for line inopen ("myfile.txt "):
print (line, end ='')
This style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. Behind
the scenes, the forstatement calls iter()on the container object. The function returns an iterator object that
definesthemethod __next__() whichaccesseselementsinthecontaineroneatatime. Whentherearenomore
elements, __next__() raisesa StopIteration exceptionwhichtellsthe forlooptoterminate. Youcancallthe
__next__() methodusingthe next()built-infunction;thisexampleshowshowitallworks:
>>> s='abc'
>>> it=iter (s)
>>> it
<str_iterator object at 0x10c90e650>
>>> next (it)
'a'
>>> next (it)
'b'
>>> next (it)
'c'
>>> next (it)
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
next (it)
StopIteration
Havingseenthemechanicsbehindtheiteratorprotocol,itiseasytoadditeratorbehaviortoyourclasses. Definean
__iter__() methodwhichreturnsanobjectwitha __next__() method. Iftheclassdefines __next__() ,then
__iter__() canjustreturn self:
class Reverse :
"""Iterator for looping over a sequence backwards."""
def __init__ (self , data):
self .data =data
self .index =len(data)
def __iter__ (self ):
return self
def __next__ (self ):
ifself .index ==0:
raise StopIteration
self .index =self .index -1
return self .data[ self .index]
>>> rev =Reverse( 'spam ')
>>> iter (rev)
(continuesonnextpage)
9.8. Iterators 83
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
<__main__.Reverse object at 0x00A1DB50>
>>> for char inrev:
... print (char)
...
m
a
p
s
9.9Generators
Generators areasimpleandpowerfultoolforcreatingiterators. Theyarewrittenlikeregularfunctionsbutusethe
yieldstatementwhenevertheywanttoreturndata. Eachtime next()iscalledonit,thegeneratorresumeswhere
itleftoff(itremembersallthedatavaluesandwhichstatementwaslastexecuted). Anexampleshowsthatgenerators
canbetriviallyeasytocreate:
def reverse (data):
for index inrange (len(data) -1,-1,-1):
yield data[index]
>>> for char inreverse( 'golf '):
... print (char)
...
f
l
o
g
Anything that can be done with generators can also be done with class-based iterators as described in the previ-
ous section. What makes generators so compact is that the __iter__() and__next__() methods are created
automatically.
Anotherkeyfeatureisthatthelocalvariablesandexecutionstateareautomaticallysavedbetweencalls. Thismade
the function easier to write and much more clear than an approach using instance variables like self.index and
self.data .
In addition to automatic method creation and saving program state, when generators terminate, they automatically
raise StopIteration . In combination, these features make it easy to create iterators with no more effort than
writingaregularfunction.
9.10GeneratorExpressions
Somesimplegeneratorscanbecodedsuccinctlyasexpressionsusingasyntaxsimilartolistcomprehensionsbutwith
parentheses instead of square brackets. These expressions are designed for situations where the generator is used
right away by an enclosing function. Generator expressions are more compact but less versatile than full generator
definitionsandtendtobemorememoryfriendlythanequivalentlistcomprehensions.
Examples:
>>> sum(i*ifor iinrange (10)) # sum of squares
285
>>> xvec =[10,20,30]
>>> yvec =[7,5,3]
>>> sum(x*yfor x,y inzip(xvec, yvec)) # dot product
260
(continuesonnextpage)
84 Chapter9. Classes
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
>>> unique_words =set(word for line inpage for word inline .split())
>>> valedictorian =max((student .gpa, student .name) for student ingraduates)
>>> data ='golf '
>>> list (data[i] for iinrange (len(data) -1,-1,-1))
['f', 'l', 'o', 'g']
9.10. GeneratorExpressions 85
PythonTutorial,Release3.13.0
86 Chapter9. Classes
CHAPTER
TEN
BRIEFTOUROFTHESTANDARDLIBRARY
10.1OperatingSystemInterface
Theosmoduleprovidesdozensoffunctionsforinteractingwiththeoperatingsystem:
>>> import os
>>> os.getcwd() # Return the current working directory
'C:\\Python313'
>>> os.chdir( '/server/accesslogs ') # Change current working directory
>>> os.system( 'mkdir today ') # Run the command mkdir in the system shell
0
Besuretousethe import os styleinsteadof from os import * . Thiswillkeep os.open() fromshadowing
thebuilt-in open()functionwhichoperatesmuchdifferently.
Thebuilt-in dir()andhelp()functionsareusefulasinteractiveaidsforworkingwithlargemoduleslike os:
>>> import os
>>> dir(os)
<returns a list of all module functions>
>>> help(os)
<returns an extensive manual page created from the module's docstrings>
Fordailyfileanddirectorymanagementtasks,the shutilmoduleprovidesahigherlevelinterfacethatiseasierto
use:
>>> import shutil
>>> shutil .copyfile( 'data.db ','archive.db ')
'archive.db'
>>> shutil .move( '/build/executables ','installdir ')
'installdir'
10.2FileWildcards
Theglobmoduleprovidesafunctionformakingfilelistsfromdirectorywildcardsearches:
>>> import glob
>>> glob .glob( '*.py ')
['primes.py', 'random.py', 'quote.py']
10.3CommandLineArguments
Common utility scripts often need to process command line arguments. These arguments are stored in the sys
module’s argvattributeasalist. Forinstance,let’stakethefollowing demo.pyfile:
87
PythonTutorial,Release3.13.0
# File demo.py
import sys
print (sys .argv)
Hereistheoutputfromrunning python demo.py one two three atthecommandline:
['demo.py ','one','two','three ']
Theargparse moduleprovidesamoresophisticatedmechanismtoprocesscommandlinearguments. Thefollowing
scriptextractsoneormorefilenamesandanoptionalnumberoflinestobedisplayed:
import argparse
parser =argparse .ArgumentParser(
prog ='top',
description ='Show top lines from each file ')
parser .add_argument( 'filenames ', nargs ='+')
parser .add_argument( '-l','--lines ',type =int, default =10)
args =parser .parse_args()
print (args)
Whenrunatthecommandlinewith python top.py --lines=5 alpha.txt beta.txt ,thescriptsets args.
linesto5andargs.filenames to['alpha.txt', 'beta.txt'] .
10.4ErrorOutputRedirectionandProgramTermination
Thesysmodulealsohasattributesfor stdin,stdout,andstderr. Thelatterisusefulforemittingwarningsanderror
messagestomakethemvisibleevenwhen stdouthasbeenredirected:
>>> sys.stderr .write( 'Warning, log file not found starting a new one \n')
Warning, log file not found starting a new one
Themostdirectwaytoterminateascriptistouse sys.exit() .
10.5StringPatternMatching
Theremoduleprovidesregularexpressiontoolsforadvancedstringprocessing. Forcomplexmatchingandmanip-
ulation,regularexpressionsoffersuccinct,optimizedsolutions:
>>> import re
>>> re.findall( r'\bf[a-z]* ','which foot or hand fell fastest ')
['foot', 'fell', 'fastest']
>>> re.sub( r'(\b[a-z]+) \1',r'\1','cat in the the hat ')
'cat in the hat'
Whenonlysimplecapabilitiesareneeded,stringmethodsarepreferredbecausetheyareeasiertoreadanddebug:
>>> 'tea for too '.replace( 'too','two')
'tea for two'
10.6Mathematics
ThemathmodulegivesaccesstotheunderlyingClibraryfunctionsforfloating-pointmath:
88 Chapter10. BriefTouroftheStandardLibrary
PythonTutorial,Release3.13.0
>>> import math
>>> math .cos(math .pi/4)
0.70710678118654757
>>> math .log( 1024 ,2)
10.0
Therandommoduleprovidestoolsformakingrandomselections:
>>> import random
>>> random .choice([ 'apple ','pear ','banana '])
'apple'
>>> random .sample( range (100),10) # sampling without replacement
[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
>>> random .random() # random float from the interval [0.0, 1.0)
0.17970987693706186
>>> random .randrange( 6) # random integer chosen from range(6)
4
Thestatistics modulecalculatesbasicstatisticalproperties(themean,median,variance,etc.) ofnumericdata:
>>> import statistics
>>> data =[2.75 ,1.75 ,1.25 ,0.25 ,0.5,1.25 ,3.5]
>>> statistics .mean(data)
1.6071428571428572
>>> statistics .median(data)
1.25
>>> statistics .variance(data)
1.3720238095238095
TheSciPyproject< https://scipy.org >hasmanyothermodulesfornumericalcomputations.
10.7InternetAccess
Thereareanumberofmodulesforaccessingtheinternetandprocessinginternetprotocols. Twoofthesimplestare
urllib.request forretrievingdatafromURLsand smtplibforsendingmail:
>>> from urllib .request import urlopen
>>> with urlopen( 'http://worldtimeapi.org/api/timezone/etc/UTC.txt ')asresponse:
... for line inresponse:
... line =line .decode() # Convert bytes to a str
... ifline .startswith( 'datetime '):
... print (line .rstrip()) # Remove trailing newline
...
datetime: 2022-01-01T01:36:47.689215+00:00
>>> import smtplib
>>> server =smtplib .SMTP( 'localhost ')
>>> server .sendmail( 'soothsayer@example.org ','jcaesar@example.org ',
... """To: jcaesar@example.org
... From: soothsayer@example.org
...
... Beware the Ides of March.
... """)
>>> server .quit()
(Notethatthesecondexampleneedsamailserverrunningonlocalhost.)
10.7. InternetAccess 89
PythonTutorial,Release3.13.0
10.8DatesandTimes
Thedatetime modulesuppliesclassesformanipulatingdatesandtimesinbothsimpleandcomplexways. While
dateandtimearithmeticissupported,thefocusoftheimplementationisonefficientmemberextractionforoutput
formattingandmanipulation. Themodulealsosupportsobjectsthataretimezoneaware.
>>> # dates are easily constructed and formatted
>>> from datetime import date
>>> now =date .today()
>>> now
datetime.date(2003, 12, 2)
>>> now.strftime( "%m-%d-%y.%d%b%Y is a %A on the %dday of %B.")
'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'
>>> # dates support calendar arithmetic
>>> birthday =date( 1964 ,7,31)
>>> age =now -birthday
>>> age.days
14368
10.9DataCompression
Common data archiving and compression formats are directly supported by modules including: zlib,gzip,bz2,
lzma,zipfileandtarfile.
>>> import zlib
>>> s=b'witch which has which witches wrist watch '
>>> len(s)
41
>>> t=zlib .compress(s)
>>> len(t)
37
>>> zlib .decompress(t)
b'witch which has which witches wrist watch'
>>> zlib .crc32(s)
226805979
10.10PerformanceMeasurement
SomePythonusersdevelopadeepinterestinknowingtherelativeperformanceofdifferentapproachestothesame
problem. Pythonprovidesameasurementtoolthatanswersthosequestionsimmediately.
Forexample,itmaybetemptingtousethetuplepackingandunpackingfeatureinsteadofthetraditionalapproach
toswappingarguments. The timeitmodulequicklydemonstratesamodestperformanceadvantage:
>>> from timeit import Timer
>>> Timer( 't=a; a=b; b=t ','a=1; b=2 ').timeit()
0.57535828626024577
>>> Timer( 'a,b = b,a ','a=1; b=2 ').timeit()
0.54962537085770791
In contrast to timeit’s fine level of granularity, the profileandpstatsmodules provide tools for identifying
timecriticalsectionsinlargerblocksofcode.
90 Chapter10. BriefTouroftheStandardLibrary
PythonTutorial,Release3.13.0
10.11QualityControl
One approach for developing high quality software is to write tests for each function as it is developed and to run
thosetestsfrequentlyduringthedevelopmentprocess.
Thedoctestmoduleprovidesatoolforscanningamoduleandvalidatingtestsembeddedinaprogram’sdocstrings.
Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This
improves the documentation by providing the user with an example and it allows the doctest module to make sure
thecoderemainstruetothedocumentation:
def average (values):
"""Computes the arithmetic mean of a list of numbers.
>>> print(average([20, 30, 70]))
40.0
"""
return sum(values) /len(values)
import doctest
doctest .testmod() # automatically validate the embedded tests
Theunittest moduleisnotaseffortlessasthe doctestmodule,butitallowsamorecomprehensivesetoftests
tobemaintainedinaseparatefile:
import unittest
class TestStatisticalFunctions (unittest .TestCase):
def test_average (self ):
self .assertEqual(average([ 20,30,70]), 40.0 )
self .assertEqual( round (average([ 1,5,7]), 1),4.3)
with self .assertRaises( ZeroDivisionError ):
average([])
with self .assertRaises( TypeError ):
average( 20,30,70)
unittest .main() # Calling from the command line invokes all tests
10.12BatteriesIncluded
Pythonhasa“batteriesincluded”philosophy. Thisisbestseenthroughthesophisticatedandrobustcapabilitiesof
itslargerpackages. Forexample:
•Thexmlrpc.client andxmlrpc.server modules make implementing remote procedure calls into an
almosttrivialtask. Despitethemodules’names,nodirectknowledgeorhandlingofXMLisneeded.
•Theemailpackage is a library for managing email messages, including MIME and other RFC 2822 -based
messagedocuments. Unlike smtplibandpoplibwhichactuallysendandreceivemessages,theemailpack-
agehasacompletetoolsetforbuildingordecodingcomplexmessagestructures(includingattachments)and
forimplementinginternetencodingandheaderprotocols.
•Thejsonpackage provides robust support for parsing this popular data interchange format. The csvmod-
ule supports direct reading and writing of files in Comma-Separated Value format, commonly supported by
databasesandspreadsheets. XMLprocessingissupportedbythe xml.etree.ElementTree ,xml.domand
xml.saxpackages. Together,thesemodulesandpackagesgreatlysimplifydatainterchangebetweenPython
applicationsandothertools.
•Thesqlite3module is a wrapper for the SQLite database library, providing a persistent database that can
beupdatedandaccessedusingslightlynonstandardSQLsyntax.
10.11. QualityControl 91
PythonTutorial,Release3.13.0
•Internationalizationissupportedbyanumberofmodulesincluding gettext,locale,andthe codecspack-
age.
92 Chapter10. BriefTouroftheStandardLibrary
CHAPTER
ELEVEN
BRIEFTOUROFTHESTANDARDLIBRARY—PARTII
Thissecondtourcoversmoreadvancedmodulesthatsupportprofessionalprogrammingneeds. Thesemodulesrarely
occurinsmallscripts.
11.1OutputFormatting
Thereprlibmoduleprovidesaversionof repr()customizedforabbreviateddisplaysoflargeordeeplynested
containers:
>>> import reprlib
>>> reprlib .repr( set('supercalifragilisticexpialidocious '))
"{'a', 'c', 'd', 'e', 'f', 'g', ...}"
Thepprintmoduleoffersmoresophisticatedcontroloverprintingbothbuilt-inanduserdefinedobjectsinaway
thatisreadablebytheinterpreter. Whentheresultislongerthanoneline,the“prettyprinter”addslinebreaksand
indentationtomoreclearlyrevealdatastructure:
>>> import pprint
>>> t=[[[[ 'black ','cyan '],'white ', ['green ','red']], [[ 'magenta ',
... 'yellow '],'blue ']]]
...
>>> pprint .pprint(t, width =30)
[[[['black', 'cyan'],
'white',
['green', 'red']],
[['magenta', 'yellow'],
'blue']]]
Thetextwrap moduleformatsparagraphsoftexttofitagivenscreenwidth:
>>> import textwrap
>>> doc ="""The wrap() method is just like fill() except that it returns
... a list of strings instead of one big string with newlines to separate
... the wrapped lines. """
...
>>> print (textwrap .fill(doc, width =40))
The wrap() method is just like fill()
except that it returns a list of strings
instead of one big string with newlines
to separate the wrapped lines.
Thelocalemoduleaccessesadatabaseofculturespecificdataformats. Thegroupingattributeoflocale’sformat
functionprovidesadirectwayofformattingnumberswithgroupseparators:
93
PythonTutorial,Release3.13.0
>>> import locale
>>> locale .setlocale(locale .LC_ALL, 'English_United States.1252 ')
'English_United States.1252'
>>> conv =locale .localeconv() # get a mapping of conventions
>>> x=1234567.8
>>> locale .format_string( "%d", x, grouping =True )
'1,234,567'
>>> locale .format_string( "%s%.*f ", (conv[ 'currency_symbol '],
... conv[ 'frac_digits '], x), grouping =True )
'$1,234,567.80'
11.2Templating
Thestringmoduleincludesaversatile Template classwithasimplifiedsyntaxsuitableforeditingbyend-users.
Thisallowsuserstocustomizetheirapplicationswithouthavingtoaltertheapplication.
Theformatusesplaceholdernamesformedby $withvalidPythonidentifiers(alphanumericcharactersandunder-
scores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no
interveningspaces. Writing $$createsasingleescaped $:
>>> from string import Template
>>> t=Template( '${village} folk send $$10 to $cause. ')
>>> t.substitute(village ='Nottingham ', cause ='the ditch fund ')
'Nottinghamfolk send $10 to the ditch fund.'
Thesubstitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword
argument. Formail-mergestyleapplications,usersupplieddatamaybeincompleteandthe safe_substitute()
methodmaybemoreappropriate—itwillleaveplaceholdersunchangedifdataismissing:
>>> t=Template( 'Return the $item to $owner. ')
>>> d=dict (item ='unladen swallow ')
>>> t.substitute(d)
Traceback (most recent call last):
...
KeyError : 'owner'
>>> t.safe_substitute(d)
'Return the unladen swallow to $owner.'
Templatesubclassescanspecifyacustomdelimiter. Forexample,abatchrenamingutilityforaphotobrowsermay
electtousepercentsignsforplaceholderssuchasthecurrentdate,imagesequencenumber,orfileformat:
>>> import time ,os.path
>>> photofiles =['img_1074.jpg ','img_1076.jpg ','img_1077.jpg ']
>>> class BatchRename (Template):
... delimiter ='%'
...
>>> fmt =input ('Enter rename style ( %d-date %n-seqnum %f-format): ')
Enter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f
>>> t=BatchRename(fmt)
>>> date =time .strftime( '%d%b%y')
>>> for i, filename inenumerate (photofiles):
... base, ext =os.path .splitext(filename)
... newname =t.substitute(d =date, n =i, f =ext)
... print ('{0} --> {1}'.format(filename, newname))
img_1074.jpg --> Ashley_0.jpg
(continuesonnextpage)
94 Chapter11. BriefTouroftheStandardLibrary—PartII
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
img_1076.jpg --> Ashley_1.jpg
img_1077.jpg --> Ashley_2.jpg
Another application for templating is separating program logic from the details of multiple output formats. This
makesitpossibletosubstitutecustomtemplatesforXMLfiles,plaintextreports,andHTMLwebreports.
11.3WorkingwithBinaryDataRecordLayouts
Thestructmodule provides pack()andunpack() functions for working with variable length binary record
formats. The following example shows how to loop through header information in a ZIP file without using the
zipfilemodule. Pack codes "H"and"I"represent two and four byte unsigned numbers respectively. The "<"
indicatesthattheyarestandardsizeandinlittle-endianbyteorder:
import struct
with open ('myfile.zip ','rb')asf:
data =f.read()
start =0
for iinrange (3): # show the first 3 file headers
start +=14
fields =struct .unpack( '<IIIHH ', data[start:start +16])
crc32, comp_size, uncomp_size, filenamesize, extra_size =fields
start +=16
filename =data[start:start +filenamesize]
start +=filenamesize
extra =data[start:start +extra_size]
print (filename, hex(crc32), comp_size, uncomp_size)
start +=extra_size +comp_size # skip to the next header
11.4Multi-threading
Threadingisatechniquefordecouplingtaskswhicharenotsequentiallydependent. Threadscanbeusedtoimprove
theresponsivenessofapplicationsthatacceptuserinputwhileothertasksruninthebackground. Arelatedusecase
isrunningI/Oinparallelwithcomputationsinanotherthread.
Thefollowingcodeshowshowthehighlevel threading modulecanruntasksinbackgroundwhilethemainprogram
continuestorun:
import threading ,zipfile
class AsyncZip (threading .Thread):
def __init__ (self , infile, outfile):
threading .Thread .__init__ (self )
self .infile =infile
self .outfile =outfile
def run(self ):
f=zipfile .ZipFile( self .outfile, 'w', zipfile .ZIP_DEFLATED)
f.write( self .infile)
f.close()
print ('Finished background zip of: ',self .infile)
(continuesonnextpage)
11.3. WorkingwithBinaryDataRecordLayouts 95
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
background =AsyncZip( 'mydata.txt ','myarchive.zip ')
background .start()
print ('The main program continues to run in foreground. ')
background .join() # Wait for the background task to finish
print ('Main program waited until background was done. ')
Theprincipalchallengeofmulti-threadedapplicationsiscoordinatingthreadsthatsharedataorotherresources. To
that end, the threading module provides a number of synchronization primitives including locks, events, condition
variables,andsemaphores.
While those tools are powerful, minor design errors can result in problems that are difficult to reproduce. So, the
preferredapproachtotaskcoordinationistoconcentrateallaccesstoaresourceinasinglethreadandthenusethe
queuemoduletofeedthatthreadwithrequestsfromotherthreads. Applicationsusing Queueobjectsforinter-thread
communicationandcoordinationareeasiertodesign,morereadable,andmorereliable.
11.5Logging
Theloggingmodule offers a full featured and flexible logging system. At its simplest, log messages are sent to a
fileorto sys.stderr :
import logging
logging .debug( 'Debugging information ')
logging .info( 'Informational message ')
logging .warning( 'Warning:config file %snot found ','server.conf ')
logging .error( 'Error occurred ')
logging .critical( 'Critical error -- shutting down ')
Thisproducesthefollowingoutput:
WARNING:root:Warning:config file server.conf not found
ERROR:root:Error occurred
CRITICAL:root:Critical error -- shutting down
By default, informational and debugging messages are suppressed and the output is sent to standard error. Other
outputoptionsincluderoutingmessagesthroughemail, datagrams, sockets, ortoanHTTPServer. Newfilterscan
selectdifferentroutingbasedonmessagepriority: DEBUG,INFO,WARNING,ERROR,and CRITICAL .
TheloggingsystemcanbeconfigureddirectlyfromPythonorcanbeloadedfromausereditableconfigurationfile
forcustomizedloggingwithoutalteringtheapplication.
11.6WeakReferences
Pythondoesautomaticmemorymanagement(referencecountingformostobjectsand garbage collection toeliminate
cycles). Thememoryisfreedshortlyafterthelastreferencetoithasbeeneliminated.
Thisapproachworksfineformostapplicationsbutoccasionallythereisaneedtotrackobjectsonlyaslongasthey
arebeingusedbysomethingelse. Unfortunately,justtrackingthemcreatesareferencethatmakesthempermanent.
Theweakrefmoduleprovidestoolsfortrackingobjectswithoutcreatingareference. Whentheobjectisnolonger
needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects. Typical
applicationsincludecachingobjectsthatareexpensivetocreate:
>>> import weakref ,gc
>>> class A:
... def __init__ (self , value):
... self .value =value
... def __repr__ (self ):
(continuesonnextpage)
96 Chapter11. BriefTouroftheStandardLibrary—PartII
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
... return str(self .value)
...
>>> a=A(10) # create a reference
>>> d=weakref .WeakValueDictionary()
>>> d['primary ']=a # does not create a reference
>>> d['primary '] # fetch the object if it is still alive
10
>>> del a # remove the one reference
>>> gc.collect() # run garbage collection right away
0
>>> d['primary '] # entry was automatically removed
Traceback (most recent call last):
File "<stdin>" , line 1, in <module>
d['primary '] # entry was automatically removed
File "C:/python313/lib/weakref.py" , line 46, in __getitem__
o=self .data[key]()
KeyError : 'primary'
11.7ToolsforWorkingwithLists
Manydatastructureneedscanbemetwiththebuilt-inlisttype. However,sometimesthereisaneedforalternative
implementationswithdifferentperformancetrade-offs.
Thearraymoduleprovidesan arrayobjectthatislikealistthatstoresonlyhomogeneousdataandstoresitmore
compactly. Thefollowingexampleshowsanarrayofnumbersstoredastwobyteunsignedbinarynumbers(typecode
"H")ratherthantheusual16bytesperentryforregularlistsofPythonintobjects:
>>> from array import array
>>> a=array( 'H', [4000 ,10,700,22222 ])
>>> sum(a)
26932
>>> a[1:3]
array('H', [10, 700])
Thecollections module provides a dequeobject that is like a list with faster appends and pops from the left
sidebutslowerlookupsinthemiddle. Theseobjectsarewellsuitedforimplementingqueuesandbreadthfirsttree
searches:
>>> from collections import deque
>>> d=deque([ "task1 ","task2 ","task3 "])
>>> d.append( "task4 ")
>>> print ("Handling ", d.popleft())
Handling task1
unsearched =deque([starting_node])
def breadth_first_search (unsearched):
node =unsearched .popleft()
for mingen_moves(node):
ifis_goal(m):
return m
unsearched .append(m)
In addition to alternative list implementations, the library also offers other tools such as the bisectmodule with
functionsformanipulatingsortedlists:
11.7. ToolsforWorkingwithLists 97
PythonTutorial,Release3.13.0
>>> import bisect
>>> scores =[(100,'perl '), ( 200,'tcl'), ( 400,'lua'), ( 500,'python ')]
>>> bisect .insort(scores, ( 300,'ruby '))
>>> scores
[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]
Theheapqmodule provides functions for implementing heaps based on regular lists. The lowest valued entry is
alwayskeptatpositionzero. Thisisusefulforapplicationswhichrepeatedlyaccessthesmallestelementbutdonot
wanttorunafulllistsort:
>>> from heapq import heapify, heappop, heappush
>>> data =[1,3,5,7,9,2,4,6,8,0]
>>> heapify(data) # rearrange the list into heap order
>>> heappush(data, -5) # add a new entry
>>> [heappop(data) for iinrange (3)] # fetch the three smallest entries
[-5, 0, 1]
11.8DecimalFloating-PointArithmetic
Thedecimalmodule offers a Decimaldatatype for decimal floating-point arithmetic. Compared to the built-in
floatimplementationofbinaryfloatingpoint,theclassisespeciallyhelpfulfor
•financialapplicationsandotheruseswhichrequireexactdecimalrepresentation,
•controloverprecision,
•controloverroundingtomeetlegalorregulatoryrequirements,
•trackingofsignificantdecimalplaces,or
•applicationswheretheuserexpectstheresultstomatchcalculationsdonebyhand.
For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and
binaryfloatingpoint. Thedifferencebecomessignificantiftheresultsareroundedtothenearestcent:
>>> from decimal import *
>>> round (Decimal( '0.70 ')*Decimal( '1.05 '),2)
Decimal('0.74')
>>> round (.70 *1.05 ,2)
0.73
TheDecimalresultkeepsatrailingzero,automaticallyinferringfourplacesignificancefrommultiplicandswithtwo
place significance. Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary
floatingpointcannotexactlyrepresentdecimalquantities.
Exactrepresentationenablesthe Decimalclasstoperformmodulocalculationsandequalityteststhatareunsuitable
forbinaryfloatingpoint:
>>> Decimal( '1.00 ')%Decimal( '.10')
Decimal('0.00')
>>> 1.00 %0.10
0.09999999999999995
>>> sum([Decimal( '0.1')]*10)==Decimal( '1.0')
True
>>> 0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 ==1.0
False
Thedecimalmoduleprovidesarithmeticwithasmuchprecisionasneeded:
98 Chapter11. BriefTouroftheStandardLibrary—PartII
PythonTutorial,Release3.13.0
>>> getcontext() .prec =36
>>> Decimal( 1)/Decimal( 7)
Decimal('0.142857142857142857142857142857142857')
11.8. DecimalFloating-PointArithmetic 99
PythonTutorial,Release3.13.0
100 Chapter11. BriefTouroftheStandardLibrary—PartII
CHAPTER
TWELVE
VIRTUALENVIRONMENTSANDPACKAGES
12.1Introduction
Pythonapplicationswilloftenusepackagesandmodulesthatdon’tcomeaspartofthestandardlibrary. Applications
willsometimesneedaspecificversionofalibrary,becausetheapplicationmayrequirethataparticularbughasbeen
fixedortheapplicationmaybewrittenusinganobsoleteversionofthelibrary’sinterface.
This means it may not be possible for one Python installation to meet the requirements of every application. If
applicationAneedsversion1.0ofaparticularmodulebutapplicationBneedsversion2.0,thentherequirementsare
inconflictandinstallingeitherversion1.0or2.0willleaveoneapplicationunabletorun.
Thesolutionforthisproblemistocreatea virtual environment ,aself-containeddirectorytreethatcontainsaPython
installationforaparticularversionofPython,plusanumberofadditionalpackages.
Different applications can then use different virtual environments. To resolve the earlier example of conflicting
requirements,applicationAcanhaveitsownvirtualenvironmentwithversion1.0installedwhileapplicationBhas
anothervirtualenvironmentwithversion2.0. IfapplicationBrequiresalibrarybeupgradedtoversion3.0,thiswill
notaffectapplicationA’senvironment.
12.2CreatingVirtualEnvironments
The module used to create and manage virtual environments is called venv.venvwill install the Python version
from which the command was run (as reported by the --version option). For instance, executing the command
withpython3.12 willinstallversion3.12.
Tocreateavirtualenvironment,decideuponadirectorywhereyouwanttoplaceit,andrunthe venvmoduleasa
scriptwiththedirectorypath:
python -m venv tutorial -env
Thiswillcreatethe tutorial-env directoryifitdoesn’texist,andalsocreatedirectoriesinsideitcontainingacopy
ofthePythoninterpreterandvarioussupportingfiles.
A common directory location for a virtual environment is .venv. This name keeps the directory typically hidden
in your shell and thus out of the way while giving it a name that explains why the directory exists. It also prevents
clashingwith .envenvironmentvariabledefinitionfilesthatsometoolingsupports.
Onceyou’vecreatedavirtualenvironment,youmayactivateit.
OnWindows,run:
tutorial -env\Scripts\activate
OnUnixorMacOS,run:
source tutorial -env/bin/activate
(Thisscriptiswrittenforthebashshell. Ifyouusethe cshorfishshells,therearealternate activate.csh and
activate.fish scriptsyoushoulduseinstead.)
101
PythonTutorial,Release3.13.0
Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re using,
andmodifytheenvironmentsothatrunning pythonwillgetyouthatparticularversionandinstallationofPython.
Forexample:
$source ~/envs/tutorial-env/bin/activate
(tutorial-env )$python
Python 3.5.1 (default, May 62016 ,10:59:36 )
...
>>> import sys
>>> sys.path
['','/usr/local/lib/python35.zip' ,...,
'~/envs/tutorial-env/lib/python3.5/site-packages' ]
>>>
Todeactivateavirtualenvironment,type:
deactivate
intotheterminal.
12.3ManagingPackageswithpip
Youcaninstall,upgrade,andremovepackagesusingaprogramcalled pip. Bydefault pipwillinstallpackagesfrom
thePythonPackageIndex . YoucanbrowsethePythonPackageIndexbygoingtoitinyourwebbrowser.
piphas a number of subcommands: “install”, “uninstall”, “freeze”, etc. (Consult the installing-index guide for
completedocumentationfor pip.)
Youcaninstallthelatestversionofapackagebyspecifyingapackage’sname:
(tutorial-env )$python -mpip install novas
Collecting novas
Downloading novas-3.1.1.3.tar.gz (136kB )
Installing collected packages: novas
Running setup.py install for novas
Successfully installed novas-3.1.1.3
You can also install a specific version of a package by giving the package name followed by ==and the version
number:
(tutorial-env )$python -mpip install requests ==2.6.0
Collecting requests ==2.6.0
Using cached requests-2.6.0-py2.py3-none-any.whl
Installing collected packages: requests
Successfully installed requests-2.6.0
Ifyoure-runthiscommand, pipwillnoticethattherequestedversionisalreadyinstalledanddonothing. Youcan
supply a different version number to get that version, or you can run python -m pip install --upgrade to
upgradethepackagetothelatestversion:
(tutorial-env )$python -mpip install --upgrade requests
Collecting requests
Installing collected packages: requests
Found existing installation: requests 2.6.0
Uninstalling requests-2.6.0:
Successfully uninstalled requests-2.6.0
Successfully installed requests-2.7.0
python -m pip uninstall followedbyoneormorepackagenameswillremovethepackagesfromthevirtual
environment.
102 Chapter12. VirtualEnvironmentsandPackages
PythonTutorial,Release3.13.0
python -m pip show willdisplayinformationaboutaparticularpackage:
(tutorial-env )$python -mpip show requests
---
Metadata-Version: 2.0
Name: requests
Version: 2.7.0
Summary: Python HTTP for Humans.
Home-page: http://python-requests.org
Author: Kenneth Reitz
Author-email: me@kennethreitz.com
License: Apache 2.0
Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
Requires:
python -m pip list willdisplayallofthepackagesinstalledinthevirtualenvironment:
(tutorial-env )$python -mpip list
novas (3.1.1.3 )
numpy (1.9.2 )
pip (7.0.3 )
requests (2.7.0 )
setuptools (16.0)
python -m pip freeze willproduceasimilarlistoftheinstalledpackages, buttheoutputusestheformatthat
python -m pip install expects. Acommonconventionistoputthislistina requirements.txt file:
(tutorial-env )$python -mpip freeze >requirements.txt
(tutorial-env )$cat requirements.txt
novas ==3.1.1.3
numpy ==1.9.2
requests ==2.7.0
Therequirements.txt canthenbecommittedtoversioncontrolandshippedaspartofanapplication. Userscan
theninstallallthenecessarypackageswith install -r :
(tutorial-env )$python -mpip install -rrequirements.txt
Collecting novas ==3.1.1.3 (from -rrequirements.txt (line 1))
...
Collecting numpy ==1.9.2 (from -rrequirements.txt (line 2))
...
Collecting requests ==2.7.0 (from -rrequirements.txt (line 3))
...
Installing collected packages: novas, numpy, requests
Running setup.py install for novas
Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0
piphasmanymoreoptions. Consulttheinstalling-indexguideforcompletedocumentationfor pip. Whenyou’ve
written a package and want to make it available on the Python Package Index, consult the Python packaging user
guide.
12.3. ManagingPackageswithpip 103
PythonTutorial,Release3.13.0
104 Chapter12. VirtualEnvironmentsandPackages
CHAPTER
THIRTEEN
WHATNOW?
ReadingthistutorialhasprobablyreinforcedyourinterestinusingPython—youshouldbeeagertoapplyPythonto
solvingyourreal-worldproblems. Whereshouldyougotolearnmore?
ThistutorialispartofPython’sdocumentationset. Someotherdocumentsinthesetare:
•library-index:
Youshouldbrowsethroughthismanual,whichgivescomplete(thoughterse)referencematerialabouttypes,
functions,andthemodulesinthestandardlibrary. ThestandardPythondistributionincludesa lotofadditional
code. There are modules to read Unix mailboxes, retrieve documents via HTTP, generate random numbers,
parsecommand-lineoptions,compressdata,andmanyothertasks. SkimmingthroughtheLibraryReference
willgiveyouanideaofwhat’savailable.
•installing-indexexplainshowtoinstalladditionalmoduleswrittenbyotherPythonusers.
•reference-index: AdetailedexplanationofPython’ssyntaxandsemantics. It’sheavyreading,butisusefulas
acompleteguidetothelanguageitself.
MorePythonresources:
•https://www.python.org : ThemajorPythonwebsite. Itcontainscode,documentation,andpointerstoPython-
relatedpagesaroundtheweb.
•https://docs.python.org : FastaccesstoPython’sdocumentation.
•https://pypi.org : ThePythonPackageIndex,previouslyalsonicknamedtheCheeseShop1,isanindexofuser-
created Python modules that are available for download. Once you begin releasing code, you can register it
heresothatotherscanfindit.
•https://code.activestate.com/recipes/langs/python/ : ThePythonCookbookisasizablecollectionofcodeex-
amples,largermodules,andusefulscripts. Particularlynotablecontributionsarecollectedinabookalsotitled
PythonCookbook(O’Reilly&Associates,ISBN0-596-00797-3.)
•https://pyvideo.org collectslinkstoPython-relatedvideosfromconferencesanduser-groupmeetings.
•https://scipy.org : TheScientificPythonprojectincludesmodulesforfastarraycomputationsandmanipulations
plusahostofpackagesforsuchthingsaslinearalgebra,Fouriertransforms,non-linearsolvers,randomnumber
distributions,statisticalanalysisandthelike.
For Python-related questions and problem reports, you can post to the newsgroup comp.lang.python , or send
them to the mailing list at python-list@python.org . The newsgroup and mailing list are gatewayed, so messages
posted to one will automatically be forwarded to the other. There are hundreds of postings a day, asking (and
answering) questions, suggesting new features, and announcing new modules. Mailing list archives are available at
https://mail.python.org/pipermail/ .
Before posting, be sure to check the list of Frequently Asked Questions (also called the FAQ). The FAQ answers
manyofthequestionsthatcomeupagainandagain,andmayalreadycontainthesolutionforyourproblem.
1“CheeseShop”isaMontyPython’ssketch: acustomerentersacheeseshop,butwhatevercheeseheasksfor,theclerksaysit’smissing.
105
PythonTutorial,Release3.13.0
106 Chapter13. WhatNow?
CHAPTER
FOURTEEN
INTERACTIVEINPUTEDITINGANDHISTORYSUBSTITUTION
SomeversionsofthePythoninterpretersupporteditingofthecurrentinputlineandhistorysubstitution,similarto
facilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU Readline library,
whichsupportsvariousstylesofediting. Thislibraryhasitsowndocumentationwhichwewon’tduplicatehere.
14.1TabCompletionandHistoryEditing
Completionofvariableandmodulenamesisautomaticallyenabledatinterpreterstartupsothatthe Tabkeyinvokes
the completion function; it looks at Python statement names, the current local variables, and the available module
names. Fordottedexpressionssuchas string.a ,itwillevaluatetheexpressionuptothefinal '.'andthensuggest
completions from the attributes of the resulting object. Note that this may execute application-defined code if an
objectwitha __getattr__() methodispart ofthe expression. Thedefault configurationalso savesyourhistory
into a file named .python_history in your user directory. The history will be available again during the next
interactiveinterpretersession.
14.2AlternativestotheInteractiveInterpreter
Thisfacilityisanenormousstepforwardcomparedtoearlierversionsoftheinterpreter;however,somewishesare
left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent
tokenisrequirednext). Thecompletionmechanismmightusetheinterpreter’ssymboltable. Acommandtocheck
(orevensuggest)matchingparentheses,quotes,etc.,wouldalsobeuseful.
Onealternativeenhancedinteractiveinterpreterthathasbeenaroundforquitesometimeis IPython,whichfeatures
tab completion, object exploration and advanced history management. It can also be thoroughly customized and
embeddedintootherapplications. Anothersimilarenhancedinteractiveenvironmentis bpython.
107
PythonTutorial,Release3.13.0
108 Chapter14. InteractiveInputEditingandHistorySubstitution
CHAPTER
FIFTEEN
FLOATING-POINTARITHMETIC:ISSUESANDLIMITATIONS
Floating-pointnumbersarerepresentedincomputerhardwareasbase2(binary)fractions. Forexample,the decimal
fraction 0.625has value 6/10 + 2/100 + 5/1000, and in the same way the binaryfraction 0.101has value 1/2 +
0/4+1/8. Thesetwofractionshaveidenticalvalues,theonlyrealdifferencebeingthatthefirstiswritteninbase10
fractionalnotation,andthesecondinbase2.
Unfortunately, most decimal fractions cannot be represented exactly as binary fractions. A consequence is that, in
general, the decimal floating-point numbers you enter are only approximated by the binary floating-point numbers
actuallystoredinthemachine.
Theproblemiseasiertounderstandatfirstinbase10. Considerthefraction1/3. Youcanapproximatethatasabase
10fraction:
0.3
or,better,
0.33
or,better,
0.333
andsoon. Nomatterhowmanydigitsyou’rewillingtowritedown,theresultwillneverbeexactly1/3,butwillbe
anincreasinglybetterapproximationof1/3.
Inthesameway,nomatterhowmanybase2digitsyou’rewillingtouse,thedecimalvalue0.1cannotberepresented
exactlyasabase2fraction. Inbase2,1/10istheinfinitelyrepeatingfraction
0.0001100110011001100110011001100110011001100110011 ...
Stopatanyfinitenumberofbits, andyougetanapproximation. Onmostmachinestoday, floatsareapproximated
using a binary fraction with the numerator using the first 53 bits starting with the most significant bit and with the
denominatorasapoweroftwo. Inthecaseof1/10,thebinaryfractionis 3602879701896397 / 2 ** 55 which
isclosetobutnotexactlyequaltothetruevalueof1/10.
Manyusersarenotawareoftheapproximationbecauseofthewayvaluesaredisplayed. Pythononlyprintsadecimal
approximationtothetruedecimalvalueofthebinaryapproximationstoredbythemachine. Onmostmachines,if
Pythonweretoprintthetruedecimalvalueofthebinaryapproximationstoredfor0.1,itwouldhavetodisplay:
>>> 0.1
0.1000000000000000055511151231257827021181583404541015625
Thatismoredigitsthanmostpeoplefinduseful,soPythonkeepsthenumberofdigitsmanageablebydisplayinga
roundedvalueinstead:
>>> 1/10
0.1
109
PythonTutorial,Release3.13.0
Justremember,eventhoughtheprintedresultlooksliketheexactvalueof1/10,theactualstoredvalueisthenearest
representablebinaryfraction.
Interestingly, there are many different decimal numbers that share the same nearest approxi-
mate binary fraction. For example, the numbers 0.1and 0.10000000000000001 and 0.
1000000000000000055511151231257827021181583404541015625 are all approximated by
3602879701896397 / 2 ** 55 . Since all of these decimal values share the same approximation, any
oneofthemcouldbedisplayedwhilestillpreservingtheinvariant eval(repr(x)) == x .
Historically, the Python prompt and built-in repr()function would choose the one with 17 significant digits, 0.
10000000000000001 . Starting with Python 3.1, Python (on most systems) is now able to choose the shortest of
theseandsimplydisplay 0.1.
Note that this is in the very nature of binary floating point: this is not a bug in Python, and it is not a bug in your
codeeither. You’llseethesamekindofthinginalllanguagesthatsupportyourhardware’sfloating-pointarithmetic
(althoughsomelanguagesmaynot displaythedifferencebydefault,orinalloutputmodes).
Formorepleasantoutput,youmaywishtousestringformattingtoproducealimitednumberofsignificantdigits:
>>> format (math .pi, '.12g ')# give 12 significant digits
'3.14159265359'
>>> format (math .pi, '.2f') # give 2 digits after the point
'3.14'
>>> repr (math .pi)
'3.141592653589793'
It’simportanttorealizethatthisis,inarealsense,anillusion: you’resimplyroundingthe displayofthetruemachine
value.
One illusion may beget another. For example, since 0.1 is not exactly 1/10, summing three values of 0.1 may not
yieldexactly0.3,either:
>>> 0.1 +0.1 +0.1 ==0.3
False
Also,sincethe0.1cannotgetanyclosertotheexactvalueof1/10and0.3cannotgetanyclosertotheexactvalue
of3/10,thenpre-roundingwith round()functioncannothelp:
>>> round (0.1,1)+round (0.1,1)+round (0.1,1)==round (0.3,1)
False
Though the numbers cannot be made closer to their intended exact values, the math.isclose() function can be
usefulforcomparinginexactvalues:
>>> math .isclose( 0.1 +0.1 +0.1,0.3)
True
Alternatively,the round()functioncanbeusedtocompareroughapproximations:
>>> round (math .pi, ndigits =2)==round (22/7, ndigits =2)
True
Binaryfloating-pointarithmeticholdsmanysurpriseslikethis. Theproblemwith“0.1”isexplainedinprecisedetail
below, inthe“RepresentationError”section. See ExamplesofFloatingPointProblems fora pleasantsummaryof
howbinaryfloatingpointworksandthekindsofproblemscommonlyencounteredinpractice. Alsosee ThePerils
ofFloatingPoint foramorecompleteaccountofothercommonsurprises.
As that says near the end, “there are no easy answers.” Still, don’t be unduly wary of floating point! The errors in
Pythonfloatoperationsareinheritedfromthefloating-pointhardware,andonmostmachinesareontheorderofno
110 Chapter15. Floating-PointArithmetic: IssuesandLimitations
PythonTutorial,Release3.13.0
morethan1partin2**53peroperation. That’smorethanadequateformosttasks,butyoudoneedtokeepinmind
thatit’snotdecimalarithmeticandthateveryfloatoperationcansufferanewroundingerror.
While pathological cases do exist, for most casual use of floating-point arithmetic you’ll see the result you expect
in the end if you simply round the display of your final results to the number of decimal digits you expect. str()
usuallysuffices,andforfinercontrolseethe str.format() method’sformatspecifiersinformatstrings.
Forusecaseswhichrequireexactdecimalrepresentation,tryusingthe decimalmodulewhichimplementsdecimal
arithmeticsuitableforaccountingapplicationsandhigh-precisionapplications.
Another form of exact arithmetic is supported by the fractions module which implements arithmetic based on
rationalnumbers(sothenumberslike1/3canberepresentedexactly).
If you are a heavy user of floating-point operations you should take a look at the NumPy package and many other
packagesformathematicalandstatisticaloperationssuppliedbytheSciPyproject. See< https://scipy.org >.
Python provides tools that may help on those rare occasions when you really dowant to know the exact value of a
float. The float.as_integer_ratio() methodexpressesthevalueofafloatasafraction:
>>> x=3.14159
>>> x.as_integer_ratio()
(3537115888337719, 1125899906842624)
Sincetheratioisexact,itcanbeusedtolosslesslyrecreatetheoriginalvalue:
>>> x==3537115888337719 /1125899906842624
True
Thefloat.hex() methodexpressesafloatinhexadecimal(base16), againgivingtheexactvaluestoredbyyour
computer:
>>> x.hex()
'0x1.921f9f01b866ep+1'
Thisprecisehexadecimalrepresentationcanbeusedtoreconstructthefloatvalueexactly:
>>> x==float .fromhex( '0x1.921f9f01b866ep+1 ')
True
Sincetherepresentationisexact,itisusefulforreliablyportingvaluesacrossdifferentversionsofPython(platform
independence)andexchangingdatawithotherlanguagesthatsupportthesameformat(suchasJavaandC99).
Anotherhelpfultoolisthe sum()functionwhichhelpsmitigateloss-of-precisionduringsummation. Itusesextended
precision for intermediate rounding steps as values are added onto a running total. That can make a difference in
overallaccuracysothattheerrorsdonotaccumulatetothepointwheretheyaffectthefinaltotal:
>>> 0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 +0.1 ==1.0
False
>>> sum([0.1]*10)==1.0
True
Themath.fsum() goesfurtherandtracksallofthe“lostdigits”asvaluesareaddedontoarunningtotalsothatthe
result has only a single rounding. This is slower than sum()but will be more accurate in uncommon cases where
largemagnitudeinputsmostlycanceleachotheroutleavingafinalsumnearzero:
>>> arr =[-0.10430216751806065 ,-266310978.67179024 ,143401161448607.16 ,
... -143401161400469.7 ,266262841.31058735 ,-0.003244936839808227 ]
>>> float (sum(map(Fraction, arr))) # Exact summation with single rounding
8.042173697819788e-13
>>> math .fsum(arr) # Single rounding
8.042173697819788e-13
>>> sum(arr) # Multiple roundings in extended precision
(continuesonnextpage)
111
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
8.042178034628478e-13
>>> total =0.0
>>> for xinarr:
... total +=x # Multiple roundings in standard precision
...
>>> total # Straight addition has no correct digits!
-0.0051575902860057365
15.1RepresentationError
Thissectionexplainsthe“0.1”exampleindetail,andshowshowyoucanperformanexactanalysisofcaseslikethis
yourself. Basicfamiliaritywithbinaryfloating-pointrepresentationisassumed.
Representation error referstothefactthatsome(most, actually)decimalfractionscannotberepresentedexactlyas
binary(base2)fractions. ThisisthechiefreasonwhyPython(orPerl,C,C++,Java,Fortran,andmanyothers)often
won’tdisplaytheexactdecimalnumberyouexpect.
Why is that? 1/10 is not exactly representable as a binary fraction. Since at least 2000, almost all machines use
IEEE754binaryfloating-pointarithmetic,andalmostallplatformsmapPythonfloatstoIEEE754binary64“double
precision”values. IEEE754binary64valuescontain53bitsofprecision,sooninputthecomputerstrivestoconvert
0.1totheclosestfractionitcanoftheform J/2**Nwhere Jisanintegercontainingexactly53bits. Rewriting
1/10~=J/(2**N)
as
J~=2**N/10
andrecallingthat Jhasexactly53bits(is >= 2**52 but< 2**53),thebestvaluefor Nis56:
>>> 2**52<=2**56//10 <2**53
True
Thatis,56istheonlyvaluefor Nthatleaves Jwithexactly53bits. Thebestpossiblevaluefor Jisthenthatquotient
rounded:
>>> q, r =divmod (2**56,10)
>>> r
6
Sincetheremainderismorethanhalfof10,thebestapproximationisobtainedbyroundingup:
>>> q+1
7205759403792794
Thereforethebestpossibleapproximationto1/10inIEEE754doubleprecisionis:
7205759403792794 /2**56
Dividingboththenumeratoranddenominatorbytworeducesthefractionto:
3602879701896397 /2**55
Note that since we rounded up, this is actually a little bit larger than 1/10; if we had not rounded up, the quotient
wouldhavebeenalittlebitsmallerthan1/10. Butinnocasecanitbe exactly1/10!
Sothecomputernever“sees”1/10: whatitseesistheexactfractiongivenabove,thebestIEEE754doubleapprox-
imationitcanget:
112 Chapter15. Floating-PointArithmetic: IssuesandLimitations
PythonTutorial,Release3.13.0
>>> 0.1 *2**55
3602879701896397.0
Ifwemultiplythatfractionby10**55,wecanseethevalueoutto55decimaldigits:
>>> 3602879701896397 *10**55//2**55
1000000000000000055511151231257827021181583404541015625
meaning that the exact number stored in the computer is equal to the decimal value
0.1000000000000000055511151231257827021181583404541015625. Instead of displaying the full deci-
malvalue,manylanguages(includingolderversionsofPython),roundtheresultto17significantdigits:
>>> format (0.1,'.17f ')
'0.10000000000000001'
Thefractions anddecimalmodulesmakethesecalculationseasy:
>>> from decimal import Decimal
>>> from fractions import Fraction
>>> Fraction .from_float( 0.1)
Fraction(3602879701896397, 36028797018963968)
>>> (0.1).as_integer_ratio()
(3602879701896397, 36028797018963968)
>>> Decimal .from_float( 0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
>>> format (Decimal .from_float( 0.1),'.17')
'0.10000000000000001'
15.1. RepresentationError 113
PythonTutorial,Release3.13.0
114 Chapter15. Floating-PointArithmetic: IssuesandLimitations
CHAPTER
SIXTEEN
APPENDIX
16.1InteractiveMode
Therearetwovariantsoftheinteractive REPL.Theclassicbasicinterpreterissupportedonallplatformswithminimal
linecontrolcapabilities.
OnWindows,orUnix-likesystemswith cursessupport,anewinteractiveshellisusedbydefault. Thisonesupports
color,multilineediting,historybrowsing,andpastemode. Todisablecolor,seeusing-on-controlling-colorfordetails.
Function keys provide some additional functionality. F1enters the interactive help browser pydoc.F2allows for
browsingcommand-linehistorywithneitheroutputnorthe »>and…prompts. F3enters“pastemode”,whichmakes
pastinglargerblocksofcodeeasier. Press F3toreturntotheregularprompt.
When using the new interactive shell, exit the shell by typing exitorquit. Adding call parentheses after those
commandsisnotrequired.
Ifthenewinteractiveshellisnotdesired,itcanbedisabledviathe PYTHON_BASIC_REPL environmentvariable.
16.1.1ErrorHandling
Whenanerroroccurs,theinterpreterprintsanerrormessageandastacktrace. Ininteractivemode,itthenreturns
to the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack
trace. (Exceptionshandledbyan exceptclauseina trystatementarenoterrorsinthiscontext.) Someerrorsare
unconditionally fatal and cause an exit with a nonzero exit status; this applies to internal inconsistencies and some
cases of running out of memory. All error messages are written to the standard error stream; normal output from
executedcommandsiswrittentostandardoutput.
Typing the interrupt character (usually Control-C orDelete) to the primary or secondary prompt cancels
the input and returns to the primary prompt.1Typing an interrupt while a command is executing raises the
KeyboardInterrupt exception,whichmaybehandledbya trystatement.
16.1.2ExecutablePythonScripts
OnBSD’ishUnixsystems,Pythonscriptscanbemadedirectlyexecutable,likeshellscripts,byputtingtheline
#!/usr/bin/env python3
(assumingthattheinterpreterisontheuser’s PATH)atthebeginningofthescriptandgivingthefileanexecutable
mode. The #!mustbethefirsttwocharactersofthefile. Onsomeplatforms,thisfirstlinemustendwithaUnix-style
lineending( '\n'),notaWindows( '\r\n')lineending. Notethatthehash,orpound,character, '#',isusedto
startacommentinPython.
Thescriptcanbegivenanexecutablemode,orpermission,usingthe chmodcommand.
$chmod +xmyscript.py
OnWindowssystems,thereisnonotionofan“executablemode”. ThePythoninstallerautomaticallyassociates .py
fileswith python.exe sothatadouble-clickonaPythonfilewillrunitasascript. Theextensioncanalsobe .pyw,
inthatcase,theconsolewindowthatnormallyappearsissuppressed.
1AproblemwiththeGNUReadlinepackagemaypreventthis.
115
PythonTutorial,Release3.13.0
16.1.3TheInteractiveStartupFile
WhenyouusePythoninteractively,itisfrequentlyhandytohavesomestandardcommandsexecutedeverytimethe
interpreterisstarted. Youcandothisbysettinganenvironmentvariablenamed PYTHONSTARTUP tothenameofa
filecontainingyourstart-upcommands. Thisissimilartothe .profile featureoftheUnixshells.
Thisfileisonlyreadininteractivesessions,notwhenPythonreadscommandsfromascript,andnotwhen /dev/tty
isgivenastheexplicitsourceofcommands(whichotherwisebehaveslikeaninteractivesession). Itisexecutedin
thesamenamespacewhereinteractivecommandsareexecuted,sothatobjectsthatitdefinesorimportscanbeused
withoutqualificationintheinteractivesession. Youcanalsochangetheprompts sys.ps1andsys.ps2inthisfile.
Ifyouwanttoreadanadditionalstart-upfilefromthecurrentdirectory,youcanprogramthisintheglobalstart-up
fileusingcodelike if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read()) . If
youwanttousethestartupfileinascript,youmustdothisexplicitlyinthescript:
import os
filename =os.environ .get( 'PYTHONSTARTUP ')
iffilename and os.path .isfile(filename):
with open (filename) asfobj:
startup_file =fobj .read()
exec(startup_file)
16.1.4TheCustomizationModules
Pythonprovidestwohookstoletyoucustomizeit: sitecustomizeandusercustomize. Toseehowitworks,youneed
firsttofindthelocationofyourusersite-packagesdirectory. StartPythonandrunthiscode:
>>> import site
>>> site .getusersitepackages()
'/home/user/.local/lib/python3.x/site-packages'
Nowyoucancreateafilenamed usercustomize.py inthatdirectoryandputanythingyouwantinit. Itwillaffect
everyinvocationofPython,unlessitisstartedwiththe -soptiontodisabletheautomaticimport.
sitecustomizeworksinthesameway,butistypicallycreatedbyanadministratorofthecomputerintheglobalsite-
packages directory, and is imported before usercustomize. See the documentation of the sitemodule for more
details.
116 Chapter16. Appendix
APPENDIX
A
GLOSSARY
>>>
The default Python prompt of the interactive shell. Often seen for code examples which can be executed
interactivelyintheinterpreter.
...
Canreferto:
•The default Python prompt of the interactive shell when entering the code for an indented code block,
when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or
triplequotes),orafterspecifyingadecorator.
•TheEllipsis built-inconstant.
abstractbase class
Abstractbaseclassescomplement duck-typing byprovidingawaytodefineinterfaceswhenothertechniques
likehasattr() wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual
subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and
issubclass() ;seethe abcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-
tures (in the collections.abc module), numbers (in the numbersmodule), streams (in the iomodule),
import finders and loaders (in the importlib.abc module). You can create your own ABCs with the abc
module.
annotation
Alabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention
asatype hint.
Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-
tributes, and functions are stored in the __annotations__ special attribute of modules, classes, and func-
tions,respectively.
Seevariable annotation ,function annotation ,PEP484andPEP526,whichdescribethisfunctionality. Also
seeannotations-howtoforbestpracticesonworkingwithannotations.
argument
Avaluepassedtoa function(ormethod)whencallingthefunction. Therearetwokindsofargument:
•keyword argument : anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa
valueinadictionaryprecededby **. Forexample, 3and5arebothkeywordargumentsinthefollowing
callsto complex() :
complex (real =3, imag =5)
complex (**{'real ':3,'imag ':5})
•positional argument : anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe
beginningofanargumentlistand/orbepassedaselementsofan iterableprecededby *. Forexample, 3
and5arebothpositionalargumentsinthefollowingcalls:
complex (3,5)
complex (*(3,5))
117
PythonTutorial,Release3.13.0
Arguments are assigned to the named local variables in a function body. See the calls section for the rules
governingthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument; theevaluated
valueisassignedtothelocalvariable.
Seealsothe parameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
andPEP 362.
asynchronouscontextmanager
Anobjectwhichcontrolstheenvironmentseeninan async with statementbydefining __aenter__() and
__aexit__() methods. Introducedby PEP492.
asynchronousgenerator
A function which returns an asynchronous generator iterator . It looks like a coroutine function defined with
async def except that it contains yieldexpressions for producing a series of values usable in an async
forloop.
Usually refers to an asynchronous generator function, but may refer to an asynchronous generator iterator in
somecontexts. Incaseswheretheintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
Anasynchronousgeneratorfunctionmaycontain awaitexpressionsaswellas async for ,and async with
statements.
asynchronousgeneratoriterator
Anobjectcreatedbya asynchronous generator function.
Thisisan asynchronous iterator whichwhencalledusingthe __anext__() methodreturnsanawaitableobject
whichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenext yieldexpression.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe asynchronous generator iterator effectivelyresumeswithanother
awaitablereturnedby __anext__() ,itpicksupwhereitleftoff. See PEP492andPEP 525.
asynchronousiterable
An object, that can be used in an async for statement. Must return an asynchronous iterator from its
__aiter__() method. Introducedby PEP 492.
asynchronousiterator
An object that implements the __aiter__() and__anext__() methods. __anext__() must return an
awaitableobject. async for resolves the awaitables returned by an asynchronous iterator’s __anext__()
methoduntilitraisesa StopAsyncIteration exception. Introducedby PEP492.
attribute
Avalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,
ifanobject ohasanattribute aitwouldbereferencedas o.a.
Itispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample
using setattr() , if the object allowsit. Such an attributewill not be accessibleusing a dotted expression,
andwouldinsteadneedtoberetrievedwith getattr() .
awaitable
An object that can be used in an awaitexpression. Can be a coroutineor an object with an __await__()
method. Seealso PEP 492.
BDFL
BenevolentDictatorForLife,a.k.a. GuidovanRossum ,Python’screator.
binary file
Afile objectabletoreadandwrite bytes-like objects . Examplesofbinaryfilesarefilesopenedinbinarymode
('rb','wb'or'rb+'),sys.stdin.buffer ,sys.stdout.buffer , andinstancesof io.BytesIO and
gzip.GzipFile .
Seealso text fileforafileobjectabletoreadandwrite strobjects.
borrowedreference
InPython’sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot
ownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection
canremovethelast strong reference totheobjectandsodestroyit.
118 AppendixA. Glossary
PythonTutorial,Release3.13.0
Calling Py_INCREF() onthe borrowed reference isrecommendedtoconvertittoa strong reference in-place,
exceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. The Py_NewRef()
functioncanbeusedtocreateanew strong reference .
bytes-likeobject
An object that supports the bufferobjects and can export a C- contiguous buffer. This includes all bytes,
bytearray ,and array.array objects,aswellasmanycommon memoryview objects. Bytes-likeobjects
can be used for variousoperations that work withbinary data; these include compression, saving to a binary
file,andsendingoverasocket.
Someoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas“read-write
bytes-likeobjects”. Examplemutablebufferobjectsinclude bytearray anda memoryview ofabytearray .
Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”);
examplesoftheseinclude bytesanda memoryview ofabytesobject.
bytecode
Pythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython
interpreter. Thebytecodeisalsocachedin .pycfilessothatexecutingthesamefileisfasterthesecondtime
(recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a
virtual machine thatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare
notexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.
Alistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.
callable
Acallableisanobjectthatcanbecalled,possiblywithasetofarguments(see argument),withthefollowing
syntax:
callable (argument1, argument2, argumentN)
Afunction,andbyextensiona method,isacallable. Aninstanceofaclassthatimplementsthe __call__()
methodisalsoacallable.
callback
Asubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.
class
A template for creating user-defined objects. Class definitions normally contain method definitions which
operateoninstancesoftheclass.
classvariable
Avariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).
closurevariable
Afree variable referencedfroma nested scope thatisdefinedinanouterscoperatherthanbeingresolvedat
runtime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to
allowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.
Forexample,inthe innerfunctioninthefollowingcode,both xandprintarefree variables ,butonly xis
aclosure variable :
def outer ():
x=0
def inner ():
nonlocal x
x+=1
print (x)
return inner
Duetothe codeobject.co_freevars attribute(which,despiteitsname,onlyincludesthenamesofclosure
variablesratherthanlistingallreferencedfreevariables),themoregeneral free variable termissometimesused
evenwhentheintendedmeaningistoreferspecificallytoclosurevariables.
119
PythonTutorial,Release3.13.0
complexnumber
Anextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand
animaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof -1),often
written iin mathematics or jin engineering. Python has built-in support for complex numbers, which are
writtenwiththislatternotation;theimaginarypartiswrittenwitha jsuffix,e.g., 3+1j. Togetaccesstocom-
plexequivalentsofthe mathmodule,use cmath. Useofcomplexnumbersisafairlyadvancedmathematical
feature. Ifyou’renotawareofaneedforthem,it’salmostcertainyoucansafelyignorethem.
context
Thistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:
•Thetemporarystateorenvironmentestablishedbya context manager viaa withstatement.
•The collection of keyvalue bindings associated with a particular contextvars.Context object and
accessedvia ContextVar objects. Alsosee context variable .
•Acontextvars.Context object. Alsosee current context .
contextmanagementprotocol
The__enter__() and__exit__() methodscalledbythe withstatement. See PEP343.
contextmanager
An object which implements the context management protocol and controls the environment seen in a with
statement. See PEP 343.
contextvariable
A variable whose value depends on which context is the current context . Values are accessed via
contextvars.ContextVar objects. Context variables are primarily used to isolate state between concur-
rentasynchronoustasks.
contiguous
Abufferisconsideredcontiguousexactlyifitiseither C-contiguous orFortran contiguous . Zero-dimensional
buffersareCandFortrancontiguous. Inone-dimensionalarrays, theitemsmustbelaidoutinmemorynext
toeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the
lastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous
arrays,thefirstindexvariesthefastest.
coroutine
Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at
anotherpoint. Coroutinescanbeentered, exited, andresumedatmanydifferentpoints. Theycanbeimple-
mentedwiththe async def statement. Seealso PEP492.
coroutinefunction
Afunctionwhichreturnsa coroutineobject. Acoroutinefunctionmaybedefinedwiththe async def state-
ment, and may contain await,async for , and async with keywords. These were introduced by PEP
492.
CPython
ThecanonicalimplementationofthePythonprogramminglanguage,asdistributedon python.org. Theterm
“CPython”isusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.
currentcontext
Thecontext(contextvars.Context object) that is currently used by ContextVar objects to access (get
or set) the values of context variables . Each thread has its own current context. Frameworks for executing
asynchronous tasks (see asyncio) associate each task with a context which becomes the current context
wheneverthetaskstartsorresumesexecution.
decorator
Afunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe @wrapper syntax.
Commonexamplesfordecoratorsare classmethod() andstaticmethod() .
Thedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-
alent:
120 AppendixA. Glossary
PythonTutorial,Release3.13.0
def f(arg):
...
f=staticmethod (f)
@staticmethod
def f(arg):
...
The same concept exists for classes, but is less commonly used there. See the documentation for function
definitionsandclassdefinitionsformoreaboutdecorators.
descriptor
Anyobjectwhichdefinesthemethods __get__() ,__set__() ,or__delete__() . Whenaclassattribute
is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.bto get,
set or delete an attribute looks up the object named bin the class dictionary for a, but if bis a descriptor,
the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of
Pythonbecausetheyarethebasisformanyfeaturesincludingfunctions, methods, properties, classmethods,
staticmethods,andreferencetosuperclasses.
Formoreinformationaboutdescriptors’methods,seedescriptorsortheDescriptorHowToGuide.
dictionary
Anassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith __hash__()
and__eq__() methods. CalledahashinPerl.
dictionarycomprehension
A compact way to process all or part of the elements in an iterable and return a dictionary with the re-
sults. results = {n: n ** 2 for n in range(10)} generatesadictionarycontainingkey nmapped
tovalue n ** 2. Seecomprehensions.
dictionaryview
Theobjectsreturnedfrom dict.keys() ,dict.values() ,and dict.items() arecalleddictionaryviews.
They providea dynamicview onthe dictionary’sentries, whichmeans thatwhen thedictionary changes, the
view reflects these changes. To force the dictionary view to become a full list use list(dictview) . See
dict-views.
docstring
A string literal which appears as the first expression in a class, function or module. While ignored when the
suite is executed, it is recognized by the compiler and put into the __doc__attribute of the enclosing class,
function or module. Since it is available via introspection, it is the canonical place for documentation of the
object.
duck-typing
Aprogrammingstylewhichdoesnotlookatanobject’stypetodetermineifithastherightinterface;instead,
the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be
a duck.”) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility
by allowing polymorphic substitution. Duck-typing avoids tests using type()orisinstance() . (Note,
however, that duck-typing can be complemented with abstract base classes .) Instead, it typically employs
hasattr() testsor EAFPprogramming.
EAFP
Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of
valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is
characterizedbythepresenceofmany tryandexceptstatements. Thetechniquecontrastswiththe LBYL
stylecommontomanyotherlanguagessuchasC.
expression
Apieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof
expressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In
contrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealso statementswhich
cannotbeusedasexpressions,suchas while. Assignmentsarealsostatements,notexpressions.
121
PythonTutorial,Release3.13.0
extensionmodule
AmodulewritteninCorC++,usingPython’sCAPItointeractwiththecoreandwithusercode.
f-string
String literals prefixed with 'f'or'F'are commonly called “f-strings” which is short for formatted string
literals. Seealso PEP 498.
fileobject
Anobjectexposingafile-orientedAPI(withmethodssuchas read()orwrite())toanunderlyingresource.
Dependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof
storageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).
Fileobjectsarealsocalled file-like objects orstreams.
There are actually three categories of file objects: raw binary files , buffered binary files andtext files. Their
interfaces are defined in the iomodule. The canonical way to create a file object is by using the open()
function.
file-likeobject
Asynonymfor file object.
filesystemencodinganderrorhandler
EncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto
theoperatingsystem.
Thefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding
failstoprovidethisguarantee,APIfunctionscanraise UnicodeError .
Thesys.getfilesystemencoding() andsys.getfilesystemencodeerrors() functions can be
usedtogetthefilesystemencodinganderrorhandler.
Thefilesystem encoding and error handler areconfiguredatPythonstartupbythe PyConfig_Read() func-
tion: see filesystem_encoding andfilesystem_errors membersof PyConfig .
Seealsothe locale encoding .
finder
Anobjectthattriestofindthe loaderforamodulethatisbeingimported.
Therearetwotypesoffinder: meta path finders forusewith sys.meta_path ,andpath entry finders foruse
withsys.path_hooks .
Seefinders-and-loadersand importlib formuchmoredetail.
floordivision
Mathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris //. Forexample,the
expression 11 // 4evaluates to 2in contrast to the 2.75returned by float true division. Note that (-11)
// 4is-3becausethatis -2.75rounded downward. SeePEP238.
free threading
AthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.
Thisisincontrasttothe global interpreter lock whichallowsonlyonethreadtoexecutePythonbytecodeata
time. See PEP703.
free variable
Formally, as defined in the language execution model, a free variable is any variable used in a namespace
whichisnotalocalvariableinthatnamespace. See closure variable foranexample. Pragmatically,duetothe
nameofthe codeobject.co_freevars attribute,thetermisalsosometimesusedasasynonymfor closure
variable.
function
Aseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormore argumentswhich
maybeusedintheexecutionofthebody. Seealso parameter,method,andthefunctionsection.
function annotation
Anannotation ofafunctionparameterorreturnvalue.
122 AppendixA. Glossary
PythonTutorial,Release3.13.0
Function annotations are usually used for type hints: for example, this function is expected to take two int
argumentsandisalsoexpectedtohavean intreturnvalue:
def sum_two_numbers (a: int, b: int)->int:
return a+b
Functionannotationsyntaxisexplainedinsectionfunction.
Seevariable annotation andPEP 484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest
practicesonworkingwithannotations.
__future__
A future statement, from __future__ import <feature> , directs the compiler to compile the current
moduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The __future__
moduledocumentsthepossiblevaluesof feature. Byimportingthismoduleandevaluatingitsvariables,you
canseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:
>>> import __future__
>>> __future__ .division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
garbagecollection
Theprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference
countingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector
canbecontrolledusingthe gcmodule.
generator
A function which returns a generator iterator . It looks like a normal function except that it contains yield
expressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe
next()function.
Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where
theintendedmeaningisn’tclear,usingthefulltermsavoidsambiguity.
generatoriterator
Anobjectcreatedbya generatorfunction.
Each yieldtemporarilysuspendsprocessing,rememberingthelocationexecutionstate(includinglocalvari-
ablesandpendingtry-statements). Whenthe generator iterator resumes,itpicksupwhereitleftoff(incontrast
tofunctionswhichstartfreshoneveryinvocation).
generatorexpression
Anexpression that returns an iterator. It looks like a normal expression followed by a forclause defining a
loop variable, range, and an optional ifclause. The combined expression generates values for an enclosing
function:
>>> sum(i*ifor iinrange (10)) # sum of squares 0, 1, 4, ... 81
285
genericfunction
Afunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-
plementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.
Seealsothe single dispatch glossaryentry,the functools.singledispatch() decorator,and PEP 443.
generictype
Atypethat can be parameterized; typically a container class such as listordict. Used for type hintsand
annotations .
Formoredetails,seegenericaliastypes, PEP483,PEP484,PEP 585,andthe typingmodule.
GIL
Seeglobal interpreter lock .
123
PythonTutorial,Release3.13.0
globalinterpreterlock
The mechanism used by the CPythoninterpreter to assure that only one thread executes Python bytecodeat
a time. This simplifies the CPython implementation by making the object model (including critical built-in
types such as dict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier
fortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor
machines.
However,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen
doingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen
doingI/O.
As of Python 3.13, the GIL can be disabled using the --disable-gil build configuration. After building
Pythonwiththisoption,codemustberunwith -X gil=0 oraftersettingthe PYTHON_GIL=0 environment
variable. This feature enables improved performance for multi-threaded applications and makes it easier to
usemulti-coreCPUsefficiently. Formoredetails,see PEP 703.
hash-basedpyc
Abytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto
determineitsvalidity. Seepyc-invalidation.
hashable
Anobjectis hashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa __hash__()
method), and can be compared to other objects (it needs an __eq__() method). Hashable objects which
compareequalmusthavethesamehashvalue.
Hashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe
hashvalueinternally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)
arenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.
Objectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except
withthemselves),andtheirhashvalueisderivedfromtheir id().
IDLE
AnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-
ronmentwhichshipswiththestandarddistributionofPython.
immortal
Immortal objects areaCPythonimplementationdetailintroducedin PEP 683.
If an object is immortal, its reference count is never modified, and therefore it is never deallocated while the
interpreterisrunning. Forexample, TrueandNoneareimmortalinCPython.
immutable
An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot
bealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein
placeswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.
importpath
Alistoflocations(or path entries )thataresearchedbythe path based finder formodulestoimport. During
import, this list of locations usually comes from sys.path , but for subpackages it may also come from the
parentpackage’s __path__ attribute.
importing
TheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.
importer
Anobjectthatbothfindsandloadsamodule;botha finderandloaderobject.
interactive
Pythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter
prompt, immediately execute them and see their results. Just launch pythonwith no arguments (possibly
by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect
modulesandpackages(remember help(x)). Formoreoninteractivemode,see Interactive Mode .
124 AppendixA. Glossary
PythonTutorial,Release3.13.0
interpreted
Pythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause
ofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly
creating an executable which is then run. Interpreted languages typically have a shorter development/debug
cyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealso interactive.
interpretershutdown
Whenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated
resources, such as modules and various critical internal structures. It also makes several calls to the garbage
collector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-
cutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction
anymore(commonexamplesarelibrarymodulesorthewarningsmachinery).
The main reason for interpreter shutdown is that the __main__ module or the script being run has finished
executing.
iterable
An object capable of returning its members one at a time. Examples of iterables include all sequence types
(such as list,str, and tuple) and some non-sequence types like dict,file objects, and objects of any
classesyoudefinewithan __iter__() methodorwitha __getitem__() methodthatimplements sequence
semantics.
Iterables can be used in a forloop and in many other places where a sequence is needed ( zip(),map(),
…). Whenaniterableobjectispassed as anargumentto thebuilt-infunction iter(), itreturnsan iterator
fortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot
necessarytocall iter()ordealwithiteratorobjectsyourself. The forstatementdoesthatautomaticallyfor
you,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealso iterator,
sequence,andgenerator.
iterator
An object representing a stream of data. Repeated calls to the iterator’s __next__() method (or passing
ittothebuilt-infunction next())returnsuccessiveitemsinthestream. Whennomoredataareavailablea
StopIteration exceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls
toits __next__() methodjustraise StopIteration again. Iteratorsarerequiredtohavean __iter__()
methodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces
whereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A
containerobject(suchasa list)producesafreshnewiteratoreachtimeyoupassittothe iter()function
oruseitina forloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused
inthepreviousiterationpass,makingitappearlikeanemptycontainer.
Moreinformationcanbefoundintypeiter.
CPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine
__iter__() . Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof
iteratoroperations.
keyfunction
Akeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,
locale.strxfrm() isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.
A number of tools in Python accept key functions to control how elements are ordered or grouped. They
include min(),max(),sorted() ,list.sort() ,heapq.merge() ,heapq.nsmallest() ,heapq.
nlargest() ,and itertools.groupby() .
There are several ways to create a key function. For example. the str.lower() method can serve as a
key function for case insensitive sorts. Alternatively, a key function can be built from a lambdaexpression
suchas lambda r: (r[0], r[2]) . Also, operator.attrgetter() ,operator.itemgetter() ,and
operator.methodcaller() are three key function constructors. See the Sorting HOW TO for examples
ofhowtocreateandusekeyfunctions.
keywordargument
Seeargument.
125
PythonTutorial,Release3.13.0
lambda
Ananonymousinlinefunctionconsistingofasingle expressionwhichisevaluatedwhenthefunctioniscalled.
Thesyntaxtocreatealambdafunctionis lambda [parameters]: expression
LBYL
Lookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This
stylecontrastswiththe EAFPapproachandischaracterizedbythepresenceofmany ifstatements.
In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the
looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can
failifanotherthreadremoves keyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved
withlocksorbyusingtheEAFPapproach.
list
Abuilt-inPython sequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist
sinceaccesstoelementsis O(1).
listcomprehension
Acompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result
= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0] generatesalistofstringscon-
tainingevenhexnumbers(0x..) intherangefrom0to255. The ifclauseisoptional. Ifomitted,allelements
inrange(256) areprocessed.
loader
Anobjectthatloadsamodule. Itmustdefineamethodnamed load_module() . Aloaderistypicallyreturned
byafinder. Seealso:
•finders-and-loaders
•importlib.abc.Loader
•PEP 302
localeencoding
On Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.
LC_CTYPE, new_locale) .
OnWindows,itistheANSIcodepage(ex: "cp1252" ).
OnAndroidandVxWorks,Pythonuses "utf-8"asthelocaleencoding.
locale.getencoding() canbeusedtogetthelocaleencoding.
Seealsothe filesystem encoding and error handler .
magicmethod
Aninformalsynonymfor special method .
mapping
A container object that supports arbitrary key lookups and implements the methods specified in the
collections.abc.Mapping orcollections.abc.MutableMapping abstract base classes. Exam-
ples include dict,collections.defaultdict ,collections.OrderedDict andcollections.
Counter.
metapathfinder
Afinderreturnedbyasearchof sys.meta_path . Metapathfindersarerelatedto, butdifferentfrom path
entry finders .
Seeimportlib.abc.MetaPathFinder forthemethodsthatmetapathfindersimplement.
metaclass
The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The
metaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-
gramming languages provide a default implementation. What makes Python special is that it is possible to
createcustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide
powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking
objectcreation,implementingsingletons,andmanyothertasks.
126 AppendixA. Glossary
PythonTutorial,Release3.13.0
Moreinformationcanbefoundinmetaclasses.
method
Afunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod
willgettheinstanceobjectasitsfirst argument(whichisusuallycalled self). See functionandnested scope .
methodresolutionorder
Method Resolution Order is the order in which base classes are searched for a member during lookup. See
python_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.
module
AnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary
Pythonobjects. ModulesareloadedintoPythonbytheprocessof importing.
Seealso package.
modulespec
Anamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceof importlib.
machinery.ModuleSpec .
Seealsomodule-specs.
MRO
Seemethod resolution order .
mutable
Mutableobjectscanchangetheirvaluebutkeeptheir id(). Seealso immutable.
namedtuple
Theterm“namedtuple”appliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare
alsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.
Several built-in types are named tuples, including the values returned by time.localtime() andos.
stat(). Anotherexampleis sys.float_info :
>>> sys.float_info[ 1] # indexed access
1024
>>> sys.float_info .max_exp # named field access
1024
>>> isinstance (sys .float_info, tuple ) # kind of tuple
True
Some named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be
created from a regular class definition that inherits from tupleand that defines named fields. Such a class
canbewrittenbyhand,oritcanbecreatedbyinheriting typing.NamedTuple ,orwiththefactoryfunction
collections.namedtuple() . The latter techniques also add some extra methods that may not be found
inhand-writtenorbuilt-innamedtuples.
namespace
The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,
global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support
modularitybypreventingnamingconflicts. Forinstance,thefunctions builtins.open andos.open() are
distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear
which module implements a function. For instance, writing random.seed() oritertools.islice()
makesitclearthatthosefunctionsareimplementedbythe randomanditertools modules,respectively.
namespace package
APEP 420 packagewhich serves only as a container for subpackages. Namespace packages may have no
physical representation, and specifically are not like a regular package because they have no __init__.py
file.
Seealso module.
nestedscope
The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another
127
PythonTutorial,Release3.13.0
functioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference
andnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables
readandwritetotheglobalnamespace. The nonlocal allowswritingtoouterscopes.
new-styleclass
Old name for the flavor of classes now used for all class objects. In earlier Python versions, only
new-style classes could use Python’s newer, versatile features like __slots__ , descriptors, properties,
__getattribute__() ,classmethods,andstaticmethods.
object
Anydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany
new-style class .
optimizedscope
A scope where target local variable names are reliably known to the compiler when the code is compiled,
allowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,
coroutines, comprehensions, and generator expressions are optimized in this fashion. Note: most interpreter
optimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames
arerestrictedtooptimizedscopes.
package
A Python modulewhich can contain submodules or recursively, subpackages. Technically, a package is a
Pythonmodulewitha __path__ attribute.
Seealso regular package andnamespace package .
parameter
Anamedentityina function(ormethod)definitionthatspecifiesan argument(orinsomecases,arguments)
thatthefunctioncanaccept. Therearefivekindsofparameter:
•positional-or-keyword : specifiesanargumentthatcanbepassedeither positionally orasa keyword argu-
ment. Thisisthedefaultkindofparameter,forexample fooandbarinthefollowing:
def func (foo, bar =None ):...
•positional-only : specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters
canbedefinedbyincludinga /characterintheparameterlistofthefunctiondefinitionafterthem,for
example posonly1andposonly2inthefollowing:
def func (posonly1, posonly2, /, positional_or_keyword): ...
•keyword-only : specifies an argument that can be supplied only by keyword. Keyword-only parameters
canbedefinedbyincludingasinglevar-positionalparameterorbare *intheparameterlistofthefunction
definitionbeforethem,forexample kw_only1andkw_only2inthefollowing:
def func (arg, *, kw_only1, kw_only2): ...
•var-positional : specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition
toanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby
prependingtheparameternamewith *,forexample argsinthefollowing:
def func (*args, **kwargs): ...
•var-keyword : specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-
wordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending
theparameternamewith **,forexample kwargsintheexampleabove.
Parameters can specify both optional and required arguments, as well as default values for some optional
arguments.
Seealsothe argumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,
theinspect.Parameter class,thefunctionsection,and PEP362.
128 AppendixA. Glossary
PythonTutorial,Release3.13.0
pathentry
Asinglelocationonthe import path whichthe path based finder consultstofindmodulesforimporting.
pathentryfinder
Afinderreturned by a callable on sys.path_hooks (i.e. a path entry hook ) which knows how to locate
modulesgivena path entry.
Seeimportlib.abc.PathEntryFinder forthemethodsthatpathentryfindersimplement.
pathentryhook
Acallableonthe sys.path_hooks listwhichreturnsa path entry finder ifitknowshowtofindmoduleson
aspecific path entry.
pathbased finder
Oneofthedefault meta path finders whichsearchesan import path formodules.
path-likeobject
An object representing a file system path. A path-like object is either a strorbytesobject representing
a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike
protocol can be converted to a strorbytesfile system path by calling the os.fspath() function; os.
fsdecode() andos.fsencode() can be used to guarantee a strorbytesresult instead, respectively.
Introducedby PEP 519.
PEP
PythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,
ordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical
specificationandarationaleforproposedfeatures.
PEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity
input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is
responsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.
SeePEP 1.
portion
A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as
definedin PEP 420.
positionalargument
Seeargument.
provisionalAPI
A provisional API is one which has been deliberately excluded from the standard library’s backwards com-
patibility guarantees. While major changes to such interfaces are not expected, as long as they are marked
provisional, backwards incompatible changes (up to and including removal of the interface) may occur if
deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if
seriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.
Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every
attemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.
Thisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign
errorsforextendedperiodsoftime. See PEP411formoredetails.
provisionalpackage
Seeprovisional API .
Python3000
NicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe
distantfuture.) Thisisalsoabbreviated“Py3k”.
Pythonic
AnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan
implementing code using concepts common to other languages. For example, a common idiom in Python is
to loop over all elementsof an iterable using a forstatement. Many other languages don’thave this type of
construct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:
129
PythonTutorial,Release3.13.0
for iinrange (len(food)):
print (food[i])
Asopposedtothecleaner,Pythonicmethod:
for piece infood:
print (piece)
qualified name
Adottednameshowingthe“path”fromamodule’sglobalscopetoaclass,functionormethoddefinedinthat
module, as defined in PEP 3155 . For top-level functions and classes, the qualified name is the same as the
object’sname:
>>> class C:
... class D:
... def meth (self ):
... pass
...
>>> C.__qualname__
'C'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth .__qualname__
'C.D.meth'
Whenusedtorefertomodules,the fully qualified name meanstheentiredottedpathtothemodule,including
anyparentpackages,e.g. email.mime.text :
>>> import email .mime .text
>>> email .mime .text .__name__
'email.mime.text'
referencecount
Thenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.
Some objects are immortaland have reference counts that are never modified, and therefore the objects are
never deallocated. Reference counting is generally not visible to Python code, but it is a key element of the
CPythonimplementation. Programmers can call the sys.getrefcount() function to return the reference
countforaparticularobject.
regularpackage
Atraditional package,suchasadirectorycontainingan __init__.py file.
Seealso namespace package .
REPL
Anacronymforthe“read–eval–printloop”,anothernameforthe interactiveinterpretershell.
__slots__
Adeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating
instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for
rarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.
sequence
Aniterablewhich supports efficient element access using integer indices via the __getitem__() special
method and defines a __len__() method that returns the length of the sequence. Some built-in sequence
typesare list,str,tuple,and bytes. Notethat dictalsosupports __getitem__() and__len__() ,
but is considered a mapping rather than a sequence because the lookups use arbitrary hashablekeys rather
thanintegers.
Thecollections.abc.Sequence abstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust
__getitem__() and__len__() ,adding count(),index(),__contains__() ,and __reversed__() .
130 AppendixA. Glossary
PythonTutorial,Release3.13.0
Types that implement this expanded interface can be registered explicitly using register() . For more
documentationonsequencemethodsgenerally,seeCommonSequenceOperations.
setcomprehension
Acompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results
= {c for c in 'abracadabra' if c not in 'abc'} generatesthesetofstrings {'r', 'd'} . See
comprehensions.
singledispatch
Aformof generic function dispatchwheretheimplementationischosenbasedonthetypeofasingleargument.
slice
Anobjectusuallycontainingaportionofa sequence. Asliceiscreatedusingthesubscriptnotation, []with
colons between numbers when several are given, such as in variable_name[1:3:5] . The bracket (sub-
script)notationuses sliceobjectsinternally.
softdeprecated
A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The
APIremainsdocumentedandtested,butwillnotbeenhancedfurther.
Softdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.
SeePEP387: SoftDeprecation .
specialmethod
AmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such
methods have names starting and ending with double underscores. Special methods are documented in spe-
cialnames.
statement
Astatementispartofasuite(a“block”ofcode). Astatementiseitheran expressionoroneofseveralconstructs
withakeyword,suchas if,whileorfor.
statictype checker
An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See also
type hintsandthe typingmodule.
strongreference
In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the
reference. Thestrongreferenceistakenbycalling Py_INCREF() whenthereferenceiscreatedandreleased
withPy_DECREF() whenthereferenceisdeleted.
ThePy_NewRef() functioncanbeusedtocreateastrongreferencetoanobject. Usually,the Py_DECREF()
functionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking
onereference.
Seealso borrowed reference .
textencoding
AstringinPythonisasequenceofUnicodecodepoints(inrange U+0000–U+10FFFF ).Tostoreortransfer
astring,itneedstobeserializedasasequenceofbytes.
Serializingastringintoasequenceofbytesisknownas“encoding”,andrecreatingthestringfromthesequence
ofbytesisknownas“decoding”.
Thereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas“textencodings”.
textfile
Afile objectabletoreadandwrite strobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream
andhandlesthe text encoding automatically. Examplesoftextfilesarefilesopenedintextmode( 'r'or'w'),
sys.stdin ,sys.stdout ,andinstancesof io.StringIO .
Seealso binary file forafileobjectabletoreadandwrite bytes-like objects .
triple-quotedstring
Astringwhichisboundbythreeinstancesofeitheraquotationmark(”)oranapostrophe(‘). Whiletheydon’t
provide any functionality not available with single-quoted strings, they are useful for a number of reasons.
131
PythonTutorial,Release3.13.0
Theyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines
withouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.
type
ThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject’stypeis
accessibleasits __class__ attributeorcanberetrievedwith type(obj) .
type alias
Asynonymforatype,createdbyassigningthetypetoanidentifier.
Typealiasesareusefulforsimplifying type hints. Forexample:
def remove_gray_shades (
colors: list [tuple [int,int,int]]) ->list [tuple [int,int,int]]:
pass
couldbemademorereadablelikethis:
Color =tuple [int,int,int]
def remove_gray_shades (colors: list [Color]) ->list [Color]:
pass
SeetypingandPEP484,whichdescribethisfunctionality.
type hint
Anannotation thatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn
value.
Type hints are optional and are not enforced by Python but they are useful to static type checkers . They can
alsoaidIDEswithcodecompletionandrefactoring.
Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using
typing.get_type_hints() .
SeetypingandPEP484,whichdescribethisfunctionality.
universalnewlines
Amannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix
end-of-lineconvention '\n',theWindowsconvention '\r\n',andtheoldMacintoshconvention '\r'. See
PEP278andPEP 3116,aswellas bytes.splitlines() foranadditionaluse.
variable annotation
Anannotation ofavariableoraclassattribute.
Whenannotatingavariableoraclassattribute,assignmentisoptional:
class C:
field: 'annotation '
Variableannotationsareusuallyusedfor type hints: forexamplethisvariableisexpectedtotake intvalues:
count: int =0
Variableannotationsyntaxisexplainedinsectionannassign.
Seefunction annotation ,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto
forbestpracticesonworkingwithannotations.
virtualenvironment
AcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade
PythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon
thesamesystem.
Seealso venv.
132 AppendixA. Glossary
PythonTutorial,Release3.13.0
virtualmachine
Acomputerdefinedentirelyinsoftware. Python’svirtualmachineexecutesthe bytecodeemittedbythebyte-
codecompiler.
ZenofPython
ListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.
Thelistingcanbefoundbytyping“ import this ”attheinteractiveprompt.
133
PythonTutorial,Release3.13.0
134 AppendixA. Glossary
APPENDIX
B
ABOUTTHESEDOCUMENTS
Thesedocumentsaregeneratedfrom reStructuredText sourcesby Sphinx,adocumentprocessorspecificallywritten
forthePythondocumentation.
Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you
want to contribute, please take a look at the reporting-bugs page for information on how to do so. New volunteers
arealwayswelcome!
Manythanksgoto:
•FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandwriterofmuchofthecontent;
•theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;
•FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.
B.1ContributorstothePythonDocumentation
ManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.
SeeMisc/ACKS inthePythonsourcedistributionforapartiallistofcontributors.
ItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation
–ThankYou!
135
PythonTutorial,Release3.13.0
136 AppendixB. Aboutthesedocuments
APPENDIX
C
HISTORYANDLICENSE
C.1Historyofthesoftware
Pythonwascreatedintheearly1990s byGuidovanRossumatStichtingMathematischCentrum(CWI, see https:
//www.cwi.nl/ )intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython’sprincipalauthor,
althoughitincludesmanycontributionsfromothers.
In1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,see https:
//www.cnri.reston.va.us/ )inReston,Virginiawherehereleasedseveralversionsofthesoftware.
In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen Python-
Labsteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations(nowZopeCorporation;
seehttps://www.zope.org/ ). In2001, thePythonSoftwareFoundation(PSF,see https://www.python.org/psf/ )was
formed,anon-profitorganizationcreatedspecificallytoownPython-relatedIntellectualProperty. ZopeCorporation
isasponsoringmemberofthePSF.
AllPythonreleasesareOpenSource(see https://opensource.org/ fortheOpenSourceDefinition). Historically,most,
butnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.
Release Derivedfrom Year Owner GPLcompatible?
0.9.0thru1.2 n/a 1991-1995 CWI yes
1.3thru1.5.2 1.2 1995-1999 CNRI yes
1.6 1.5.2 2000 CNRI no
2.0 1.6 2000 BeOpen.com no
1.6.1 1.6 2001 CNRI no
2.1 2.0+1.6.1 2001 PSF no
2.0.1 2.0+1.6.1 2001 PSF yes
2.1.1 2.1+2.0.1 2001 PSF yes
2.1.2 2.1.1 2002 PSF yes
2.1.3 2.1.2 2002 PSF yes
2.2andabove 2.1.1 2001-now PSF yes
®Note
GPL-compatibledoesn’tmeanthatwe’redistributingPythonundertheGPL.AllPythonlicenses,unliketheGPL,
let you distribute a modified version without making your changes open source. The GPL-compatible licenses
makeitpossibletocombinePythonwithothersoftwarethatisreleasedundertheGPL;theothersdon’t.
ThankstothemanyoutsidevolunteerswhohaveworkedunderGuido’sdirectiontomakethesereleasespossible.
137
PythonTutorial,Release3.13.0
C.2TermsandconditionsforaccessingorotherwiseusingPython
Pythonsoftwareanddocumentationarelicensedunderthe PSF License Agreement .
StartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF
LicenseAgreementandthe Zero-Clause BSD license .
Some software incorporated into Python is under different licenses. The licenses are listed with code falling under
thatlicense. See Licenses and Acknowledgements for Incorporated Software foranincompletelistoftheselicenses.
C.2.1PSFLICENSEAGREEMENTFORPYTHON3.13.0
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
the Individual or Organization ("Licensee") accessing and otherwise using Python
3.13.0 software in source or binary form and its associated documentation.
2. Subject to the terms and conditions of this License Agreement, PSF hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 3.13.0 alone or in any derivative
version, provided, however, that PSF's License Agreement and PSF's notice of
copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
Reserved" are retained in Python 3.13.0 alone or in any derivative version
prepared by Licensee.
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 3.13.0 or any part thereof, and wants to make the
derivative work available to others as provided herein, then Licensee hereby
agrees to include in any such work a brief summary of the changes made to Python
3.13.0.
4. PSF is making Python 3.13.0 available to Licensee on an "AS IS" basis.
PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF PYTHON 3.13.0 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.13.0
FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.13.0, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. Nothing in this License Agreement shall be deemed to create any relationship
of agency, partnership, or joint venture between PSF and Licensee. This License
Agreement does not grant permission to use PSF trademarks or trade name in a
trademark sense to endorse or promote products or services of Licensee, or any
third party.
8. By copying, installing or otherwise using Python 3.13.0, Licensee agrees
to be bound by the terms and conditions of this License Agreement.
138 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
C.2.2BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0
BEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
("Licensee") accessing and otherwise using this software in source or binary
form and its associated documentation ("the Software").
2. Subject to the terms and conditions of this BeOpen Python License Agreement,
BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
to reproduce, analyze, test, perform and/or display publicly, prepare derivative
works, distribute, and otherwise use the Software alone or in any derivative
version, provided, however, that the BeOpen Python License is retained in the
Software, alone or in any derivative version prepared by Licensee.
3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF
EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
ADVISED OF THE POSSIBILITY THEREOF.
5. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
6. This License Agreement shall be governed by and interpreted in all respects
by the law of the State of California, excluding conflict of law provisions.
Nothing in this License Agreement shall be deemed to create any relationship of
agency, partnership, or joint venture between BeOpen and Licensee. This License
Agreement does not grant permission to use BeOpen trademarks or trade names in a
trademark sense to endorse or promote products or services of Licensee, or any
third party. As an exception, the "BeOpen Python" logos available at
http://www.pythonlabs.com/logos.html may be used according to the permissions
granted on that web page.
7. By copying, installing or otherwise using the software, Licensee agrees to be
bound by the terms and conditions of this License Agreement.
C.2.3CNRILICENSEAGREEMENTFORPYTHON1.6.1
1. This LICENSE AGREEMENT is between the Corporation for National Research
Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
("CNRI"), and the Individual or Organization ("Licensee") accessing and
otherwise using Python 1.6.1 software in source or binary form and its
associated documentation.
2. Subject to the terms and conditions of this License Agreement, CNRI hereby
grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
analyze, test, perform and/or display publicly, prepare derivative works,
distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
(continuesonnextpage)
C.2. TermsandconditionsforaccessingorotherwiseusingPython 139
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
prepared by Licensee. Alternately, in lieu of CNRI's License Agreement,
Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
is made available subject to the terms and conditions in CNRI's License
Agreement. This Agreement together with Python 1.6.1 may be located on the
internet using the following unique, persistent identifier (known as a handle):
1895.22/1013. This Agreement may also be obtained from a proxy server on the
internet using the following URL: http://hdl.handle.net/1895.22/1013."
3. In the event Licensee prepares a derivative work that is based on or
incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
work available to others as provided herein, then Licensee hereby agrees to
include in any such work a brief summary of the changes made to Python 1.6.1.
4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis. CNRI
MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,
BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
6. This License Agreement will automatically terminate upon a material breach of
its terms and conditions.
7. This License Agreement shall be governed by the federal intellectual property
law of the United States, including without limitation the federal copyright
law, and, to the extent such U.S. federal law does not apply, by the law of the
Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
Notwithstanding the foregoing, with regard to derivative works based on Python
1.6.1 that incorporate non-separable material that was previously distributed
under the GNU General Public License (GPL), the law of the Commonwealth of
Virginia shall govern this License Agreement only as to issues arising under or
with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in
this License Agreement shall be deemed to create any relationship of agency,
partnership, or joint venture between CNRI and Licensee. This License Agreement
does not grant permission to use CNRI trademarks or trade name in a trademark
sense to endorse or promote products or services of Licensee, or any third
party.
8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
conditions of this License Agreement.
C.2.4CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands. All rights reserved.
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
(continuesonnextpage)
140 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.
STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
C.2.5ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.13.0 DOCU-
MENTATION
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3LicensesandAcknowledgementsforIncorporatedSoftware
Thissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated
inthePythondistribution.
C.3.1MersenneTwister
The_randomCextensionunderlyingthe randommoduleincludescodebasedonadownloadfrom http://www.math.
sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html . Thefollowingaretheverbatimcommentsfromthe
originalcode:
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.
Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).
Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 141
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. The names of its contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
C.3.2Sockets
Thesocketmoduleusesthefunctions, getaddrinfo() ,andgetnameinfo() ,whicharecodedinseparatesource
filesfromtheWIDEProject, https://www.wide.ad.jp/ .
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
142 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
C.3.3Asynchronoussocketservices
Thetest.support.asynchat andtest.support.asyncore modulescontainthefollowingnotice:
Copyright 1996 by Sam Rushing
All Rights Reserved
Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.
SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
C.3.4Cookiemanagement
Thehttp.cookies modulecontainsthefollowingnotice:
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>
All Rights Reserved
Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
C.3.5Executiontracing
Thetracemodulecontainsthefollowingnotice:
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err... reserved and offered to the public under the terms of the
Python 2.2 license.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 143
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com
Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke
Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro
Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.
Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
C.3.6UUencodeandUUdecodefunctions
Theuucodeccontainsthefollowingnotice:
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
between ascii and binary. This results in a 1000-fold speedup. The C
version is still 5 times faster, though.
- Arguments more compliant with Python standard
144 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
C.3.7XMLRemoteProcedureCalls
Thexmlrpc.client modulecontainsthefollowingnotice:
The XML-RPC client interface is
Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh
By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:
Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.
SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
C.3.8test_epoll
Thetest.test_epoll modulecontainsthefollowingnotice:
Copyright (c) 2001-2006 Twisted Matrix Laboratories.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 145
PythonTutorial,Release3.13.0
C.3.9Selectkqueue
Theselectmodulecontainsthefollowingnoticeforthekqueueinterface:
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.10SipHash24
Thefile Python/pyhash.c containsMarekMajkowski’implementationofDanBernstein’sSipHash24algorithm.
Itcontainsthefollowingnote:
<MIT License>
Copyright (c) 2013 Marek Majkowski <marek@popcount.org>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>
Original location:
https://github.com/majek/csiphash/
Solution inspired by code from:
Samuel Neves (supercop/crypto_auth/siphash24/little)
djb (supercop/crypto_auth/siphash24/little2)
Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
146 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
C.3.11strtodanddtoa
Thefile Python/dtoa.c ,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,
is derived from the file of the same name by David M. Gay, currently available from https://web.archive.org/web/
20220517033456/http://www.netlib.org/fp/dtoa.c . The original file, as retrieved on March 16, 2009, contains the
followingcopyrightandlicensingnotice:
/****************************************************************
*
* The author of this software is David M. Gay.
*
* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
*
* Permission to use, copy, modify, and distribute this software for any
* purpose without fee is hereby granted, provided that this entire notice
* is included in all copies of any software which is or includes a copy
* or modification of this software and in all copies of the supporting
* documentation for such software.
*
* THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
*
***************************************************************/
C.3.12OpenSSL
The modules hashlib,posixandssluse the OpenSSL library for added performance if made available by the
operatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL
libraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived
fromthat,theApacheLicensev2applies:
Apache License
Version 2.0, January 2004
https://www.apache.org/licenses/
TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
1. Definitions.
"License" shall mean the terms and conditions for use, reproduction,
and distribution as defined by Sections 1 through 9 of this document.
"Licensor" shall mean the copyright owner or entity authorized by
the copyright owner that is granting the License.
"Legal Entity" shall mean the union of the acting entity and all
other entities that control, are controlled by, or are under common
control with that entity. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.
"You" (or "Your") shall mean an individual or Legal Entity
exercising permissions granted by this License.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 147
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
"Source" form shall mean the preferred form for making modifications,
including but not limited to software source code, documentation
source, and configuration files.
"Object" form shall mean any form resulting from mechanical
transformation or translation of a Source form, including but
not limited to compiled object code, generated documentation,
and conversions to other media types.
"Work" shall mean the work of authorship, whether in Source or
Object form, made available under the License, as indicated by a
copyright notice that is included in or attached to the work
(an example is provided in the Appendix below).
"Derivative Works" shall mean any work, whether in Source or Object
form, that is based on (or derived from) the Work and for which the
editorial revisions, annotations, elaborations, or other modifications
represent, as a whole, an original work of authorship. For the purposes
of this License, Derivative Works shall not include works that remain
separable from, or merely link (or bind by name) to the interfaces of,
the Work and Derivative Works thereof.
"Contribution" shall mean any work of authorship, including
the original version of the Work and any modifications or additions
to that Work or Derivative Works thereof, that is intentionally
submitted to Licensor for inclusion in the Work by the copyright owner
or by an individual or Legal Entity authorized to submit on behalf of
the copyright owner. For the purposes of this definition, "submitted"
means any form of electronic, verbal, or written communication sent
to the Licensor or its representatives, including but not limited to
communication on electronic mailing lists, source code control systems,
and issue tracking systems that are managed by, or on behalf of, the
Licensor for the purpose of discussing and improving the Work, but
excluding communication that is conspicuously marked or otherwise
designated in writing by the copyright owner as "Not a Contribution."
"Contributor" shall mean Licensor and any individual or Legal Entity
on behalf of whom a Contribution has been received by Licensor and
subsequently incorporated within the Work.
2. Grant of Copyright License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare Derivative Works of,
publicly display, publicly perform, sublicense, and distribute the
Work and such Derivative Works in Source or Object form.
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
(except as stated in this section) patent license to make, have made,
use, offer to sell, sell, import, and otherwise transfer the Work,
where such license applies only to those patent claims licensable
by such Contributor that are necessarily infringed by their
Contribution(s) alone or by combination of their Contribution(s)
with the Work to which such Contribution(s) was submitted. If You
(continuesonnextpage)
148 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
institute patent litigation against any entity (including a
cross-claim or counterclaim in a lawsuit) alleging that the Work
or a Contribution incorporated within the Work constitutes direct
or contributory patent infringement, then any patent licenses
granted to You under this License for that Work shall terminate
as of the date such litigation is filed.
4. Redistribution. You may reproduce and distribute copies of the
Work or Derivative Works thereof in any medium, with or without
modifications, and in Source or Object form, provided that You
meet the following conditions:
(a) You must give any other recipients of the Work or
Derivative Works a copy of this License; and
(b) You must cause any modified files to carry prominent notices
stating that You changed the files; and
(c) You must retain, in the Source form of any Derivative Works
that You distribute, all copyright, patent, trademark, and
attribution notices from the Source form of the Work,
excluding those notices that do not pertain to any part of
the Derivative Works; and
(d) If the Work includes a "NOTICE" text file as part of its
distribution, then any Derivative Works that You distribute must
include a readable copy of the attribution notices contained
within such NOTICE file, excluding those notices that do not
pertain to any part of the Derivative Works, in at least one
of the following places: within a NOTICE text file distributed
as part of the Derivative Works; within the Source form or
documentation, if provided along with the Derivative Works; or,
within a display generated by the Derivative Works, if and
wherever such third-party notices normally appear. The contents
of the NOTICE file are for informational purposes only and
do not modify the License. You may add Your own attribution
notices within Derivative Works that You distribute, alongside
or as an addendum to the NOTICE text from the Work, provided
that such additional attribution notices cannot be construed
as modifying the License.
You may add Your own copyright statement to Your modifications and
may provide additional or different license terms and conditions
for use, reproduction, or distribution of Your modifications, or
for any such Derivative Works as a whole, provided Your use,
reproduction, and distribution of the Work otherwise complies with
the conditions stated in this License.
5. Submission of Contributions. Unless You explicitly state otherwise,
any Contribution intentionally submitted for inclusion in the Work
by You to the Licensor shall be under the terms and conditions of
this License, without any additional terms or conditions.
Notwithstanding the above, nothing herein shall supersede or modify
the terms of any separate license agreement you may have executed
with Licensor regarding such Contributions.
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 149
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
6. Trademarks. This License does not grant permission to use the trade
names, trademarks, service marks, or product names of the Licensor,
except as required for reasonable and customary use in describing the
origin of the Work and reproducing the content of the NOTICE file.
7. Disclaimer of Warranty. Unless required by applicable law or
agreed to in writing, Licensor provides the Work (and each
Contributor provides its Contributions) on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied, including, without limitation, any warranties or conditions
of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
PARTICULAR PURPOSE. You are solely responsible for determining the
appropriateness of using or redistributing the Work and assume any
risks associated with Your exercise of permissions under this License.
8. Limitation of Liability. In no event and under no legal theory,
whether in tort (including negligence), contract, or otherwise,
unless required by applicable law (such as deliberate and grossly
negligent acts) or agreed to in writing, shall any Contributor be
liable to You for damages, including any direct, indirect, special,
incidental, or consequential damages of any character arising as a
result of this License or out of the use or inability to use the
Work (including but not limited to damages for loss of goodwill,
work stoppage, computer failure or malfunction, or any and all
other commercial damages or losses), even if such Contributor
has been advised of the possibility of such damages.
9. Accepting Warranty or Additional Liability. While redistributing
the Work or Derivative Works thereof, You may choose to offer,
and charge a fee for, acceptance of support, warranty, indemnity,
or other liability obligations and/or rights consistent with this
License. However, in accepting such obligations, You may act only
on Your own behalf and on Your sole responsibility, not on behalf
of any other Contributor, and only if You agree to indemnify,
defend, and hold each Contributor harmless for any liability
incurred by, or claims asserted against, such Contributor by reason
of your accepting any such warranty or additional liability.
END OF TERMS AND CONDITIONS
C.3.13expat
Thepyexpat extension is built using an included copy of the expat sources unless the build is configured
--with-system-expat :
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
and Clark Cooper
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
(continuesonnextpage)
150 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.14libffi
The_ctypesCextensionunderlyingthe ctypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless
thebuildisconfigured --with-system-libffi :
Copyright (c) 1996-2008 Red Hat, Inc and others.
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
C.3.15zlib
Thezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo
oldtobeusedforthebuild:
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler
This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
(continuesonnextpage)
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 151
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.
Jean-loup Gailly Mark Adler
jloup@gzip.org madler@alumni.caltech.edu
C.3.16cfuhash
Theimplementationofthehashtableusedbythe tracemalloc isbasedonthecfuhashproject:
Copyright (c) 2005 Don Owens
All rights reserved.
This code is released under the BSD license:
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.
* Neither the name of the author nor the names of its
contributors may be used to endorse or promote products derived
from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
C.3.17libmpdec
The_decimal Cextensionunderlyingthe decimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary
unlessthebuildisconfigured --with-system-libmpdec :
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.
Redistribution and use in source and binary forms, with or without
(continuesonnextpage)
152 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
C.3.18W3CC14Ntestsuite
TheC14N2.0testsuiteinthe testpackage( Lib/test/xmltestdata/c14n-20/ )wasretrievedfromtheW3C
websiteathttps://www.w3.org/TR/xml-c14n2-testcases/ andisdistributedunderthe3-clauseBSDlicense:
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
* Redistributions of works must retain the original copyright notice,
this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
used to endorse or promote products derived from this work without
specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 153
PythonTutorial,Release3.13.0
C.3.19mimalloc
MITLicense:
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
C.3.20asyncio
Partsofthe asynciomoduleareincorporatedfrom uvloop0.16 ,whichisdistributedundertheMITlicense:
Copyright (c) 2015-2021 MagicStack Inc. http://magic.io
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
C.3.21GlobalUnboundedSequences(GUS)
The file Python/qsbr.c is adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation
schemeinsubr_smr.c . Thefileisdistributedunderthe2-ClauseBSDLicense:
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
(continuesonnextpage)
154 AppendixC. HistoryandLicense
PythonTutorial,Release3.13.0
(continuedfrompreviouspage)
are met:
1. Redistributions of source code must retain the above copyright
notice unmodified, this list of conditions, and the following
disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C.3. LicensesandAcknowledgementsforIncorporatedSoftware 155
PythonTutorial,Release3.13.0
156 AppendixC. HistoryandLicense
APPENDIX
D
COPYRIGHT
Pythonandthisdocumentationis:
Copyright©2001-2024PythonSoftwareFoundation. Allrightsreserved.
Copyright©2000BeOpen.com. Allrightsreserved.
Copyright©1995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.
Copyright©1991-1995StichtingMathematischCentrum. Allrightsreserved.
SeeHistory and License forcompletelicenseandpermissionsinformation.
157
PythonTutorial,Release3.13.0
158 AppendixD. Copyright
INDEX
Non-alphabetical
...,117
#(hash)
comment,7
*(asterisk)
in function calls ,30
**
in function calls ,30
:(colon)
function annotations ,31
->
function annotations ,31
>>>,117
__all__,49
__future__ ,123
__slots__ ,130
A
abstract base class ,117
annotation ,117
annotations
function ,31
argument ,117
asynchronous context manager ,118
asynchronous generator ,118
asynchronous generator iterator ,118
asynchronous iterable ,118
asynchronous iterator ,118
attribute ,118
awaitable ,118
B
BDFL,118
binary file ,118
borrowed reference ,118
built-in function
help,87
open,57
builtins
module,47
bytecode ,119
bytes-like object ,119
C
callable ,119
callback ,119C-contiguous ,120
class,119
class variable ,119
closure variable ,119
coding
style,32
complex number ,120
context,120
context management protocol ,120
context manager ,120
context variable ,120
contiguous ,120
coroutine ,120
coroutine function ,120
CPython,120
current context ,120
D
decorator ,120
descriptor ,121
dictionary ,121
dictionary comprehension ,121
dictionary view ,121
docstring ,121
docstrings ,23,31
documentation strings ,23,31
duck-typing ,121
E
EAFP,121
environment variable
PATH,45,115
PYTHON_BASIC_REPL ,115
PYTHON_GIL ,124
PYTHONPATH ,45,46
PYTHONSTARTUP ,116
expression ,121
extension module ,122
F
f-string ,122
file
object,57
file object ,122
file-like object ,122
filesystem encoding and error handler ,122
159
PythonTutorial,Release3.13.0
finder,122
floor division ,122
for
statement ,17
formatted string literal ,54
Fortran contiguous ,120
free threading ,122
free variable ,122
fstring,54
f-string ,54
function ,122
annotations ,31
function annotation ,122
G
garbage collection ,123
generator ,123
generator expression ,123
generator iterator ,123
generic function ,123
generic type ,123
GIL,123
global interpreter lock ,124
H
hash-based pyc ,124
hashable ,124
help
built-in function ,87
I
IDLE,124
immortal ,124
immutable ,124
import path ,124
importer ,124
importing ,124
interactive ,124
interpolated string literal ,54
interpreted ,125
interpreter shutdown ,125
iterable ,125
iterator ,125
J
json
module,59
K
key function ,125
keyword argument ,125
L
lambda,126
LBYL,126
list,126
list comprehension ,126
loader,126locale encoding ,126
M
magic
method,126
magic method ,126
mangling
name,81
mapping,126
meta path finder ,126
metaclass ,126
method,127
magic,126
object,77
special,131
method resolution order ,127
module,127
builtins ,47
json,59
search path ,45
sys,46
module spec ,127
MRO,127
mutable,127
N
name
mangling ,81
named tuple ,127
namespace ,127
namespace package ,127
nested scope ,127
new-style class ,128
O
object,128
file,57
method,77
open
built-in function ,57
optimized scope ,128
P
package,128
parameter ,128
PATH,45,115
path
module search ,45
path based finder ,129
path entry ,129
path entry finder ,129
path entry hook ,129
path-like object ,129
PEP,129
portion,129
positional argument ,129
provisional API ,129
provisional package ,129
160 Index
PythonTutorial,Release3.13.0
Python 3000 ,129
Python Enhancement Proposals
PEP 1,129
PEP 8,32
PEP 238,122
PEP 278,132
PEP 302,126
PEP 343,120
PEP 362,118,128
PEP 411,129
PEP 420,127,129
PEP 443,123
PEP 483,123
PEP 484,31,117,123,132
PEP 492,118,120
PEP 498,122
PEP 519,129
PEP 525,118
PEP 526,117,132
PEP 585,123
PEP 636,23
PEP 683,124
PEP 703,122,124
PEP 3107 ,31
PEP 3116 ,132
PEP 3147 ,46
PEP 3155 ,130
PYTHON_BASIC_REPL ,115
PYTHON_GIL ,124
Pythonic ,129
PYTHONPATH ,45,46
PYTHONSTARTUP ,116
Q
qualified name ,130
R
reference count ,130
regular package ,130
REPL,130
RFC
RFC 2822 ,91
S
search
path,module,45
sequence ,130
set comprehension ,131
single dispatch ,131
sitecustomize ,116
slice,131
soft deprecated ,131
special
method,131
special method ,131
statement ,131
for,17
static type checker ,131string
formatted literal ,54
interpolated literal ,54
strings, documentation ,23,31
strong reference ,131
style
coding,32
sys
module,46
T
text encoding ,131
text file ,131
triple-quoted string ,131
type,132
type alias ,132
type hint ,132
U
universal newlines ,132
usercustomize ,116
V
variable annotation ,132
virtual environment ,132
virtual machine ,133
Z
Zen of Python ,133
Index 161
